
NoWayHome.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009118  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  080092a8  080092a8  000192a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009790  08009790  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009790  08009790  00019790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009798  08009798  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009798  08009798  00019798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800979c  0800979c  0001979c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080097a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000113c  200001e0  08009980  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000131c  08009980  0002131c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c0eb  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039da  00000000  00000000  0003c2fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017f0  00000000  00000000  0003fcd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001658  00000000  00000000  000414c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ae6c  00000000  00000000  00042b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d448  00000000  00000000  0006d98c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101131  00000000  00000000  0008add4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018bf05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007524  00000000  00000000  0018bf58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009290 	.word	0x08009290

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08009290 	.word	0x08009290

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ebc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	4a06      	ldr	r2, [pc, #24]	; (8000edc <vApplicationGetIdleTaskMemory+0x30>)
 8000ec2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2280      	movs	r2, #128	; 0x80
 8000ec8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000eca:	bf00      	nop
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	200001fc 	.word	0x200001fc
 8000edc:	200002b0 	.word	0x200002b0

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	b5b0      	push	{r4, r5, r7, lr}
 8000ee2:	b09c      	sub	sp, #112	; 0x70
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee6:	f000 fdbb 	bl	8001a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eea:	f000 f863 	bl	8000fb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eee:	f000 f925 	bl	800113c <MX_GPIO_Init>
  MX_I2C2_Init();
 8000ef2:	f000 f8b5 	bl	8001060 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000ef6:	f000 f8f1 	bl	80010dc <MX_USART1_UART_Init>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000efa:	4b26      	ldr	r3, [pc, #152]	; (8000f94 <main+0xb4>)
 8000efc:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000f00:	461d      	mov	r5, r3
 8000f02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f06:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000f0e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f003 fd8f 	bl	8004a38 <osThreadCreate>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	4a1e      	ldr	r2, [pc, #120]	; (8000f98 <main+0xb8>)
 8000f1e:	6013      	str	r3, [r2, #0]

  /* definition and creation of BlinkLed */
  osThreadDef(BlinkLed, StartBlinkLed, osPriorityNormal, 0, 128);
 8000f20:	4b1e      	ldr	r3, [pc, #120]	; (8000f9c <main+0xbc>)
 8000f22:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000f26:	461d      	mov	r5, r3
 8000f28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BlinkLedHandle = osThreadCreate(osThread(BlinkLed), NULL);
 8000f34:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f003 fd7c 	bl	8004a38 <osThreadCreate>
 8000f40:	4603      	mov	r3, r0
 8000f42:	4a17      	ldr	r2, [pc, #92]	; (8000fa0 <main+0xc0>)
 8000f44:	6013      	str	r3, [r2, #0]

  /* definition and creation of RnT_Sensor */
  osThreadDef(RnT_Sensor, Start_RnT_Sensor, osPriorityBelowNormal, 0, 128);
 8000f46:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <main+0xc4>)
 8000f48:	f107 041c 	add.w	r4, r7, #28
 8000f4c:	461d      	mov	r5, r3
 8000f4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RnT_SensorHandle = osThreadCreate(osThread(RnT_Sensor), NULL);
 8000f5a:	f107 031c 	add.w	r3, r7, #28
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f003 fd69 	bl	8004a38 <osThreadCreate>
 8000f66:	4603      	mov	r3, r0
 8000f68:	4a0f      	ldr	r2, [pc, #60]	; (8000fa8 <main+0xc8>)
 8000f6a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Int_But */
  osThreadDef(Int_But, StartInt_But, osPriorityAboveNormal, 0, 128);
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <main+0xcc>)
 8000f6e:	463c      	mov	r4, r7
 8000f70:	461d      	mov	r5, r3
 8000f72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Int_ButHandle = osThreadCreate(osThread(Int_But), NULL);
 8000f7e:	463b      	mov	r3, r7
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f003 fd58 	bl	8004a38 <osThreadCreate>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	4a09      	ldr	r2, [pc, #36]	; (8000fb0 <main+0xd0>)
 8000f8c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f8e:	f003 fd4c 	bl	8004a2a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000f92:	e7fe      	b.n	8000f92 <main+0xb2>
 8000f94:	080092d4 	.word	0x080092d4
 8000f98:	20000588 	.word	0x20000588
 8000f9c:	080092f0 	.word	0x080092f0
 8000fa0:	2000058c 	.word	0x2000058c
 8000fa4:	0800930c 	.word	0x0800930c
 8000fa8:	20000590 	.word	0x20000590
 8000fac:	08009328 	.word	0x08009328
 8000fb0:	20000594 	.word	0x20000594

08000fb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b096      	sub	sp, #88	; 0x58
 8000fb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	2244      	movs	r2, #68	; 0x44
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f005 fb13 	bl	80065ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc8:	463b      	mov	r3, r7
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
 8000fd4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fd6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fda:	f001 f99f 	bl	800231c <HAL_PWREx_ControlVoltageScaling>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fe4:	f000 fa2e 	bl	8001444 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000fe8:	f001 f97a 	bl	80022e0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000fec:	4b1b      	ldr	r3, [pc, #108]	; (800105c <SystemClock_Config+0xa8>)
 8000fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ff2:	4a1a      	ldr	r2, [pc, #104]	; (800105c <SystemClock_Config+0xa8>)
 8000ff4:	f023 0318 	bic.w	r3, r3, #24
 8000ff8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000ffc:	2314      	movs	r3, #20
 8000ffe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001000:	2301      	movs	r3, #1
 8001002:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001004:	2301      	movs	r3, #1
 8001006:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800100c:	2360      	movs	r3, #96	; 0x60
 800100e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001010:	2300      	movs	r3, #0
 8001012:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	4618      	mov	r0, r3
 800101a:	f001 f9d5 	bl	80023c8 <HAL_RCC_OscConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001024:	f000 fa0e 	bl	8001444 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001028:	230f      	movs	r3, #15
 800102a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800102c:	2300      	movs	r3, #0
 800102e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001030:	2300      	movs	r3, #0
 8001032:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001034:	2300      	movs	r3, #0
 8001036:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001038:	2300      	movs	r3, #0
 800103a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800103c:	463b      	mov	r3, r7
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f001 fd9d 	bl	8002b80 <HAL_RCC_ClockConfig>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800104c:	f000 f9fa 	bl	8001444 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001050:	f002 fad6 	bl	8003600 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001054:	bf00      	nop
 8001056:	3758      	adds	r7, #88	; 0x58
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40021000 	.word	0x40021000

08001060 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001064:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <MX_I2C2_Init+0x74>)
 8001066:	4a1c      	ldr	r2, [pc, #112]	; (80010d8 <MX_I2C2_Init+0x78>)
 8001068:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 800106a:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <MX_I2C2_Init+0x74>)
 800106c:	f640 6214 	movw	r2, #3604	; 0xe14
 8001070:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001072:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <MX_I2C2_Init+0x74>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <MX_I2C2_Init+0x74>)
 800107a:	2201      	movs	r2, #1
 800107c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <MX_I2C2_Init+0x74>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001084:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <MX_I2C2_Init+0x74>)
 8001086:	2200      	movs	r2, #0
 8001088:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800108a:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <MX_I2C2_Init+0x74>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001090:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <MX_I2C2_Init+0x74>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001096:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <MX_I2C2_Init+0x74>)
 8001098:	2200      	movs	r2, #0
 800109a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800109c:	480d      	ldr	r0, [pc, #52]	; (80010d4 <MX_I2C2_Init+0x74>)
 800109e:	f000 fff8 	bl	8002092 <HAL_I2C_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80010a8:	f000 f9cc 	bl	8001444 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010ac:	2100      	movs	r1, #0
 80010ae:	4809      	ldr	r0, [pc, #36]	; (80010d4 <MX_I2C2_Init+0x74>)
 80010b0:	f001 f87e 	bl	80021b0 <HAL_I2CEx_ConfigAnalogFilter>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80010ba:	f000 f9c3 	bl	8001444 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80010be:	2100      	movs	r1, #0
 80010c0:	4804      	ldr	r0, [pc, #16]	; (80010d4 <MX_I2C2_Init+0x74>)
 80010c2:	f001 f8c0 	bl	8002246 <HAL_I2CEx_ConfigDigitalFilter>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80010cc:	f000 f9ba 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200004b0 	.word	0x200004b0
 80010d8:	40005800 	.word	0x40005800

080010dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010e0:	4b14      	ldr	r3, [pc, #80]	; (8001134 <MX_USART1_UART_Init+0x58>)
 80010e2:	4a15      	ldr	r2, [pc, #84]	; (8001138 <MX_USART1_UART_Init+0x5c>)
 80010e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010e6:	4b13      	ldr	r3, [pc, #76]	; (8001134 <MX_USART1_UART_Init+0x58>)
 80010e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <MX_USART1_UART_Init+0x58>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <MX_USART1_UART_Init+0x58>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <MX_USART1_UART_Init+0x58>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <MX_USART1_UART_Init+0x58>)
 8001102:	220c      	movs	r2, #12
 8001104:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001106:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <MX_USART1_UART_Init+0x58>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <MX_USART1_UART_Init+0x58>)
 800110e:	2200      	movs	r2, #0
 8001110:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001112:	4b08      	ldr	r3, [pc, #32]	; (8001134 <MX_USART1_UART_Init+0x58>)
 8001114:	2200      	movs	r2, #0
 8001116:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <MX_USART1_UART_Init+0x58>)
 800111a:	2200      	movs	r2, #0
 800111c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800111e:	4805      	ldr	r0, [pc, #20]	; (8001134 <MX_USART1_UART_Init+0x58>)
 8001120:	f002 ff22 	bl	8003f68 <HAL_UART_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800112a:	f000 f98b 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000504 	.word	0x20000504
 8001138:	40013800 	.word	0x40013800

0800113c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	; 0x28
 8001140:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
 8001150:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001152:	4b2f      	ldr	r3, [pc, #188]	; (8001210 <MX_GPIO_Init+0xd4>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001156:	4a2e      	ldr	r2, [pc, #184]	; (8001210 <MX_GPIO_Init+0xd4>)
 8001158:	f043 0304 	orr.w	r3, r3, #4
 800115c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800115e:	4b2c      	ldr	r3, [pc, #176]	; (8001210 <MX_GPIO_Init+0xd4>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800116a:	4b29      	ldr	r3, [pc, #164]	; (8001210 <MX_GPIO_Init+0xd4>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116e:	4a28      	ldr	r2, [pc, #160]	; (8001210 <MX_GPIO_Init+0xd4>)
 8001170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001174:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001176:	4b26      	ldr	r3, [pc, #152]	; (8001210 <MX_GPIO_Init+0xd4>)
 8001178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001182:	4b23      	ldr	r3, [pc, #140]	; (8001210 <MX_GPIO_Init+0xd4>)
 8001184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001186:	4a22      	ldr	r2, [pc, #136]	; (8001210 <MX_GPIO_Init+0xd4>)
 8001188:	f043 0302 	orr.w	r3, r3, #2
 800118c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800118e:	4b20      	ldr	r3, [pc, #128]	; (8001210 <MX_GPIO_Init+0xd4>)
 8001190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <MX_GPIO_Init+0xd4>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119e:	4a1c      	ldr	r2, [pc, #112]	; (8001210 <MX_GPIO_Init+0xd4>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a6:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <MX_GPIO_Init+0xd4>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011b8:	4816      	ldr	r0, [pc, #88]	; (8001214 <MX_GPIO_Init+0xd8>)
 80011ba:	f000 ff15 	bl	8001fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011c4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	4619      	mov	r1, r3
 80011d4:	4810      	ldr	r0, [pc, #64]	; (8001218 <MX_GPIO_Init+0xdc>)
 80011d6:	f000 fd5d 	bl	8001c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80011da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e0:	2301      	movs	r3, #1
 80011e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2300      	movs	r3, #0
 80011ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	4619      	mov	r1, r3
 80011f2:	4808      	ldr	r0, [pc, #32]	; (8001214 <MX_GPIO_Init+0xd8>)
 80011f4:	f000 fd4e 	bl	8001c94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80011f8:	2200      	movs	r2, #0
 80011fa:	2105      	movs	r1, #5
 80011fc:	2028      	movs	r0, #40	; 0x28
 80011fe:	f000 fd1f 	bl	8001c40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001202:	2028      	movs	r0, #40	; 0x28
 8001204:	f000 fd38 	bl	8001c78 <HAL_NVIC_EnableIRQ>

}
 8001208:	bf00      	nop
 800120a:	3728      	adds	r7, #40	; 0x28
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40021000 	.word	0x40021000
 8001214:	48000400 	.word	0x48000400
 8001218:	48000800 	.word	0x48000800

0800121c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	const portTickType freq_button_sleep = 1000;
 8001224:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001228:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{
		if(button_press > 0)
 800122a:	4b08      	ldr	r3, [pc, #32]	; (800124c <StartDefaultTask+0x30>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	dd07      	ble.n	8001242 <StartDefaultTask+0x26>
		{
			vTaskDelay(freq_button_sleep);
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	f003 ff28 	bl	8005088 <vTaskDelay>
			vTaskResume(Int_ButHandle);
 8001238:	4b05      	ldr	r3, [pc, #20]	; (8001250 <StartDefaultTask+0x34>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4618      	mov	r0, r3
 800123e:	f004 f81b 	bl	8005278 <vTaskResume>
		}
		vTaskSuspend(NULL);
 8001242:	2000      	movs	r0, #0
 8001244:	f003 ff54 	bl	80050f0 <vTaskSuspend>
		if(button_press > 0)
 8001248:	e7ef      	b.n	800122a <StartDefaultTask+0xe>
 800124a:	bf00      	nop
 800124c:	200005a0 	.word	0x200005a0
 8001250:	20000594 	.word	0x20000594

08001254 <StartBlinkLed>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlinkLed */
void StartBlinkLed(void const * argument)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkLed */
	portTickType lastRun;
	const portTickType frequency_battle = 500;
 800125c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001260:	617b      	str	r3, [r7, #20]
	const portTickType frequency_warning = 166;
 8001262:	23a6      	movs	r3, #166	; 0xa6
 8001264:	613b      	str	r3, [r7, #16]
	lastRun = xTaskGetTickCount();
 8001266:	f004 f9eb 	bl	8005640 <xTaskGetTickCount>
 800126a:	4603      	mov	r3, r0
 800126c:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{
		if(mode == 1 && state == 0)
 800126e:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <StartBlinkLed+0x70>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d10f      	bne.n	8001296 <StartBlinkLed+0x42>
 8001276:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <StartBlinkLed+0x74>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d10b      	bne.n	8001296 <StartBlinkLed+0x42>
		{
			HAL_GPIO_TogglePin(GPIOB, LED_Pin);
 800127e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001282:	4812      	ldr	r0, [pc, #72]	; (80012cc <StartBlinkLed+0x78>)
 8001284:	f000 fec8 	bl	8002018 <HAL_GPIO_TogglePin>
			vTaskDelayUntil(&lastRun,frequency_battle);
 8001288:	f107 030c 	add.w	r3, r7, #12
 800128c:	6979      	ldr	r1, [r7, #20]
 800128e:	4618      	mov	r0, r3
 8001290:	f003 fe7c 	bl	8004f8c <vTaskDelayUntil>
 8001294:	e015      	b.n	80012c2 <StartBlinkLed+0x6e>
		}
		else if(state == 1)
 8001296:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <StartBlinkLed+0x74>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d10b      	bne.n	80012b6 <StartBlinkLed+0x62>
		{
			HAL_GPIO_TogglePin(GPIOB, LED_Pin);
 800129e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012a2:	480a      	ldr	r0, [pc, #40]	; (80012cc <StartBlinkLed+0x78>)
 80012a4:	f000 feb8 	bl	8002018 <HAL_GPIO_TogglePin>
			vTaskDelayUntil(&lastRun,frequency_warning);
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	6939      	ldr	r1, [r7, #16]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f003 fe6c 	bl	8004f8c <vTaskDelayUntil>
 80012b4:	e7db      	b.n	800126e <StartBlinkLed+0x1a>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_SET);
 80012b6:	2201      	movs	r2, #1
 80012b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012bc:	4803      	ldr	r0, [pc, #12]	; (80012cc <StartBlinkLed+0x78>)
 80012be:	f000 fe93 	bl	8001fe8 <HAL_GPIO_WritePin>
		if(mode == 1 && state == 0)
 80012c2:	e7d4      	b.n	800126e <StartBlinkLed+0x1a>
 80012c4:	20000598 	.word	0x20000598
 80012c8:	2000059c 	.word	0x2000059c
 80012cc:	48000400 	.word	0x48000400

080012d0 <Start_RnT_Sensor>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_RnT_Sensor */
void Start_RnT_Sensor(void const * argument)
{
 80012d0:	b5b0      	push	{r4, r5, r7, lr}
 80012d2:	b098      	sub	sp, #96	; 0x60
 80012d4:	af02      	add	r7, sp, #8
 80012d6:	6078      	str	r0, [r7, #4]
	float accel_data[3];
	float temp_data[1];
	/* Infinite loop */
	for(;;)
	{
		if(mode == 0 && state == 0)
 80012d8:	4b1f      	ldr	r3, [pc, #124]	; (8001358 <Start_RnT_Sensor+0x88>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d103      	bne.n	80012e8 <Start_RnT_Sensor+0x18>
 80012e0:	4b1e      	ldr	r3, [pc, #120]	; (800135c <Start_RnT_Sensor+0x8c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d035      	beq.n	8001354 <Start_RnT_Sensor+0x84>
		{
			continue;
		}
		else if(mode == 1 && state == 0)
 80012e8:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <Start_RnT_Sensor+0x88>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d122      	bne.n	8001336 <Start_RnT_Sensor+0x66>
 80012f0:	4b1a      	ldr	r3, [pc, #104]	; (800135c <Start_RnT_Sensor+0x8c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d11e      	bne.n	8001336 <Start_RnT_Sensor+0x66>
		{
			Read_Acc(accel_data);
 80012f8:	f107 030c 	add.w	r3, r7, #12
 80012fc:	4618      	mov	r0, r3
 80012fe:	f000 f8a7 	bl	8001450 <Read_Acc>
			Read_Temp(temp_data);
 8001302:	f107 0308 	add.w	r3, r7, #8
 8001306:	4618      	mov	r0, r3
 8001308:	f000 f8e0 	bl	80014cc <Read_Temp>

			sprintf(message_print, "T:2.2%f (°C),A:2.2%f (m/s^2)\r\n", temp_data[0], accel_data[2]);
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f91a 	bl	8000548 <__aeabi_f2d>
 8001314:	4604      	mov	r4, r0
 8001316:	460d      	mov	r5, r1
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff f914 	bl	8000548 <__aeabi_f2d>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	f107 0018 	add.w	r0, r7, #24
 8001328:	e9cd 2300 	strd	r2, r3, [sp]
 800132c:	4622      	mov	r2, r4
 800132e:	462b      	mov	r3, r5
 8001330:	490b      	ldr	r1, [pc, #44]	; (8001360 <Start_RnT_Sensor+0x90>)
 8001332:	f005 fedd 	bl	80070f0 <siprintf>

		}
		HAL_UART_Transmit(&huart1, (uint8_t*)message_print, strlen(message_print), 0xFFFF);
 8001336:	f107 0318 	add.w	r3, r7, #24
 800133a:	4618      	mov	r0, r3
 800133c:	f7fe ff48 	bl	80001d0 <strlen>
 8001340:	4603      	mov	r3, r0
 8001342:	b29a      	uxth	r2, r3
 8001344:	f107 0118 	add.w	r1, r7, #24
 8001348:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800134c:	4805      	ldr	r0, [pc, #20]	; (8001364 <Start_RnT_Sensor+0x94>)
 800134e:	f002 fe59 	bl	8004004 <HAL_UART_Transmit>
 8001352:	e7c1      	b.n	80012d8 <Start_RnT_Sensor+0x8>
			continue;
 8001354:	bf00      	nop
		if(mode == 0 && state == 0)
 8001356:	e7bf      	b.n	80012d8 <Start_RnT_Sensor+0x8>
 8001358:	20000598 	.word	0x20000598
 800135c:	2000059c 	.word	0x2000059c
 8001360:	08009344 	.word	0x08009344
 8001364:	20000504 	.word	0x20000504

08001368 <StartInt_But>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartInt_But */
void StartInt_But(void const * argument)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartInt_But */
	portTickType lastRun;
	lastRun = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{
		vTaskSuspend(NULL);
 8001374:	2000      	movs	r0, #0
 8001376:	f003 febb 	bl	80050f0 <vTaskSuspend>
		if((xTaskGetTickCount() - lastRun) > 750)
 800137a:	f004 f961 	bl	8005640 <xTaskGetTickCount>
 800137e:	4602      	mov	r2, r0
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001388:	4293      	cmp	r3, r2
 800138a:	d93b      	bls.n	8001404 <StartInt_But+0x9c>
		{
			if(button_press == 0)
 800138c:	4b20      	ldr	r3, [pc, #128]	; (8001410 <StartInt_But+0xa8>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d10b      	bne.n	80013ac <StartInt_But+0x44>
			{
				button_press = 1;
 8001394:	4b1e      	ldr	r3, [pc, #120]	; (8001410 <StartInt_But+0xa8>)
 8001396:	2201      	movs	r2, #1
 8001398:	601a      	str	r2, [r3, #0]
				lastRun = xTaskGetTickCount();
 800139a:	f004 f951 	bl	8005640 <xTaskGetTickCount>
 800139e:	60f8      	str	r0, [r7, #12]
				vTaskResume(defaultTaskHandle);
 80013a0:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <StartInt_But+0xac>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f003 ff67 	bl	8005278 <vTaskResume>
 80013aa:	e7e3      	b.n	8001374 <StartInt_But+0xc>
			}
			else if(button_press == 1)
 80013ac:	4b18      	ldr	r3, [pc, #96]	; (8001410 <StartInt_But+0xa8>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d10d      	bne.n	80013d0 <StartInt_But+0x68>
			{
				state = !state;
 80013b4:	4b18      	ldr	r3, [pc, #96]	; (8001418 <StartInt_But+0xb0>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	bf0c      	ite	eq
 80013bc:	2301      	moveq	r3, #1
 80013be:	2300      	movne	r3, #0
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	461a      	mov	r2, r3
 80013c4:	4b14      	ldr	r3, [pc, #80]	; (8001418 <StartInt_But+0xb0>)
 80013c6:	601a      	str	r2, [r3, #0]
				button_press = 0;
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <StartInt_But+0xa8>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	e7d1      	b.n	8001374 <StartInt_But+0xc>
			}
			else if(button_press == 2 && state == 0)
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <StartInt_But+0xa8>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d111      	bne.n	80013fc <StartInt_But+0x94>
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <StartInt_But+0xb0>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d10d      	bne.n	80013fc <StartInt_But+0x94>
			{
				mode = !mode;
 80013e0:	4b0e      	ldr	r3, [pc, #56]	; (800141c <StartInt_But+0xb4>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	bf0c      	ite	eq
 80013e8:	2301      	moveq	r3, #1
 80013ea:	2300      	movne	r3, #0
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	461a      	mov	r2, r3
 80013f0:	4b0a      	ldr	r3, [pc, #40]	; (800141c <StartInt_But+0xb4>)
 80013f2:	601a      	str	r2, [r3, #0]
				button_press = 0;
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <StartInt_But+0xa8>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	e008      	b.n	800140e <StartInt_But+0xa6>
			}
			else
			{
				button_press = 0;
 80013fc:	4b04      	ldr	r3, [pc, #16]	; (8001410 <StartInt_But+0xa8>)
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	e7b7      	b.n	8001374 <StartInt_But+0xc>
			}
		}
		else
		{
			button_press += 1;
 8001404:	4b02      	ldr	r3, [pc, #8]	; (8001410 <StartInt_But+0xa8>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	3301      	adds	r3, #1
 800140a:	4a01      	ldr	r2, [pc, #4]	; (8001410 <StartInt_But+0xa8>)
 800140c:	6013      	str	r3, [r2, #0]
		vTaskSuspend(NULL);
 800140e:	e7b1      	b.n	8001374 <StartInt_But+0xc>
 8001410:	200005a0 	.word	0x200005a0
 8001414:	20000588 	.word	0x20000588
 8001418:	2000059c 	.word	0x2000059c
 800141c:	20000598 	.word	0x20000598

08001420 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a04      	ldr	r2, [pc, #16]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d101      	bne.n	8001436 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001432:	f000 fb2d 	bl	8001a90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40012c00 	.word	0x40012c00

08001444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001448:	b672      	cpsid	i
}
 800144a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800144c:	e7fe      	b.n	800144c <Error_Handler+0x8>
	...

08001450 <Read_Acc>:
 */

#include "sensorIO.h"

void Read_Acc(float *accel_data)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	int16_t accel_data_i16[3] = { 0 };
 8001458:	f107 0308 	add.w	r3, r7, #8
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	809a      	strh	r2, [r3, #4]
	BSP_ACCELERO_AccGetXYZ(accel_data_i16);
 8001462:	f107 0308 	add.w	r3, r7, #8
 8001466:	4618      	mov	r0, r3
 8001468:	f000 fad4 	bl	8001a14 <BSP_ACCELERO_AccGetXYZ>

	accel_data[0] = (float)accel_data_i16[0] / 100.0f;
 800146c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001470:	ee07 3a90 	vmov	s15, r3
 8001474:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001478:	eddf 6a13 	vldr	s13, [pc, #76]	; 80014c8 <Read_Acc+0x78>
 800147c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	edc3 7a00 	vstr	s15, [r3]
	accel_data[1] = (float)accel_data_i16[1] / 100.0f;
 8001486:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800148a:	ee07 3a90 	vmov	s15, r3
 800148e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3304      	adds	r3, #4
 8001496:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80014c8 <Read_Acc+0x78>
 800149a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800149e:	edc3 7a00 	vstr	s15, [r3]
	accel_data[2] = (float)accel_data_i16[2] / 100.0f;
 80014a2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014a6:	ee07 3a90 	vmov	s15, r3
 80014aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	3308      	adds	r3, #8
 80014b2:	eddf 6a05 	vldr	s13, [pc, #20]	; 80014c8 <Read_Acc+0x78>
 80014b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ba:	edc3 7a00 	vstr	s15, [r3]

	return;
 80014be:	bf00      	nop
}
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	42c80000 	.word	0x42c80000

080014cc <Read_Temp>:
void Read_Temp(float *temp_data)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	temp_data[0] = BSP_TSENSOR_ReadTemp();			// read temperature sensor
 80014d4:	f000 fab6 	bl	8001a44 <BSP_TSENSOR_ReadTemp>
 80014d8:	eef0 7a40 	vmov.f32	s15, s0
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	edc3 7a00 	vstr	s15, [r3]
	return;
 80014e2:	bf00      	nop
}
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f2:	4b11      	ldr	r3, [pc, #68]	; (8001538 <HAL_MspInit+0x4c>)
 80014f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014f6:	4a10      	ldr	r2, [pc, #64]	; (8001538 <HAL_MspInit+0x4c>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6613      	str	r3, [r2, #96]	; 0x60
 80014fe:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <HAL_MspInit+0x4c>)
 8001500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <HAL_MspInit+0x4c>)
 800150c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150e:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <HAL_MspInit+0x4c>)
 8001510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001514:	6593      	str	r3, [r2, #88]	; 0x58
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <HAL_MspInit+0x4c>)
 8001518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	210f      	movs	r1, #15
 8001526:	f06f 0001 	mvn.w	r0, #1
 800152a:	f000 fb89 	bl	8001c40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40021000 	.word	0x40021000

0800153c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b0ac      	sub	sp, #176	; 0xb0
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	2288      	movs	r2, #136	; 0x88
 800155a:	2100      	movs	r1, #0
 800155c:	4618      	mov	r0, r3
 800155e:	f005 f846 	bl	80065ee <memset>
  if(hi2c->Instance==I2C2)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a21      	ldr	r2, [pc, #132]	; (80015ec <HAL_I2C_MspInit+0xb0>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d13b      	bne.n	80015e4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800156c:	2380      	movs	r3, #128	; 0x80
 800156e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001570:	2300      	movs	r3, #0
 8001572:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	4618      	mov	r0, r3
 800157a:	f001 fd57 	bl	800302c <HAL_RCCEx_PeriphCLKConfig>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001584:	f7ff ff5e 	bl	8001444 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001588:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <HAL_I2C_MspInit+0xb4>)
 800158a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158c:	4a18      	ldr	r2, [pc, #96]	; (80015f0 <HAL_I2C_MspInit+0xb4>)
 800158e:	f043 0302 	orr.w	r3, r3, #2
 8001592:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001594:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <HAL_I2C_MspInit+0xb4>)
 8001596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80015a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80015a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015a8:	2312      	movs	r3, #18
 80015aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b4:	2303      	movs	r3, #3
 80015b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80015ba:	2304      	movs	r3, #4
 80015bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015c4:	4619      	mov	r1, r3
 80015c6:	480b      	ldr	r0, [pc, #44]	; (80015f4 <HAL_I2C_MspInit+0xb8>)
 80015c8:	f000 fb64 	bl	8001c94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <HAL_I2C_MspInit+0xb4>)
 80015ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d0:	4a07      	ldr	r2, [pc, #28]	; (80015f0 <HAL_I2C_MspInit+0xb4>)
 80015d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015d6:	6593      	str	r3, [r2, #88]	; 0x58
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <HAL_I2C_MspInit+0xb4>)
 80015da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80015e4:	bf00      	nop
 80015e6:	37b0      	adds	r7, #176	; 0xb0
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40005800 	.word	0x40005800
 80015f0:	40021000 	.word	0x40021000
 80015f4:	48000400 	.word	0x48000400

080015f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b0ac      	sub	sp, #176	; 0xb0
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	2288      	movs	r2, #136	; 0x88
 8001616:	2100      	movs	r1, #0
 8001618:	4618      	mov	r0, r3
 800161a:	f004 ffe8 	bl	80065ee <memset>
  if(huart->Instance==USART1)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a22      	ldr	r2, [pc, #136]	; (80016ac <HAL_UART_MspInit+0xb4>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d13c      	bne.n	80016a2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001628:	2301      	movs	r3, #1
 800162a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800162c:	2300      	movs	r3, #0
 800162e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	4618      	mov	r0, r3
 8001636:	f001 fcf9 	bl	800302c <HAL_RCCEx_PeriphCLKConfig>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001640:	f7ff ff00 	bl	8001444 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001644:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <HAL_UART_MspInit+0xb8>)
 8001646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001648:	4a19      	ldr	r2, [pc, #100]	; (80016b0 <HAL_UART_MspInit+0xb8>)
 800164a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800164e:	6613      	str	r3, [r2, #96]	; 0x60
 8001650:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <HAL_UART_MspInit+0xb8>)
 8001652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <HAL_UART_MspInit+0xb8>)
 800165e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001660:	4a13      	ldr	r2, [pc, #76]	; (80016b0 <HAL_UART_MspInit+0xb8>)
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001668:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <HAL_UART_MspInit+0xb8>)
 800166a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001674:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001678:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167c:	2302      	movs	r3, #2
 800167e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001688:	2303      	movs	r3, #3
 800168a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800168e:	2307      	movs	r3, #7
 8001690:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001694:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001698:	4619      	mov	r1, r3
 800169a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800169e:	f000 faf9 	bl	8001c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80016a2:	bf00      	nop
 80016a4:	37b0      	adds	r7, #176	; 0xb0
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40013800 	.word	0x40013800
 80016b0:	40021000 	.word	0x40021000

080016b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08c      	sub	sp, #48	; 0x30
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80016bc:	2300      	movs	r3, #0
 80016be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80016c2:	4b2e      	ldr	r3, [pc, #184]	; (800177c <HAL_InitTick+0xc8>)
 80016c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016c6:	4a2d      	ldr	r2, [pc, #180]	; (800177c <HAL_InitTick+0xc8>)
 80016c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016cc:	6613      	str	r3, [r2, #96]	; 0x60
 80016ce:	4b2b      	ldr	r3, [pc, #172]	; (800177c <HAL_InitTick+0xc8>)
 80016d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016da:	f107 020c 	add.w	r2, r7, #12
 80016de:	f107 0310 	add.w	r3, r7, #16
 80016e2:	4611      	mov	r1, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f001 fc0f 	bl	8002f08 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80016ea:	f001 fbf7 	bl	8002edc <HAL_RCC_GetPCLK2Freq>
 80016ee:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f2:	4a23      	ldr	r2, [pc, #140]	; (8001780 <HAL_InitTick+0xcc>)
 80016f4:	fba2 2303 	umull	r2, r3, r2, r3
 80016f8:	0c9b      	lsrs	r3, r3, #18
 80016fa:	3b01      	subs	r3, #1
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80016fe:	4b21      	ldr	r3, [pc, #132]	; (8001784 <HAL_InitTick+0xd0>)
 8001700:	4a21      	ldr	r2, [pc, #132]	; (8001788 <HAL_InitTick+0xd4>)
 8001702:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001704:	4b1f      	ldr	r3, [pc, #124]	; (8001784 <HAL_InitTick+0xd0>)
 8001706:	f240 32e7 	movw	r2, #999	; 0x3e7
 800170a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800170c:	4a1d      	ldr	r2, [pc, #116]	; (8001784 <HAL_InitTick+0xd0>)
 800170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001710:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001712:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <HAL_InitTick+0xd0>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001718:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <HAL_InitTick+0xd0>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800171e:	4b19      	ldr	r3, [pc, #100]	; (8001784 <HAL_InitTick+0xd0>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001724:	4817      	ldr	r0, [pc, #92]	; (8001784 <HAL_InitTick+0xd0>)
 8001726:	f002 f94d 	bl	80039c4 <HAL_TIM_Base_Init>
 800172a:	4603      	mov	r3, r0
 800172c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001730:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001734:	2b00      	cmp	r3, #0
 8001736:	d11b      	bne.n	8001770 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001738:	4812      	ldr	r0, [pc, #72]	; (8001784 <HAL_InitTick+0xd0>)
 800173a:	f002 f9a5 	bl	8003a88 <HAL_TIM_Base_Start_IT>
 800173e:	4603      	mov	r3, r0
 8001740:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001744:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001748:	2b00      	cmp	r3, #0
 800174a:	d111      	bne.n	8001770 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800174c:	2019      	movs	r0, #25
 800174e:	f000 fa93 	bl	8001c78 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b0f      	cmp	r3, #15
 8001756:	d808      	bhi.n	800176a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001758:	2200      	movs	r2, #0
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	2019      	movs	r0, #25
 800175e:	f000 fa6f 	bl	8001c40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001762:	4a0a      	ldr	r2, [pc, #40]	; (800178c <HAL_InitTick+0xd8>)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	e002      	b.n	8001770 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001770:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001774:	4618      	mov	r0, r3
 8001776:	3730      	adds	r7, #48	; 0x30
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40021000 	.word	0x40021000
 8001780:	431bde83 	.word	0x431bde83
 8001784:	200005a4 	.word	0x200005a4
 8001788:	40012c00 	.word	0x40012c00
 800178c:	20000004 	.word	0x20000004

08001790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001794:	e7fe      	b.n	8001794 <NMI_Handler+0x4>

08001796 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800179a:	e7fe      	b.n	800179a <HardFault_Handler+0x4>

0800179c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <MemManage_Handler+0x4>

080017a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a6:	e7fe      	b.n	80017a6 <BusFault_Handler+0x4>

080017a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017ac:	e7fe      	b.n	80017ac <UsageFault_Handler+0x4>

080017ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017c0:	4802      	ldr	r0, [pc, #8]	; (80017cc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80017c2:	f002 f9d1 	bl	8003b68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200005a4 	.word	0x200005a4

080017d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80017d6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017da:	f000 fc37 	bl	800204c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  BaseType_t checkIfYieldRequired;
  checkIfYieldRequired = xTaskResumeFromISR(Int_ButHandle);
 80017de:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <EXTI15_10_IRQHandler+0x38>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f003 fda6 	bl	8005334 <xTaskResumeFromISR>
 80017e8:	6078      	str	r0, [r7, #4]
  portYIELD_FROM_ISR(checkIfYieldRequired);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d007      	beq.n	8001800 <EXTI15_10_IRQHandler+0x30>
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <EXTI15_10_IRQHandler+0x3c>)
 80017f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	f3bf 8f4f 	dsb	sy
 80017fc:	f3bf 8f6f 	isb	sy


  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000594 	.word	0x20000594
 800180c:	e000ed04 	.word	0xe000ed04

08001810 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
	return 1;
 8001814:	2301      	movs	r3, #1
}
 8001816:	4618      	mov	r0, r3
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <_kill>:

int _kill(int pid, int sig)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800182a:	f004 fdaf 	bl	800638c <__errno>
 800182e:	4603      	mov	r3, r0
 8001830:	2216      	movs	r2, #22
 8001832:	601a      	str	r2, [r3, #0]
	return -1;
 8001834:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001838:	4618      	mov	r0, r3
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <_exit>:

void _exit (int status)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001848:	f04f 31ff 	mov.w	r1, #4294967295
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff ffe7 	bl	8001820 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001852:	e7fe      	b.n	8001852 <_exit+0x12>

08001854 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	e00a      	b.n	800187c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001866:	f3af 8000 	nop.w
 800186a:	4601      	mov	r1, r0
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	1c5a      	adds	r2, r3, #1
 8001870:	60ba      	str	r2, [r7, #8]
 8001872:	b2ca      	uxtb	r2, r1
 8001874:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	3301      	adds	r3, #1
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	429a      	cmp	r2, r3
 8001882:	dbf0      	blt.n	8001866 <_read+0x12>
	}

return len;
 8001884:	687b      	ldr	r3, [r7, #4]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b086      	sub	sp, #24
 8001892:	af00      	add	r7, sp, #0
 8001894:	60f8      	str	r0, [r7, #12]
 8001896:	60b9      	str	r1, [r7, #8]
 8001898:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
 800189e:	e009      	b.n	80018b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	1c5a      	adds	r2, r3, #1
 80018a4:	60ba      	str	r2, [r7, #8]
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	3301      	adds	r3, #1
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	dbf1      	blt.n	80018a0 <_write+0x12>
	}
	return len;
 80018bc:	687b      	ldr	r3, [r7, #4]
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <_close>:

int _close(int file)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
	return -1;
 80018ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
 80018e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018ee:	605a      	str	r2, [r3, #4]
	return 0;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <_isatty>:

int _isatty(int file)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
	return 1;
 8001906:	2301      	movs	r3, #1
}
 8001908:	4618      	mov	r0, r3
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
	return 0;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001938:	4a14      	ldr	r2, [pc, #80]	; (800198c <_sbrk+0x5c>)
 800193a:	4b15      	ldr	r3, [pc, #84]	; (8001990 <_sbrk+0x60>)
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001944:	4b13      	ldr	r3, [pc, #76]	; (8001994 <_sbrk+0x64>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d102      	bne.n	8001952 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800194c:	4b11      	ldr	r3, [pc, #68]	; (8001994 <_sbrk+0x64>)
 800194e:	4a12      	ldr	r2, [pc, #72]	; (8001998 <_sbrk+0x68>)
 8001950:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001952:	4b10      	ldr	r3, [pc, #64]	; (8001994 <_sbrk+0x64>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4413      	add	r3, r2
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	429a      	cmp	r2, r3
 800195e:	d207      	bcs.n	8001970 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001960:	f004 fd14 	bl	800638c <__errno>
 8001964:	4603      	mov	r3, r0
 8001966:	220c      	movs	r2, #12
 8001968:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800196a:	f04f 33ff 	mov.w	r3, #4294967295
 800196e:	e009      	b.n	8001984 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001970:	4b08      	ldr	r3, [pc, #32]	; (8001994 <_sbrk+0x64>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001976:	4b07      	ldr	r3, [pc, #28]	; (8001994 <_sbrk+0x64>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4413      	add	r3, r2
 800197e:	4a05      	ldr	r2, [pc, #20]	; (8001994 <_sbrk+0x64>)
 8001980:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001982:	68fb      	ldr	r3, [r7, #12]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20018000 	.word	0x20018000
 8001990:	00000400 	.word	0x00000400
 8001994:	200005f0 	.word	0x200005f0
 8001998:	20001320 	.word	0x20001320

0800199c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019a0:	4b06      	ldr	r3, [pc, #24]	; (80019bc <SystemInit+0x20>)
 80019a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019a6:	4a05      	ldr	r2, [pc, #20]	; (80019bc <SystemInit+0x20>)
 80019a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019c4:	f7ff ffea 	bl	800199c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019c8:	480c      	ldr	r0, [pc, #48]	; (80019fc <LoopForever+0x6>)
  ldr r1, =_edata
 80019ca:	490d      	ldr	r1, [pc, #52]	; (8001a00 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019cc:	4a0d      	ldr	r2, [pc, #52]	; (8001a04 <LoopForever+0xe>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d0:	e002      	b.n	80019d8 <LoopCopyDataInit>

080019d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d6:	3304      	adds	r3, #4

080019d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019dc:	d3f9      	bcc.n	80019d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019de:	4a0a      	ldr	r2, [pc, #40]	; (8001a08 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019e0:	4c0a      	ldr	r4, [pc, #40]	; (8001a0c <LoopForever+0x16>)
  movs r3, #0
 80019e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e4:	e001      	b.n	80019ea <LoopFillZerobss>

080019e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e8:	3204      	adds	r2, #4

080019ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019ec:	d3fb      	bcc.n	80019e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ee:	f004 fdc9 	bl	8006584 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019f2:	f7ff fa75 	bl	8000ee0 <main>

080019f6 <LoopForever>:

LoopForever:
    b LoopForever
 80019f6:	e7fe      	b.n	80019f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80019fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a00:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001a04:	080097a0 	.word	0x080097a0
  ldr r2, =_sbss
 8001a08:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001a0c:	2000131c 	.word	0x2000131c

08001a10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a10:	e7fe      	b.n	8001a10 <ADC1_2_IRQHandler>
	...

08001a14 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8001a1c:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d009      	beq.n	8001a38 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d004      	beq.n	8001a38 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8001a2e:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	4798      	blx	r3
    }
  }
}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	200005f4 	.word	0x200005f4

08001a44 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8001a48:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <BSP_TSENSOR_ReadTemp+0x18>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	20be      	movs	r0, #190	; 0xbe
 8001a50:	4798      	blx	r3
 8001a52:	eef0 7a40 	vmov.f32	s15, s0
}
 8001a56:	eeb0 0a67 	vmov.f32	s0, s15
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	200005f8 	.word	0x200005f8

08001a60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a66:	2300      	movs	r3, #0
 8001a68:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a6a:	2003      	movs	r0, #3
 8001a6c:	f000 f8dd 	bl	8001c2a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a70:	200f      	movs	r0, #15
 8001a72:	f7ff fe1f 	bl	80016b4 <HAL_InitTick>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d002      	beq.n	8001a82 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	71fb      	strb	r3, [r7, #7]
 8001a80:	e001      	b.n	8001a86 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a82:	f7ff fd33 	bl	80014ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a86:	79fb      	ldrb	r3, [r7, #7]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_IncTick+0x20>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <HAL_IncTick+0x24>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	4a04      	ldr	r2, [pc, #16]	; (8001ab4 <HAL_IncTick+0x24>)
 8001aa2:	6013      	str	r3, [r2, #0]
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	20000008 	.word	0x20000008
 8001ab4:	200005fc 	.word	0x200005fc

08001ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return uwTick;
 8001abc:	4b03      	ldr	r3, [pc, #12]	; (8001acc <HAL_GetTick+0x14>)
 8001abe:	681b      	ldr	r3, [r3, #0]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	200005fc 	.word	0x200005fc

08001ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aec:	4013      	ands	r3, r2
 8001aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001af8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b02:	4a04      	ldr	r2, [pc, #16]	; (8001b14 <__NVIC_SetPriorityGrouping+0x44>)
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	60d3      	str	r3, [r2, #12]
}
 8001b08:	bf00      	nop
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b1c:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <__NVIC_GetPriorityGrouping+0x18>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	0a1b      	lsrs	r3, r3, #8
 8001b22:	f003 0307 	and.w	r3, r3, #7
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	db0b      	blt.n	8001b5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	f003 021f 	and.w	r2, r3, #31
 8001b4c:	4907      	ldr	r1, [pc, #28]	; (8001b6c <__NVIC_EnableIRQ+0x38>)
 8001b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b52:	095b      	lsrs	r3, r3, #5
 8001b54:	2001      	movs	r0, #1
 8001b56:	fa00 f202 	lsl.w	r2, r0, r2
 8001b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	e000e100 	.word	0xe000e100

08001b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	6039      	str	r1, [r7, #0]
 8001b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	db0a      	blt.n	8001b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	490c      	ldr	r1, [pc, #48]	; (8001bbc <__NVIC_SetPriority+0x4c>)
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	0112      	lsls	r2, r2, #4
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	440b      	add	r3, r1
 8001b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b98:	e00a      	b.n	8001bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	4908      	ldr	r1, [pc, #32]	; (8001bc0 <__NVIC_SetPriority+0x50>)
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	3b04      	subs	r3, #4
 8001ba8:	0112      	lsls	r2, r2, #4
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	440b      	add	r3, r1
 8001bae:	761a      	strb	r2, [r3, #24]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	e000e100 	.word	0xe000e100
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b089      	sub	sp, #36	; 0x24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f1c3 0307 	rsb	r3, r3, #7
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	bf28      	it	cs
 8001be2:	2304      	movcs	r3, #4
 8001be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3304      	adds	r3, #4
 8001bea:	2b06      	cmp	r3, #6
 8001bec:	d902      	bls.n	8001bf4 <NVIC_EncodePriority+0x30>
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	3b03      	subs	r3, #3
 8001bf2:	e000      	b.n	8001bf6 <NVIC_EncodePriority+0x32>
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43da      	mvns	r2, r3
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	401a      	ands	r2, r3
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	fa01 f303 	lsl.w	r3, r1, r3
 8001c16:	43d9      	mvns	r1, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c1c:	4313      	orrs	r3, r2
         );
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3724      	adds	r7, #36	; 0x24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b082      	sub	sp, #8
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff ff4c 	bl	8001ad0 <__NVIC_SetPriorityGrouping>
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
 8001c4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c52:	f7ff ff61 	bl	8001b18 <__NVIC_GetPriorityGrouping>
 8001c56:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	68b9      	ldr	r1, [r7, #8]
 8001c5c:	6978      	ldr	r0, [r7, #20]
 8001c5e:	f7ff ffb1 	bl	8001bc4 <NVIC_EncodePriority>
 8001c62:	4602      	mov	r2, r0
 8001c64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c68:	4611      	mov	r1, r2
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff ff80 	bl	8001b70 <__NVIC_SetPriority>
}
 8001c70:	bf00      	nop
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff ff54 	bl	8001b34 <__NVIC_EnableIRQ>
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b087      	sub	sp, #28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ca2:	e17f      	b.n	8001fa4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	2101      	movs	r1, #1
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 8171 	beq.w	8001f9e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 0303 	and.w	r3, r3, #3
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d005      	beq.n	8001cd4 <HAL_GPIO_Init+0x40>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d130      	bne.n	8001d36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	2203      	movs	r2, #3
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	68da      	ldr	r2, [r3, #12]
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43db      	mvns	r3, r3
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	4013      	ands	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	091b      	lsrs	r3, r3, #4
 8001d20:	f003 0201 	and.w	r2, r3, #1
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	2b03      	cmp	r3, #3
 8001d40:	d118      	bne.n	8001d74 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001d48:	2201      	movs	r2, #1
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	4013      	ands	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	08db      	lsrs	r3, r3, #3
 8001d5e:	f003 0201 	and.w	r2, r3, #1
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	2b03      	cmp	r3, #3
 8001d7e:	d017      	beq.n	8001db0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	2203      	movs	r2, #3
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	4013      	ands	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d123      	bne.n	8001e04 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	08da      	lsrs	r2, r3, #3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3208      	adds	r2, #8
 8001dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	220f      	movs	r2, #15
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	08da      	lsrs	r2, r3, #3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	3208      	adds	r2, #8
 8001dfe:	6939      	ldr	r1, [r7, #16]
 8001e00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	2203      	movs	r2, #3
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 0203 	and.w	r2, r3, #3
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 80ac 	beq.w	8001f9e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e46:	4b5f      	ldr	r3, [pc, #380]	; (8001fc4 <HAL_GPIO_Init+0x330>)
 8001e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e4a:	4a5e      	ldr	r2, [pc, #376]	; (8001fc4 <HAL_GPIO_Init+0x330>)
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	6613      	str	r3, [r2, #96]	; 0x60
 8001e52:	4b5c      	ldr	r3, [pc, #368]	; (8001fc4 <HAL_GPIO_Init+0x330>)
 8001e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e5e:	4a5a      	ldr	r2, [pc, #360]	; (8001fc8 <HAL_GPIO_Init+0x334>)
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	089b      	lsrs	r3, r3, #2
 8001e64:	3302      	adds	r3, #2
 8001e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	220f      	movs	r2, #15
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e88:	d025      	beq.n	8001ed6 <HAL_GPIO_Init+0x242>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a4f      	ldr	r2, [pc, #316]	; (8001fcc <HAL_GPIO_Init+0x338>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d01f      	beq.n	8001ed2 <HAL_GPIO_Init+0x23e>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a4e      	ldr	r2, [pc, #312]	; (8001fd0 <HAL_GPIO_Init+0x33c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d019      	beq.n	8001ece <HAL_GPIO_Init+0x23a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a4d      	ldr	r2, [pc, #308]	; (8001fd4 <HAL_GPIO_Init+0x340>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d013      	beq.n	8001eca <HAL_GPIO_Init+0x236>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a4c      	ldr	r2, [pc, #304]	; (8001fd8 <HAL_GPIO_Init+0x344>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d00d      	beq.n	8001ec6 <HAL_GPIO_Init+0x232>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a4b      	ldr	r2, [pc, #300]	; (8001fdc <HAL_GPIO_Init+0x348>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d007      	beq.n	8001ec2 <HAL_GPIO_Init+0x22e>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a4a      	ldr	r2, [pc, #296]	; (8001fe0 <HAL_GPIO_Init+0x34c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d101      	bne.n	8001ebe <HAL_GPIO_Init+0x22a>
 8001eba:	2306      	movs	r3, #6
 8001ebc:	e00c      	b.n	8001ed8 <HAL_GPIO_Init+0x244>
 8001ebe:	2307      	movs	r3, #7
 8001ec0:	e00a      	b.n	8001ed8 <HAL_GPIO_Init+0x244>
 8001ec2:	2305      	movs	r3, #5
 8001ec4:	e008      	b.n	8001ed8 <HAL_GPIO_Init+0x244>
 8001ec6:	2304      	movs	r3, #4
 8001ec8:	e006      	b.n	8001ed8 <HAL_GPIO_Init+0x244>
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e004      	b.n	8001ed8 <HAL_GPIO_Init+0x244>
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e002      	b.n	8001ed8 <HAL_GPIO_Init+0x244>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <HAL_GPIO_Init+0x244>
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	f002 0203 	and.w	r2, r2, #3
 8001ede:	0092      	lsls	r2, r2, #2
 8001ee0:	4093      	lsls	r3, r2
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ee8:	4937      	ldr	r1, [pc, #220]	; (8001fc8 <HAL_GPIO_Init+0x334>)
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	089b      	lsrs	r3, r3, #2
 8001eee:	3302      	adds	r3, #2
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ef6:	4b3b      	ldr	r3, [pc, #236]	; (8001fe4 <HAL_GPIO_Init+0x350>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	43db      	mvns	r3, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f1a:	4a32      	ldr	r2, [pc, #200]	; (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f20:	4b30      	ldr	r3, [pc, #192]	; (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f44:	4a27      	ldr	r2, [pc, #156]	; (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f4a:	4b26      	ldr	r3, [pc, #152]	; (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	43db      	mvns	r3, r3
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4013      	ands	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f6e:	4a1d      	ldr	r2, [pc, #116]	; (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f74:	4b1b      	ldr	r3, [pc, #108]	; (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4013      	ands	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f98:	4a12      	ldr	r2, [pc, #72]	; (8001fe4 <HAL_GPIO_Init+0x350>)
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	fa22 f303 	lsr.w	r3, r2, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f47f ae78 	bne.w	8001ca4 <HAL_GPIO_Init+0x10>
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	bf00      	nop
 8001fb8:	371c      	adds	r7, #28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40010000 	.word	0x40010000
 8001fcc:	48000400 	.word	0x48000400
 8001fd0:	48000800 	.word	0x48000800
 8001fd4:	48000c00 	.word	0x48000c00
 8001fd8:	48001000 	.word	0x48001000
 8001fdc:	48001400 	.word	0x48001400
 8001fe0:	48001800 	.word	0x48001800
 8001fe4:	40010400 	.word	0x40010400

08001fe8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	807b      	strh	r3, [r7, #2]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ff8:	787b      	ldrb	r3, [r7, #1]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ffe:	887a      	ldrh	r2, [r7, #2]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002004:	e002      	b.n	800200c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002006:	887a      	ldrh	r2, [r7, #2]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	460b      	mov	r3, r1
 8002022:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	695b      	ldr	r3, [r3, #20]
 8002028:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800202a:	887a      	ldrh	r2, [r7, #2]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4013      	ands	r3, r2
 8002030:	041a      	lsls	r2, r3, #16
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	43d9      	mvns	r1, r3
 8002036:	887b      	ldrh	r3, [r7, #2]
 8002038:	400b      	ands	r3, r1
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	619a      	str	r2, [r3, #24]
}
 8002040:	bf00      	nop
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002056:	4b08      	ldr	r3, [pc, #32]	; (8002078 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002058:	695a      	ldr	r2, [r3, #20]
 800205a:	88fb      	ldrh	r3, [r7, #6]
 800205c:	4013      	ands	r3, r2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d006      	beq.n	8002070 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002062:	4a05      	ldr	r2, [pc, #20]	; (8002078 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002064:	88fb      	ldrh	r3, [r7, #6]
 8002066:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002068:	88fb      	ldrh	r3, [r7, #6]
 800206a:	4618      	mov	r0, r3
 800206c:	f000 f806 	bl	800207c <HAL_GPIO_EXTI_Callback>
  }
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40010400 	.word	0x40010400

0800207c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e081      	b.n	80021a8 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d106      	bne.n	80020be <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff fa3f 	bl	800153c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2224      	movs	r2, #36	; 0x24
 80020c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0201 	bic.w	r2, r2, #1
 80020d4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020e2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020f2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d107      	bne.n	800210c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002108:	609a      	str	r2, [r3, #8]
 800210a:	e006      	b.n	800211a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002118:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	2b02      	cmp	r3, #2
 8002120:	d104      	bne.n	800212c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800212a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6812      	ldr	r2, [r2, #0]
 8002136:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800213a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800213e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68da      	ldr	r2, [r3, #12]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800214e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691a      	ldr	r2, [r3, #16]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69d9      	ldr	r1, [r3, #28]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a1a      	ldr	r2, [r3, #32]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	430a      	orrs	r2, r1
 8002178:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f042 0201 	orr.w	r2, r2, #1
 8002188:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2220      	movs	r2, #32
 8002194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b20      	cmp	r3, #32
 80021c4:	d138      	bne.n	8002238 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d101      	bne.n	80021d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80021d0:	2302      	movs	r3, #2
 80021d2:	e032      	b.n	800223a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2224      	movs	r2, #36	; 0x24
 80021e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 0201 	bic.w	r2, r2, #1
 80021f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002202:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6819      	ldr	r1, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	430a      	orrs	r2, r1
 8002212:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0201 	orr.w	r2, r2, #1
 8002222:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2220      	movs	r2, #32
 8002228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002234:	2300      	movs	r3, #0
 8002236:	e000      	b.n	800223a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002238:	2302      	movs	r3, #2
  }
}
 800223a:	4618      	mov	r0, r3
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002246:	b480      	push	{r7}
 8002248:	b085      	sub	sp, #20
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
 800224e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b20      	cmp	r3, #32
 800225a:	d139      	bne.n	80022d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002262:	2b01      	cmp	r3, #1
 8002264:	d101      	bne.n	800226a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002266:	2302      	movs	r3, #2
 8002268:	e033      	b.n	80022d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2224      	movs	r2, #36	; 0x24
 8002276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 0201 	bic.w	r2, r2, #1
 8002288:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002298:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	021b      	lsls	r3, r3, #8
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f042 0201 	orr.w	r2, r2, #1
 80022ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2220      	movs	r2, #32
 80022c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	e000      	b.n	80022d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80022d0:	2302      	movs	r3, #2
  }
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
	...

080022e0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022e4:	4b05      	ldr	r3, [pc, #20]	; (80022fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a04      	ldr	r2, [pc, #16]	; (80022fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80022ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ee:	6013      	str	r3, [r2, #0]
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	40007000 	.word	0x40007000

08002300 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002304:	4b04      	ldr	r3, [pc, #16]	; (8002318 <HAL_PWREx_GetVoltageRange+0x18>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800230c:	4618      	mov	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	40007000 	.word	0x40007000

0800231c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800232a:	d130      	bne.n	800238e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800232c:	4b23      	ldr	r3, [pc, #140]	; (80023bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002338:	d038      	beq.n	80023ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800233a:	4b20      	ldr	r3, [pc, #128]	; (80023bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002342:	4a1e      	ldr	r2, [pc, #120]	; (80023bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002344:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002348:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800234a:	4b1d      	ldr	r3, [pc, #116]	; (80023c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2232      	movs	r2, #50	; 0x32
 8002350:	fb02 f303 	mul.w	r3, r2, r3
 8002354:	4a1b      	ldr	r2, [pc, #108]	; (80023c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002356:	fba2 2303 	umull	r2, r3, r2, r3
 800235a:	0c9b      	lsrs	r3, r3, #18
 800235c:	3301      	adds	r3, #1
 800235e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002360:	e002      	b.n	8002368 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	3b01      	subs	r3, #1
 8002366:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002368:	4b14      	ldr	r3, [pc, #80]	; (80023bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002374:	d102      	bne.n	800237c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1f2      	bne.n	8002362 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800237c:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002388:	d110      	bne.n	80023ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e00f      	b.n	80023ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800238e:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800239a:	d007      	beq.n	80023ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800239c:	4b07      	ldr	r3, [pc, #28]	; (80023bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023a4:	4a05      	ldr	r2, [pc, #20]	; (80023bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	40007000 	.word	0x40007000
 80023c0:	20000000 	.word	0x20000000
 80023c4:	431bde83 	.word	0x431bde83

080023c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b088      	sub	sp, #32
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e3ca      	b.n	8002b70 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023da:	4b97      	ldr	r3, [pc, #604]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 030c 	and.w	r3, r3, #12
 80023e2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023e4:	4b94      	ldr	r3, [pc, #592]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0310 	and.w	r3, r3, #16
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 80e4 	beq.w	80025c4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d007      	beq.n	8002412 <HAL_RCC_OscConfig+0x4a>
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	2b0c      	cmp	r3, #12
 8002406:	f040 808b 	bne.w	8002520 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	2b01      	cmp	r3, #1
 800240e:	f040 8087 	bne.w	8002520 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002412:	4b89      	ldr	r3, [pc, #548]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d005      	beq.n	800242a <HAL_RCC_OscConfig+0x62>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e3a2      	b.n	8002b70 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a1a      	ldr	r2, [r3, #32]
 800242e:	4b82      	ldr	r3, [pc, #520]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b00      	cmp	r3, #0
 8002438:	d004      	beq.n	8002444 <HAL_RCC_OscConfig+0x7c>
 800243a:	4b7f      	ldr	r3, [pc, #508]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002442:	e005      	b.n	8002450 <HAL_RCC_OscConfig+0x88>
 8002444:	4b7c      	ldr	r3, [pc, #496]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 8002446:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800244a:	091b      	lsrs	r3, r3, #4
 800244c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002450:	4293      	cmp	r3, r2
 8002452:	d223      	bcs.n	800249c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	4618      	mov	r0, r3
 800245a:	f000 fd87 	bl	8002f6c <RCC_SetFlashLatencyFromMSIRange>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e383      	b.n	8002b70 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002468:	4b73      	ldr	r3, [pc, #460]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a72      	ldr	r2, [pc, #456]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 800246e:	f043 0308 	orr.w	r3, r3, #8
 8002472:	6013      	str	r3, [r2, #0]
 8002474:	4b70      	ldr	r3, [pc, #448]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	496d      	ldr	r1, [pc, #436]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 8002482:	4313      	orrs	r3, r2
 8002484:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002486:	4b6c      	ldr	r3, [pc, #432]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	021b      	lsls	r3, r3, #8
 8002494:	4968      	ldr	r1, [pc, #416]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 8002496:	4313      	orrs	r3, r2
 8002498:	604b      	str	r3, [r1, #4]
 800249a:	e025      	b.n	80024e8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800249c:	4b66      	ldr	r3, [pc, #408]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a65      	ldr	r2, [pc, #404]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 80024a2:	f043 0308 	orr.w	r3, r3, #8
 80024a6:	6013      	str	r3, [r2, #0]
 80024a8:	4b63      	ldr	r3, [pc, #396]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	4960      	ldr	r1, [pc, #384]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024ba:	4b5f      	ldr	r3, [pc, #380]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	021b      	lsls	r3, r3, #8
 80024c8:	495b      	ldr	r1, [pc, #364]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d109      	bne.n	80024e8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	4618      	mov	r0, r3
 80024da:	f000 fd47 	bl	8002f6c <RCC_SetFlashLatencyFromMSIRange>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e343      	b.n	8002b70 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024e8:	f000 fc4a 	bl	8002d80 <HAL_RCC_GetSysClockFreq>
 80024ec:	4602      	mov	r2, r0
 80024ee:	4b52      	ldr	r3, [pc, #328]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	091b      	lsrs	r3, r3, #4
 80024f4:	f003 030f 	and.w	r3, r3, #15
 80024f8:	4950      	ldr	r1, [pc, #320]	; (800263c <HAL_RCC_OscConfig+0x274>)
 80024fa:	5ccb      	ldrb	r3, [r1, r3]
 80024fc:	f003 031f 	and.w	r3, r3, #31
 8002500:	fa22 f303 	lsr.w	r3, r2, r3
 8002504:	4a4e      	ldr	r2, [pc, #312]	; (8002640 <HAL_RCC_OscConfig+0x278>)
 8002506:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002508:	4b4e      	ldr	r3, [pc, #312]	; (8002644 <HAL_RCC_OscConfig+0x27c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff f8d1 	bl	80016b4 <HAL_InitTick>
 8002512:	4603      	mov	r3, r0
 8002514:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002516:	7bfb      	ldrb	r3, [r7, #15]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d052      	beq.n	80025c2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800251c:	7bfb      	ldrb	r3, [r7, #15]
 800251e:	e327      	b.n	8002b70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d032      	beq.n	800258e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002528:	4b43      	ldr	r3, [pc, #268]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a42      	ldr	r2, [pc, #264]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002534:	f7ff fac0 	bl	8001ab8 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800253c:	f7ff fabc 	bl	8001ab8 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e310      	b.n	8002b70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800254e:	4b3a      	ldr	r3, [pc, #232]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0f0      	beq.n	800253c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800255a:	4b37      	ldr	r3, [pc, #220]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a36      	ldr	r2, [pc, #216]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 8002560:	f043 0308 	orr.w	r3, r3, #8
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	4b34      	ldr	r3, [pc, #208]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	4931      	ldr	r1, [pc, #196]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 8002574:	4313      	orrs	r3, r2
 8002576:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002578:	4b2f      	ldr	r3, [pc, #188]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	021b      	lsls	r3, r3, #8
 8002586:	492c      	ldr	r1, [pc, #176]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 8002588:	4313      	orrs	r3, r2
 800258a:	604b      	str	r3, [r1, #4]
 800258c:	e01a      	b.n	80025c4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800258e:	4b2a      	ldr	r3, [pc, #168]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a29      	ldr	r2, [pc, #164]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 8002594:	f023 0301 	bic.w	r3, r3, #1
 8002598:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800259a:	f7ff fa8d 	bl	8001ab8 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025a2:	f7ff fa89 	bl	8001ab8 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e2dd      	b.n	8002b70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025b4:	4b20      	ldr	r3, [pc, #128]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1f0      	bne.n	80025a2 <HAL_RCC_OscConfig+0x1da>
 80025c0:	e000      	b.n	80025c4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025c2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d074      	beq.n	80026ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d005      	beq.n	80025e2 <HAL_RCC_OscConfig+0x21a>
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	2b0c      	cmp	r3, #12
 80025da:	d10e      	bne.n	80025fa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	2b03      	cmp	r3, #3
 80025e0:	d10b      	bne.n	80025fa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e2:	4b15      	ldr	r3, [pc, #84]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d064      	beq.n	80026b8 <HAL_RCC_OscConfig+0x2f0>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d160      	bne.n	80026b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e2ba      	b.n	8002b70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002602:	d106      	bne.n	8002612 <HAL_RCC_OscConfig+0x24a>
 8002604:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a0b      	ldr	r2, [pc, #44]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 800260a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800260e:	6013      	str	r3, [r2, #0]
 8002610:	e026      	b.n	8002660 <HAL_RCC_OscConfig+0x298>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800261a:	d115      	bne.n	8002648 <HAL_RCC_OscConfig+0x280>
 800261c:	4b06      	ldr	r3, [pc, #24]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a05      	ldr	r2, [pc, #20]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 8002622:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002626:	6013      	str	r3, [r2, #0]
 8002628:	4b03      	ldr	r3, [pc, #12]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a02      	ldr	r2, [pc, #8]	; (8002638 <HAL_RCC_OscConfig+0x270>)
 800262e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	e014      	b.n	8002660 <HAL_RCC_OscConfig+0x298>
 8002636:	bf00      	nop
 8002638:	40021000 	.word	0x40021000
 800263c:	0800936c 	.word	0x0800936c
 8002640:	20000000 	.word	0x20000000
 8002644:	20000004 	.word	0x20000004
 8002648:	4ba0      	ldr	r3, [pc, #640]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a9f      	ldr	r2, [pc, #636]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 800264e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	4b9d      	ldr	r3, [pc, #628]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a9c      	ldr	r2, [pc, #624]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 800265a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800265e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d013      	beq.n	8002690 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002668:	f7ff fa26 	bl	8001ab8 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002670:	f7ff fa22 	bl	8001ab8 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b64      	cmp	r3, #100	; 0x64
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e276      	b.n	8002b70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002682:	4b92      	ldr	r3, [pc, #584]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0f0      	beq.n	8002670 <HAL_RCC_OscConfig+0x2a8>
 800268e:	e014      	b.n	80026ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002690:	f7ff fa12 	bl	8001ab8 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002698:	f7ff fa0e 	bl	8001ab8 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b64      	cmp	r3, #100	; 0x64
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e262      	b.n	8002b70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026aa:	4b88      	ldr	r3, [pc, #544]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f0      	bne.n	8002698 <HAL_RCC_OscConfig+0x2d0>
 80026b6:	e000      	b.n	80026ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d060      	beq.n	8002788 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d005      	beq.n	80026d8 <HAL_RCC_OscConfig+0x310>
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	2b0c      	cmp	r3, #12
 80026d0:	d119      	bne.n	8002706 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d116      	bne.n	8002706 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026d8:	4b7c      	ldr	r3, [pc, #496]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d005      	beq.n	80026f0 <HAL_RCC_OscConfig+0x328>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e23f      	b.n	8002b70 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f0:	4b76      	ldr	r3, [pc, #472]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	061b      	lsls	r3, r3, #24
 80026fe:	4973      	ldr	r1, [pc, #460]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 8002700:	4313      	orrs	r3, r2
 8002702:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002704:	e040      	b.n	8002788 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d023      	beq.n	8002756 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800270e:	4b6f      	ldr	r3, [pc, #444]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a6e      	ldr	r2, [pc, #440]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 8002714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002718:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271a:	f7ff f9cd 	bl	8001ab8 <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002720:	e008      	b.n	8002734 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002722:	f7ff f9c9 	bl	8001ab8 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e21d      	b.n	8002b70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002734:	4b65      	ldr	r3, [pc, #404]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0f0      	beq.n	8002722 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002740:	4b62      	ldr	r3, [pc, #392]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	061b      	lsls	r3, r3, #24
 800274e:	495f      	ldr	r1, [pc, #380]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 8002750:	4313      	orrs	r3, r2
 8002752:	604b      	str	r3, [r1, #4]
 8002754:	e018      	b.n	8002788 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002756:	4b5d      	ldr	r3, [pc, #372]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a5c      	ldr	r2, [pc, #368]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 800275c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002760:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002762:	f7ff f9a9 	bl	8001ab8 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800276a:	f7ff f9a5 	bl	8001ab8 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e1f9      	b.n	8002b70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800277c:	4b53      	ldr	r3, [pc, #332]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1f0      	bne.n	800276a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0308 	and.w	r3, r3, #8
 8002790:	2b00      	cmp	r3, #0
 8002792:	d03c      	beq.n	800280e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d01c      	beq.n	80027d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800279c:	4b4b      	ldr	r3, [pc, #300]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 800279e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027a2:	4a4a      	ldr	r2, [pc, #296]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ac:	f7ff f984 	bl	8001ab8 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027b4:	f7ff f980 	bl	8001ab8 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e1d4      	b.n	8002b70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027c6:	4b41      	ldr	r3, [pc, #260]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 80027c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0ef      	beq.n	80027b4 <HAL_RCC_OscConfig+0x3ec>
 80027d4:	e01b      	b.n	800280e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027d6:	4b3d      	ldr	r3, [pc, #244]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 80027d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027dc:	4a3b      	ldr	r2, [pc, #236]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 80027de:	f023 0301 	bic.w	r3, r3, #1
 80027e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e6:	f7ff f967 	bl	8001ab8 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ee:	f7ff f963 	bl	8001ab8 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e1b7      	b.n	8002b70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002800:	4b32      	ldr	r3, [pc, #200]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 8002802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1ef      	bne.n	80027ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0304 	and.w	r3, r3, #4
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 80a6 	beq.w	8002968 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800281c:	2300      	movs	r3, #0
 800281e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002820:	4b2a      	ldr	r3, [pc, #168]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 8002822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10d      	bne.n	8002848 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800282c:	4b27      	ldr	r3, [pc, #156]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 800282e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002830:	4a26      	ldr	r2, [pc, #152]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 8002832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002836:	6593      	str	r3, [r2, #88]	; 0x58
 8002838:	4b24      	ldr	r3, [pc, #144]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 800283a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002840:	60bb      	str	r3, [r7, #8]
 8002842:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002844:	2301      	movs	r3, #1
 8002846:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002848:	4b21      	ldr	r3, [pc, #132]	; (80028d0 <HAL_RCC_OscConfig+0x508>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002850:	2b00      	cmp	r3, #0
 8002852:	d118      	bne.n	8002886 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002854:	4b1e      	ldr	r3, [pc, #120]	; (80028d0 <HAL_RCC_OscConfig+0x508>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a1d      	ldr	r2, [pc, #116]	; (80028d0 <HAL_RCC_OscConfig+0x508>)
 800285a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800285e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002860:	f7ff f92a 	bl	8001ab8 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002868:	f7ff f926 	bl	8001ab8 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e17a      	b.n	8002b70 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800287a:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <HAL_RCC_OscConfig+0x508>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f0      	beq.n	8002868 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d108      	bne.n	80028a0 <HAL_RCC_OscConfig+0x4d8>
 800288e:	4b0f      	ldr	r3, [pc, #60]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 8002890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002894:	4a0d      	ldr	r2, [pc, #52]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 8002896:	f043 0301 	orr.w	r3, r3, #1
 800289a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800289e:	e029      	b.n	80028f4 <HAL_RCC_OscConfig+0x52c>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	2b05      	cmp	r3, #5
 80028a6:	d115      	bne.n	80028d4 <HAL_RCC_OscConfig+0x50c>
 80028a8:	4b08      	ldr	r3, [pc, #32]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 80028aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ae:	4a07      	ldr	r2, [pc, #28]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 80028b0:	f043 0304 	orr.w	r3, r3, #4
 80028b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028b8:	4b04      	ldr	r3, [pc, #16]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 80028ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028be:	4a03      	ldr	r2, [pc, #12]	; (80028cc <HAL_RCC_OscConfig+0x504>)
 80028c0:	f043 0301 	orr.w	r3, r3, #1
 80028c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028c8:	e014      	b.n	80028f4 <HAL_RCC_OscConfig+0x52c>
 80028ca:	bf00      	nop
 80028cc:	40021000 	.word	0x40021000
 80028d0:	40007000 	.word	0x40007000
 80028d4:	4b9c      	ldr	r3, [pc, #624]	; (8002b48 <HAL_RCC_OscConfig+0x780>)
 80028d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028da:	4a9b      	ldr	r2, [pc, #620]	; (8002b48 <HAL_RCC_OscConfig+0x780>)
 80028dc:	f023 0301 	bic.w	r3, r3, #1
 80028e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028e4:	4b98      	ldr	r3, [pc, #608]	; (8002b48 <HAL_RCC_OscConfig+0x780>)
 80028e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ea:	4a97      	ldr	r2, [pc, #604]	; (8002b48 <HAL_RCC_OscConfig+0x780>)
 80028ec:	f023 0304 	bic.w	r3, r3, #4
 80028f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d016      	beq.n	800292a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fc:	f7ff f8dc 	bl	8001ab8 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002902:	e00a      	b.n	800291a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002904:	f7ff f8d8 	bl	8001ab8 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002912:	4293      	cmp	r3, r2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e12a      	b.n	8002b70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800291a:	4b8b      	ldr	r3, [pc, #556]	; (8002b48 <HAL_RCC_OscConfig+0x780>)
 800291c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0ed      	beq.n	8002904 <HAL_RCC_OscConfig+0x53c>
 8002928:	e015      	b.n	8002956 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292a:	f7ff f8c5 	bl	8001ab8 <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002930:	e00a      	b.n	8002948 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002932:	f7ff f8c1 	bl	8001ab8 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002940:	4293      	cmp	r3, r2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e113      	b.n	8002b70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002948:	4b7f      	ldr	r3, [pc, #508]	; (8002b48 <HAL_RCC_OscConfig+0x780>)
 800294a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1ed      	bne.n	8002932 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002956:	7ffb      	ldrb	r3, [r7, #31]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d105      	bne.n	8002968 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800295c:	4b7a      	ldr	r3, [pc, #488]	; (8002b48 <HAL_RCC_OscConfig+0x780>)
 800295e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002960:	4a79      	ldr	r2, [pc, #484]	; (8002b48 <HAL_RCC_OscConfig+0x780>)
 8002962:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002966:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 80fe 	beq.w	8002b6e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002976:	2b02      	cmp	r3, #2
 8002978:	f040 80d0 	bne.w	8002b1c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800297c:	4b72      	ldr	r3, [pc, #456]	; (8002b48 <HAL_RCC_OscConfig+0x780>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f003 0203 	and.w	r2, r3, #3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298c:	429a      	cmp	r2, r3
 800298e:	d130      	bne.n	80029f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	3b01      	subs	r3, #1
 800299c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800299e:	429a      	cmp	r2, r3
 80029a0:	d127      	bne.n	80029f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d11f      	bne.n	80029f2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029bc:	2a07      	cmp	r2, #7
 80029be:	bf14      	ite	ne
 80029c0:	2201      	movne	r2, #1
 80029c2:	2200      	moveq	r2, #0
 80029c4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d113      	bne.n	80029f2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d4:	085b      	lsrs	r3, r3, #1
 80029d6:	3b01      	subs	r3, #1
 80029d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029da:	429a      	cmp	r2, r3
 80029dc:	d109      	bne.n	80029f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e8:	085b      	lsrs	r3, r3, #1
 80029ea:	3b01      	subs	r3, #1
 80029ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d06e      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	2b0c      	cmp	r3, #12
 80029f6:	d069      	beq.n	8002acc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029f8:	4b53      	ldr	r3, [pc, #332]	; (8002b48 <HAL_RCC_OscConfig+0x780>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d105      	bne.n	8002a10 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a04:	4b50      	ldr	r3, [pc, #320]	; (8002b48 <HAL_RCC_OscConfig+0x780>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e0ad      	b.n	8002b70 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a14:	4b4c      	ldr	r3, [pc, #304]	; (8002b48 <HAL_RCC_OscConfig+0x780>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a4b      	ldr	r2, [pc, #300]	; (8002b48 <HAL_RCC_OscConfig+0x780>)
 8002a1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a1e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a20:	f7ff f84a 	bl	8001ab8 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a28:	f7ff f846 	bl	8001ab8 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e09a      	b.n	8002b70 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a3a:	4b43      	ldr	r3, [pc, #268]	; (8002b48 <HAL_RCC_OscConfig+0x780>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f0      	bne.n	8002a28 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a46:	4b40      	ldr	r3, [pc, #256]	; (8002b48 <HAL_RCC_OscConfig+0x780>)
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	4b40      	ldr	r3, [pc, #256]	; (8002b4c <HAL_RCC_OscConfig+0x784>)
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a56:	3a01      	subs	r2, #1
 8002a58:	0112      	lsls	r2, r2, #4
 8002a5a:	4311      	orrs	r1, r2
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a60:	0212      	lsls	r2, r2, #8
 8002a62:	4311      	orrs	r1, r2
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a68:	0852      	lsrs	r2, r2, #1
 8002a6a:	3a01      	subs	r2, #1
 8002a6c:	0552      	lsls	r2, r2, #21
 8002a6e:	4311      	orrs	r1, r2
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a74:	0852      	lsrs	r2, r2, #1
 8002a76:	3a01      	subs	r2, #1
 8002a78:	0652      	lsls	r2, r2, #25
 8002a7a:	4311      	orrs	r1, r2
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a80:	0912      	lsrs	r2, r2, #4
 8002a82:	0452      	lsls	r2, r2, #17
 8002a84:	430a      	orrs	r2, r1
 8002a86:	4930      	ldr	r1, [pc, #192]	; (8002b48 <HAL_RCC_OscConfig+0x780>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a8c:	4b2e      	ldr	r3, [pc, #184]	; (8002b48 <HAL_RCC_OscConfig+0x780>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a2d      	ldr	r2, [pc, #180]	; (8002b48 <HAL_RCC_OscConfig+0x780>)
 8002a92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a96:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a98:	4b2b      	ldr	r3, [pc, #172]	; (8002b48 <HAL_RCC_OscConfig+0x780>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	4a2a      	ldr	r2, [pc, #168]	; (8002b48 <HAL_RCC_OscConfig+0x780>)
 8002a9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aa2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002aa4:	f7ff f808 	bl	8001ab8 <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aaa:	e008      	b.n	8002abe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aac:	f7ff f804 	bl	8001ab8 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e058      	b.n	8002b70 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002abe:	4b22      	ldr	r3, [pc, #136]	; (8002b48 <HAL_RCC_OscConfig+0x780>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0f0      	beq.n	8002aac <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002aca:	e050      	b.n	8002b6e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e04f      	b.n	8002b70 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ad0:	4b1d      	ldr	r3, [pc, #116]	; (8002b48 <HAL_RCC_OscConfig+0x780>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d148      	bne.n	8002b6e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002adc:	4b1a      	ldr	r3, [pc, #104]	; (8002b48 <HAL_RCC_OscConfig+0x780>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a19      	ldr	r2, [pc, #100]	; (8002b48 <HAL_RCC_OscConfig+0x780>)
 8002ae2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ae6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ae8:	4b17      	ldr	r3, [pc, #92]	; (8002b48 <HAL_RCC_OscConfig+0x780>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	4a16      	ldr	r2, [pc, #88]	; (8002b48 <HAL_RCC_OscConfig+0x780>)
 8002aee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002af2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002af4:	f7fe ffe0 	bl	8001ab8 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002afc:	f7fe ffdc 	bl	8001ab8 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e030      	b.n	8002b70 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b0e:	4b0e      	ldr	r3, [pc, #56]	; (8002b48 <HAL_RCC_OscConfig+0x780>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d0f0      	beq.n	8002afc <HAL_RCC_OscConfig+0x734>
 8002b1a:	e028      	b.n	8002b6e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	2b0c      	cmp	r3, #12
 8002b20:	d023      	beq.n	8002b6a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b22:	4b09      	ldr	r3, [pc, #36]	; (8002b48 <HAL_RCC_OscConfig+0x780>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a08      	ldr	r2, [pc, #32]	; (8002b48 <HAL_RCC_OscConfig+0x780>)
 8002b28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2e:	f7fe ffc3 	bl	8001ab8 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b34:	e00c      	b.n	8002b50 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b36:	f7fe ffbf 	bl	8001ab8 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d905      	bls.n	8002b50 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e013      	b.n	8002b70 <HAL_RCC_OscConfig+0x7a8>
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b50:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <HAL_RCC_OscConfig+0x7b0>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1ec      	bne.n	8002b36 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b5c:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <HAL_RCC_OscConfig+0x7b0>)
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	4905      	ldr	r1, [pc, #20]	; (8002b78 <HAL_RCC_OscConfig+0x7b0>)
 8002b62:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <HAL_RCC_OscConfig+0x7b4>)
 8002b64:	4013      	ands	r3, r2
 8002b66:	60cb      	str	r3, [r1, #12]
 8002b68:	e001      	b.n	8002b6e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3720      	adds	r7, #32
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	feeefffc 	.word	0xfeeefffc

08002b80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e0e7      	b.n	8002d64 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b94:	4b75      	ldr	r3, [pc, #468]	; (8002d6c <HAL_RCC_ClockConfig+0x1ec>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0307 	and.w	r3, r3, #7
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d910      	bls.n	8002bc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba2:	4b72      	ldr	r3, [pc, #456]	; (8002d6c <HAL_RCC_ClockConfig+0x1ec>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f023 0207 	bic.w	r2, r3, #7
 8002baa:	4970      	ldr	r1, [pc, #448]	; (8002d6c <HAL_RCC_ClockConfig+0x1ec>)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb2:	4b6e      	ldr	r3, [pc, #440]	; (8002d6c <HAL_RCC_ClockConfig+0x1ec>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d001      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e0cf      	b.n	8002d64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d010      	beq.n	8002bf2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	4b66      	ldr	r3, [pc, #408]	; (8002d70 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d908      	bls.n	8002bf2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002be0:	4b63      	ldr	r3, [pc, #396]	; (8002d70 <HAL_RCC_ClockConfig+0x1f0>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	4960      	ldr	r1, [pc, #384]	; (8002d70 <HAL_RCC_ClockConfig+0x1f0>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d04c      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	d107      	bne.n	8002c16 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c06:	4b5a      	ldr	r3, [pc, #360]	; (8002d70 <HAL_RCC_ClockConfig+0x1f0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d121      	bne.n	8002c56 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e0a6      	b.n	8002d64 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d107      	bne.n	8002c2e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c1e:	4b54      	ldr	r3, [pc, #336]	; (8002d70 <HAL_RCC_ClockConfig+0x1f0>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d115      	bne.n	8002c56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e09a      	b.n	8002d64 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d107      	bne.n	8002c46 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c36:	4b4e      	ldr	r3, [pc, #312]	; (8002d70 <HAL_RCC_ClockConfig+0x1f0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d109      	bne.n	8002c56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e08e      	b.n	8002d64 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c46:	4b4a      	ldr	r3, [pc, #296]	; (8002d70 <HAL_RCC_ClockConfig+0x1f0>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e086      	b.n	8002d64 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c56:	4b46      	ldr	r3, [pc, #280]	; (8002d70 <HAL_RCC_ClockConfig+0x1f0>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f023 0203 	bic.w	r2, r3, #3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	4943      	ldr	r1, [pc, #268]	; (8002d70 <HAL_RCC_ClockConfig+0x1f0>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c68:	f7fe ff26 	bl	8001ab8 <HAL_GetTick>
 8002c6c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c6e:	e00a      	b.n	8002c86 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c70:	f7fe ff22 	bl	8001ab8 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e06e      	b.n	8002d64 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c86:	4b3a      	ldr	r3, [pc, #232]	; (8002d70 <HAL_RCC_ClockConfig+0x1f0>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 020c 	and.w	r2, r3, #12
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d1eb      	bne.n	8002c70 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d010      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	4b31      	ldr	r3, [pc, #196]	; (8002d70 <HAL_RCC_ClockConfig+0x1f0>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d208      	bcs.n	8002cc6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cb4:	4b2e      	ldr	r3, [pc, #184]	; (8002d70 <HAL_RCC_ClockConfig+0x1f0>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	492b      	ldr	r1, [pc, #172]	; (8002d70 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cc6:	4b29      	ldr	r3, [pc, #164]	; (8002d6c <HAL_RCC_ClockConfig+0x1ec>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d210      	bcs.n	8002cf6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd4:	4b25      	ldr	r3, [pc, #148]	; (8002d6c <HAL_RCC_ClockConfig+0x1ec>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f023 0207 	bic.w	r2, r3, #7
 8002cdc:	4923      	ldr	r1, [pc, #140]	; (8002d6c <HAL_RCC_ClockConfig+0x1ec>)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce4:	4b21      	ldr	r3, [pc, #132]	; (8002d6c <HAL_RCC_ClockConfig+0x1ec>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d001      	beq.n	8002cf6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e036      	b.n	8002d64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d008      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d02:	4b1b      	ldr	r3, [pc, #108]	; (8002d70 <HAL_RCC_ClockConfig+0x1f0>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	4918      	ldr	r1, [pc, #96]	; (8002d70 <HAL_RCC_ClockConfig+0x1f0>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0308 	and.w	r3, r3, #8
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d009      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d20:	4b13      	ldr	r3, [pc, #76]	; (8002d70 <HAL_RCC_ClockConfig+0x1f0>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	4910      	ldr	r1, [pc, #64]	; (8002d70 <HAL_RCC_ClockConfig+0x1f0>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d34:	f000 f824 	bl	8002d80 <HAL_RCC_GetSysClockFreq>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	4b0d      	ldr	r3, [pc, #52]	; (8002d70 <HAL_RCC_ClockConfig+0x1f0>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	091b      	lsrs	r3, r3, #4
 8002d40:	f003 030f 	and.w	r3, r3, #15
 8002d44:	490b      	ldr	r1, [pc, #44]	; (8002d74 <HAL_RCC_ClockConfig+0x1f4>)
 8002d46:	5ccb      	ldrb	r3, [r1, r3]
 8002d48:	f003 031f 	and.w	r3, r3, #31
 8002d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d50:	4a09      	ldr	r2, [pc, #36]	; (8002d78 <HAL_RCC_ClockConfig+0x1f8>)
 8002d52:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d54:	4b09      	ldr	r3, [pc, #36]	; (8002d7c <HAL_RCC_ClockConfig+0x1fc>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fe fcab 	bl	80016b4 <HAL_InitTick>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d62:	7afb      	ldrb	r3, [r7, #11]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40022000 	.word	0x40022000
 8002d70:	40021000 	.word	0x40021000
 8002d74:	0800936c 	.word	0x0800936c
 8002d78:	20000000 	.word	0x20000000
 8002d7c:	20000004 	.word	0x20000004

08002d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b089      	sub	sp, #36	; 0x24
 8002d84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	61fb      	str	r3, [r7, #28]
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d8e:	4b3e      	ldr	r3, [pc, #248]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 030c 	and.w	r3, r3, #12
 8002d96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d98:	4b3b      	ldr	r3, [pc, #236]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f003 0303 	and.w	r3, r3, #3
 8002da0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d005      	beq.n	8002db4 <HAL_RCC_GetSysClockFreq+0x34>
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	2b0c      	cmp	r3, #12
 8002dac:	d121      	bne.n	8002df2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d11e      	bne.n	8002df2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002db4:	4b34      	ldr	r3, [pc, #208]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0308 	and.w	r3, r3, #8
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d107      	bne.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002dc0:	4b31      	ldr	r3, [pc, #196]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dc6:	0a1b      	lsrs	r3, r3, #8
 8002dc8:	f003 030f 	and.w	r3, r3, #15
 8002dcc:	61fb      	str	r3, [r7, #28]
 8002dce:	e005      	b.n	8002ddc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002dd0:	4b2d      	ldr	r3, [pc, #180]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	091b      	lsrs	r3, r3, #4
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ddc:	4a2b      	ldr	r2, [pc, #172]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002de4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10d      	bne.n	8002e08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002df0:	e00a      	b.n	8002e08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	2b04      	cmp	r3, #4
 8002df6:	d102      	bne.n	8002dfe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002df8:	4b25      	ldr	r3, [pc, #148]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x110>)
 8002dfa:	61bb      	str	r3, [r7, #24]
 8002dfc:	e004      	b.n	8002e08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d101      	bne.n	8002e08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e04:	4b23      	ldr	r3, [pc, #140]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	2b0c      	cmp	r3, #12
 8002e0c:	d134      	bne.n	8002e78 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e0e:	4b1e      	ldr	r3, [pc, #120]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d003      	beq.n	8002e26 <HAL_RCC_GetSysClockFreq+0xa6>
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	2b03      	cmp	r3, #3
 8002e22:	d003      	beq.n	8002e2c <HAL_RCC_GetSysClockFreq+0xac>
 8002e24:	e005      	b.n	8002e32 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e26:	4b1a      	ldr	r3, [pc, #104]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e28:	617b      	str	r3, [r7, #20]
      break;
 8002e2a:	e005      	b.n	8002e38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e2c:	4b19      	ldr	r3, [pc, #100]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e2e:	617b      	str	r3, [r7, #20]
      break;
 8002e30:	e002      	b.n	8002e38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	617b      	str	r3, [r7, #20]
      break;
 8002e36:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e38:	4b13      	ldr	r3, [pc, #76]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	3301      	adds	r3, #1
 8002e44:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e46:	4b10      	ldr	r3, [pc, #64]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	0a1b      	lsrs	r3, r3, #8
 8002e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	fb03 f202 	mul.w	r2, r3, r2
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e5e:	4b0a      	ldr	r3, [pc, #40]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	0e5b      	lsrs	r3, r3, #25
 8002e64:	f003 0303 	and.w	r3, r3, #3
 8002e68:	3301      	adds	r3, #1
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e76:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e78:	69bb      	ldr	r3, [r7, #24]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3724      	adds	r7, #36	; 0x24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	08009384 	.word	0x08009384
 8002e90:	00f42400 	.word	0x00f42400
 8002e94:	007a1200 	.word	0x007a1200

08002e98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e9c:	4b03      	ldr	r3, [pc, #12]	; (8002eac <HAL_RCC_GetHCLKFreq+0x14>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	20000000 	.word	0x20000000

08002eb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002eb4:	f7ff fff0 	bl	8002e98 <HAL_RCC_GetHCLKFreq>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	0a1b      	lsrs	r3, r3, #8
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	4904      	ldr	r1, [pc, #16]	; (8002ed8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ec6:	5ccb      	ldrb	r3, [r1, r3]
 8002ec8:	f003 031f 	and.w	r3, r3, #31
 8002ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	0800937c 	.word	0x0800937c

08002edc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ee0:	f7ff ffda 	bl	8002e98 <HAL_RCC_GetHCLKFreq>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	0adb      	lsrs	r3, r3, #11
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	4904      	ldr	r1, [pc, #16]	; (8002f04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ef2:	5ccb      	ldrb	r3, [r1, r3]
 8002ef4:	f003 031f 	and.w	r3, r3, #31
 8002ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40021000 	.word	0x40021000
 8002f04:	0800937c 	.word	0x0800937c

08002f08 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	220f      	movs	r2, #15
 8002f16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002f18:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <HAL_RCC_GetClockConfig+0x5c>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f003 0203 	and.w	r2, r3, #3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002f24:	4b0f      	ldr	r3, [pc, #60]	; (8002f64 <HAL_RCC_GetClockConfig+0x5c>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002f30:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <HAL_RCC_GetClockConfig+0x5c>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002f3c:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <HAL_RCC_GetClockConfig+0x5c>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	08db      	lsrs	r3, r3, #3
 8002f42:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002f4a:	4b07      	ldr	r3, [pc, #28]	; (8002f68 <HAL_RCC_GetClockConfig+0x60>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0207 	and.w	r2, r3, #7
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	601a      	str	r2, [r3, #0]
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	40021000 	.word	0x40021000
 8002f68:	40022000 	.word	0x40022000

08002f6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f74:	2300      	movs	r3, #0
 8002f76:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f78:	4b2a      	ldr	r3, [pc, #168]	; (8003024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d003      	beq.n	8002f8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f84:	f7ff f9bc 	bl	8002300 <HAL_PWREx_GetVoltageRange>
 8002f88:	6178      	str	r0, [r7, #20]
 8002f8a:	e014      	b.n	8002fb6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f8c:	4b25      	ldr	r3, [pc, #148]	; (8003024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f90:	4a24      	ldr	r2, [pc, #144]	; (8003024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f96:	6593      	str	r3, [r2, #88]	; 0x58
 8002f98:	4b22      	ldr	r3, [pc, #136]	; (8003024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002fa4:	f7ff f9ac 	bl	8002300 <HAL_PWREx_GetVoltageRange>
 8002fa8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002faa:	4b1e      	ldr	r3, [pc, #120]	; (8003024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fae:	4a1d      	ldr	r2, [pc, #116]	; (8003024 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fb4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fbc:	d10b      	bne.n	8002fd6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b80      	cmp	r3, #128	; 0x80
 8002fc2:	d919      	bls.n	8002ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2ba0      	cmp	r3, #160	; 0xa0
 8002fc8:	d902      	bls.n	8002fd0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fca:	2302      	movs	r3, #2
 8002fcc:	613b      	str	r3, [r7, #16]
 8002fce:	e013      	b.n	8002ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	613b      	str	r3, [r7, #16]
 8002fd4:	e010      	b.n	8002ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b80      	cmp	r3, #128	; 0x80
 8002fda:	d902      	bls.n	8002fe2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002fdc:	2303      	movs	r3, #3
 8002fde:	613b      	str	r3, [r7, #16]
 8002fe0:	e00a      	b.n	8002ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b80      	cmp	r3, #128	; 0x80
 8002fe6:	d102      	bne.n	8002fee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fe8:	2302      	movs	r3, #2
 8002fea:	613b      	str	r3, [r7, #16]
 8002fec:	e004      	b.n	8002ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b70      	cmp	r3, #112	; 0x70
 8002ff2:	d101      	bne.n	8002ff8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f023 0207 	bic.w	r2, r3, #7
 8003000:	4909      	ldr	r1, [pc, #36]	; (8003028 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	4313      	orrs	r3, r2
 8003006:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003008:	4b07      	ldr	r3, [pc, #28]	; (8003028 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0307 	and.w	r3, r3, #7
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	429a      	cmp	r2, r3
 8003014:	d001      	beq.n	800301a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e000      	b.n	800301c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	40021000 	.word	0x40021000
 8003028:	40022000 	.word	0x40022000

0800302c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003034:	2300      	movs	r3, #0
 8003036:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003038:	2300      	movs	r3, #0
 800303a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003044:	2b00      	cmp	r3, #0
 8003046:	d041      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800304c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003050:	d02a      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003052:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003056:	d824      	bhi.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003058:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800305c:	d008      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800305e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003062:	d81e      	bhi.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00a      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003068:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800306c:	d010      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800306e:	e018      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003070:	4b86      	ldr	r3, [pc, #536]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	4a85      	ldr	r2, [pc, #532]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800307a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800307c:	e015      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	3304      	adds	r3, #4
 8003082:	2100      	movs	r1, #0
 8003084:	4618      	mov	r0, r3
 8003086:	f000 facb 	bl	8003620 <RCCEx_PLLSAI1_Config>
 800308a:	4603      	mov	r3, r0
 800308c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800308e:	e00c      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	3320      	adds	r3, #32
 8003094:	2100      	movs	r1, #0
 8003096:	4618      	mov	r0, r3
 8003098:	f000 fbb6 	bl	8003808 <RCCEx_PLLSAI2_Config>
 800309c:	4603      	mov	r3, r0
 800309e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030a0:	e003      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	74fb      	strb	r3, [r7, #19]
      break;
 80030a6:	e000      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80030a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030aa:	7cfb      	ldrb	r3, [r7, #19]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d10b      	bne.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030b0:	4b76      	ldr	r3, [pc, #472]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030be:	4973      	ldr	r1, [pc, #460]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80030c6:	e001      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c8:	7cfb      	ldrb	r3, [r7, #19]
 80030ca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d041      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80030e0:	d02a      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80030e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80030e6:	d824      	bhi.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80030e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030ec:	d008      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80030ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030f2:	d81e      	bhi.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00a      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80030f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030fc:	d010      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80030fe:	e018      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003100:	4b62      	ldr	r3, [pc, #392]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	4a61      	ldr	r2, [pc, #388]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800310a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800310c:	e015      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	3304      	adds	r3, #4
 8003112:	2100      	movs	r1, #0
 8003114:	4618      	mov	r0, r3
 8003116:	f000 fa83 	bl	8003620 <RCCEx_PLLSAI1_Config>
 800311a:	4603      	mov	r3, r0
 800311c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800311e:	e00c      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3320      	adds	r3, #32
 8003124:	2100      	movs	r1, #0
 8003126:	4618      	mov	r0, r3
 8003128:	f000 fb6e 	bl	8003808 <RCCEx_PLLSAI2_Config>
 800312c:	4603      	mov	r3, r0
 800312e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003130:	e003      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	74fb      	strb	r3, [r7, #19]
      break;
 8003136:	e000      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003138:	bf00      	nop
    }

    if(ret == HAL_OK)
 800313a:	7cfb      	ldrb	r3, [r7, #19]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10b      	bne.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003140:	4b52      	ldr	r3, [pc, #328]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003146:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800314e:	494f      	ldr	r1, [pc, #316]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003150:	4313      	orrs	r3, r2
 8003152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003156:	e001      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003158:	7cfb      	ldrb	r3, [r7, #19]
 800315a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 80a0 	beq.w	80032aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800316a:	2300      	movs	r3, #0
 800316c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800316e:	4b47      	ldr	r3, [pc, #284]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800317a:	2301      	movs	r3, #1
 800317c:	e000      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800317e:	2300      	movs	r3, #0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00d      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003184:	4b41      	ldr	r3, [pc, #260]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003188:	4a40      	ldr	r2, [pc, #256]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800318a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800318e:	6593      	str	r3, [r2, #88]	; 0x58
 8003190:	4b3e      	ldr	r3, [pc, #248]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003198:	60bb      	str	r3, [r7, #8]
 800319a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800319c:	2301      	movs	r3, #1
 800319e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031a0:	4b3b      	ldr	r3, [pc, #236]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a3a      	ldr	r2, [pc, #232]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031ac:	f7fe fc84 	bl	8001ab8 <HAL_GetTick>
 80031b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031b2:	e009      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031b4:	f7fe fc80 	bl	8001ab8 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d902      	bls.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	74fb      	strb	r3, [r7, #19]
        break;
 80031c6:	e005      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031c8:	4b31      	ldr	r3, [pc, #196]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0ef      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80031d4:	7cfb      	ldrb	r3, [r7, #19]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d15c      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031da:	4b2c      	ldr	r3, [pc, #176]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d01f      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d019      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031f8:	4b24      	ldr	r3, [pc, #144]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003202:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003204:	4b21      	ldr	r3, [pc, #132]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800320a:	4a20      	ldr	r2, [pc, #128]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800320c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003210:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003214:	4b1d      	ldr	r3, [pc, #116]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321a:	4a1c      	ldr	r2, [pc, #112]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800321c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003220:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003224:	4a19      	ldr	r2, [pc, #100]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d016      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003236:	f7fe fc3f 	bl	8001ab8 <HAL_GetTick>
 800323a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800323c:	e00b      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800323e:	f7fe fc3b 	bl	8001ab8 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	f241 3288 	movw	r2, #5000	; 0x1388
 800324c:	4293      	cmp	r3, r2
 800324e:	d902      	bls.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	74fb      	strb	r3, [r7, #19]
            break;
 8003254:	e006      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003256:	4b0d      	ldr	r3, [pc, #52]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0ec      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003264:	7cfb      	ldrb	r3, [r7, #19]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10c      	bne.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800326a:	4b08      	ldr	r3, [pc, #32]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003270:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800327a:	4904      	ldr	r1, [pc, #16]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800327c:	4313      	orrs	r3, r2
 800327e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003282:	e009      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003284:	7cfb      	ldrb	r3, [r7, #19]
 8003286:	74bb      	strb	r3, [r7, #18]
 8003288:	e006      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800328a:	bf00      	nop
 800328c:	40021000 	.word	0x40021000
 8003290:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003294:	7cfb      	ldrb	r3, [r7, #19]
 8003296:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003298:	7c7b      	ldrb	r3, [r7, #17]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d105      	bne.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800329e:	4b9e      	ldr	r3, [pc, #632]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a2:	4a9d      	ldr	r2, [pc, #628]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032b6:	4b98      	ldr	r3, [pc, #608]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032bc:	f023 0203 	bic.w	r2, r3, #3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c4:	4994      	ldr	r1, [pc, #592]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00a      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032d8:	4b8f      	ldr	r3, [pc, #572]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032de:	f023 020c 	bic.w	r2, r3, #12
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e6:	498c      	ldr	r1, [pc, #560]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0304 	and.w	r3, r3, #4
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032fa:	4b87      	ldr	r3, [pc, #540]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003300:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003308:	4983      	ldr	r1, [pc, #524]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0308 	and.w	r3, r3, #8
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00a      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800331c:	4b7e      	ldr	r3, [pc, #504]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800331e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003322:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332a:	497b      	ldr	r1, [pc, #492]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332c:	4313      	orrs	r3, r2
 800332e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0310 	and.w	r3, r3, #16
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00a      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800333e:	4b76      	ldr	r3, [pc, #472]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003344:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800334c:	4972      	ldr	r1, [pc, #456]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800334e:	4313      	orrs	r3, r2
 8003350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0320 	and.w	r3, r3, #32
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00a      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003360:	4b6d      	ldr	r3, [pc, #436]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003366:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800336e:	496a      	ldr	r1, [pc, #424]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003370:	4313      	orrs	r3, r2
 8003372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00a      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003382:	4b65      	ldr	r3, [pc, #404]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003388:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003390:	4961      	ldr	r1, [pc, #388]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003392:	4313      	orrs	r3, r2
 8003394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00a      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033a4:	4b5c      	ldr	r3, [pc, #368]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033b2:	4959      	ldr	r1, [pc, #356]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00a      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033c6:	4b54      	ldr	r3, [pc, #336]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033d4:	4950      	ldr	r1, [pc, #320]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00a      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033e8:	4b4b      	ldr	r3, [pc, #300]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f6:	4948      	ldr	r1, [pc, #288]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00a      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800340a:	4b43      	ldr	r3, [pc, #268]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003410:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003418:	493f      	ldr	r1, [pc, #252]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800341a:	4313      	orrs	r3, r2
 800341c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d028      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800342c:	4b3a      	ldr	r3, [pc, #232]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800342e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003432:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800343a:	4937      	ldr	r1, [pc, #220]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343c:	4313      	orrs	r3, r2
 800343e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003446:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800344a:	d106      	bne.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800344c:	4b32      	ldr	r3, [pc, #200]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	4a31      	ldr	r2, [pc, #196]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003452:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003456:	60d3      	str	r3, [r2, #12]
 8003458:	e011      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800345e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003462:	d10c      	bne.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3304      	adds	r3, #4
 8003468:	2101      	movs	r1, #1
 800346a:	4618      	mov	r0, r3
 800346c:	f000 f8d8 	bl	8003620 <RCCEx_PLLSAI1_Config>
 8003470:	4603      	mov	r3, r0
 8003472:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003474:	7cfb      	ldrb	r3, [r7, #19]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800347a:	7cfb      	ldrb	r3, [r7, #19]
 800347c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d028      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800348a:	4b23      	ldr	r3, [pc, #140]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003490:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003498:	491f      	ldr	r1, [pc, #124]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349a:	4313      	orrs	r3, r2
 800349c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034a8:	d106      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034aa:	4b1b      	ldr	r3, [pc, #108]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	4a1a      	ldr	r2, [pc, #104]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034b4:	60d3      	str	r3, [r2, #12]
 80034b6:	e011      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034c0:	d10c      	bne.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	3304      	adds	r3, #4
 80034c6:	2101      	movs	r1, #1
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 f8a9 	bl	8003620 <RCCEx_PLLSAI1_Config>
 80034ce:	4603      	mov	r3, r0
 80034d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034d2:	7cfb      	ldrb	r3, [r7, #19]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80034d8:	7cfb      	ldrb	r3, [r7, #19]
 80034da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d02b      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034e8:	4b0b      	ldr	r3, [pc, #44]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034f6:	4908      	ldr	r1, [pc, #32]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003502:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003506:	d109      	bne.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003508:	4b03      	ldr	r3, [pc, #12]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	4a02      	ldr	r2, [pc, #8]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003512:	60d3      	str	r3, [r2, #12]
 8003514:	e014      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003516:	bf00      	nop
 8003518:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003520:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003524:	d10c      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3304      	adds	r3, #4
 800352a:	2101      	movs	r1, #1
 800352c:	4618      	mov	r0, r3
 800352e:	f000 f877 	bl	8003620 <RCCEx_PLLSAI1_Config>
 8003532:	4603      	mov	r3, r0
 8003534:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003536:	7cfb      	ldrb	r3, [r7, #19]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800353c:	7cfb      	ldrb	r3, [r7, #19]
 800353e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d02f      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800354c:	4b2b      	ldr	r3, [pc, #172]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800354e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003552:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800355a:	4928      	ldr	r1, [pc, #160]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800355c:	4313      	orrs	r3, r2
 800355e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003566:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800356a:	d10d      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3304      	adds	r3, #4
 8003570:	2102      	movs	r1, #2
 8003572:	4618      	mov	r0, r3
 8003574:	f000 f854 	bl	8003620 <RCCEx_PLLSAI1_Config>
 8003578:	4603      	mov	r3, r0
 800357a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800357c:	7cfb      	ldrb	r3, [r7, #19]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d014      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003582:	7cfb      	ldrb	r3, [r7, #19]
 8003584:	74bb      	strb	r3, [r7, #18]
 8003586:	e011      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800358c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003590:	d10c      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	3320      	adds	r3, #32
 8003596:	2102      	movs	r1, #2
 8003598:	4618      	mov	r0, r3
 800359a:	f000 f935 	bl	8003808 <RCCEx_PLLSAI2_Config>
 800359e:	4603      	mov	r3, r0
 80035a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035a2:	7cfb      	ldrb	r3, [r7, #19]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80035a8:	7cfb      	ldrb	r3, [r7, #19]
 80035aa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00a      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80035b8:	4b10      	ldr	r3, [pc, #64]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035be:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035c6:	490d      	ldr	r1, [pc, #52]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00b      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035da:	4b08      	ldr	r3, [pc, #32]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035ea:	4904      	ldr	r1, [pc, #16]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80035f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3718      	adds	r7, #24
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40021000 	.word	0x40021000

08003600 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003604:	4b05      	ldr	r3, [pc, #20]	; (800361c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a04      	ldr	r2, [pc, #16]	; (800361c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800360a:	f043 0304 	orr.w	r3, r3, #4
 800360e:	6013      	str	r3, [r2, #0]
}
 8003610:	bf00      	nop
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	40021000 	.word	0x40021000

08003620 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800362a:	2300      	movs	r3, #0
 800362c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800362e:	4b75      	ldr	r3, [pc, #468]	; (8003804 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d018      	beq.n	800366c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800363a:	4b72      	ldr	r3, [pc, #456]	; (8003804 <RCCEx_PLLSAI1_Config+0x1e4>)
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	f003 0203 	and.w	r2, r3, #3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	429a      	cmp	r2, r3
 8003648:	d10d      	bne.n	8003666 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
       ||
 800364e:	2b00      	cmp	r3, #0
 8003650:	d009      	beq.n	8003666 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003652:	4b6c      	ldr	r3, [pc, #432]	; (8003804 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	091b      	lsrs	r3, r3, #4
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	1c5a      	adds	r2, r3, #1
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
       ||
 8003662:	429a      	cmp	r2, r3
 8003664:	d047      	beq.n	80036f6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	73fb      	strb	r3, [r7, #15]
 800366a:	e044      	b.n	80036f6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b03      	cmp	r3, #3
 8003672:	d018      	beq.n	80036a6 <RCCEx_PLLSAI1_Config+0x86>
 8003674:	2b03      	cmp	r3, #3
 8003676:	d825      	bhi.n	80036c4 <RCCEx_PLLSAI1_Config+0xa4>
 8003678:	2b01      	cmp	r3, #1
 800367a:	d002      	beq.n	8003682 <RCCEx_PLLSAI1_Config+0x62>
 800367c:	2b02      	cmp	r3, #2
 800367e:	d009      	beq.n	8003694 <RCCEx_PLLSAI1_Config+0x74>
 8003680:	e020      	b.n	80036c4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003682:	4b60      	ldr	r3, [pc, #384]	; (8003804 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d11d      	bne.n	80036ca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003692:	e01a      	b.n	80036ca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003694:	4b5b      	ldr	r3, [pc, #364]	; (8003804 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800369c:	2b00      	cmp	r3, #0
 800369e:	d116      	bne.n	80036ce <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036a4:	e013      	b.n	80036ce <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036a6:	4b57      	ldr	r3, [pc, #348]	; (8003804 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10f      	bne.n	80036d2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036b2:	4b54      	ldr	r3, [pc, #336]	; (8003804 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d109      	bne.n	80036d2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036c2:	e006      	b.n	80036d2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	73fb      	strb	r3, [r7, #15]
      break;
 80036c8:	e004      	b.n	80036d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036ca:	bf00      	nop
 80036cc:	e002      	b.n	80036d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036ce:	bf00      	nop
 80036d0:	e000      	b.n	80036d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10d      	bne.n	80036f6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036da:	4b4a      	ldr	r3, [pc, #296]	; (8003804 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6819      	ldr	r1, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	3b01      	subs	r3, #1
 80036ec:	011b      	lsls	r3, r3, #4
 80036ee:	430b      	orrs	r3, r1
 80036f0:	4944      	ldr	r1, [pc, #272]	; (8003804 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036f6:	7bfb      	ldrb	r3, [r7, #15]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d17d      	bne.n	80037f8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80036fc:	4b41      	ldr	r3, [pc, #260]	; (8003804 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a40      	ldr	r2, [pc, #256]	; (8003804 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003702:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003706:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003708:	f7fe f9d6 	bl	8001ab8 <HAL_GetTick>
 800370c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800370e:	e009      	b.n	8003724 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003710:	f7fe f9d2 	bl	8001ab8 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d902      	bls.n	8003724 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	73fb      	strb	r3, [r7, #15]
        break;
 8003722:	e005      	b.n	8003730 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003724:	4b37      	ldr	r3, [pc, #220]	; (8003804 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1ef      	bne.n	8003710 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003730:	7bfb      	ldrb	r3, [r7, #15]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d160      	bne.n	80037f8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d111      	bne.n	8003760 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800373c:	4b31      	ldr	r3, [pc, #196]	; (8003804 <RCCEx_PLLSAI1_Config+0x1e4>)
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6892      	ldr	r2, [r2, #8]
 800374c:	0211      	lsls	r1, r2, #8
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	68d2      	ldr	r2, [r2, #12]
 8003752:	0912      	lsrs	r2, r2, #4
 8003754:	0452      	lsls	r2, r2, #17
 8003756:	430a      	orrs	r2, r1
 8003758:	492a      	ldr	r1, [pc, #168]	; (8003804 <RCCEx_PLLSAI1_Config+0x1e4>)
 800375a:	4313      	orrs	r3, r2
 800375c:	610b      	str	r3, [r1, #16]
 800375e:	e027      	b.n	80037b0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d112      	bne.n	800378c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003766:	4b27      	ldr	r3, [pc, #156]	; (8003804 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800376e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6892      	ldr	r2, [r2, #8]
 8003776:	0211      	lsls	r1, r2, #8
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6912      	ldr	r2, [r2, #16]
 800377c:	0852      	lsrs	r2, r2, #1
 800377e:	3a01      	subs	r2, #1
 8003780:	0552      	lsls	r2, r2, #21
 8003782:	430a      	orrs	r2, r1
 8003784:	491f      	ldr	r1, [pc, #124]	; (8003804 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003786:	4313      	orrs	r3, r2
 8003788:	610b      	str	r3, [r1, #16]
 800378a:	e011      	b.n	80037b0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800378c:	4b1d      	ldr	r3, [pc, #116]	; (8003804 <RCCEx_PLLSAI1_Config+0x1e4>)
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003794:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6892      	ldr	r2, [r2, #8]
 800379c:	0211      	lsls	r1, r2, #8
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6952      	ldr	r2, [r2, #20]
 80037a2:	0852      	lsrs	r2, r2, #1
 80037a4:	3a01      	subs	r2, #1
 80037a6:	0652      	lsls	r2, r2, #25
 80037a8:	430a      	orrs	r2, r1
 80037aa:	4916      	ldr	r1, [pc, #88]	; (8003804 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80037b0:	4b14      	ldr	r3, [pc, #80]	; (8003804 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a13      	ldr	r2, [pc, #76]	; (8003804 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037bc:	f7fe f97c 	bl	8001ab8 <HAL_GetTick>
 80037c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037c2:	e009      	b.n	80037d8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037c4:	f7fe f978 	bl	8001ab8 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d902      	bls.n	80037d8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	73fb      	strb	r3, [r7, #15]
          break;
 80037d6:	e005      	b.n	80037e4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037d8:	4b0a      	ldr	r3, [pc, #40]	; (8003804 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0ef      	beq.n	80037c4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80037e4:	7bfb      	ldrb	r3, [r7, #15]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d106      	bne.n	80037f8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80037ea:	4b06      	ldr	r3, [pc, #24]	; (8003804 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ec:	691a      	ldr	r2, [r3, #16]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	4904      	ldr	r1, [pc, #16]	; (8003804 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	40021000 	.word	0x40021000

08003808 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003812:	2300      	movs	r3, #0
 8003814:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003816:	4b6a      	ldr	r3, [pc, #424]	; (80039c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	f003 0303 	and.w	r3, r3, #3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d018      	beq.n	8003854 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003822:	4b67      	ldr	r3, [pc, #412]	; (80039c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	f003 0203 	and.w	r2, r3, #3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	429a      	cmp	r2, r3
 8003830:	d10d      	bne.n	800384e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
       ||
 8003836:	2b00      	cmp	r3, #0
 8003838:	d009      	beq.n	800384e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800383a:	4b61      	ldr	r3, [pc, #388]	; (80039c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	091b      	lsrs	r3, r3, #4
 8003840:	f003 0307 	and.w	r3, r3, #7
 8003844:	1c5a      	adds	r2, r3, #1
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
       ||
 800384a:	429a      	cmp	r2, r3
 800384c:	d047      	beq.n	80038de <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	73fb      	strb	r3, [r7, #15]
 8003852:	e044      	b.n	80038de <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2b03      	cmp	r3, #3
 800385a:	d018      	beq.n	800388e <RCCEx_PLLSAI2_Config+0x86>
 800385c:	2b03      	cmp	r3, #3
 800385e:	d825      	bhi.n	80038ac <RCCEx_PLLSAI2_Config+0xa4>
 8003860:	2b01      	cmp	r3, #1
 8003862:	d002      	beq.n	800386a <RCCEx_PLLSAI2_Config+0x62>
 8003864:	2b02      	cmp	r3, #2
 8003866:	d009      	beq.n	800387c <RCCEx_PLLSAI2_Config+0x74>
 8003868:	e020      	b.n	80038ac <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800386a:	4b55      	ldr	r3, [pc, #340]	; (80039c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d11d      	bne.n	80038b2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800387a:	e01a      	b.n	80038b2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800387c:	4b50      	ldr	r3, [pc, #320]	; (80039c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003884:	2b00      	cmp	r3, #0
 8003886:	d116      	bne.n	80038b6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800388c:	e013      	b.n	80038b6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800388e:	4b4c      	ldr	r3, [pc, #304]	; (80039c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10f      	bne.n	80038ba <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800389a:	4b49      	ldr	r3, [pc, #292]	; (80039c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d109      	bne.n	80038ba <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038aa:	e006      	b.n	80038ba <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	73fb      	strb	r3, [r7, #15]
      break;
 80038b0:	e004      	b.n	80038bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038b2:	bf00      	nop
 80038b4:	e002      	b.n	80038bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038b6:	bf00      	nop
 80038b8:	e000      	b.n	80038bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80038bc:	7bfb      	ldrb	r3, [r7, #15]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10d      	bne.n	80038de <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038c2:	4b3f      	ldr	r3, [pc, #252]	; (80039c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6819      	ldr	r1, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	011b      	lsls	r3, r3, #4
 80038d6:	430b      	orrs	r3, r1
 80038d8:	4939      	ldr	r1, [pc, #228]	; (80039c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038de:	7bfb      	ldrb	r3, [r7, #15]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d167      	bne.n	80039b4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80038e4:	4b36      	ldr	r3, [pc, #216]	; (80039c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a35      	ldr	r2, [pc, #212]	; (80039c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038f0:	f7fe f8e2 	bl	8001ab8 <HAL_GetTick>
 80038f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038f6:	e009      	b.n	800390c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038f8:	f7fe f8de 	bl	8001ab8 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d902      	bls.n	800390c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	73fb      	strb	r3, [r7, #15]
        break;
 800390a:	e005      	b.n	8003918 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800390c:	4b2c      	ldr	r3, [pc, #176]	; (80039c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1ef      	bne.n	80038f8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003918:	7bfb      	ldrb	r3, [r7, #15]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d14a      	bne.n	80039b4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d111      	bne.n	8003948 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003924:	4b26      	ldr	r3, [pc, #152]	; (80039c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800392c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6892      	ldr	r2, [r2, #8]
 8003934:	0211      	lsls	r1, r2, #8
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	68d2      	ldr	r2, [r2, #12]
 800393a:	0912      	lsrs	r2, r2, #4
 800393c:	0452      	lsls	r2, r2, #17
 800393e:	430a      	orrs	r2, r1
 8003940:	491f      	ldr	r1, [pc, #124]	; (80039c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003942:	4313      	orrs	r3, r2
 8003944:	614b      	str	r3, [r1, #20]
 8003946:	e011      	b.n	800396c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003948:	4b1d      	ldr	r3, [pc, #116]	; (80039c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003950:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6892      	ldr	r2, [r2, #8]
 8003958:	0211      	lsls	r1, r2, #8
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6912      	ldr	r2, [r2, #16]
 800395e:	0852      	lsrs	r2, r2, #1
 8003960:	3a01      	subs	r2, #1
 8003962:	0652      	lsls	r2, r2, #25
 8003964:	430a      	orrs	r2, r1
 8003966:	4916      	ldr	r1, [pc, #88]	; (80039c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003968:	4313      	orrs	r3, r2
 800396a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800396c:	4b14      	ldr	r3, [pc, #80]	; (80039c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a13      	ldr	r2, [pc, #76]	; (80039c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003976:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003978:	f7fe f89e 	bl	8001ab8 <HAL_GetTick>
 800397c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800397e:	e009      	b.n	8003994 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003980:	f7fe f89a 	bl	8001ab8 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d902      	bls.n	8003994 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	73fb      	strb	r3, [r7, #15]
          break;
 8003992:	e005      	b.n	80039a0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003994:	4b0a      	ldr	r3, [pc, #40]	; (80039c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0ef      	beq.n	8003980 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d106      	bne.n	80039b4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80039a6:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039a8:	695a      	ldr	r2, [r3, #20]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	4904      	ldr	r1, [pc, #16]	; (80039c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80039b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	40021000 	.word	0x40021000

080039c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e049      	b.n	8003a6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d106      	bne.n	80039f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f841 	bl	8003a72 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3304      	adds	r3, #4
 8003a00:	4619      	mov	r1, r3
 8003a02:	4610      	mov	r0, r2
 8003a04:	f000 f9f8 	bl	8003df8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
	...

08003a88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d001      	beq.n	8003aa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e04f      	b.n	8003b40 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0201 	orr.w	r2, r2, #1
 8003ab6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a23      	ldr	r2, [pc, #140]	; (8003b4c <HAL_TIM_Base_Start_IT+0xc4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d01d      	beq.n	8003afe <HAL_TIM_Base_Start_IT+0x76>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aca:	d018      	beq.n	8003afe <HAL_TIM_Base_Start_IT+0x76>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a1f      	ldr	r2, [pc, #124]	; (8003b50 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d013      	beq.n	8003afe <HAL_TIM_Base_Start_IT+0x76>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a1e      	ldr	r2, [pc, #120]	; (8003b54 <HAL_TIM_Base_Start_IT+0xcc>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d00e      	beq.n	8003afe <HAL_TIM_Base_Start_IT+0x76>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a1c      	ldr	r2, [pc, #112]	; (8003b58 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d009      	beq.n	8003afe <HAL_TIM_Base_Start_IT+0x76>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a1b      	ldr	r2, [pc, #108]	; (8003b5c <HAL_TIM_Base_Start_IT+0xd4>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d004      	beq.n	8003afe <HAL_TIM_Base_Start_IT+0x76>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a19      	ldr	r2, [pc, #100]	; (8003b60 <HAL_TIM_Base_Start_IT+0xd8>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d115      	bne.n	8003b2a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	4b17      	ldr	r3, [pc, #92]	; (8003b64 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b06:	4013      	ands	r3, r2
 8003b08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2b06      	cmp	r3, #6
 8003b0e:	d015      	beq.n	8003b3c <HAL_TIM_Base_Start_IT+0xb4>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b16:	d011      	beq.n	8003b3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0201 	orr.w	r2, r2, #1
 8003b26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b28:	e008      	b.n	8003b3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f042 0201 	orr.w	r2, r2, #1
 8003b38:	601a      	str	r2, [r3, #0]
 8003b3a:	e000      	b.n	8003b3e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3714      	adds	r7, #20
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr
 8003b4c:	40012c00 	.word	0x40012c00
 8003b50:	40000400 	.word	0x40000400
 8003b54:	40000800 	.word	0x40000800
 8003b58:	40000c00 	.word	0x40000c00
 8003b5c:	40013400 	.word	0x40013400
 8003b60:	40014000 	.word	0x40014000
 8003b64:	00010007 	.word	0x00010007

08003b68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d122      	bne.n	8003bc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d11b      	bne.n	8003bc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f06f 0202 	mvn.w	r2, #2
 8003b94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f905 	bl	8003dba <HAL_TIM_IC_CaptureCallback>
 8003bb0:	e005      	b.n	8003bbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f8f7 	bl	8003da6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 f908 	bl	8003dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	f003 0304 	and.w	r3, r3, #4
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d122      	bne.n	8003c18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b04      	cmp	r3, #4
 8003bde:	d11b      	bne.n	8003c18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f06f 0204 	mvn.w	r2, #4
 8003be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2202      	movs	r2, #2
 8003bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f8db 	bl	8003dba <HAL_TIM_IC_CaptureCallback>
 8003c04:	e005      	b.n	8003c12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f8cd 	bl	8003da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f8de 	bl	8003dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b08      	cmp	r3, #8
 8003c24:	d122      	bne.n	8003c6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f003 0308 	and.w	r3, r3, #8
 8003c30:	2b08      	cmp	r3, #8
 8003c32:	d11b      	bne.n	8003c6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f06f 0208 	mvn.w	r2, #8
 8003c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2204      	movs	r2, #4
 8003c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f8b1 	bl	8003dba <HAL_TIM_IC_CaptureCallback>
 8003c58:	e005      	b.n	8003c66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f8a3 	bl	8003da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f8b4 	bl	8003dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	f003 0310 	and.w	r3, r3, #16
 8003c76:	2b10      	cmp	r3, #16
 8003c78:	d122      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	f003 0310 	and.w	r3, r3, #16
 8003c84:	2b10      	cmp	r3, #16
 8003c86:	d11b      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f06f 0210 	mvn.w	r2, #16
 8003c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2208      	movs	r2, #8
 8003c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f887 	bl	8003dba <HAL_TIM_IC_CaptureCallback>
 8003cac:	e005      	b.n	8003cba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f879 	bl	8003da6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f88a 	bl	8003dce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d10e      	bne.n	8003cec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d107      	bne.n	8003cec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f06f 0201 	mvn.w	r2, #1
 8003ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7fd fb9a 	bl	8001420 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf6:	2b80      	cmp	r3, #128	; 0x80
 8003cf8:	d10e      	bne.n	8003d18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d04:	2b80      	cmp	r3, #128	; 0x80
 8003d06:	d107      	bne.n	8003d18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f914 	bl	8003f40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d26:	d10e      	bne.n	8003d46 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d32:	2b80      	cmp	r3, #128	; 0x80
 8003d34:	d107      	bne.n	8003d46 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003d3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 f907 	bl	8003f54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d50:	2b40      	cmp	r3, #64	; 0x40
 8003d52:	d10e      	bne.n	8003d72 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d5e:	2b40      	cmp	r3, #64	; 0x40
 8003d60:	d107      	bne.n	8003d72 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 f838 	bl	8003de2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	f003 0320 	and.w	r3, r3, #32
 8003d7c:	2b20      	cmp	r3, #32
 8003d7e:	d10e      	bne.n	8003d9e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	f003 0320 	and.w	r3, r3, #32
 8003d8a:	2b20      	cmp	r3, #32
 8003d8c:	d107      	bne.n	8003d9e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f06f 0220 	mvn.w	r2, #32
 8003d96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f8c7 	bl	8003f2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d9e:	bf00      	nop
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b083      	sub	sp, #12
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dae:	bf00      	nop
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b083      	sub	sp, #12
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dea:	bf00      	nop
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
	...

08003df8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a40      	ldr	r2, [pc, #256]	; (8003f0c <TIM_Base_SetConfig+0x114>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d013      	beq.n	8003e38 <TIM_Base_SetConfig+0x40>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e16:	d00f      	beq.n	8003e38 <TIM_Base_SetConfig+0x40>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a3d      	ldr	r2, [pc, #244]	; (8003f10 <TIM_Base_SetConfig+0x118>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d00b      	beq.n	8003e38 <TIM_Base_SetConfig+0x40>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a3c      	ldr	r2, [pc, #240]	; (8003f14 <TIM_Base_SetConfig+0x11c>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d007      	beq.n	8003e38 <TIM_Base_SetConfig+0x40>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a3b      	ldr	r2, [pc, #236]	; (8003f18 <TIM_Base_SetConfig+0x120>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d003      	beq.n	8003e38 <TIM_Base_SetConfig+0x40>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a3a      	ldr	r2, [pc, #232]	; (8003f1c <TIM_Base_SetConfig+0x124>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d108      	bne.n	8003e4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a2f      	ldr	r2, [pc, #188]	; (8003f0c <TIM_Base_SetConfig+0x114>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d01f      	beq.n	8003e92 <TIM_Base_SetConfig+0x9a>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e58:	d01b      	beq.n	8003e92 <TIM_Base_SetConfig+0x9a>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a2c      	ldr	r2, [pc, #176]	; (8003f10 <TIM_Base_SetConfig+0x118>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d017      	beq.n	8003e92 <TIM_Base_SetConfig+0x9a>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a2b      	ldr	r2, [pc, #172]	; (8003f14 <TIM_Base_SetConfig+0x11c>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d013      	beq.n	8003e92 <TIM_Base_SetConfig+0x9a>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a2a      	ldr	r2, [pc, #168]	; (8003f18 <TIM_Base_SetConfig+0x120>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d00f      	beq.n	8003e92 <TIM_Base_SetConfig+0x9a>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a29      	ldr	r2, [pc, #164]	; (8003f1c <TIM_Base_SetConfig+0x124>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d00b      	beq.n	8003e92 <TIM_Base_SetConfig+0x9a>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a28      	ldr	r2, [pc, #160]	; (8003f20 <TIM_Base_SetConfig+0x128>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d007      	beq.n	8003e92 <TIM_Base_SetConfig+0x9a>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a27      	ldr	r2, [pc, #156]	; (8003f24 <TIM_Base_SetConfig+0x12c>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d003      	beq.n	8003e92 <TIM_Base_SetConfig+0x9a>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a26      	ldr	r2, [pc, #152]	; (8003f28 <TIM_Base_SetConfig+0x130>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d108      	bne.n	8003ea4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a10      	ldr	r2, [pc, #64]	; (8003f0c <TIM_Base_SetConfig+0x114>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d00f      	beq.n	8003ef0 <TIM_Base_SetConfig+0xf8>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a12      	ldr	r2, [pc, #72]	; (8003f1c <TIM_Base_SetConfig+0x124>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d00b      	beq.n	8003ef0 <TIM_Base_SetConfig+0xf8>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a11      	ldr	r2, [pc, #68]	; (8003f20 <TIM_Base_SetConfig+0x128>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d007      	beq.n	8003ef0 <TIM_Base_SetConfig+0xf8>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a10      	ldr	r2, [pc, #64]	; (8003f24 <TIM_Base_SetConfig+0x12c>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d003      	beq.n	8003ef0 <TIM_Base_SetConfig+0xf8>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a0f      	ldr	r2, [pc, #60]	; (8003f28 <TIM_Base_SetConfig+0x130>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d103      	bne.n	8003ef8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	691a      	ldr	r2, [r3, #16]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	615a      	str	r2, [r3, #20]
}
 8003efe:	bf00      	nop
 8003f00:	3714      	adds	r7, #20
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	40012c00 	.word	0x40012c00
 8003f10:	40000400 	.word	0x40000400
 8003f14:	40000800 	.word	0x40000800
 8003f18:	40000c00 	.word	0x40000c00
 8003f1c:	40013400 	.word	0x40013400
 8003f20:	40014000 	.word	0x40014000
 8003f24:	40014400 	.word	0x40014400
 8003f28:	40014800 	.word	0x40014800

08003f2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e040      	b.n	8003ffc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d106      	bne.n	8003f90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7fd fb34 	bl	80015f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2224      	movs	r2, #36	; 0x24
 8003f94:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0201 	bic.w	r2, r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f8c0 	bl	800412c <UART_SetConfig>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d101      	bne.n	8003fb6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e022      	b.n	8003ffc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d002      	beq.n	8003fc4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 fb6c 	bl	800469c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689a      	ldr	r2, [r3, #8]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fe2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0201 	orr.w	r2, r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 fbf3 	bl	80047e0 <UART_CheckIdleState>
 8003ffa:	4603      	mov	r3, r0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b08a      	sub	sp, #40	; 0x28
 8004008:	af02      	add	r7, sp, #8
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	603b      	str	r3, [r7, #0]
 8004010:	4613      	mov	r3, r2
 8004012:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004018:	2b20      	cmp	r3, #32
 800401a:	f040 8082 	bne.w	8004122 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d002      	beq.n	800402a <HAL_UART_Transmit+0x26>
 8004024:	88fb      	ldrh	r3, [r7, #6]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e07a      	b.n	8004124 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004034:	2b01      	cmp	r3, #1
 8004036:	d101      	bne.n	800403c <HAL_UART_Transmit+0x38>
 8004038:	2302      	movs	r3, #2
 800403a:	e073      	b.n	8004124 <HAL_UART_Transmit+0x120>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2221      	movs	r2, #33	; 0x21
 8004050:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004052:	f7fd fd31 	bl	8001ab8 <HAL_GetTick>
 8004056:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	88fa      	ldrh	r2, [r7, #6]
 800405c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	88fa      	ldrh	r2, [r7, #6]
 8004064:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004070:	d108      	bne.n	8004084 <HAL_UART_Transmit+0x80>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d104      	bne.n	8004084 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800407a:	2300      	movs	r3, #0
 800407c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	61bb      	str	r3, [r7, #24]
 8004082:	e003      	b.n	800408c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004088:	2300      	movs	r3, #0
 800408a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004094:	e02d      	b.n	80040f2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	2200      	movs	r2, #0
 800409e:	2180      	movs	r1, #128	; 0x80
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 fbe6 	bl	8004872 <UART_WaitOnFlagUntilTimeout>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e039      	b.n	8004124 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10b      	bne.n	80040ce <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	881a      	ldrh	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040c2:	b292      	uxth	r2, r2
 80040c4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	3302      	adds	r3, #2
 80040ca:	61bb      	str	r3, [r7, #24]
 80040cc:	e008      	b.n	80040e0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	781a      	ldrb	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	b292      	uxth	r2, r2
 80040d8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	3301      	adds	r3, #1
 80040de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1cb      	bne.n	8004096 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	2200      	movs	r2, #0
 8004106:	2140      	movs	r1, #64	; 0x40
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f000 fbb2 	bl	8004872 <UART_WaitOnFlagUntilTimeout>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e005      	b.n	8004124 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2220      	movs	r2, #32
 800411c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800411e:	2300      	movs	r3, #0
 8004120:	e000      	b.n	8004124 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004122:	2302      	movs	r3, #2
  }
}
 8004124:	4618      	mov	r0, r3
 8004126:	3720      	adds	r7, #32
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800412c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004130:	b08a      	sub	sp, #40	; 0x28
 8004132:	af00      	add	r7, sp, #0
 8004134:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004136:	2300      	movs	r3, #0
 8004138:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	431a      	orrs	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	431a      	orrs	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	4313      	orrs	r3, r2
 8004152:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	4ba4      	ldr	r3, [pc, #656]	; (80043ec <UART_SetConfig+0x2c0>)
 800415c:	4013      	ands	r3, r2
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	6812      	ldr	r2, [r2, #0]
 8004162:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004164:	430b      	orrs	r3, r1
 8004166:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	68da      	ldr	r2, [r3, #12]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a99      	ldr	r2, [pc, #612]	; (80043f0 <UART_SetConfig+0x2c4>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d004      	beq.n	8004198 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004194:	4313      	orrs	r3, r2
 8004196:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a8:	430a      	orrs	r2, r1
 80041aa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a90      	ldr	r2, [pc, #576]	; (80043f4 <UART_SetConfig+0x2c8>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d126      	bne.n	8004204 <UART_SetConfig+0xd8>
 80041b6:	4b90      	ldr	r3, [pc, #576]	; (80043f8 <UART_SetConfig+0x2cc>)
 80041b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041bc:	f003 0303 	and.w	r3, r3, #3
 80041c0:	2b03      	cmp	r3, #3
 80041c2:	d81b      	bhi.n	80041fc <UART_SetConfig+0xd0>
 80041c4:	a201      	add	r2, pc, #4	; (adr r2, 80041cc <UART_SetConfig+0xa0>)
 80041c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ca:	bf00      	nop
 80041cc:	080041dd 	.word	0x080041dd
 80041d0:	080041ed 	.word	0x080041ed
 80041d4:	080041e5 	.word	0x080041e5
 80041d8:	080041f5 	.word	0x080041f5
 80041dc:	2301      	movs	r3, #1
 80041de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041e2:	e116      	b.n	8004412 <UART_SetConfig+0x2e6>
 80041e4:	2302      	movs	r3, #2
 80041e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ea:	e112      	b.n	8004412 <UART_SetConfig+0x2e6>
 80041ec:	2304      	movs	r3, #4
 80041ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041f2:	e10e      	b.n	8004412 <UART_SetConfig+0x2e6>
 80041f4:	2308      	movs	r3, #8
 80041f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041fa:	e10a      	b.n	8004412 <UART_SetConfig+0x2e6>
 80041fc:	2310      	movs	r3, #16
 80041fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004202:	e106      	b.n	8004412 <UART_SetConfig+0x2e6>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a7c      	ldr	r2, [pc, #496]	; (80043fc <UART_SetConfig+0x2d0>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d138      	bne.n	8004280 <UART_SetConfig+0x154>
 800420e:	4b7a      	ldr	r3, [pc, #488]	; (80043f8 <UART_SetConfig+0x2cc>)
 8004210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004214:	f003 030c 	and.w	r3, r3, #12
 8004218:	2b0c      	cmp	r3, #12
 800421a:	d82d      	bhi.n	8004278 <UART_SetConfig+0x14c>
 800421c:	a201      	add	r2, pc, #4	; (adr r2, 8004224 <UART_SetConfig+0xf8>)
 800421e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004222:	bf00      	nop
 8004224:	08004259 	.word	0x08004259
 8004228:	08004279 	.word	0x08004279
 800422c:	08004279 	.word	0x08004279
 8004230:	08004279 	.word	0x08004279
 8004234:	08004269 	.word	0x08004269
 8004238:	08004279 	.word	0x08004279
 800423c:	08004279 	.word	0x08004279
 8004240:	08004279 	.word	0x08004279
 8004244:	08004261 	.word	0x08004261
 8004248:	08004279 	.word	0x08004279
 800424c:	08004279 	.word	0x08004279
 8004250:	08004279 	.word	0x08004279
 8004254:	08004271 	.word	0x08004271
 8004258:	2300      	movs	r3, #0
 800425a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800425e:	e0d8      	b.n	8004412 <UART_SetConfig+0x2e6>
 8004260:	2302      	movs	r3, #2
 8004262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004266:	e0d4      	b.n	8004412 <UART_SetConfig+0x2e6>
 8004268:	2304      	movs	r3, #4
 800426a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800426e:	e0d0      	b.n	8004412 <UART_SetConfig+0x2e6>
 8004270:	2308      	movs	r3, #8
 8004272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004276:	e0cc      	b.n	8004412 <UART_SetConfig+0x2e6>
 8004278:	2310      	movs	r3, #16
 800427a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800427e:	e0c8      	b.n	8004412 <UART_SetConfig+0x2e6>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a5e      	ldr	r2, [pc, #376]	; (8004400 <UART_SetConfig+0x2d4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d125      	bne.n	80042d6 <UART_SetConfig+0x1aa>
 800428a:	4b5b      	ldr	r3, [pc, #364]	; (80043f8 <UART_SetConfig+0x2cc>)
 800428c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004290:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004294:	2b30      	cmp	r3, #48	; 0x30
 8004296:	d016      	beq.n	80042c6 <UART_SetConfig+0x19a>
 8004298:	2b30      	cmp	r3, #48	; 0x30
 800429a:	d818      	bhi.n	80042ce <UART_SetConfig+0x1a2>
 800429c:	2b20      	cmp	r3, #32
 800429e:	d00a      	beq.n	80042b6 <UART_SetConfig+0x18a>
 80042a0:	2b20      	cmp	r3, #32
 80042a2:	d814      	bhi.n	80042ce <UART_SetConfig+0x1a2>
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d002      	beq.n	80042ae <UART_SetConfig+0x182>
 80042a8:	2b10      	cmp	r3, #16
 80042aa:	d008      	beq.n	80042be <UART_SetConfig+0x192>
 80042ac:	e00f      	b.n	80042ce <UART_SetConfig+0x1a2>
 80042ae:	2300      	movs	r3, #0
 80042b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042b4:	e0ad      	b.n	8004412 <UART_SetConfig+0x2e6>
 80042b6:	2302      	movs	r3, #2
 80042b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042bc:	e0a9      	b.n	8004412 <UART_SetConfig+0x2e6>
 80042be:	2304      	movs	r3, #4
 80042c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042c4:	e0a5      	b.n	8004412 <UART_SetConfig+0x2e6>
 80042c6:	2308      	movs	r3, #8
 80042c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042cc:	e0a1      	b.n	8004412 <UART_SetConfig+0x2e6>
 80042ce:	2310      	movs	r3, #16
 80042d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042d4:	e09d      	b.n	8004412 <UART_SetConfig+0x2e6>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a4a      	ldr	r2, [pc, #296]	; (8004404 <UART_SetConfig+0x2d8>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d125      	bne.n	800432c <UART_SetConfig+0x200>
 80042e0:	4b45      	ldr	r3, [pc, #276]	; (80043f8 <UART_SetConfig+0x2cc>)
 80042e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80042ea:	2bc0      	cmp	r3, #192	; 0xc0
 80042ec:	d016      	beq.n	800431c <UART_SetConfig+0x1f0>
 80042ee:	2bc0      	cmp	r3, #192	; 0xc0
 80042f0:	d818      	bhi.n	8004324 <UART_SetConfig+0x1f8>
 80042f2:	2b80      	cmp	r3, #128	; 0x80
 80042f4:	d00a      	beq.n	800430c <UART_SetConfig+0x1e0>
 80042f6:	2b80      	cmp	r3, #128	; 0x80
 80042f8:	d814      	bhi.n	8004324 <UART_SetConfig+0x1f8>
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d002      	beq.n	8004304 <UART_SetConfig+0x1d8>
 80042fe:	2b40      	cmp	r3, #64	; 0x40
 8004300:	d008      	beq.n	8004314 <UART_SetConfig+0x1e8>
 8004302:	e00f      	b.n	8004324 <UART_SetConfig+0x1f8>
 8004304:	2300      	movs	r3, #0
 8004306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800430a:	e082      	b.n	8004412 <UART_SetConfig+0x2e6>
 800430c:	2302      	movs	r3, #2
 800430e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004312:	e07e      	b.n	8004412 <UART_SetConfig+0x2e6>
 8004314:	2304      	movs	r3, #4
 8004316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800431a:	e07a      	b.n	8004412 <UART_SetConfig+0x2e6>
 800431c:	2308      	movs	r3, #8
 800431e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004322:	e076      	b.n	8004412 <UART_SetConfig+0x2e6>
 8004324:	2310      	movs	r3, #16
 8004326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800432a:	e072      	b.n	8004412 <UART_SetConfig+0x2e6>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a35      	ldr	r2, [pc, #212]	; (8004408 <UART_SetConfig+0x2dc>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d12a      	bne.n	800438c <UART_SetConfig+0x260>
 8004336:	4b30      	ldr	r3, [pc, #192]	; (80043f8 <UART_SetConfig+0x2cc>)
 8004338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004340:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004344:	d01a      	beq.n	800437c <UART_SetConfig+0x250>
 8004346:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800434a:	d81b      	bhi.n	8004384 <UART_SetConfig+0x258>
 800434c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004350:	d00c      	beq.n	800436c <UART_SetConfig+0x240>
 8004352:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004356:	d815      	bhi.n	8004384 <UART_SetConfig+0x258>
 8004358:	2b00      	cmp	r3, #0
 800435a:	d003      	beq.n	8004364 <UART_SetConfig+0x238>
 800435c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004360:	d008      	beq.n	8004374 <UART_SetConfig+0x248>
 8004362:	e00f      	b.n	8004384 <UART_SetConfig+0x258>
 8004364:	2300      	movs	r3, #0
 8004366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800436a:	e052      	b.n	8004412 <UART_SetConfig+0x2e6>
 800436c:	2302      	movs	r3, #2
 800436e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004372:	e04e      	b.n	8004412 <UART_SetConfig+0x2e6>
 8004374:	2304      	movs	r3, #4
 8004376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800437a:	e04a      	b.n	8004412 <UART_SetConfig+0x2e6>
 800437c:	2308      	movs	r3, #8
 800437e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004382:	e046      	b.n	8004412 <UART_SetConfig+0x2e6>
 8004384:	2310      	movs	r3, #16
 8004386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800438a:	e042      	b.n	8004412 <UART_SetConfig+0x2e6>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a17      	ldr	r2, [pc, #92]	; (80043f0 <UART_SetConfig+0x2c4>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d13a      	bne.n	800440c <UART_SetConfig+0x2e0>
 8004396:	4b18      	ldr	r3, [pc, #96]	; (80043f8 <UART_SetConfig+0x2cc>)
 8004398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80043a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043a4:	d01a      	beq.n	80043dc <UART_SetConfig+0x2b0>
 80043a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043aa:	d81b      	bhi.n	80043e4 <UART_SetConfig+0x2b8>
 80043ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043b0:	d00c      	beq.n	80043cc <UART_SetConfig+0x2a0>
 80043b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043b6:	d815      	bhi.n	80043e4 <UART_SetConfig+0x2b8>
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d003      	beq.n	80043c4 <UART_SetConfig+0x298>
 80043bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043c0:	d008      	beq.n	80043d4 <UART_SetConfig+0x2a8>
 80043c2:	e00f      	b.n	80043e4 <UART_SetConfig+0x2b8>
 80043c4:	2300      	movs	r3, #0
 80043c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ca:	e022      	b.n	8004412 <UART_SetConfig+0x2e6>
 80043cc:	2302      	movs	r3, #2
 80043ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043d2:	e01e      	b.n	8004412 <UART_SetConfig+0x2e6>
 80043d4:	2304      	movs	r3, #4
 80043d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043da:	e01a      	b.n	8004412 <UART_SetConfig+0x2e6>
 80043dc:	2308      	movs	r3, #8
 80043de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043e2:	e016      	b.n	8004412 <UART_SetConfig+0x2e6>
 80043e4:	2310      	movs	r3, #16
 80043e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ea:	e012      	b.n	8004412 <UART_SetConfig+0x2e6>
 80043ec:	efff69f3 	.word	0xefff69f3
 80043f0:	40008000 	.word	0x40008000
 80043f4:	40013800 	.word	0x40013800
 80043f8:	40021000 	.word	0x40021000
 80043fc:	40004400 	.word	0x40004400
 8004400:	40004800 	.word	0x40004800
 8004404:	40004c00 	.word	0x40004c00
 8004408:	40005000 	.word	0x40005000
 800440c:	2310      	movs	r3, #16
 800440e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a9f      	ldr	r2, [pc, #636]	; (8004694 <UART_SetConfig+0x568>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d17a      	bne.n	8004512 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800441c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004420:	2b08      	cmp	r3, #8
 8004422:	d824      	bhi.n	800446e <UART_SetConfig+0x342>
 8004424:	a201      	add	r2, pc, #4	; (adr r2, 800442c <UART_SetConfig+0x300>)
 8004426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442a:	bf00      	nop
 800442c:	08004451 	.word	0x08004451
 8004430:	0800446f 	.word	0x0800446f
 8004434:	08004459 	.word	0x08004459
 8004438:	0800446f 	.word	0x0800446f
 800443c:	0800445f 	.word	0x0800445f
 8004440:	0800446f 	.word	0x0800446f
 8004444:	0800446f 	.word	0x0800446f
 8004448:	0800446f 	.word	0x0800446f
 800444c:	08004467 	.word	0x08004467
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004450:	f7fe fd2e 	bl	8002eb0 <HAL_RCC_GetPCLK1Freq>
 8004454:	61f8      	str	r0, [r7, #28]
        break;
 8004456:	e010      	b.n	800447a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004458:	4b8f      	ldr	r3, [pc, #572]	; (8004698 <UART_SetConfig+0x56c>)
 800445a:	61fb      	str	r3, [r7, #28]
        break;
 800445c:	e00d      	b.n	800447a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800445e:	f7fe fc8f 	bl	8002d80 <HAL_RCC_GetSysClockFreq>
 8004462:	61f8      	str	r0, [r7, #28]
        break;
 8004464:	e009      	b.n	800447a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004466:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800446a:	61fb      	str	r3, [r7, #28]
        break;
 800446c:	e005      	b.n	800447a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800446e:	2300      	movs	r3, #0
 8004470:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004478:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 80fb 	beq.w	8004678 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	4613      	mov	r3, r2
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	4413      	add	r3, r2
 800448c:	69fa      	ldr	r2, [r7, #28]
 800448e:	429a      	cmp	r2, r3
 8004490:	d305      	bcc.n	800449e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004498:	69fa      	ldr	r2, [r7, #28]
 800449a:	429a      	cmp	r2, r3
 800449c:	d903      	bls.n	80044a6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80044a4:	e0e8      	b.n	8004678 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	2200      	movs	r2, #0
 80044aa:	461c      	mov	r4, r3
 80044ac:	4615      	mov	r5, r2
 80044ae:	f04f 0200 	mov.w	r2, #0
 80044b2:	f04f 0300 	mov.w	r3, #0
 80044b6:	022b      	lsls	r3, r5, #8
 80044b8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80044bc:	0222      	lsls	r2, r4, #8
 80044be:	68f9      	ldr	r1, [r7, #12]
 80044c0:	6849      	ldr	r1, [r1, #4]
 80044c2:	0849      	lsrs	r1, r1, #1
 80044c4:	2000      	movs	r0, #0
 80044c6:	4688      	mov	r8, r1
 80044c8:	4681      	mov	r9, r0
 80044ca:	eb12 0a08 	adds.w	sl, r2, r8
 80044ce:	eb43 0b09 	adc.w	fp, r3, r9
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	603b      	str	r3, [r7, #0]
 80044da:	607a      	str	r2, [r7, #4]
 80044dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044e0:	4650      	mov	r0, sl
 80044e2:	4659      	mov	r1, fp
 80044e4:	f7fc fb60 	bl	8000ba8 <__aeabi_uldivmod>
 80044e8:	4602      	mov	r2, r0
 80044ea:	460b      	mov	r3, r1
 80044ec:	4613      	mov	r3, r2
 80044ee:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044f6:	d308      	bcc.n	800450a <UART_SetConfig+0x3de>
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044fe:	d204      	bcs.n	800450a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	60da      	str	r2, [r3, #12]
 8004508:	e0b6      	b.n	8004678 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004510:	e0b2      	b.n	8004678 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800451a:	d15e      	bne.n	80045da <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800451c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004520:	2b08      	cmp	r3, #8
 8004522:	d828      	bhi.n	8004576 <UART_SetConfig+0x44a>
 8004524:	a201      	add	r2, pc, #4	; (adr r2, 800452c <UART_SetConfig+0x400>)
 8004526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452a:	bf00      	nop
 800452c:	08004551 	.word	0x08004551
 8004530:	08004559 	.word	0x08004559
 8004534:	08004561 	.word	0x08004561
 8004538:	08004577 	.word	0x08004577
 800453c:	08004567 	.word	0x08004567
 8004540:	08004577 	.word	0x08004577
 8004544:	08004577 	.word	0x08004577
 8004548:	08004577 	.word	0x08004577
 800454c:	0800456f 	.word	0x0800456f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004550:	f7fe fcae 	bl	8002eb0 <HAL_RCC_GetPCLK1Freq>
 8004554:	61f8      	str	r0, [r7, #28]
        break;
 8004556:	e014      	b.n	8004582 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004558:	f7fe fcc0 	bl	8002edc <HAL_RCC_GetPCLK2Freq>
 800455c:	61f8      	str	r0, [r7, #28]
        break;
 800455e:	e010      	b.n	8004582 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004560:	4b4d      	ldr	r3, [pc, #308]	; (8004698 <UART_SetConfig+0x56c>)
 8004562:	61fb      	str	r3, [r7, #28]
        break;
 8004564:	e00d      	b.n	8004582 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004566:	f7fe fc0b 	bl	8002d80 <HAL_RCC_GetSysClockFreq>
 800456a:	61f8      	str	r0, [r7, #28]
        break;
 800456c:	e009      	b.n	8004582 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800456e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004572:	61fb      	str	r3, [r7, #28]
        break;
 8004574:	e005      	b.n	8004582 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004576:	2300      	movs	r3, #0
 8004578:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004580:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d077      	beq.n	8004678 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	005a      	lsls	r2, r3, #1
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	085b      	lsrs	r3, r3, #1
 8004592:	441a      	add	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	fbb2 f3f3 	udiv	r3, r2, r3
 800459c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	2b0f      	cmp	r3, #15
 80045a2:	d916      	bls.n	80045d2 <UART_SetConfig+0x4a6>
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045aa:	d212      	bcs.n	80045d2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	f023 030f 	bic.w	r3, r3, #15
 80045b4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	085b      	lsrs	r3, r3, #1
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	f003 0307 	and.w	r3, r3, #7
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	8afb      	ldrh	r3, [r7, #22]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	8afa      	ldrh	r2, [r7, #22]
 80045ce:	60da      	str	r2, [r3, #12]
 80045d0:	e052      	b.n	8004678 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80045d8:	e04e      	b.n	8004678 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045de:	2b08      	cmp	r3, #8
 80045e0:	d827      	bhi.n	8004632 <UART_SetConfig+0x506>
 80045e2:	a201      	add	r2, pc, #4	; (adr r2, 80045e8 <UART_SetConfig+0x4bc>)
 80045e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e8:	0800460d 	.word	0x0800460d
 80045ec:	08004615 	.word	0x08004615
 80045f0:	0800461d 	.word	0x0800461d
 80045f4:	08004633 	.word	0x08004633
 80045f8:	08004623 	.word	0x08004623
 80045fc:	08004633 	.word	0x08004633
 8004600:	08004633 	.word	0x08004633
 8004604:	08004633 	.word	0x08004633
 8004608:	0800462b 	.word	0x0800462b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800460c:	f7fe fc50 	bl	8002eb0 <HAL_RCC_GetPCLK1Freq>
 8004610:	61f8      	str	r0, [r7, #28]
        break;
 8004612:	e014      	b.n	800463e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004614:	f7fe fc62 	bl	8002edc <HAL_RCC_GetPCLK2Freq>
 8004618:	61f8      	str	r0, [r7, #28]
        break;
 800461a:	e010      	b.n	800463e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800461c:	4b1e      	ldr	r3, [pc, #120]	; (8004698 <UART_SetConfig+0x56c>)
 800461e:	61fb      	str	r3, [r7, #28]
        break;
 8004620:	e00d      	b.n	800463e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004622:	f7fe fbad 	bl	8002d80 <HAL_RCC_GetSysClockFreq>
 8004626:	61f8      	str	r0, [r7, #28]
        break;
 8004628:	e009      	b.n	800463e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800462a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800462e:	61fb      	str	r3, [r7, #28]
        break;
 8004630:	e005      	b.n	800463e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800463c:	bf00      	nop
    }

    if (pclk != 0U)
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d019      	beq.n	8004678 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	085a      	lsrs	r2, r3, #1
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	441a      	add	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	fbb2 f3f3 	udiv	r3, r2, r3
 8004656:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	2b0f      	cmp	r3, #15
 800465c:	d909      	bls.n	8004672 <UART_SetConfig+0x546>
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004664:	d205      	bcs.n	8004672 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	b29a      	uxth	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	60da      	str	r2, [r3, #12]
 8004670:	e002      	b.n	8004678 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004684:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004688:	4618      	mov	r0, r3
 800468a:	3728      	adds	r7, #40	; 0x28
 800468c:	46bd      	mov	sp, r7
 800468e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004692:	bf00      	nop
 8004694:	40008000 	.word	0x40008000
 8004698:	00f42400 	.word	0x00f42400

0800469c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00a      	beq.n	80046c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	f003 0304 	and.w	r3, r3, #4
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00a      	beq.n	800470a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	f003 0308 	and.w	r3, r3, #8
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004730:	f003 0310 	and.w	r3, r3, #16
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00a      	beq.n	800474e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	430a      	orrs	r2, r1
 800474c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004752:	f003 0320 	and.w	r3, r3, #32
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00a      	beq.n	8004770 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	430a      	orrs	r2, r1
 800476e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004778:	2b00      	cmp	r3, #0
 800477a:	d01a      	beq.n	80047b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	430a      	orrs	r2, r1
 8004790:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004796:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800479a:	d10a      	bne.n	80047b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00a      	beq.n	80047d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	430a      	orrs	r2, r1
 80047d2:	605a      	str	r2, [r3, #4]
  }
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af02      	add	r7, sp, #8
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047f0:	f7fd f962 	bl	8001ab8 <HAL_GetTick>
 80047f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0308 	and.w	r3, r3, #8
 8004800:	2b08      	cmp	r3, #8
 8004802:	d10e      	bne.n	8004822 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004804:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f82d 	bl	8004872 <UART_WaitOnFlagUntilTimeout>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e023      	b.n	800486a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0304 	and.w	r3, r3, #4
 800482c:	2b04      	cmp	r3, #4
 800482e:	d10e      	bne.n	800484e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004830:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f817 	bl	8004872 <UART_WaitOnFlagUntilTimeout>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e00d      	b.n	800486a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2220      	movs	r2, #32
 8004852:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2220      	movs	r2, #32
 8004858:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b09c      	sub	sp, #112	; 0x70
 8004876:	af00      	add	r7, sp, #0
 8004878:	60f8      	str	r0, [r7, #12]
 800487a:	60b9      	str	r1, [r7, #8]
 800487c:	603b      	str	r3, [r7, #0]
 800487e:	4613      	mov	r3, r2
 8004880:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004882:	e0a5      	b.n	80049d0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004884:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488a:	f000 80a1 	beq.w	80049d0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800488e:	f7fd f913 	bl	8001ab8 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800489a:	429a      	cmp	r2, r3
 800489c:	d302      	bcc.n	80048a4 <UART_WaitOnFlagUntilTimeout+0x32>
 800489e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d13e      	bne.n	8004922 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048ac:	e853 3f00 	ldrex	r3, [r3]
 80048b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80048b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048b8:	667b      	str	r3, [r7, #100]	; 0x64
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	461a      	mov	r2, r3
 80048c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048c4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80048c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80048ca:	e841 2300 	strex	r3, r2, [r1]
 80048ce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80048d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1e6      	bne.n	80048a4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	3308      	adds	r3, #8
 80048dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048e0:	e853 3f00 	ldrex	r3, [r3]
 80048e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e8:	f023 0301 	bic.w	r3, r3, #1
 80048ec:	663b      	str	r3, [r7, #96]	; 0x60
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	3308      	adds	r3, #8
 80048f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80048f6:	64ba      	str	r2, [r7, #72]	; 0x48
 80048f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80048fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048fe:	e841 2300 	strex	r3, r2, [r1]
 8004902:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004904:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1e5      	bne.n	80048d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2220      	movs	r2, #32
 800490e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2220      	movs	r2, #32
 8004914:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e067      	b.n	80049f2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0304 	and.w	r3, r3, #4
 800492c:	2b00      	cmp	r3, #0
 800492e:	d04f      	beq.n	80049d0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800493a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800493e:	d147      	bne.n	80049d0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004948:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004952:	e853 3f00 	ldrex	r3, [r3]
 8004956:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800495e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	461a      	mov	r2, r3
 8004966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004968:	637b      	str	r3, [r7, #52]	; 0x34
 800496a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800496e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004970:	e841 2300 	strex	r3, r2, [r1]
 8004974:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1e6      	bne.n	800494a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	3308      	adds	r3, #8
 8004982:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	e853 3f00 	ldrex	r3, [r3]
 800498a:	613b      	str	r3, [r7, #16]
   return(result);
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	f023 0301 	bic.w	r3, r3, #1
 8004992:	66bb      	str	r3, [r7, #104]	; 0x68
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	3308      	adds	r3, #8
 800499a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800499c:	623a      	str	r2, [r7, #32]
 800499e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a0:	69f9      	ldr	r1, [r7, #28]
 80049a2:	6a3a      	ldr	r2, [r7, #32]
 80049a4:	e841 2300 	strex	r3, r2, [r1]
 80049a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1e5      	bne.n	800497c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2220      	movs	r2, #32
 80049b4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2220      	movs	r2, #32
 80049ba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2220      	movs	r2, #32
 80049c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e010      	b.n	80049f2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	69da      	ldr	r2, [r3, #28]
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	4013      	ands	r3, r2
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	429a      	cmp	r2, r3
 80049de:	bf0c      	ite	eq
 80049e0:	2301      	moveq	r3, #1
 80049e2:	2300      	movne	r3, #0
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	461a      	mov	r2, r3
 80049e8:	79fb      	ldrb	r3, [r7, #7]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	f43f af4a 	beq.w	8004884 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3770      	adds	r7, #112	; 0x70
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80049fa:	b480      	push	{r7}
 80049fc:	b085      	sub	sp, #20
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	4603      	mov	r3, r0
 8004a02:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004a04:	2300      	movs	r3, #0
 8004a06:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004a08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a0c:	2b84      	cmp	r3, #132	; 0x84
 8004a0e:	d005      	beq.n	8004a1c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004a10:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4413      	add	r3, r2
 8004a18:	3303      	adds	r3, #3
 8004a1a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004a2e:	f000 fcf3 	bl	8005418 <vTaskStartScheduler>
  
  return osOK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a3a:	b089      	sub	sp, #36	; 0x24
 8004a3c:	af04      	add	r7, sp, #16
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d020      	beq.n	8004a8c <osThreadCreate+0x54>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d01c      	beq.n	8004a8c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685c      	ldr	r4, [r3, #4]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681d      	ldr	r5, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	691e      	ldr	r6, [r3, #16]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7ff ffc8 	bl	80049fa <makeFreeRtosPriority>
 8004a6a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a74:	9202      	str	r2, [sp, #8]
 8004a76:	9301      	str	r3, [sp, #4]
 8004a78:	9100      	str	r1, [sp, #0]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	4632      	mov	r2, r6
 8004a7e:	4629      	mov	r1, r5
 8004a80:	4620      	mov	r0, r4
 8004a82:	f000 f8d9 	bl	8004c38 <xTaskCreateStatic>
 8004a86:	4603      	mov	r3, r0
 8004a88:	60fb      	str	r3, [r7, #12]
 8004a8a:	e01c      	b.n	8004ac6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685c      	ldr	r4, [r3, #4]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004a98:	b29e      	uxth	r6, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7ff ffaa 	bl	80049fa <makeFreeRtosPriority>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	f107 030c 	add.w	r3, r7, #12
 8004aac:	9301      	str	r3, [sp, #4]
 8004aae:	9200      	str	r2, [sp, #0]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	4632      	mov	r2, r6
 8004ab4:	4629      	mov	r1, r5
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	f000 f91b 	bl	8004cf2 <xTaskCreate>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d001      	beq.n	8004ac6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	e000      	b.n	8004ac8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ad0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f103 0208 	add.w	r2, r3, #8
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ae8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f103 0208 	add.w	r2, r3, #8
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f103 0208 	add.w	r2, r3, #8
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b085      	sub	sp, #20
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
 8004b32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	689a      	ldr	r2, [r3, #8]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	1c5a      	adds	r2, r3, #1
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	601a      	str	r2, [r3, #0]
}
 8004b66:	bf00      	nop
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b72:	b480      	push	{r7}
 8004b74:	b085      	sub	sp, #20
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
 8004b7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b88:	d103      	bne.n	8004b92 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	60fb      	str	r3, [r7, #12]
 8004b90:	e00c      	b.n	8004bac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	3308      	adds	r3, #8
 8004b96:	60fb      	str	r3, [r7, #12]
 8004b98:	e002      	b.n	8004ba0 <vListInsert+0x2e>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	60fb      	str	r3, [r7, #12]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68ba      	ldr	r2, [r7, #8]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d2f6      	bcs.n	8004b9a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	683a      	ldr	r2, [r7, #0]
 8004bba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	1c5a      	adds	r2, r3, #1
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	601a      	str	r2, [r3, #0]
}
 8004bd8:	bf00      	nop
 8004bda:	3714      	adds	r7, #20
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	6892      	ldr	r2, [r2, #8]
 8004bfa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	6852      	ldr	r2, [r2, #4]
 8004c04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d103      	bne.n	8004c18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	1e5a      	subs	r2, r3, #1
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3714      	adds	r7, #20
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b08e      	sub	sp, #56	; 0x38
 8004c3c:	af04      	add	r7, sp, #16
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
 8004c44:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10a      	bne.n	8004c62 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c50:	f383 8811 	msr	BASEPRI, r3
 8004c54:	f3bf 8f6f 	isb	sy
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004c5e:	bf00      	nop
 8004c60:	e7fe      	b.n	8004c60 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10a      	bne.n	8004c7e <xTaskCreateStatic+0x46>
	__asm volatile
 8004c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6c:	f383 8811 	msr	BASEPRI, r3
 8004c70:	f3bf 8f6f 	isb	sy
 8004c74:	f3bf 8f4f 	dsb	sy
 8004c78:	61fb      	str	r3, [r7, #28]
}
 8004c7a:	bf00      	nop
 8004c7c:	e7fe      	b.n	8004c7c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004c7e:	23b4      	movs	r3, #180	; 0xb4
 8004c80:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	2bb4      	cmp	r3, #180	; 0xb4
 8004c86:	d00a      	beq.n	8004c9e <xTaskCreateStatic+0x66>
	__asm volatile
 8004c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8c:	f383 8811 	msr	BASEPRI, r3
 8004c90:	f3bf 8f6f 	isb	sy
 8004c94:	f3bf 8f4f 	dsb	sy
 8004c98:	61bb      	str	r3, [r7, #24]
}
 8004c9a:	bf00      	nop
 8004c9c:	e7fe      	b.n	8004c9c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004c9e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d01e      	beq.n	8004ce4 <xTaskCreateStatic+0xac>
 8004ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d01b      	beq.n	8004ce4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cb4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	2202      	movs	r2, #2
 8004cba:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	9303      	str	r3, [sp, #12]
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc4:	9302      	str	r3, [sp, #8]
 8004cc6:	f107 0314 	add.w	r3, r7, #20
 8004cca:	9301      	str	r3, [sp, #4]
 8004ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cce:	9300      	str	r3, [sp, #0]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	68b9      	ldr	r1, [r7, #8]
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f000 f850 	bl	8004d7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004cdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004cde:	f000 f8eb 	bl	8004eb8 <prvAddNewTaskToReadyList>
 8004ce2:	e001      	b.n	8004ce8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004ce8:	697b      	ldr	r3, [r7, #20]
	}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3728      	adds	r7, #40	; 0x28
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b08c      	sub	sp, #48	; 0x30
 8004cf6:	af04      	add	r7, sp, #16
 8004cf8:	60f8      	str	r0, [r7, #12]
 8004cfa:	60b9      	str	r1, [r7, #8]
 8004cfc:	603b      	str	r3, [r7, #0]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004d02:	88fb      	ldrh	r3, [r7, #6]
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4618      	mov	r0, r3
 8004d08:	f001 f956 	bl	8005fb8 <pvPortMalloc>
 8004d0c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00e      	beq.n	8004d32 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004d14:	20b4      	movs	r0, #180	; 0xb4
 8004d16:	f001 f94f 	bl	8005fb8 <pvPortMalloc>
 8004d1a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d003      	beq.n	8004d2a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	631a      	str	r2, [r3, #48]	; 0x30
 8004d28:	e005      	b.n	8004d36 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004d2a:	6978      	ldr	r0, [r7, #20]
 8004d2c:	f001 fa10 	bl	8006150 <vPortFree>
 8004d30:	e001      	b.n	8004d36 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004d32:	2300      	movs	r3, #0
 8004d34:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d017      	beq.n	8004d6c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004d44:	88fa      	ldrh	r2, [r7, #6]
 8004d46:	2300      	movs	r3, #0
 8004d48:	9303      	str	r3, [sp, #12]
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	9302      	str	r3, [sp, #8]
 8004d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d50:	9301      	str	r3, [sp, #4]
 8004d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	68b9      	ldr	r1, [r7, #8]
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f000 f80e 	bl	8004d7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d60:	69f8      	ldr	r0, [r7, #28]
 8004d62:	f000 f8a9 	bl	8004eb8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004d66:	2301      	movs	r3, #1
 8004d68:	61bb      	str	r3, [r7, #24]
 8004d6a:	e002      	b.n	8004d72 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d70:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004d72:	69bb      	ldr	r3, [r7, #24]
	}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3720      	adds	r7, #32
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b088      	sub	sp, #32
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
 8004d88:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004d94:	3b01      	subs	r3, #1
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	4413      	add	r3, r2
 8004d9a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	f023 0307 	bic.w	r3, r3, #7
 8004da2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	f003 0307 	and.w	r3, r3, #7
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00a      	beq.n	8004dc4 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db2:	f383 8811 	msr	BASEPRI, r3
 8004db6:	f3bf 8f6f 	isb	sy
 8004dba:	f3bf 8f4f 	dsb	sy
 8004dbe:	617b      	str	r3, [r7, #20]
}
 8004dc0:	bf00      	nop
 8004dc2:	e7fe      	b.n	8004dc2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d01f      	beq.n	8004e0a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004dca:	2300      	movs	r3, #0
 8004dcc:	61fb      	str	r3, [r7, #28]
 8004dce:	e012      	b.n	8004df6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	7819      	ldrb	r1, [r3, #0]
 8004dd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	4413      	add	r3, r2
 8004dde:	3334      	adds	r3, #52	; 0x34
 8004de0:	460a      	mov	r2, r1
 8004de2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	4413      	add	r3, r2
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d006      	beq.n	8004dfe <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	3301      	adds	r3, #1
 8004df4:	61fb      	str	r3, [r7, #28]
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	2b0f      	cmp	r3, #15
 8004dfa:	d9e9      	bls.n	8004dd0 <prvInitialiseNewTask+0x54>
 8004dfc:	e000      	b.n	8004e00 <prvInitialiseNewTask+0x84>
			{
				break;
 8004dfe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e08:	e003      	b.n	8004e12 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e14:	2b06      	cmp	r3, #6
 8004e16:	d901      	bls.n	8004e1c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004e18:	2306      	movs	r3, #6
 8004e1a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e20:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e26:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e30:	3304      	adds	r3, #4
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7ff fe6c 	bl	8004b10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3a:	3318      	adds	r3, #24
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7ff fe67 	bl	8004b10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e46:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4a:	f1c3 0207 	rsb	r2, r3, #7
 8004e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e50:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e56:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6a:	334c      	adds	r3, #76	; 0x4c
 8004e6c:	2260      	movs	r2, #96	; 0x60
 8004e6e:	2100      	movs	r1, #0
 8004e70:	4618      	mov	r0, r3
 8004e72:	f001 fbbc 	bl	80065ee <memset>
 8004e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e78:	4a0c      	ldr	r2, [pc, #48]	; (8004eac <prvInitialiseNewTask+0x130>)
 8004e7a:	651a      	str	r2, [r3, #80]	; 0x50
 8004e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7e:	4a0c      	ldr	r2, [pc, #48]	; (8004eb0 <prvInitialiseNewTask+0x134>)
 8004e80:	655a      	str	r2, [r3, #84]	; 0x54
 8004e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e84:	4a0b      	ldr	r2, [pc, #44]	; (8004eb4 <prvInitialiseNewTask+0x138>)
 8004e86:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	68f9      	ldr	r1, [r7, #12]
 8004e8c:	69b8      	ldr	r0, [r7, #24]
 8004e8e:	f000 fe41 	bl	8005b14 <pxPortInitialiseStack>
 8004e92:	4602      	mov	r2, r0
 8004e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e96:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ea2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ea4:	bf00      	nop
 8004ea6:	3720      	adds	r7, #32
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	080093d4 	.word	0x080093d4
 8004eb0:	080093f4 	.word	0x080093f4
 8004eb4:	080093b4 	.word	0x080093b4

08004eb8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004ec0:	f000 ff58 	bl	8005d74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004ec4:	4b2a      	ldr	r3, [pc, #168]	; (8004f70 <prvAddNewTaskToReadyList+0xb8>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	3301      	adds	r3, #1
 8004eca:	4a29      	ldr	r2, [pc, #164]	; (8004f70 <prvAddNewTaskToReadyList+0xb8>)
 8004ecc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004ece:	4b29      	ldr	r3, [pc, #164]	; (8004f74 <prvAddNewTaskToReadyList+0xbc>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d109      	bne.n	8004eea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004ed6:	4a27      	ldr	r2, [pc, #156]	; (8004f74 <prvAddNewTaskToReadyList+0xbc>)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004edc:	4b24      	ldr	r3, [pc, #144]	; (8004f70 <prvAddNewTaskToReadyList+0xb8>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d110      	bne.n	8004f06 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004ee4:	f000 fcee 	bl	80058c4 <prvInitialiseTaskLists>
 8004ee8:	e00d      	b.n	8004f06 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004eea:	4b23      	ldr	r3, [pc, #140]	; (8004f78 <prvAddNewTaskToReadyList+0xc0>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d109      	bne.n	8004f06 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004ef2:	4b20      	ldr	r3, [pc, #128]	; (8004f74 <prvAddNewTaskToReadyList+0xbc>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d802      	bhi.n	8004f06 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004f00:	4a1c      	ldr	r2, [pc, #112]	; (8004f74 <prvAddNewTaskToReadyList+0xbc>)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004f06:	4b1d      	ldr	r3, [pc, #116]	; (8004f7c <prvAddNewTaskToReadyList+0xc4>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	4a1b      	ldr	r2, [pc, #108]	; (8004f7c <prvAddNewTaskToReadyList+0xc4>)
 8004f0e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f14:	2201      	movs	r2, #1
 8004f16:	409a      	lsls	r2, r3
 8004f18:	4b19      	ldr	r3, [pc, #100]	; (8004f80 <prvAddNewTaskToReadyList+0xc8>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	4a18      	ldr	r2, [pc, #96]	; (8004f80 <prvAddNewTaskToReadyList+0xc8>)
 8004f20:	6013      	str	r3, [r2, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f26:	4613      	mov	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4413      	add	r3, r2
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	4a15      	ldr	r2, [pc, #84]	; (8004f84 <prvAddNewTaskToReadyList+0xcc>)
 8004f30:	441a      	add	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	3304      	adds	r3, #4
 8004f36:	4619      	mov	r1, r3
 8004f38:	4610      	mov	r0, r2
 8004f3a:	f7ff fdf6 	bl	8004b2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004f3e:	f000 ff49 	bl	8005dd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004f42:	4b0d      	ldr	r3, [pc, #52]	; (8004f78 <prvAddNewTaskToReadyList+0xc0>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00e      	beq.n	8004f68 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004f4a:	4b0a      	ldr	r3, [pc, #40]	; (8004f74 <prvAddNewTaskToReadyList+0xbc>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d207      	bcs.n	8004f68 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004f58:	4b0b      	ldr	r3, [pc, #44]	; (8004f88 <prvAddNewTaskToReadyList+0xd0>)
 8004f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f5e:	601a      	str	r2, [r3, #0]
 8004f60:	f3bf 8f4f 	dsb	sy
 8004f64:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f68:	bf00      	nop
 8004f6a:	3708      	adds	r7, #8
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	20000700 	.word	0x20000700
 8004f74:	20000600 	.word	0x20000600
 8004f78:	2000070c 	.word	0x2000070c
 8004f7c:	2000071c 	.word	0x2000071c
 8004f80:	20000708 	.word	0x20000708
 8004f84:	20000604 	.word	0x20000604
 8004f88:	e000ed04 	.word	0xe000ed04

08004f8c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b08a      	sub	sp, #40	; 0x28
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8004f96:	2300      	movs	r3, #0
 8004f98:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d10a      	bne.n	8004fb6 <vTaskDelayUntil+0x2a>
	__asm volatile
 8004fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa4:	f383 8811 	msr	BASEPRI, r3
 8004fa8:	f3bf 8f6f 	isb	sy
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	617b      	str	r3, [r7, #20]
}
 8004fb2:	bf00      	nop
 8004fb4:	e7fe      	b.n	8004fb4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d10a      	bne.n	8004fd2 <vTaskDelayUntil+0x46>
	__asm volatile
 8004fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc0:	f383 8811 	msr	BASEPRI, r3
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	613b      	str	r3, [r7, #16]
}
 8004fce:	bf00      	nop
 8004fd0:	e7fe      	b.n	8004fd0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8004fd2:	4b2a      	ldr	r3, [pc, #168]	; (800507c <vTaskDelayUntil+0xf0>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00a      	beq.n	8004ff0 <vTaskDelayUntil+0x64>
	__asm volatile
 8004fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fde:	f383 8811 	msr	BASEPRI, r3
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	f3bf 8f4f 	dsb	sy
 8004fea:	60fb      	str	r3, [r7, #12]
}
 8004fec:	bf00      	nop
 8004fee:	e7fe      	b.n	8004fee <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8004ff0:	f000 fa7c 	bl	80054ec <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004ff4:	4b22      	ldr	r3, [pc, #136]	; (8005080 <vTaskDelayUntil+0xf4>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	4413      	add	r3, r2
 8005002:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6a3a      	ldr	r2, [r7, #32]
 800500a:	429a      	cmp	r2, r3
 800500c:	d20b      	bcs.n	8005026 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	69fa      	ldr	r2, [r7, #28]
 8005014:	429a      	cmp	r2, r3
 8005016:	d211      	bcs.n	800503c <vTaskDelayUntil+0xb0>
 8005018:	69fa      	ldr	r2, [r7, #28]
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	429a      	cmp	r2, r3
 800501e:	d90d      	bls.n	800503c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8005020:	2301      	movs	r3, #1
 8005022:	627b      	str	r3, [r7, #36]	; 0x24
 8005024:	e00a      	b.n	800503c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	69fa      	ldr	r2, [r7, #28]
 800502c:	429a      	cmp	r2, r3
 800502e:	d303      	bcc.n	8005038 <vTaskDelayUntil+0xac>
 8005030:	69fa      	ldr	r2, [r7, #28]
 8005032:	6a3b      	ldr	r3, [r7, #32]
 8005034:	429a      	cmp	r2, r3
 8005036:	d901      	bls.n	800503c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8005038:	2301      	movs	r3, #1
 800503a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	69fa      	ldr	r2, [r7, #28]
 8005040:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	2b00      	cmp	r3, #0
 8005046:	d006      	beq.n	8005056 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005048:	69fa      	ldr	r2, [r7, #28]
 800504a:	6a3b      	ldr	r3, [r7, #32]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2100      	movs	r1, #0
 8005050:	4618      	mov	r0, r3
 8005052:	f000 fcf9 	bl	8005a48 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005056:	f000 fa57 	bl	8005508 <xTaskResumeAll>
 800505a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d107      	bne.n	8005072 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8005062:	4b08      	ldr	r3, [pc, #32]	; (8005084 <vTaskDelayUntil+0xf8>)
 8005064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005068:	601a      	str	r2, [r3, #0]
 800506a:	f3bf 8f4f 	dsb	sy
 800506e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005072:	bf00      	nop
 8005074:	3728      	adds	r7, #40	; 0x28
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	20000728 	.word	0x20000728
 8005080:	20000704 	.word	0x20000704
 8005084:	e000ed04 	.word	0xe000ed04

08005088 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005090:	2300      	movs	r3, #0
 8005092:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d017      	beq.n	80050ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800509a:	4b13      	ldr	r3, [pc, #76]	; (80050e8 <vTaskDelay+0x60>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00a      	beq.n	80050b8 <vTaskDelay+0x30>
	__asm volatile
 80050a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a6:	f383 8811 	msr	BASEPRI, r3
 80050aa:	f3bf 8f6f 	isb	sy
 80050ae:	f3bf 8f4f 	dsb	sy
 80050b2:	60bb      	str	r3, [r7, #8]
}
 80050b4:	bf00      	nop
 80050b6:	e7fe      	b.n	80050b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80050b8:	f000 fa18 	bl	80054ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80050bc:	2100      	movs	r1, #0
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 fcc2 	bl	8005a48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80050c4:	f000 fa20 	bl	8005508 <xTaskResumeAll>
 80050c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d107      	bne.n	80050e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80050d0:	4b06      	ldr	r3, [pc, #24]	; (80050ec <vTaskDelay+0x64>)
 80050d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050d6:	601a      	str	r2, [r3, #0]
 80050d8:	f3bf 8f4f 	dsb	sy
 80050dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80050e0:	bf00      	nop
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	20000728 	.word	0x20000728
 80050ec:	e000ed04 	.word	0xe000ed04

080050f0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80050f8:	f000 fe3c 	bl	8005d74 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d102      	bne.n	8005108 <vTaskSuspend+0x18>
 8005102:	4b3c      	ldr	r3, [pc, #240]	; (80051f4 <vTaskSuspend+0x104>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	e000      	b.n	800510a <vTaskSuspend+0x1a>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	3304      	adds	r3, #4
 8005110:	4618      	mov	r0, r3
 8005112:	f7ff fd67 	bl	8004be4 <uxListRemove>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d115      	bne.n	8005148 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005120:	4935      	ldr	r1, [pc, #212]	; (80051f8 <vTaskSuspend+0x108>)
 8005122:	4613      	mov	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	440b      	add	r3, r1
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10a      	bne.n	8005148 <vTaskSuspend+0x58>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005136:	2201      	movs	r2, #1
 8005138:	fa02 f303 	lsl.w	r3, r2, r3
 800513c:	43da      	mvns	r2, r3
 800513e:	4b2f      	ldr	r3, [pc, #188]	; (80051fc <vTaskSuspend+0x10c>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4013      	ands	r3, r2
 8005144:	4a2d      	ldr	r2, [pc, #180]	; (80051fc <vTaskSuspend+0x10c>)
 8005146:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514c:	2b00      	cmp	r3, #0
 800514e:	d004      	beq.n	800515a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	3318      	adds	r3, #24
 8005154:	4618      	mov	r0, r3
 8005156:	f7ff fd45 	bl	8004be4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	3304      	adds	r3, #4
 800515e:	4619      	mov	r1, r3
 8005160:	4827      	ldr	r0, [pc, #156]	; (8005200 <vTaskSuspend+0x110>)
 8005162:	f7ff fce2 	bl	8004b2a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b01      	cmp	r3, #1
 8005170:	d103      	bne.n	800517a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800517a:	f000 fe2b 	bl	8005dd4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800517e:	4b21      	ldr	r3, [pc, #132]	; (8005204 <vTaskSuspend+0x114>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d005      	beq.n	8005192 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8005186:	f000 fdf5 	bl	8005d74 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800518a:	f000 fc3d 	bl	8005a08 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800518e:	f000 fe21 	bl	8005dd4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8005192:	4b18      	ldr	r3, [pc, #96]	; (80051f4 <vTaskSuspend+0x104>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	429a      	cmp	r2, r3
 800519a:	d127      	bne.n	80051ec <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800519c:	4b19      	ldr	r3, [pc, #100]	; (8005204 <vTaskSuspend+0x114>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d017      	beq.n	80051d4 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80051a4:	4b18      	ldr	r3, [pc, #96]	; (8005208 <vTaskSuspend+0x118>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00a      	beq.n	80051c2 <vTaskSuspend+0xd2>
	__asm volatile
 80051ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b0:	f383 8811 	msr	BASEPRI, r3
 80051b4:	f3bf 8f6f 	isb	sy
 80051b8:	f3bf 8f4f 	dsb	sy
 80051bc:	60bb      	str	r3, [r7, #8]
}
 80051be:	bf00      	nop
 80051c0:	e7fe      	b.n	80051c0 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 80051c2:	4b12      	ldr	r3, [pc, #72]	; (800520c <vTaskSuspend+0x11c>)
 80051c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80051d2:	e00b      	b.n	80051ec <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80051d4:	4b0a      	ldr	r3, [pc, #40]	; (8005200 <vTaskSuspend+0x110>)
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	4b0d      	ldr	r3, [pc, #52]	; (8005210 <vTaskSuspend+0x120>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d103      	bne.n	80051e8 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 80051e0:	4b04      	ldr	r3, [pc, #16]	; (80051f4 <vTaskSuspend+0x104>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	601a      	str	r2, [r3, #0]
	}
 80051e6:	e001      	b.n	80051ec <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 80051e8:	f000 faf2 	bl	80057d0 <vTaskSwitchContext>
	}
 80051ec:	bf00      	nop
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	20000600 	.word	0x20000600
 80051f8:	20000604 	.word	0x20000604
 80051fc:	20000708 	.word	0x20000708
 8005200:	200006ec 	.word	0x200006ec
 8005204:	2000070c 	.word	0x2000070c
 8005208:	20000728 	.word	0x20000728
 800520c:	e000ed04 	.word	0xe000ed04
 8005210:	20000700 	.word	0x20000700

08005214 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8005214:	b480      	push	{r7}
 8005216:	b087      	sub	sp, #28
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800521c:	2300      	movs	r3, #0
 800521e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10a      	bne.n	8005240 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800522a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522e:	f383 8811 	msr	BASEPRI, r3
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	60fb      	str	r3, [r7, #12]
}
 800523c:	bf00      	nop
 800523e:	e7fe      	b.n	800523e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	4a0a      	ldr	r2, [pc, #40]	; (8005270 <prvTaskIsTaskSuspended+0x5c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d10a      	bne.n	8005260 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524e:	4a09      	ldr	r2, [pc, #36]	; (8005274 <prvTaskIsTaskSuspended+0x60>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d005      	beq.n	8005260 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800525c:	2301      	movs	r3, #1
 800525e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005260:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005262:	4618      	mov	r0, r3
 8005264:	371c      	adds	r7, #28
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	200006ec 	.word	0x200006ec
 8005274:	200006c0 	.word	0x200006c0

08005278 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10a      	bne.n	80052a0 <vTaskResume+0x28>
	__asm volatile
 800528a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528e:	f383 8811 	msr	BASEPRI, r3
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	f3bf 8f4f 	dsb	sy
 800529a:	60bb      	str	r3, [r7, #8]
}
 800529c:	bf00      	nop
 800529e:	e7fe      	b.n	800529e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80052a0:	4b20      	ldr	r3, [pc, #128]	; (8005324 <vTaskResume+0xac>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d037      	beq.n	800531a <vTaskResume+0xa2>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d034      	beq.n	800531a <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 80052b0:	f000 fd60 	bl	8005d74 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f7ff ffad 	bl	8005214 <prvTaskIsTaskSuspended>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d02a      	beq.n	8005316 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	3304      	adds	r3, #4
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7ff fc8d 	bl	8004be4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ce:	2201      	movs	r2, #1
 80052d0:	409a      	lsls	r2, r3
 80052d2:	4b15      	ldr	r3, [pc, #84]	; (8005328 <vTaskResume+0xb0>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	4a13      	ldr	r2, [pc, #76]	; (8005328 <vTaskResume+0xb0>)
 80052da:	6013      	str	r3, [r2, #0]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e0:	4613      	mov	r3, r2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4413      	add	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4a10      	ldr	r2, [pc, #64]	; (800532c <vTaskResume+0xb4>)
 80052ea:	441a      	add	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	3304      	adds	r3, #4
 80052f0:	4619      	mov	r1, r3
 80052f2:	4610      	mov	r0, r2
 80052f4:	f7ff fc19 	bl	8004b2a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052fc:	4b09      	ldr	r3, [pc, #36]	; (8005324 <vTaskResume+0xac>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005302:	429a      	cmp	r2, r3
 8005304:	d307      	bcc.n	8005316 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8005306:	4b0a      	ldr	r3, [pc, #40]	; (8005330 <vTaskResume+0xb8>)
 8005308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	f3bf 8f4f 	dsb	sy
 8005312:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8005316:	f000 fd5d 	bl	8005dd4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800531a:	bf00      	nop
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	20000600 	.word	0x20000600
 8005328:	20000708 	.word	0x20000708
 800532c:	20000604 	.word	0x20000604
 8005330:	e000ed04 	.word	0xe000ed04

08005334 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8005334:	b580      	push	{r7, lr}
 8005336:	b08a      	sub	sp, #40	; 0x28
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 800533c:	2300      	movs	r3, #0
 800533e:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10a      	bne.n	8005360 <xTaskResumeFromISR+0x2c>
	__asm volatile
 800534a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534e:	f383 8811 	msr	BASEPRI, r3
 8005352:	f3bf 8f6f 	isb	sy
 8005356:	f3bf 8f4f 	dsb	sy
 800535a:	61bb      	str	r3, [r7, #24]
}
 800535c:	bf00      	nop
 800535e:	e7fe      	b.n	800535e <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005360:	f000 fdea 	bl	8005f38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005364:	f3ef 8211 	mrs	r2, BASEPRI
 8005368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536c:	f383 8811 	msr	BASEPRI, r3
 8005370:	f3bf 8f6f 	isb	sy
 8005374:	f3bf 8f4f 	dsb	sy
 8005378:	617a      	str	r2, [r7, #20]
 800537a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800537c:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800537e:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8005380:	6a38      	ldr	r0, [r7, #32]
 8005382:	f7ff ff47 	bl	8005214 <prvTaskIsTaskSuspended>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d02f      	beq.n	80053ec <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800538c:	4b1d      	ldr	r3, [pc, #116]	; (8005404 <xTaskResumeFromISR+0xd0>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d125      	bne.n	80053e0 <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005394:	6a3b      	ldr	r3, [r7, #32]
 8005396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005398:	4b1b      	ldr	r3, [pc, #108]	; (8005408 <xTaskResumeFromISR+0xd4>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539e:	429a      	cmp	r2, r3
 80053a0:	d301      	bcc.n	80053a6 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 80053a2:	2301      	movs	r3, #1
 80053a4:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	3304      	adds	r3, #4
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7ff fc1a 	bl	8004be4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b4:	2201      	movs	r2, #1
 80053b6:	409a      	lsls	r2, r3
 80053b8:	4b14      	ldr	r3, [pc, #80]	; (800540c <xTaskResumeFromISR+0xd8>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4313      	orrs	r3, r2
 80053be:	4a13      	ldr	r2, [pc, #76]	; (800540c <xTaskResumeFromISR+0xd8>)
 80053c0:	6013      	str	r3, [r2, #0]
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c6:	4613      	mov	r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4413      	add	r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	4a10      	ldr	r2, [pc, #64]	; (8005410 <xTaskResumeFromISR+0xdc>)
 80053d0:	441a      	add	r2, r3
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	3304      	adds	r3, #4
 80053d6:	4619      	mov	r1, r3
 80053d8:	4610      	mov	r0, r2
 80053da:	f7ff fba6 	bl	8004b2a <vListInsertEnd>
 80053de:	e005      	b.n	80053ec <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80053e0:	6a3b      	ldr	r3, [r7, #32]
 80053e2:	3318      	adds	r3, #24
 80053e4:	4619      	mov	r1, r3
 80053e6:	480b      	ldr	r0, [pc, #44]	; (8005414 <xTaskResumeFromISR+0xe0>)
 80053e8:	f7ff fb9f 	bl	8004b2a <vListInsertEnd>
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80053f6:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 80053f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3728      	adds	r7, #40	; 0x28
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	20000728 	.word	0x20000728
 8005408:	20000600 	.word	0x20000600
 800540c:	20000708 	.word	0x20000708
 8005410:	20000604 	.word	0x20000604
 8005414:	200006c0 	.word	0x200006c0

08005418 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b08a      	sub	sp, #40	; 0x28
 800541c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800541e:	2300      	movs	r3, #0
 8005420:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005422:	2300      	movs	r3, #0
 8005424:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005426:	463a      	mov	r2, r7
 8005428:	1d39      	adds	r1, r7, #4
 800542a:	f107 0308 	add.w	r3, r7, #8
 800542e:	4618      	mov	r0, r3
 8005430:	f7fb fd3c 	bl	8000eac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005434:	6839      	ldr	r1, [r7, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	9202      	str	r2, [sp, #8]
 800543c:	9301      	str	r3, [sp, #4]
 800543e:	2300      	movs	r3, #0
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	2300      	movs	r3, #0
 8005444:	460a      	mov	r2, r1
 8005446:	4921      	ldr	r1, [pc, #132]	; (80054cc <vTaskStartScheduler+0xb4>)
 8005448:	4821      	ldr	r0, [pc, #132]	; (80054d0 <vTaskStartScheduler+0xb8>)
 800544a:	f7ff fbf5 	bl	8004c38 <xTaskCreateStatic>
 800544e:	4603      	mov	r3, r0
 8005450:	4a20      	ldr	r2, [pc, #128]	; (80054d4 <vTaskStartScheduler+0xbc>)
 8005452:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005454:	4b1f      	ldr	r3, [pc, #124]	; (80054d4 <vTaskStartScheduler+0xbc>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d002      	beq.n	8005462 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800545c:	2301      	movs	r3, #1
 800545e:	617b      	str	r3, [r7, #20]
 8005460:	e001      	b.n	8005466 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005462:	2300      	movs	r3, #0
 8005464:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d11b      	bne.n	80054a4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800546c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005470:	f383 8811 	msr	BASEPRI, r3
 8005474:	f3bf 8f6f 	isb	sy
 8005478:	f3bf 8f4f 	dsb	sy
 800547c:	613b      	str	r3, [r7, #16]
}
 800547e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005480:	4b15      	ldr	r3, [pc, #84]	; (80054d8 <vTaskStartScheduler+0xc0>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	334c      	adds	r3, #76	; 0x4c
 8005486:	4a15      	ldr	r2, [pc, #84]	; (80054dc <vTaskStartScheduler+0xc4>)
 8005488:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800548a:	4b15      	ldr	r3, [pc, #84]	; (80054e0 <vTaskStartScheduler+0xc8>)
 800548c:	f04f 32ff 	mov.w	r2, #4294967295
 8005490:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005492:	4b14      	ldr	r3, [pc, #80]	; (80054e4 <vTaskStartScheduler+0xcc>)
 8005494:	2201      	movs	r2, #1
 8005496:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005498:	4b13      	ldr	r3, [pc, #76]	; (80054e8 <vTaskStartScheduler+0xd0>)
 800549a:	2200      	movs	r2, #0
 800549c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800549e:	f000 fbc7 	bl	8005c30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80054a2:	e00e      	b.n	80054c2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054aa:	d10a      	bne.n	80054c2 <vTaskStartScheduler+0xaa>
	__asm volatile
 80054ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b0:	f383 8811 	msr	BASEPRI, r3
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	60fb      	str	r3, [r7, #12]
}
 80054be:	bf00      	nop
 80054c0:	e7fe      	b.n	80054c0 <vTaskStartScheduler+0xa8>
}
 80054c2:	bf00      	nop
 80054c4:	3718      	adds	r7, #24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	08009364 	.word	0x08009364
 80054d0:	08005895 	.word	0x08005895
 80054d4:	20000724 	.word	0x20000724
 80054d8:	20000600 	.word	0x20000600
 80054dc:	20000010 	.word	0x20000010
 80054e0:	20000720 	.word	0x20000720
 80054e4:	2000070c 	.word	0x2000070c
 80054e8:	20000704 	.word	0x20000704

080054ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80054ec:	b480      	push	{r7}
 80054ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80054f0:	4b04      	ldr	r3, [pc, #16]	; (8005504 <vTaskSuspendAll+0x18>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	3301      	adds	r3, #1
 80054f6:	4a03      	ldr	r2, [pc, #12]	; (8005504 <vTaskSuspendAll+0x18>)
 80054f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80054fa:	bf00      	nop
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr
 8005504:	20000728 	.word	0x20000728

08005508 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800550e:	2300      	movs	r3, #0
 8005510:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005512:	2300      	movs	r3, #0
 8005514:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005516:	4b41      	ldr	r3, [pc, #260]	; (800561c <xTaskResumeAll+0x114>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10a      	bne.n	8005534 <xTaskResumeAll+0x2c>
	__asm volatile
 800551e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005522:	f383 8811 	msr	BASEPRI, r3
 8005526:	f3bf 8f6f 	isb	sy
 800552a:	f3bf 8f4f 	dsb	sy
 800552e:	603b      	str	r3, [r7, #0]
}
 8005530:	bf00      	nop
 8005532:	e7fe      	b.n	8005532 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005534:	f000 fc1e 	bl	8005d74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005538:	4b38      	ldr	r3, [pc, #224]	; (800561c <xTaskResumeAll+0x114>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	3b01      	subs	r3, #1
 800553e:	4a37      	ldr	r2, [pc, #220]	; (800561c <xTaskResumeAll+0x114>)
 8005540:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005542:	4b36      	ldr	r3, [pc, #216]	; (800561c <xTaskResumeAll+0x114>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d161      	bne.n	800560e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800554a:	4b35      	ldr	r3, [pc, #212]	; (8005620 <xTaskResumeAll+0x118>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d05d      	beq.n	800560e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005552:	e02e      	b.n	80055b2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005554:	4b33      	ldr	r3, [pc, #204]	; (8005624 <xTaskResumeAll+0x11c>)
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	3318      	adds	r3, #24
 8005560:	4618      	mov	r0, r3
 8005562:	f7ff fb3f 	bl	8004be4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	3304      	adds	r3, #4
 800556a:	4618      	mov	r0, r3
 800556c:	f7ff fb3a 	bl	8004be4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005574:	2201      	movs	r2, #1
 8005576:	409a      	lsls	r2, r3
 8005578:	4b2b      	ldr	r3, [pc, #172]	; (8005628 <xTaskResumeAll+0x120>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4313      	orrs	r3, r2
 800557e:	4a2a      	ldr	r2, [pc, #168]	; (8005628 <xTaskResumeAll+0x120>)
 8005580:	6013      	str	r3, [r2, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005586:	4613      	mov	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	4413      	add	r3, r2
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	4a27      	ldr	r2, [pc, #156]	; (800562c <xTaskResumeAll+0x124>)
 8005590:	441a      	add	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	3304      	adds	r3, #4
 8005596:	4619      	mov	r1, r3
 8005598:	4610      	mov	r0, r2
 800559a:	f7ff fac6 	bl	8004b2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a2:	4b23      	ldr	r3, [pc, #140]	; (8005630 <xTaskResumeAll+0x128>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d302      	bcc.n	80055b2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80055ac:	4b21      	ldr	r3, [pc, #132]	; (8005634 <xTaskResumeAll+0x12c>)
 80055ae:	2201      	movs	r2, #1
 80055b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055b2:	4b1c      	ldr	r3, [pc, #112]	; (8005624 <xTaskResumeAll+0x11c>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1cc      	bne.n	8005554 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d001      	beq.n	80055c4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80055c0:	f000 fa22 	bl	8005a08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80055c4:	4b1c      	ldr	r3, [pc, #112]	; (8005638 <xTaskResumeAll+0x130>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d010      	beq.n	80055f2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80055d0:	f000 f846 	bl	8005660 <xTaskIncrementTick>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d002      	beq.n	80055e0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80055da:	4b16      	ldr	r3, [pc, #88]	; (8005634 <xTaskResumeAll+0x12c>)
 80055dc:	2201      	movs	r2, #1
 80055de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	3b01      	subs	r3, #1
 80055e4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1f1      	bne.n	80055d0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80055ec:	4b12      	ldr	r3, [pc, #72]	; (8005638 <xTaskResumeAll+0x130>)
 80055ee:	2200      	movs	r2, #0
 80055f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80055f2:	4b10      	ldr	r3, [pc, #64]	; (8005634 <xTaskResumeAll+0x12c>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d009      	beq.n	800560e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80055fa:	2301      	movs	r3, #1
 80055fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80055fe:	4b0f      	ldr	r3, [pc, #60]	; (800563c <xTaskResumeAll+0x134>)
 8005600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005604:	601a      	str	r2, [r3, #0]
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800560e:	f000 fbe1 	bl	8005dd4 <vPortExitCritical>

	return xAlreadyYielded;
 8005612:	68bb      	ldr	r3, [r7, #8]
}
 8005614:	4618      	mov	r0, r3
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	20000728 	.word	0x20000728
 8005620:	20000700 	.word	0x20000700
 8005624:	200006c0 	.word	0x200006c0
 8005628:	20000708 	.word	0x20000708
 800562c:	20000604 	.word	0x20000604
 8005630:	20000600 	.word	0x20000600
 8005634:	20000714 	.word	0x20000714
 8005638:	20000710 	.word	0x20000710
 800563c:	e000ed04 	.word	0xe000ed04

08005640 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005646:	4b05      	ldr	r3, [pc, #20]	; (800565c <xTaskGetTickCount+0x1c>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800564c:	687b      	ldr	r3, [r7, #4]
}
 800564e:	4618      	mov	r0, r3
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	20000704 	.word	0x20000704

08005660 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005666:	2300      	movs	r3, #0
 8005668:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800566a:	4b4e      	ldr	r3, [pc, #312]	; (80057a4 <xTaskIncrementTick+0x144>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	f040 808e 	bne.w	8005790 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005674:	4b4c      	ldr	r3, [pc, #304]	; (80057a8 <xTaskIncrementTick+0x148>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	3301      	adds	r3, #1
 800567a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800567c:	4a4a      	ldr	r2, [pc, #296]	; (80057a8 <xTaskIncrementTick+0x148>)
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d120      	bne.n	80056ca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005688:	4b48      	ldr	r3, [pc, #288]	; (80057ac <xTaskIncrementTick+0x14c>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00a      	beq.n	80056a8 <xTaskIncrementTick+0x48>
	__asm volatile
 8005692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005696:	f383 8811 	msr	BASEPRI, r3
 800569a:	f3bf 8f6f 	isb	sy
 800569e:	f3bf 8f4f 	dsb	sy
 80056a2:	603b      	str	r3, [r7, #0]
}
 80056a4:	bf00      	nop
 80056a6:	e7fe      	b.n	80056a6 <xTaskIncrementTick+0x46>
 80056a8:	4b40      	ldr	r3, [pc, #256]	; (80057ac <xTaskIncrementTick+0x14c>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	60fb      	str	r3, [r7, #12]
 80056ae:	4b40      	ldr	r3, [pc, #256]	; (80057b0 <xTaskIncrementTick+0x150>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a3e      	ldr	r2, [pc, #248]	; (80057ac <xTaskIncrementTick+0x14c>)
 80056b4:	6013      	str	r3, [r2, #0]
 80056b6:	4a3e      	ldr	r2, [pc, #248]	; (80057b0 <xTaskIncrementTick+0x150>)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6013      	str	r3, [r2, #0]
 80056bc:	4b3d      	ldr	r3, [pc, #244]	; (80057b4 <xTaskIncrementTick+0x154>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	3301      	adds	r3, #1
 80056c2:	4a3c      	ldr	r2, [pc, #240]	; (80057b4 <xTaskIncrementTick+0x154>)
 80056c4:	6013      	str	r3, [r2, #0]
 80056c6:	f000 f99f 	bl	8005a08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80056ca:	4b3b      	ldr	r3, [pc, #236]	; (80057b8 <xTaskIncrementTick+0x158>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d348      	bcc.n	8005766 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056d4:	4b35      	ldr	r3, [pc, #212]	; (80057ac <xTaskIncrementTick+0x14c>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d104      	bne.n	80056e8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056de:	4b36      	ldr	r3, [pc, #216]	; (80057b8 <xTaskIncrementTick+0x158>)
 80056e0:	f04f 32ff 	mov.w	r2, #4294967295
 80056e4:	601a      	str	r2, [r3, #0]
					break;
 80056e6:	e03e      	b.n	8005766 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056e8:	4b30      	ldr	r3, [pc, #192]	; (80057ac <xTaskIncrementTick+0x14c>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d203      	bcs.n	8005708 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005700:	4a2d      	ldr	r2, [pc, #180]	; (80057b8 <xTaskIncrementTick+0x158>)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005706:	e02e      	b.n	8005766 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	3304      	adds	r3, #4
 800570c:	4618      	mov	r0, r3
 800570e:	f7ff fa69 	bl	8004be4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005716:	2b00      	cmp	r3, #0
 8005718:	d004      	beq.n	8005724 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	3318      	adds	r3, #24
 800571e:	4618      	mov	r0, r3
 8005720:	f7ff fa60 	bl	8004be4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005728:	2201      	movs	r2, #1
 800572a:	409a      	lsls	r2, r3
 800572c:	4b23      	ldr	r3, [pc, #140]	; (80057bc <xTaskIncrementTick+0x15c>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4313      	orrs	r3, r2
 8005732:	4a22      	ldr	r2, [pc, #136]	; (80057bc <xTaskIncrementTick+0x15c>)
 8005734:	6013      	str	r3, [r2, #0]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800573a:	4613      	mov	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4a1f      	ldr	r2, [pc, #124]	; (80057c0 <xTaskIncrementTick+0x160>)
 8005744:	441a      	add	r2, r3
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	3304      	adds	r3, #4
 800574a:	4619      	mov	r1, r3
 800574c:	4610      	mov	r0, r2
 800574e:	f7ff f9ec 	bl	8004b2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005756:	4b1b      	ldr	r3, [pc, #108]	; (80057c4 <xTaskIncrementTick+0x164>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575c:	429a      	cmp	r2, r3
 800575e:	d3b9      	bcc.n	80056d4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005760:	2301      	movs	r3, #1
 8005762:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005764:	e7b6      	b.n	80056d4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005766:	4b17      	ldr	r3, [pc, #92]	; (80057c4 <xTaskIncrementTick+0x164>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800576c:	4914      	ldr	r1, [pc, #80]	; (80057c0 <xTaskIncrementTick+0x160>)
 800576e:	4613      	mov	r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	4413      	add	r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	440b      	add	r3, r1
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d901      	bls.n	8005782 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800577e:	2301      	movs	r3, #1
 8005780:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005782:	4b11      	ldr	r3, [pc, #68]	; (80057c8 <xTaskIncrementTick+0x168>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d007      	beq.n	800579a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800578a:	2301      	movs	r3, #1
 800578c:	617b      	str	r3, [r7, #20]
 800578e:	e004      	b.n	800579a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005790:	4b0e      	ldr	r3, [pc, #56]	; (80057cc <xTaskIncrementTick+0x16c>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	3301      	adds	r3, #1
 8005796:	4a0d      	ldr	r2, [pc, #52]	; (80057cc <xTaskIncrementTick+0x16c>)
 8005798:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800579a:	697b      	ldr	r3, [r7, #20]
}
 800579c:	4618      	mov	r0, r3
 800579e:	3718      	adds	r7, #24
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	20000728 	.word	0x20000728
 80057a8:	20000704 	.word	0x20000704
 80057ac:	200006b8 	.word	0x200006b8
 80057b0:	200006bc 	.word	0x200006bc
 80057b4:	20000718 	.word	0x20000718
 80057b8:	20000720 	.word	0x20000720
 80057bc:	20000708 	.word	0x20000708
 80057c0:	20000604 	.word	0x20000604
 80057c4:	20000600 	.word	0x20000600
 80057c8:	20000714 	.word	0x20000714
 80057cc:	20000710 	.word	0x20000710

080057d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80057d0:	b480      	push	{r7}
 80057d2:	b087      	sub	sp, #28
 80057d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057d6:	4b29      	ldr	r3, [pc, #164]	; (800587c <vTaskSwitchContext+0xac>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d003      	beq.n	80057e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80057de:	4b28      	ldr	r3, [pc, #160]	; (8005880 <vTaskSwitchContext+0xb0>)
 80057e0:	2201      	movs	r2, #1
 80057e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80057e4:	e044      	b.n	8005870 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80057e6:	4b26      	ldr	r3, [pc, #152]	; (8005880 <vTaskSwitchContext+0xb0>)
 80057e8:	2200      	movs	r2, #0
 80057ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057ec:	4b25      	ldr	r3, [pc, #148]	; (8005884 <vTaskSwitchContext+0xb4>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	fab3 f383 	clz	r3, r3
 80057f8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80057fa:	7afb      	ldrb	r3, [r7, #11]
 80057fc:	f1c3 031f 	rsb	r3, r3, #31
 8005800:	617b      	str	r3, [r7, #20]
 8005802:	4921      	ldr	r1, [pc, #132]	; (8005888 <vTaskSwitchContext+0xb8>)
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	4613      	mov	r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	4413      	add	r3, r2
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	440b      	add	r3, r1
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d10a      	bne.n	800582c <vTaskSwitchContext+0x5c>
	__asm volatile
 8005816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581a:	f383 8811 	msr	BASEPRI, r3
 800581e:	f3bf 8f6f 	isb	sy
 8005822:	f3bf 8f4f 	dsb	sy
 8005826:	607b      	str	r3, [r7, #4]
}
 8005828:	bf00      	nop
 800582a:	e7fe      	b.n	800582a <vTaskSwitchContext+0x5a>
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	4613      	mov	r3, r2
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	4413      	add	r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	4a14      	ldr	r2, [pc, #80]	; (8005888 <vTaskSwitchContext+0xb8>)
 8005838:	4413      	add	r3, r2
 800583a:	613b      	str	r3, [r7, #16]
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	685a      	ldr	r2, [r3, #4]
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	605a      	str	r2, [r3, #4]
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	3308      	adds	r3, #8
 800584e:	429a      	cmp	r2, r3
 8005850:	d104      	bne.n	800585c <vTaskSwitchContext+0x8c>
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	685a      	ldr	r2, [r3, #4]
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	605a      	str	r2, [r3, #4]
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	4a0a      	ldr	r2, [pc, #40]	; (800588c <vTaskSwitchContext+0xbc>)
 8005864:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005866:	4b09      	ldr	r3, [pc, #36]	; (800588c <vTaskSwitchContext+0xbc>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	334c      	adds	r3, #76	; 0x4c
 800586c:	4a08      	ldr	r2, [pc, #32]	; (8005890 <vTaskSwitchContext+0xc0>)
 800586e:	6013      	str	r3, [r2, #0]
}
 8005870:	bf00      	nop
 8005872:	371c      	adds	r7, #28
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr
 800587c:	20000728 	.word	0x20000728
 8005880:	20000714 	.word	0x20000714
 8005884:	20000708 	.word	0x20000708
 8005888:	20000604 	.word	0x20000604
 800588c:	20000600 	.word	0x20000600
 8005890:	20000010 	.word	0x20000010

08005894 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800589c:	f000 f852 	bl	8005944 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80058a0:	4b06      	ldr	r3, [pc, #24]	; (80058bc <prvIdleTask+0x28>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d9f9      	bls.n	800589c <prvIdleTask+0x8>
			{
				taskYIELD();
 80058a8:	4b05      	ldr	r3, [pc, #20]	; (80058c0 <prvIdleTask+0x2c>)
 80058aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058ae:	601a      	str	r2, [r3, #0]
 80058b0:	f3bf 8f4f 	dsb	sy
 80058b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80058b8:	e7f0      	b.n	800589c <prvIdleTask+0x8>
 80058ba:	bf00      	nop
 80058bc:	20000604 	.word	0x20000604
 80058c0:	e000ed04 	.word	0xe000ed04

080058c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058ca:	2300      	movs	r3, #0
 80058cc:	607b      	str	r3, [r7, #4]
 80058ce:	e00c      	b.n	80058ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	4613      	mov	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4413      	add	r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4a12      	ldr	r2, [pc, #72]	; (8005924 <prvInitialiseTaskLists+0x60>)
 80058dc:	4413      	add	r3, r2
 80058de:	4618      	mov	r0, r3
 80058e0:	f7ff f8f6 	bl	8004ad0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	3301      	adds	r3, #1
 80058e8:	607b      	str	r3, [r7, #4]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2b06      	cmp	r3, #6
 80058ee:	d9ef      	bls.n	80058d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80058f0:	480d      	ldr	r0, [pc, #52]	; (8005928 <prvInitialiseTaskLists+0x64>)
 80058f2:	f7ff f8ed 	bl	8004ad0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80058f6:	480d      	ldr	r0, [pc, #52]	; (800592c <prvInitialiseTaskLists+0x68>)
 80058f8:	f7ff f8ea 	bl	8004ad0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80058fc:	480c      	ldr	r0, [pc, #48]	; (8005930 <prvInitialiseTaskLists+0x6c>)
 80058fe:	f7ff f8e7 	bl	8004ad0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005902:	480c      	ldr	r0, [pc, #48]	; (8005934 <prvInitialiseTaskLists+0x70>)
 8005904:	f7ff f8e4 	bl	8004ad0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005908:	480b      	ldr	r0, [pc, #44]	; (8005938 <prvInitialiseTaskLists+0x74>)
 800590a:	f7ff f8e1 	bl	8004ad0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800590e:	4b0b      	ldr	r3, [pc, #44]	; (800593c <prvInitialiseTaskLists+0x78>)
 8005910:	4a05      	ldr	r2, [pc, #20]	; (8005928 <prvInitialiseTaskLists+0x64>)
 8005912:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005914:	4b0a      	ldr	r3, [pc, #40]	; (8005940 <prvInitialiseTaskLists+0x7c>)
 8005916:	4a05      	ldr	r2, [pc, #20]	; (800592c <prvInitialiseTaskLists+0x68>)
 8005918:	601a      	str	r2, [r3, #0]
}
 800591a:	bf00      	nop
 800591c:	3708      	adds	r7, #8
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	20000604 	.word	0x20000604
 8005928:	20000690 	.word	0x20000690
 800592c:	200006a4 	.word	0x200006a4
 8005930:	200006c0 	.word	0x200006c0
 8005934:	200006d4 	.word	0x200006d4
 8005938:	200006ec 	.word	0x200006ec
 800593c:	200006b8 	.word	0x200006b8
 8005940:	200006bc 	.word	0x200006bc

08005944 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800594a:	e019      	b.n	8005980 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800594c:	f000 fa12 	bl	8005d74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005950:	4b10      	ldr	r3, [pc, #64]	; (8005994 <prvCheckTasksWaitingTermination+0x50>)
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	3304      	adds	r3, #4
 800595c:	4618      	mov	r0, r3
 800595e:	f7ff f941 	bl	8004be4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005962:	4b0d      	ldr	r3, [pc, #52]	; (8005998 <prvCheckTasksWaitingTermination+0x54>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	3b01      	subs	r3, #1
 8005968:	4a0b      	ldr	r2, [pc, #44]	; (8005998 <prvCheckTasksWaitingTermination+0x54>)
 800596a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800596c:	4b0b      	ldr	r3, [pc, #44]	; (800599c <prvCheckTasksWaitingTermination+0x58>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	3b01      	subs	r3, #1
 8005972:	4a0a      	ldr	r2, [pc, #40]	; (800599c <prvCheckTasksWaitingTermination+0x58>)
 8005974:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005976:	f000 fa2d 	bl	8005dd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f810 	bl	80059a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005980:	4b06      	ldr	r3, [pc, #24]	; (800599c <prvCheckTasksWaitingTermination+0x58>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1e1      	bne.n	800594c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005988:	bf00      	nop
 800598a:	bf00      	nop
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	200006d4 	.word	0x200006d4
 8005998:	20000700 	.word	0x20000700
 800599c:	200006e8 	.word	0x200006e8

080059a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	334c      	adds	r3, #76	; 0x4c
 80059ac:	4618      	mov	r0, r3
 80059ae:	f001 fb33 	bl	8007018 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d108      	bne.n	80059ce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c0:	4618      	mov	r0, r3
 80059c2:	f000 fbc5 	bl	8006150 <vPortFree>
				vPortFree( pxTCB );
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 fbc2 	bl	8006150 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80059cc:	e018      	b.n	8005a00 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d103      	bne.n	80059e0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 fbb9 	bl	8006150 <vPortFree>
	}
 80059de:	e00f      	b.n	8005a00 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d00a      	beq.n	8005a00 <prvDeleteTCB+0x60>
	__asm volatile
 80059ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ee:	f383 8811 	msr	BASEPRI, r3
 80059f2:	f3bf 8f6f 	isb	sy
 80059f6:	f3bf 8f4f 	dsb	sy
 80059fa:	60fb      	str	r3, [r7, #12]
}
 80059fc:	bf00      	nop
 80059fe:	e7fe      	b.n	80059fe <prvDeleteTCB+0x5e>
	}
 8005a00:	bf00      	nop
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a0e:	4b0c      	ldr	r3, [pc, #48]	; (8005a40 <prvResetNextTaskUnblockTime+0x38>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d104      	bne.n	8005a22 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a18:	4b0a      	ldr	r3, [pc, #40]	; (8005a44 <prvResetNextTaskUnblockTime+0x3c>)
 8005a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a1e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a20:	e008      	b.n	8005a34 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a22:	4b07      	ldr	r3, [pc, #28]	; (8005a40 <prvResetNextTaskUnblockTime+0x38>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	4a04      	ldr	r2, [pc, #16]	; (8005a44 <prvResetNextTaskUnblockTime+0x3c>)
 8005a32:	6013      	str	r3, [r2, #0]
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr
 8005a40:	200006b8 	.word	0x200006b8
 8005a44:	20000720 	.word	0x20000720

08005a48 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005a52:	4b29      	ldr	r3, [pc, #164]	; (8005af8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a58:	4b28      	ldr	r3, [pc, #160]	; (8005afc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	3304      	adds	r3, #4
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7ff f8c0 	bl	8004be4 <uxListRemove>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10b      	bne.n	8005a82 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005a6a:	4b24      	ldr	r3, [pc, #144]	; (8005afc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a70:	2201      	movs	r2, #1
 8005a72:	fa02 f303 	lsl.w	r3, r2, r3
 8005a76:	43da      	mvns	r2, r3
 8005a78:	4b21      	ldr	r3, [pc, #132]	; (8005b00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	4a20      	ldr	r2, [pc, #128]	; (8005b00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005a80:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a88:	d10a      	bne.n	8005aa0 <prvAddCurrentTaskToDelayedList+0x58>
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d007      	beq.n	8005aa0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a90:	4b1a      	ldr	r3, [pc, #104]	; (8005afc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	3304      	adds	r3, #4
 8005a96:	4619      	mov	r1, r3
 8005a98:	481a      	ldr	r0, [pc, #104]	; (8005b04 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005a9a:	f7ff f846 	bl	8004b2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005a9e:	e026      	b.n	8005aee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005aa8:	4b14      	ldr	r3, [pc, #80]	; (8005afc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d209      	bcs.n	8005acc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ab8:	4b13      	ldr	r3, [pc, #76]	; (8005b08 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	4b0f      	ldr	r3, [pc, #60]	; (8005afc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3304      	adds	r3, #4
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	4610      	mov	r0, r2
 8005ac6:	f7ff f854 	bl	8004b72 <vListInsert>
}
 8005aca:	e010      	b.n	8005aee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005acc:	4b0f      	ldr	r3, [pc, #60]	; (8005b0c <prvAddCurrentTaskToDelayedList+0xc4>)
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	4b0a      	ldr	r3, [pc, #40]	; (8005afc <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	3304      	adds	r3, #4
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	4610      	mov	r0, r2
 8005ada:	f7ff f84a 	bl	8004b72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005ade:	4b0c      	ldr	r3, [pc, #48]	; (8005b10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d202      	bcs.n	8005aee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005ae8:	4a09      	ldr	r2, [pc, #36]	; (8005b10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	6013      	str	r3, [r2, #0]
}
 8005aee:	bf00      	nop
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	20000704 	.word	0x20000704
 8005afc:	20000600 	.word	0x20000600
 8005b00:	20000708 	.word	0x20000708
 8005b04:	200006ec 	.word	0x200006ec
 8005b08:	200006bc 	.word	0x200006bc
 8005b0c:	200006b8 	.word	0x200006b8
 8005b10:	20000720 	.word	0x20000720

08005b14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	3b04      	subs	r3, #4
 8005b24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005b2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	3b04      	subs	r3, #4
 8005b32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	f023 0201 	bic.w	r2, r3, #1
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	3b04      	subs	r3, #4
 8005b42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b44:	4a0c      	ldr	r2, [pc, #48]	; (8005b78 <pxPortInitialiseStack+0x64>)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	3b14      	subs	r3, #20
 8005b4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	3b04      	subs	r3, #4
 8005b5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f06f 0202 	mvn.w	r2, #2
 8005b62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	3b20      	subs	r3, #32
 8005b68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr
 8005b78:	08005b7d 	.word	0x08005b7d

08005b7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005b82:	2300      	movs	r3, #0
 8005b84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005b86:	4b12      	ldr	r3, [pc, #72]	; (8005bd0 <prvTaskExitError+0x54>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b8e:	d00a      	beq.n	8005ba6 <prvTaskExitError+0x2a>
	__asm volatile
 8005b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b94:	f383 8811 	msr	BASEPRI, r3
 8005b98:	f3bf 8f6f 	isb	sy
 8005b9c:	f3bf 8f4f 	dsb	sy
 8005ba0:	60fb      	str	r3, [r7, #12]
}
 8005ba2:	bf00      	nop
 8005ba4:	e7fe      	b.n	8005ba4 <prvTaskExitError+0x28>
	__asm volatile
 8005ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005baa:	f383 8811 	msr	BASEPRI, r3
 8005bae:	f3bf 8f6f 	isb	sy
 8005bb2:	f3bf 8f4f 	dsb	sy
 8005bb6:	60bb      	str	r3, [r7, #8]
}
 8005bb8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005bba:	bf00      	nop
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d0fc      	beq.n	8005bbc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005bc2:	bf00      	nop
 8005bc4:	bf00      	nop
 8005bc6:	3714      	adds	r7, #20
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr
 8005bd0:	2000000c 	.word	0x2000000c
	...

08005be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005be0:	4b07      	ldr	r3, [pc, #28]	; (8005c00 <pxCurrentTCBConst2>)
 8005be2:	6819      	ldr	r1, [r3, #0]
 8005be4:	6808      	ldr	r0, [r1, #0]
 8005be6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bea:	f380 8809 	msr	PSP, r0
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	f04f 0000 	mov.w	r0, #0
 8005bf6:	f380 8811 	msr	BASEPRI, r0
 8005bfa:	4770      	bx	lr
 8005bfc:	f3af 8000 	nop.w

08005c00 <pxCurrentTCBConst2>:
 8005c00:	20000600 	.word	0x20000600
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005c04:	bf00      	nop
 8005c06:	bf00      	nop

08005c08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005c08:	4808      	ldr	r0, [pc, #32]	; (8005c2c <prvPortStartFirstTask+0x24>)
 8005c0a:	6800      	ldr	r0, [r0, #0]
 8005c0c:	6800      	ldr	r0, [r0, #0]
 8005c0e:	f380 8808 	msr	MSP, r0
 8005c12:	f04f 0000 	mov.w	r0, #0
 8005c16:	f380 8814 	msr	CONTROL, r0
 8005c1a:	b662      	cpsie	i
 8005c1c:	b661      	cpsie	f
 8005c1e:	f3bf 8f4f 	dsb	sy
 8005c22:	f3bf 8f6f 	isb	sy
 8005c26:	df00      	svc	0
 8005c28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005c2a:	bf00      	nop
 8005c2c:	e000ed08 	.word	0xe000ed08

08005c30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005c36:	4b46      	ldr	r3, [pc, #280]	; (8005d50 <xPortStartScheduler+0x120>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a46      	ldr	r2, [pc, #280]	; (8005d54 <xPortStartScheduler+0x124>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d10a      	bne.n	8005c56 <xPortStartScheduler+0x26>
	__asm volatile
 8005c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c44:	f383 8811 	msr	BASEPRI, r3
 8005c48:	f3bf 8f6f 	isb	sy
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	613b      	str	r3, [r7, #16]
}
 8005c52:	bf00      	nop
 8005c54:	e7fe      	b.n	8005c54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005c56:	4b3e      	ldr	r3, [pc, #248]	; (8005d50 <xPortStartScheduler+0x120>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a3f      	ldr	r2, [pc, #252]	; (8005d58 <xPortStartScheduler+0x128>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d10a      	bne.n	8005c76 <xPortStartScheduler+0x46>
	__asm volatile
 8005c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	60fb      	str	r3, [r7, #12]
}
 8005c72:	bf00      	nop
 8005c74:	e7fe      	b.n	8005c74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005c76:	4b39      	ldr	r3, [pc, #228]	; (8005d5c <xPortStartScheduler+0x12c>)
 8005c78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	22ff      	movs	r2, #255	; 0xff
 8005c86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005c90:	78fb      	ldrb	r3, [r7, #3]
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005c98:	b2da      	uxtb	r2, r3
 8005c9a:	4b31      	ldr	r3, [pc, #196]	; (8005d60 <xPortStartScheduler+0x130>)
 8005c9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005c9e:	4b31      	ldr	r3, [pc, #196]	; (8005d64 <xPortStartScheduler+0x134>)
 8005ca0:	2207      	movs	r2, #7
 8005ca2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ca4:	e009      	b.n	8005cba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005ca6:	4b2f      	ldr	r3, [pc, #188]	; (8005d64 <xPortStartScheduler+0x134>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	3b01      	subs	r3, #1
 8005cac:	4a2d      	ldr	r2, [pc, #180]	; (8005d64 <xPortStartScheduler+0x134>)
 8005cae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005cb0:	78fb      	ldrb	r3, [r7, #3]
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	005b      	lsls	r3, r3, #1
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005cba:	78fb      	ldrb	r3, [r7, #3]
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc2:	2b80      	cmp	r3, #128	; 0x80
 8005cc4:	d0ef      	beq.n	8005ca6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005cc6:	4b27      	ldr	r3, [pc, #156]	; (8005d64 <xPortStartScheduler+0x134>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f1c3 0307 	rsb	r3, r3, #7
 8005cce:	2b04      	cmp	r3, #4
 8005cd0:	d00a      	beq.n	8005ce8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd6:	f383 8811 	msr	BASEPRI, r3
 8005cda:	f3bf 8f6f 	isb	sy
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	60bb      	str	r3, [r7, #8]
}
 8005ce4:	bf00      	nop
 8005ce6:	e7fe      	b.n	8005ce6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ce8:	4b1e      	ldr	r3, [pc, #120]	; (8005d64 <xPortStartScheduler+0x134>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	021b      	lsls	r3, r3, #8
 8005cee:	4a1d      	ldr	r2, [pc, #116]	; (8005d64 <xPortStartScheduler+0x134>)
 8005cf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005cf2:	4b1c      	ldr	r3, [pc, #112]	; (8005d64 <xPortStartScheduler+0x134>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005cfa:	4a1a      	ldr	r2, [pc, #104]	; (8005d64 <xPortStartScheduler+0x134>)
 8005cfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	b2da      	uxtb	r2, r3
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005d06:	4b18      	ldr	r3, [pc, #96]	; (8005d68 <xPortStartScheduler+0x138>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a17      	ldr	r2, [pc, #92]	; (8005d68 <xPortStartScheduler+0x138>)
 8005d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005d12:	4b15      	ldr	r3, [pc, #84]	; (8005d68 <xPortStartScheduler+0x138>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a14      	ldr	r2, [pc, #80]	; (8005d68 <xPortStartScheduler+0x138>)
 8005d18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005d1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005d1e:	f000 f8dd 	bl	8005edc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005d22:	4b12      	ldr	r3, [pc, #72]	; (8005d6c <xPortStartScheduler+0x13c>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005d28:	f000 f8fc 	bl	8005f24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005d2c:	4b10      	ldr	r3, [pc, #64]	; (8005d70 <xPortStartScheduler+0x140>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a0f      	ldr	r2, [pc, #60]	; (8005d70 <xPortStartScheduler+0x140>)
 8005d32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005d36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005d38:	f7ff ff66 	bl	8005c08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005d3c:	f7ff fd48 	bl	80057d0 <vTaskSwitchContext>
	prvTaskExitError();
 8005d40:	f7ff ff1c 	bl	8005b7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3718      	adds	r7, #24
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	e000ed00 	.word	0xe000ed00
 8005d54:	410fc271 	.word	0x410fc271
 8005d58:	410fc270 	.word	0x410fc270
 8005d5c:	e000e400 	.word	0xe000e400
 8005d60:	2000072c 	.word	0x2000072c
 8005d64:	20000730 	.word	0x20000730
 8005d68:	e000ed20 	.word	0xe000ed20
 8005d6c:	2000000c 	.word	0x2000000c
 8005d70:	e000ef34 	.word	0xe000ef34

08005d74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
	__asm volatile
 8005d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7e:	f383 8811 	msr	BASEPRI, r3
 8005d82:	f3bf 8f6f 	isb	sy
 8005d86:	f3bf 8f4f 	dsb	sy
 8005d8a:	607b      	str	r3, [r7, #4]
}
 8005d8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005d8e:	4b0f      	ldr	r3, [pc, #60]	; (8005dcc <vPortEnterCritical+0x58>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	3301      	adds	r3, #1
 8005d94:	4a0d      	ldr	r2, [pc, #52]	; (8005dcc <vPortEnterCritical+0x58>)
 8005d96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005d98:	4b0c      	ldr	r3, [pc, #48]	; (8005dcc <vPortEnterCritical+0x58>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d10f      	bne.n	8005dc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005da0:	4b0b      	ldr	r3, [pc, #44]	; (8005dd0 <vPortEnterCritical+0x5c>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00a      	beq.n	8005dc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dae:	f383 8811 	msr	BASEPRI, r3
 8005db2:	f3bf 8f6f 	isb	sy
 8005db6:	f3bf 8f4f 	dsb	sy
 8005dba:	603b      	str	r3, [r7, #0]
}
 8005dbc:	bf00      	nop
 8005dbe:	e7fe      	b.n	8005dbe <vPortEnterCritical+0x4a>
	}
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr
 8005dcc:	2000000c 	.word	0x2000000c
 8005dd0:	e000ed04 	.word	0xe000ed04

08005dd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005dda:	4b12      	ldr	r3, [pc, #72]	; (8005e24 <vPortExitCritical+0x50>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10a      	bne.n	8005df8 <vPortExitCritical+0x24>
	__asm volatile
 8005de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de6:	f383 8811 	msr	BASEPRI, r3
 8005dea:	f3bf 8f6f 	isb	sy
 8005dee:	f3bf 8f4f 	dsb	sy
 8005df2:	607b      	str	r3, [r7, #4]
}
 8005df4:	bf00      	nop
 8005df6:	e7fe      	b.n	8005df6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005df8:	4b0a      	ldr	r3, [pc, #40]	; (8005e24 <vPortExitCritical+0x50>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	4a09      	ldr	r2, [pc, #36]	; (8005e24 <vPortExitCritical+0x50>)
 8005e00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005e02:	4b08      	ldr	r3, [pc, #32]	; (8005e24 <vPortExitCritical+0x50>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d105      	bne.n	8005e16 <vPortExitCritical+0x42>
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	f383 8811 	msr	BASEPRI, r3
}
 8005e14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005e16:	bf00      	nop
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	2000000c 	.word	0x2000000c
	...

08005e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005e30:	f3ef 8009 	mrs	r0, PSP
 8005e34:	f3bf 8f6f 	isb	sy
 8005e38:	4b15      	ldr	r3, [pc, #84]	; (8005e90 <pxCurrentTCBConst>)
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	f01e 0f10 	tst.w	lr, #16
 8005e40:	bf08      	it	eq
 8005e42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005e46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e4a:	6010      	str	r0, [r2, #0]
 8005e4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005e50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005e54:	f380 8811 	msr	BASEPRI, r0
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	f3bf 8f6f 	isb	sy
 8005e60:	f7ff fcb6 	bl	80057d0 <vTaskSwitchContext>
 8005e64:	f04f 0000 	mov.w	r0, #0
 8005e68:	f380 8811 	msr	BASEPRI, r0
 8005e6c:	bc09      	pop	{r0, r3}
 8005e6e:	6819      	ldr	r1, [r3, #0]
 8005e70:	6808      	ldr	r0, [r1, #0]
 8005e72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e76:	f01e 0f10 	tst.w	lr, #16
 8005e7a:	bf08      	it	eq
 8005e7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005e80:	f380 8809 	msr	PSP, r0
 8005e84:	f3bf 8f6f 	isb	sy
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	f3af 8000 	nop.w

08005e90 <pxCurrentTCBConst>:
 8005e90:	20000600 	.word	0x20000600
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005e94:	bf00      	nop
 8005e96:	bf00      	nop

08005e98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea2:	f383 8811 	msr	BASEPRI, r3
 8005ea6:	f3bf 8f6f 	isb	sy
 8005eaa:	f3bf 8f4f 	dsb	sy
 8005eae:	607b      	str	r3, [r7, #4]
}
 8005eb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005eb2:	f7ff fbd5 	bl	8005660 <xTaskIncrementTick>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d003      	beq.n	8005ec4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005ebc:	4b06      	ldr	r3, [pc, #24]	; (8005ed8 <SysTick_Handler+0x40>)
 8005ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ec2:	601a      	str	r2, [r3, #0]
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	f383 8811 	msr	BASEPRI, r3
}
 8005ece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005ed0:	bf00      	nop
 8005ed2:	3708      	adds	r7, #8
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	e000ed04 	.word	0xe000ed04

08005edc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005edc:	b480      	push	{r7}
 8005ede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ee0:	4b0b      	ldr	r3, [pc, #44]	; (8005f10 <vPortSetupTimerInterrupt+0x34>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ee6:	4b0b      	ldr	r3, [pc, #44]	; (8005f14 <vPortSetupTimerInterrupt+0x38>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005eec:	4b0a      	ldr	r3, [pc, #40]	; (8005f18 <vPortSetupTimerInterrupt+0x3c>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a0a      	ldr	r2, [pc, #40]	; (8005f1c <vPortSetupTimerInterrupt+0x40>)
 8005ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef6:	099b      	lsrs	r3, r3, #6
 8005ef8:	4a09      	ldr	r2, [pc, #36]	; (8005f20 <vPortSetupTimerInterrupt+0x44>)
 8005efa:	3b01      	subs	r3, #1
 8005efc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005efe:	4b04      	ldr	r3, [pc, #16]	; (8005f10 <vPortSetupTimerInterrupt+0x34>)
 8005f00:	2207      	movs	r2, #7
 8005f02:	601a      	str	r2, [r3, #0]
}
 8005f04:	bf00      	nop
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	e000e010 	.word	0xe000e010
 8005f14:	e000e018 	.word	0xe000e018
 8005f18:	20000000 	.word	0x20000000
 8005f1c:	10624dd3 	.word	0x10624dd3
 8005f20:	e000e014 	.word	0xe000e014

08005f24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005f24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005f34 <vPortEnableVFP+0x10>
 8005f28:	6801      	ldr	r1, [r0, #0]
 8005f2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005f2e:	6001      	str	r1, [r0, #0]
 8005f30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005f32:	bf00      	nop
 8005f34:	e000ed88 	.word	0xe000ed88

08005f38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005f3e:	f3ef 8305 	mrs	r3, IPSR
 8005f42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2b0f      	cmp	r3, #15
 8005f48:	d914      	bls.n	8005f74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005f4a:	4a17      	ldr	r2, [pc, #92]	; (8005fa8 <vPortValidateInterruptPriority+0x70>)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4413      	add	r3, r2
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005f54:	4b15      	ldr	r3, [pc, #84]	; (8005fac <vPortValidateInterruptPriority+0x74>)
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	7afa      	ldrb	r2, [r7, #11]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d20a      	bcs.n	8005f74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f62:	f383 8811 	msr	BASEPRI, r3
 8005f66:	f3bf 8f6f 	isb	sy
 8005f6a:	f3bf 8f4f 	dsb	sy
 8005f6e:	607b      	str	r3, [r7, #4]
}
 8005f70:	bf00      	nop
 8005f72:	e7fe      	b.n	8005f72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005f74:	4b0e      	ldr	r3, [pc, #56]	; (8005fb0 <vPortValidateInterruptPriority+0x78>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f7c:	4b0d      	ldr	r3, [pc, #52]	; (8005fb4 <vPortValidateInterruptPriority+0x7c>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d90a      	bls.n	8005f9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f88:	f383 8811 	msr	BASEPRI, r3
 8005f8c:	f3bf 8f6f 	isb	sy
 8005f90:	f3bf 8f4f 	dsb	sy
 8005f94:	603b      	str	r3, [r7, #0]
}
 8005f96:	bf00      	nop
 8005f98:	e7fe      	b.n	8005f98 <vPortValidateInterruptPriority+0x60>
	}
 8005f9a:	bf00      	nop
 8005f9c:	3714      	adds	r7, #20
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	e000e3f0 	.word	0xe000e3f0
 8005fac:	2000072c 	.word	0x2000072c
 8005fb0:	e000ed0c 	.word	0xe000ed0c
 8005fb4:	20000730 	.word	0x20000730

08005fb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b08a      	sub	sp, #40	; 0x28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005fc4:	f7ff fa92 	bl	80054ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005fc8:	4b5b      	ldr	r3, [pc, #364]	; (8006138 <pvPortMalloc+0x180>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d101      	bne.n	8005fd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005fd0:	f000 f920 	bl	8006214 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005fd4:	4b59      	ldr	r3, [pc, #356]	; (800613c <pvPortMalloc+0x184>)
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4013      	ands	r3, r2
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f040 8093 	bne.w	8006108 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d01d      	beq.n	8006024 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005fe8:	2208      	movs	r2, #8
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4413      	add	r3, r2
 8005fee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f003 0307 	and.w	r3, r3, #7
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d014      	beq.n	8006024 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f023 0307 	bic.w	r3, r3, #7
 8006000:	3308      	adds	r3, #8
 8006002:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f003 0307 	and.w	r3, r3, #7
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00a      	beq.n	8006024 <pvPortMalloc+0x6c>
	__asm volatile
 800600e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006012:	f383 8811 	msr	BASEPRI, r3
 8006016:	f3bf 8f6f 	isb	sy
 800601a:	f3bf 8f4f 	dsb	sy
 800601e:	617b      	str	r3, [r7, #20]
}
 8006020:	bf00      	nop
 8006022:	e7fe      	b.n	8006022 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d06e      	beq.n	8006108 <pvPortMalloc+0x150>
 800602a:	4b45      	ldr	r3, [pc, #276]	; (8006140 <pvPortMalloc+0x188>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	429a      	cmp	r2, r3
 8006032:	d869      	bhi.n	8006108 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006034:	4b43      	ldr	r3, [pc, #268]	; (8006144 <pvPortMalloc+0x18c>)
 8006036:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006038:	4b42      	ldr	r3, [pc, #264]	; (8006144 <pvPortMalloc+0x18c>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800603e:	e004      	b.n	800604a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006042:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	429a      	cmp	r2, r3
 8006052:	d903      	bls.n	800605c <pvPortMalloc+0xa4>
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1f1      	bne.n	8006040 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800605c:	4b36      	ldr	r3, [pc, #216]	; (8006138 <pvPortMalloc+0x180>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006062:	429a      	cmp	r2, r3
 8006064:	d050      	beq.n	8006108 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006066:	6a3b      	ldr	r3, [r7, #32]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2208      	movs	r2, #8
 800606c:	4413      	add	r3, r2
 800606e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	6a3b      	ldr	r3, [r7, #32]
 8006076:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	1ad2      	subs	r2, r2, r3
 8006080:	2308      	movs	r3, #8
 8006082:	005b      	lsls	r3, r3, #1
 8006084:	429a      	cmp	r2, r3
 8006086:	d91f      	bls.n	80060c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4413      	add	r3, r2
 800608e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	f003 0307 	and.w	r3, r3, #7
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00a      	beq.n	80060b0 <pvPortMalloc+0xf8>
	__asm volatile
 800609a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609e:	f383 8811 	msr	BASEPRI, r3
 80060a2:	f3bf 8f6f 	isb	sy
 80060a6:	f3bf 8f4f 	dsb	sy
 80060aa:	613b      	str	r3, [r7, #16]
}
 80060ac:	bf00      	nop
 80060ae:	e7fe      	b.n	80060ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80060b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	1ad2      	subs	r2, r2, r3
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80060bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80060c2:	69b8      	ldr	r0, [r7, #24]
 80060c4:	f000 f908 	bl	80062d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80060c8:	4b1d      	ldr	r3, [pc, #116]	; (8006140 <pvPortMalloc+0x188>)
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	4a1b      	ldr	r2, [pc, #108]	; (8006140 <pvPortMalloc+0x188>)
 80060d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80060d6:	4b1a      	ldr	r3, [pc, #104]	; (8006140 <pvPortMalloc+0x188>)
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	4b1b      	ldr	r3, [pc, #108]	; (8006148 <pvPortMalloc+0x190>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d203      	bcs.n	80060ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80060e2:	4b17      	ldr	r3, [pc, #92]	; (8006140 <pvPortMalloc+0x188>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a18      	ldr	r2, [pc, #96]	; (8006148 <pvPortMalloc+0x190>)
 80060e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	685a      	ldr	r2, [r3, #4]
 80060ee:	4b13      	ldr	r3, [pc, #76]	; (800613c <pvPortMalloc+0x184>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	431a      	orrs	r2, r3
 80060f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80060f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fa:	2200      	movs	r2, #0
 80060fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80060fe:	4b13      	ldr	r3, [pc, #76]	; (800614c <pvPortMalloc+0x194>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	3301      	adds	r3, #1
 8006104:	4a11      	ldr	r2, [pc, #68]	; (800614c <pvPortMalloc+0x194>)
 8006106:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006108:	f7ff f9fe 	bl	8005508 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	f003 0307 	and.w	r3, r3, #7
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00a      	beq.n	800612c <pvPortMalloc+0x174>
	__asm volatile
 8006116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611a:	f383 8811 	msr	BASEPRI, r3
 800611e:	f3bf 8f6f 	isb	sy
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	60fb      	str	r3, [r7, #12]
}
 8006128:	bf00      	nop
 800612a:	e7fe      	b.n	800612a <pvPortMalloc+0x172>
	return pvReturn;
 800612c:	69fb      	ldr	r3, [r7, #28]
}
 800612e:	4618      	mov	r0, r3
 8006130:	3728      	adds	r7, #40	; 0x28
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	200012f4 	.word	0x200012f4
 800613c:	20001308 	.word	0x20001308
 8006140:	200012f8 	.word	0x200012f8
 8006144:	200012ec 	.word	0x200012ec
 8006148:	200012fc 	.word	0x200012fc
 800614c:	20001300 	.word	0x20001300

08006150 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b086      	sub	sp, #24
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d04d      	beq.n	80061fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006162:	2308      	movs	r3, #8
 8006164:	425b      	negs	r3, r3
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	4413      	add	r3, r2
 800616a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	685a      	ldr	r2, [r3, #4]
 8006174:	4b24      	ldr	r3, [pc, #144]	; (8006208 <vPortFree+0xb8>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4013      	ands	r3, r2
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10a      	bne.n	8006194 <vPortFree+0x44>
	__asm volatile
 800617e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	60fb      	str	r3, [r7, #12]
}
 8006190:	bf00      	nop
 8006192:	e7fe      	b.n	8006192 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00a      	beq.n	80061b2 <vPortFree+0x62>
	__asm volatile
 800619c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a0:	f383 8811 	msr	BASEPRI, r3
 80061a4:	f3bf 8f6f 	isb	sy
 80061a8:	f3bf 8f4f 	dsb	sy
 80061ac:	60bb      	str	r3, [r7, #8]
}
 80061ae:	bf00      	nop
 80061b0:	e7fe      	b.n	80061b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	4b14      	ldr	r3, [pc, #80]	; (8006208 <vPortFree+0xb8>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4013      	ands	r3, r2
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d01e      	beq.n	80061fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d11a      	bne.n	80061fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	4b0e      	ldr	r3, [pc, #56]	; (8006208 <vPortFree+0xb8>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	43db      	mvns	r3, r3
 80061d2:	401a      	ands	r2, r3
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80061d8:	f7ff f988 	bl	80054ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	685a      	ldr	r2, [r3, #4]
 80061e0:	4b0a      	ldr	r3, [pc, #40]	; (800620c <vPortFree+0xbc>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4413      	add	r3, r2
 80061e6:	4a09      	ldr	r2, [pc, #36]	; (800620c <vPortFree+0xbc>)
 80061e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80061ea:	6938      	ldr	r0, [r7, #16]
 80061ec:	f000 f874 	bl	80062d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80061f0:	4b07      	ldr	r3, [pc, #28]	; (8006210 <vPortFree+0xc0>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	3301      	adds	r3, #1
 80061f6:	4a06      	ldr	r2, [pc, #24]	; (8006210 <vPortFree+0xc0>)
 80061f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80061fa:	f7ff f985 	bl	8005508 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80061fe:	bf00      	nop
 8006200:	3718      	adds	r7, #24
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	20001308 	.word	0x20001308
 800620c:	200012f8 	.word	0x200012f8
 8006210:	20001304 	.word	0x20001304

08006214 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800621a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800621e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006220:	4b27      	ldr	r3, [pc, #156]	; (80062c0 <prvHeapInit+0xac>)
 8006222:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f003 0307 	and.w	r3, r3, #7
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00c      	beq.n	8006248 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	3307      	adds	r3, #7
 8006232:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f023 0307 	bic.w	r3, r3, #7
 800623a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	4a1f      	ldr	r2, [pc, #124]	; (80062c0 <prvHeapInit+0xac>)
 8006244:	4413      	add	r3, r2
 8006246:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800624c:	4a1d      	ldr	r2, [pc, #116]	; (80062c4 <prvHeapInit+0xb0>)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006252:	4b1c      	ldr	r3, [pc, #112]	; (80062c4 <prvHeapInit+0xb0>)
 8006254:	2200      	movs	r2, #0
 8006256:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	4413      	add	r3, r2
 800625e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006260:	2208      	movs	r2, #8
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	1a9b      	subs	r3, r3, r2
 8006266:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f023 0307 	bic.w	r3, r3, #7
 800626e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	4a15      	ldr	r2, [pc, #84]	; (80062c8 <prvHeapInit+0xb4>)
 8006274:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006276:	4b14      	ldr	r3, [pc, #80]	; (80062c8 <prvHeapInit+0xb4>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2200      	movs	r2, #0
 800627c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800627e:	4b12      	ldr	r3, [pc, #72]	; (80062c8 <prvHeapInit+0xb4>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2200      	movs	r2, #0
 8006284:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	1ad2      	subs	r2, r2, r3
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006294:	4b0c      	ldr	r3, [pc, #48]	; (80062c8 <prvHeapInit+0xb4>)
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	4a0a      	ldr	r2, [pc, #40]	; (80062cc <prvHeapInit+0xb8>)
 80062a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	4a09      	ldr	r2, [pc, #36]	; (80062d0 <prvHeapInit+0xbc>)
 80062aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80062ac:	4b09      	ldr	r3, [pc, #36]	; (80062d4 <prvHeapInit+0xc0>)
 80062ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80062b2:	601a      	str	r2, [r3, #0]
}
 80062b4:	bf00      	nop
 80062b6:	3714      	adds	r7, #20
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	20000734 	.word	0x20000734
 80062c4:	200012ec 	.word	0x200012ec
 80062c8:	200012f4 	.word	0x200012f4
 80062cc:	200012fc 	.word	0x200012fc
 80062d0:	200012f8 	.word	0x200012f8
 80062d4:	20001308 	.word	0x20001308

080062d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80062e0:	4b28      	ldr	r3, [pc, #160]	; (8006384 <prvInsertBlockIntoFreeList+0xac>)
 80062e2:	60fb      	str	r3, [r7, #12]
 80062e4:	e002      	b.n	80062ec <prvInsertBlockIntoFreeList+0x14>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	60fb      	str	r3, [r7, #12]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d8f7      	bhi.n	80062e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	4413      	add	r3, r2
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	429a      	cmp	r2, r3
 8006306:	d108      	bne.n	800631a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	441a      	add	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	68ba      	ldr	r2, [r7, #8]
 8006324:	441a      	add	r2, r3
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	429a      	cmp	r2, r3
 800632c:	d118      	bne.n	8006360 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	4b15      	ldr	r3, [pc, #84]	; (8006388 <prvInsertBlockIntoFreeList+0xb0>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	429a      	cmp	r2, r3
 8006338:	d00d      	beq.n	8006356 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	441a      	add	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	e008      	b.n	8006368 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006356:	4b0c      	ldr	r3, [pc, #48]	; (8006388 <prvInsertBlockIntoFreeList+0xb0>)
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	601a      	str	r2, [r3, #0]
 800635e:	e003      	b.n	8006368 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	429a      	cmp	r2, r3
 800636e:	d002      	beq.n	8006376 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006376:	bf00      	nop
 8006378:	3714      	adds	r7, #20
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	200012ec 	.word	0x200012ec
 8006388:	200012f4 	.word	0x200012f4

0800638c <__errno>:
 800638c:	4b01      	ldr	r3, [pc, #4]	; (8006394 <__errno+0x8>)
 800638e:	6818      	ldr	r0, [r3, #0]
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	20000010 	.word	0x20000010

08006398 <std>:
 8006398:	2300      	movs	r3, #0
 800639a:	b510      	push	{r4, lr}
 800639c:	4604      	mov	r4, r0
 800639e:	e9c0 3300 	strd	r3, r3, [r0]
 80063a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80063a6:	6083      	str	r3, [r0, #8]
 80063a8:	8181      	strh	r1, [r0, #12]
 80063aa:	6643      	str	r3, [r0, #100]	; 0x64
 80063ac:	81c2      	strh	r2, [r0, #14]
 80063ae:	6183      	str	r3, [r0, #24]
 80063b0:	4619      	mov	r1, r3
 80063b2:	2208      	movs	r2, #8
 80063b4:	305c      	adds	r0, #92	; 0x5c
 80063b6:	f000 f91a 	bl	80065ee <memset>
 80063ba:	4b05      	ldr	r3, [pc, #20]	; (80063d0 <std+0x38>)
 80063bc:	6263      	str	r3, [r4, #36]	; 0x24
 80063be:	4b05      	ldr	r3, [pc, #20]	; (80063d4 <std+0x3c>)
 80063c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80063c2:	4b05      	ldr	r3, [pc, #20]	; (80063d8 <std+0x40>)
 80063c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80063c6:	4b05      	ldr	r3, [pc, #20]	; (80063dc <std+0x44>)
 80063c8:	6224      	str	r4, [r4, #32]
 80063ca:	6323      	str	r3, [r4, #48]	; 0x30
 80063cc:	bd10      	pop	{r4, pc}
 80063ce:	bf00      	nop
 80063d0:	08007131 	.word	0x08007131
 80063d4:	08007153 	.word	0x08007153
 80063d8:	0800718b 	.word	0x0800718b
 80063dc:	080071af 	.word	0x080071af

080063e0 <_cleanup_r>:
 80063e0:	4901      	ldr	r1, [pc, #4]	; (80063e8 <_cleanup_r+0x8>)
 80063e2:	f000 b8af 	b.w	8006544 <_fwalk_reent>
 80063e6:	bf00      	nop
 80063e8:	080081b9 	.word	0x080081b9

080063ec <__sfmoreglue>:
 80063ec:	b570      	push	{r4, r5, r6, lr}
 80063ee:	2268      	movs	r2, #104	; 0x68
 80063f0:	1e4d      	subs	r5, r1, #1
 80063f2:	4355      	muls	r5, r2
 80063f4:	460e      	mov	r6, r1
 80063f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80063fa:	f000 f921 	bl	8006640 <_malloc_r>
 80063fe:	4604      	mov	r4, r0
 8006400:	b140      	cbz	r0, 8006414 <__sfmoreglue+0x28>
 8006402:	2100      	movs	r1, #0
 8006404:	e9c0 1600 	strd	r1, r6, [r0]
 8006408:	300c      	adds	r0, #12
 800640a:	60a0      	str	r0, [r4, #8]
 800640c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006410:	f000 f8ed 	bl	80065ee <memset>
 8006414:	4620      	mov	r0, r4
 8006416:	bd70      	pop	{r4, r5, r6, pc}

08006418 <__sfp_lock_acquire>:
 8006418:	4801      	ldr	r0, [pc, #4]	; (8006420 <__sfp_lock_acquire+0x8>)
 800641a:	f000 b8d8 	b.w	80065ce <__retarget_lock_acquire_recursive>
 800641e:	bf00      	nop
 8006420:	2000130d 	.word	0x2000130d

08006424 <__sfp_lock_release>:
 8006424:	4801      	ldr	r0, [pc, #4]	; (800642c <__sfp_lock_release+0x8>)
 8006426:	f000 b8d3 	b.w	80065d0 <__retarget_lock_release_recursive>
 800642a:	bf00      	nop
 800642c:	2000130d 	.word	0x2000130d

08006430 <__sinit_lock_acquire>:
 8006430:	4801      	ldr	r0, [pc, #4]	; (8006438 <__sinit_lock_acquire+0x8>)
 8006432:	f000 b8cc 	b.w	80065ce <__retarget_lock_acquire_recursive>
 8006436:	bf00      	nop
 8006438:	2000130e 	.word	0x2000130e

0800643c <__sinit_lock_release>:
 800643c:	4801      	ldr	r0, [pc, #4]	; (8006444 <__sinit_lock_release+0x8>)
 800643e:	f000 b8c7 	b.w	80065d0 <__retarget_lock_release_recursive>
 8006442:	bf00      	nop
 8006444:	2000130e 	.word	0x2000130e

08006448 <__sinit>:
 8006448:	b510      	push	{r4, lr}
 800644a:	4604      	mov	r4, r0
 800644c:	f7ff fff0 	bl	8006430 <__sinit_lock_acquire>
 8006450:	69a3      	ldr	r3, [r4, #24]
 8006452:	b11b      	cbz	r3, 800645c <__sinit+0x14>
 8006454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006458:	f7ff bff0 	b.w	800643c <__sinit_lock_release>
 800645c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006460:	6523      	str	r3, [r4, #80]	; 0x50
 8006462:	4b13      	ldr	r3, [pc, #76]	; (80064b0 <__sinit+0x68>)
 8006464:	4a13      	ldr	r2, [pc, #76]	; (80064b4 <__sinit+0x6c>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	62a2      	str	r2, [r4, #40]	; 0x28
 800646a:	42a3      	cmp	r3, r4
 800646c:	bf04      	itt	eq
 800646e:	2301      	moveq	r3, #1
 8006470:	61a3      	streq	r3, [r4, #24]
 8006472:	4620      	mov	r0, r4
 8006474:	f000 f820 	bl	80064b8 <__sfp>
 8006478:	6060      	str	r0, [r4, #4]
 800647a:	4620      	mov	r0, r4
 800647c:	f000 f81c 	bl	80064b8 <__sfp>
 8006480:	60a0      	str	r0, [r4, #8]
 8006482:	4620      	mov	r0, r4
 8006484:	f000 f818 	bl	80064b8 <__sfp>
 8006488:	2200      	movs	r2, #0
 800648a:	60e0      	str	r0, [r4, #12]
 800648c:	2104      	movs	r1, #4
 800648e:	6860      	ldr	r0, [r4, #4]
 8006490:	f7ff ff82 	bl	8006398 <std>
 8006494:	68a0      	ldr	r0, [r4, #8]
 8006496:	2201      	movs	r2, #1
 8006498:	2109      	movs	r1, #9
 800649a:	f7ff ff7d 	bl	8006398 <std>
 800649e:	68e0      	ldr	r0, [r4, #12]
 80064a0:	2202      	movs	r2, #2
 80064a2:	2112      	movs	r1, #18
 80064a4:	f7ff ff78 	bl	8006398 <std>
 80064a8:	2301      	movs	r3, #1
 80064aa:	61a3      	str	r3, [r4, #24]
 80064ac:	e7d2      	b.n	8006454 <__sinit+0xc>
 80064ae:	bf00      	nop
 80064b0:	08009414 	.word	0x08009414
 80064b4:	080063e1 	.word	0x080063e1

080064b8 <__sfp>:
 80064b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ba:	4607      	mov	r7, r0
 80064bc:	f7ff ffac 	bl	8006418 <__sfp_lock_acquire>
 80064c0:	4b1e      	ldr	r3, [pc, #120]	; (800653c <__sfp+0x84>)
 80064c2:	681e      	ldr	r6, [r3, #0]
 80064c4:	69b3      	ldr	r3, [r6, #24]
 80064c6:	b913      	cbnz	r3, 80064ce <__sfp+0x16>
 80064c8:	4630      	mov	r0, r6
 80064ca:	f7ff ffbd 	bl	8006448 <__sinit>
 80064ce:	3648      	adds	r6, #72	; 0x48
 80064d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80064d4:	3b01      	subs	r3, #1
 80064d6:	d503      	bpl.n	80064e0 <__sfp+0x28>
 80064d8:	6833      	ldr	r3, [r6, #0]
 80064da:	b30b      	cbz	r3, 8006520 <__sfp+0x68>
 80064dc:	6836      	ldr	r6, [r6, #0]
 80064de:	e7f7      	b.n	80064d0 <__sfp+0x18>
 80064e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80064e4:	b9d5      	cbnz	r5, 800651c <__sfp+0x64>
 80064e6:	4b16      	ldr	r3, [pc, #88]	; (8006540 <__sfp+0x88>)
 80064e8:	60e3      	str	r3, [r4, #12]
 80064ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80064ee:	6665      	str	r5, [r4, #100]	; 0x64
 80064f0:	f000 f86c 	bl	80065cc <__retarget_lock_init_recursive>
 80064f4:	f7ff ff96 	bl	8006424 <__sfp_lock_release>
 80064f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80064fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006500:	6025      	str	r5, [r4, #0]
 8006502:	61a5      	str	r5, [r4, #24]
 8006504:	2208      	movs	r2, #8
 8006506:	4629      	mov	r1, r5
 8006508:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800650c:	f000 f86f 	bl	80065ee <memset>
 8006510:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006514:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006518:	4620      	mov	r0, r4
 800651a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800651c:	3468      	adds	r4, #104	; 0x68
 800651e:	e7d9      	b.n	80064d4 <__sfp+0x1c>
 8006520:	2104      	movs	r1, #4
 8006522:	4638      	mov	r0, r7
 8006524:	f7ff ff62 	bl	80063ec <__sfmoreglue>
 8006528:	4604      	mov	r4, r0
 800652a:	6030      	str	r0, [r6, #0]
 800652c:	2800      	cmp	r0, #0
 800652e:	d1d5      	bne.n	80064dc <__sfp+0x24>
 8006530:	f7ff ff78 	bl	8006424 <__sfp_lock_release>
 8006534:	230c      	movs	r3, #12
 8006536:	603b      	str	r3, [r7, #0]
 8006538:	e7ee      	b.n	8006518 <__sfp+0x60>
 800653a:	bf00      	nop
 800653c:	08009414 	.word	0x08009414
 8006540:	ffff0001 	.word	0xffff0001

08006544 <_fwalk_reent>:
 8006544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006548:	4606      	mov	r6, r0
 800654a:	4688      	mov	r8, r1
 800654c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006550:	2700      	movs	r7, #0
 8006552:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006556:	f1b9 0901 	subs.w	r9, r9, #1
 800655a:	d505      	bpl.n	8006568 <_fwalk_reent+0x24>
 800655c:	6824      	ldr	r4, [r4, #0]
 800655e:	2c00      	cmp	r4, #0
 8006560:	d1f7      	bne.n	8006552 <_fwalk_reent+0xe>
 8006562:	4638      	mov	r0, r7
 8006564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006568:	89ab      	ldrh	r3, [r5, #12]
 800656a:	2b01      	cmp	r3, #1
 800656c:	d907      	bls.n	800657e <_fwalk_reent+0x3a>
 800656e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006572:	3301      	adds	r3, #1
 8006574:	d003      	beq.n	800657e <_fwalk_reent+0x3a>
 8006576:	4629      	mov	r1, r5
 8006578:	4630      	mov	r0, r6
 800657a:	47c0      	blx	r8
 800657c:	4307      	orrs	r7, r0
 800657e:	3568      	adds	r5, #104	; 0x68
 8006580:	e7e9      	b.n	8006556 <_fwalk_reent+0x12>
	...

08006584 <__libc_init_array>:
 8006584:	b570      	push	{r4, r5, r6, lr}
 8006586:	4d0d      	ldr	r5, [pc, #52]	; (80065bc <__libc_init_array+0x38>)
 8006588:	4c0d      	ldr	r4, [pc, #52]	; (80065c0 <__libc_init_array+0x3c>)
 800658a:	1b64      	subs	r4, r4, r5
 800658c:	10a4      	asrs	r4, r4, #2
 800658e:	2600      	movs	r6, #0
 8006590:	42a6      	cmp	r6, r4
 8006592:	d109      	bne.n	80065a8 <__libc_init_array+0x24>
 8006594:	4d0b      	ldr	r5, [pc, #44]	; (80065c4 <__libc_init_array+0x40>)
 8006596:	4c0c      	ldr	r4, [pc, #48]	; (80065c8 <__libc_init_array+0x44>)
 8006598:	f002 fe7a 	bl	8009290 <_init>
 800659c:	1b64      	subs	r4, r4, r5
 800659e:	10a4      	asrs	r4, r4, #2
 80065a0:	2600      	movs	r6, #0
 80065a2:	42a6      	cmp	r6, r4
 80065a4:	d105      	bne.n	80065b2 <__libc_init_array+0x2e>
 80065a6:	bd70      	pop	{r4, r5, r6, pc}
 80065a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80065ac:	4798      	blx	r3
 80065ae:	3601      	adds	r6, #1
 80065b0:	e7ee      	b.n	8006590 <__libc_init_array+0xc>
 80065b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80065b6:	4798      	blx	r3
 80065b8:	3601      	adds	r6, #1
 80065ba:	e7f2      	b.n	80065a2 <__libc_init_array+0x1e>
 80065bc:	08009798 	.word	0x08009798
 80065c0:	08009798 	.word	0x08009798
 80065c4:	08009798 	.word	0x08009798
 80065c8:	0800979c 	.word	0x0800979c

080065cc <__retarget_lock_init_recursive>:
 80065cc:	4770      	bx	lr

080065ce <__retarget_lock_acquire_recursive>:
 80065ce:	4770      	bx	lr

080065d0 <__retarget_lock_release_recursive>:
 80065d0:	4770      	bx	lr

080065d2 <memcpy>:
 80065d2:	440a      	add	r2, r1
 80065d4:	4291      	cmp	r1, r2
 80065d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80065da:	d100      	bne.n	80065de <memcpy+0xc>
 80065dc:	4770      	bx	lr
 80065de:	b510      	push	{r4, lr}
 80065e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065e8:	4291      	cmp	r1, r2
 80065ea:	d1f9      	bne.n	80065e0 <memcpy+0xe>
 80065ec:	bd10      	pop	{r4, pc}

080065ee <memset>:
 80065ee:	4402      	add	r2, r0
 80065f0:	4603      	mov	r3, r0
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d100      	bne.n	80065f8 <memset+0xa>
 80065f6:	4770      	bx	lr
 80065f8:	f803 1b01 	strb.w	r1, [r3], #1
 80065fc:	e7f9      	b.n	80065f2 <memset+0x4>
	...

08006600 <sbrk_aligned>:
 8006600:	b570      	push	{r4, r5, r6, lr}
 8006602:	4e0e      	ldr	r6, [pc, #56]	; (800663c <sbrk_aligned+0x3c>)
 8006604:	460c      	mov	r4, r1
 8006606:	6831      	ldr	r1, [r6, #0]
 8006608:	4605      	mov	r5, r0
 800660a:	b911      	cbnz	r1, 8006612 <sbrk_aligned+0x12>
 800660c:	f000 fd60 	bl	80070d0 <_sbrk_r>
 8006610:	6030      	str	r0, [r6, #0]
 8006612:	4621      	mov	r1, r4
 8006614:	4628      	mov	r0, r5
 8006616:	f000 fd5b 	bl	80070d0 <_sbrk_r>
 800661a:	1c43      	adds	r3, r0, #1
 800661c:	d00a      	beq.n	8006634 <sbrk_aligned+0x34>
 800661e:	1cc4      	adds	r4, r0, #3
 8006620:	f024 0403 	bic.w	r4, r4, #3
 8006624:	42a0      	cmp	r0, r4
 8006626:	d007      	beq.n	8006638 <sbrk_aligned+0x38>
 8006628:	1a21      	subs	r1, r4, r0
 800662a:	4628      	mov	r0, r5
 800662c:	f000 fd50 	bl	80070d0 <_sbrk_r>
 8006630:	3001      	adds	r0, #1
 8006632:	d101      	bne.n	8006638 <sbrk_aligned+0x38>
 8006634:	f04f 34ff 	mov.w	r4, #4294967295
 8006638:	4620      	mov	r0, r4
 800663a:	bd70      	pop	{r4, r5, r6, pc}
 800663c:	20001314 	.word	0x20001314

08006640 <_malloc_r>:
 8006640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006644:	1ccd      	adds	r5, r1, #3
 8006646:	f025 0503 	bic.w	r5, r5, #3
 800664a:	3508      	adds	r5, #8
 800664c:	2d0c      	cmp	r5, #12
 800664e:	bf38      	it	cc
 8006650:	250c      	movcc	r5, #12
 8006652:	2d00      	cmp	r5, #0
 8006654:	4607      	mov	r7, r0
 8006656:	db01      	blt.n	800665c <_malloc_r+0x1c>
 8006658:	42a9      	cmp	r1, r5
 800665a:	d905      	bls.n	8006668 <_malloc_r+0x28>
 800665c:	230c      	movs	r3, #12
 800665e:	603b      	str	r3, [r7, #0]
 8006660:	2600      	movs	r6, #0
 8006662:	4630      	mov	r0, r6
 8006664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006668:	4e2e      	ldr	r6, [pc, #184]	; (8006724 <_malloc_r+0xe4>)
 800666a:	f001 fe77 	bl	800835c <__malloc_lock>
 800666e:	6833      	ldr	r3, [r6, #0]
 8006670:	461c      	mov	r4, r3
 8006672:	bb34      	cbnz	r4, 80066c2 <_malloc_r+0x82>
 8006674:	4629      	mov	r1, r5
 8006676:	4638      	mov	r0, r7
 8006678:	f7ff ffc2 	bl	8006600 <sbrk_aligned>
 800667c:	1c43      	adds	r3, r0, #1
 800667e:	4604      	mov	r4, r0
 8006680:	d14d      	bne.n	800671e <_malloc_r+0xde>
 8006682:	6834      	ldr	r4, [r6, #0]
 8006684:	4626      	mov	r6, r4
 8006686:	2e00      	cmp	r6, #0
 8006688:	d140      	bne.n	800670c <_malloc_r+0xcc>
 800668a:	6823      	ldr	r3, [r4, #0]
 800668c:	4631      	mov	r1, r6
 800668e:	4638      	mov	r0, r7
 8006690:	eb04 0803 	add.w	r8, r4, r3
 8006694:	f000 fd1c 	bl	80070d0 <_sbrk_r>
 8006698:	4580      	cmp	r8, r0
 800669a:	d13a      	bne.n	8006712 <_malloc_r+0xd2>
 800669c:	6821      	ldr	r1, [r4, #0]
 800669e:	3503      	adds	r5, #3
 80066a0:	1a6d      	subs	r5, r5, r1
 80066a2:	f025 0503 	bic.w	r5, r5, #3
 80066a6:	3508      	adds	r5, #8
 80066a8:	2d0c      	cmp	r5, #12
 80066aa:	bf38      	it	cc
 80066ac:	250c      	movcc	r5, #12
 80066ae:	4629      	mov	r1, r5
 80066b0:	4638      	mov	r0, r7
 80066b2:	f7ff ffa5 	bl	8006600 <sbrk_aligned>
 80066b6:	3001      	adds	r0, #1
 80066b8:	d02b      	beq.n	8006712 <_malloc_r+0xd2>
 80066ba:	6823      	ldr	r3, [r4, #0]
 80066bc:	442b      	add	r3, r5
 80066be:	6023      	str	r3, [r4, #0]
 80066c0:	e00e      	b.n	80066e0 <_malloc_r+0xa0>
 80066c2:	6822      	ldr	r2, [r4, #0]
 80066c4:	1b52      	subs	r2, r2, r5
 80066c6:	d41e      	bmi.n	8006706 <_malloc_r+0xc6>
 80066c8:	2a0b      	cmp	r2, #11
 80066ca:	d916      	bls.n	80066fa <_malloc_r+0xba>
 80066cc:	1961      	adds	r1, r4, r5
 80066ce:	42a3      	cmp	r3, r4
 80066d0:	6025      	str	r5, [r4, #0]
 80066d2:	bf18      	it	ne
 80066d4:	6059      	strne	r1, [r3, #4]
 80066d6:	6863      	ldr	r3, [r4, #4]
 80066d8:	bf08      	it	eq
 80066da:	6031      	streq	r1, [r6, #0]
 80066dc:	5162      	str	r2, [r4, r5]
 80066de:	604b      	str	r3, [r1, #4]
 80066e0:	4638      	mov	r0, r7
 80066e2:	f104 060b 	add.w	r6, r4, #11
 80066e6:	f001 fe3f 	bl	8008368 <__malloc_unlock>
 80066ea:	f026 0607 	bic.w	r6, r6, #7
 80066ee:	1d23      	adds	r3, r4, #4
 80066f0:	1af2      	subs	r2, r6, r3
 80066f2:	d0b6      	beq.n	8006662 <_malloc_r+0x22>
 80066f4:	1b9b      	subs	r3, r3, r6
 80066f6:	50a3      	str	r3, [r4, r2]
 80066f8:	e7b3      	b.n	8006662 <_malloc_r+0x22>
 80066fa:	6862      	ldr	r2, [r4, #4]
 80066fc:	42a3      	cmp	r3, r4
 80066fe:	bf0c      	ite	eq
 8006700:	6032      	streq	r2, [r6, #0]
 8006702:	605a      	strne	r2, [r3, #4]
 8006704:	e7ec      	b.n	80066e0 <_malloc_r+0xa0>
 8006706:	4623      	mov	r3, r4
 8006708:	6864      	ldr	r4, [r4, #4]
 800670a:	e7b2      	b.n	8006672 <_malloc_r+0x32>
 800670c:	4634      	mov	r4, r6
 800670e:	6876      	ldr	r6, [r6, #4]
 8006710:	e7b9      	b.n	8006686 <_malloc_r+0x46>
 8006712:	230c      	movs	r3, #12
 8006714:	603b      	str	r3, [r7, #0]
 8006716:	4638      	mov	r0, r7
 8006718:	f001 fe26 	bl	8008368 <__malloc_unlock>
 800671c:	e7a1      	b.n	8006662 <_malloc_r+0x22>
 800671e:	6025      	str	r5, [r4, #0]
 8006720:	e7de      	b.n	80066e0 <_malloc_r+0xa0>
 8006722:	bf00      	nop
 8006724:	20001310 	.word	0x20001310

08006728 <__cvt>:
 8006728:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800672c:	ec55 4b10 	vmov	r4, r5, d0
 8006730:	2d00      	cmp	r5, #0
 8006732:	460e      	mov	r6, r1
 8006734:	4619      	mov	r1, r3
 8006736:	462b      	mov	r3, r5
 8006738:	bfbb      	ittet	lt
 800673a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800673e:	461d      	movlt	r5, r3
 8006740:	2300      	movge	r3, #0
 8006742:	232d      	movlt	r3, #45	; 0x2d
 8006744:	700b      	strb	r3, [r1, #0]
 8006746:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006748:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800674c:	4691      	mov	r9, r2
 800674e:	f023 0820 	bic.w	r8, r3, #32
 8006752:	bfbc      	itt	lt
 8006754:	4622      	movlt	r2, r4
 8006756:	4614      	movlt	r4, r2
 8006758:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800675c:	d005      	beq.n	800676a <__cvt+0x42>
 800675e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006762:	d100      	bne.n	8006766 <__cvt+0x3e>
 8006764:	3601      	adds	r6, #1
 8006766:	2102      	movs	r1, #2
 8006768:	e000      	b.n	800676c <__cvt+0x44>
 800676a:	2103      	movs	r1, #3
 800676c:	ab03      	add	r3, sp, #12
 800676e:	9301      	str	r3, [sp, #4]
 8006770:	ab02      	add	r3, sp, #8
 8006772:	9300      	str	r3, [sp, #0]
 8006774:	ec45 4b10 	vmov	d0, r4, r5
 8006778:	4653      	mov	r3, sl
 800677a:	4632      	mov	r2, r6
 800677c:	f000 fea8 	bl	80074d0 <_dtoa_r>
 8006780:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006784:	4607      	mov	r7, r0
 8006786:	d102      	bne.n	800678e <__cvt+0x66>
 8006788:	f019 0f01 	tst.w	r9, #1
 800678c:	d022      	beq.n	80067d4 <__cvt+0xac>
 800678e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006792:	eb07 0906 	add.w	r9, r7, r6
 8006796:	d110      	bne.n	80067ba <__cvt+0x92>
 8006798:	783b      	ldrb	r3, [r7, #0]
 800679a:	2b30      	cmp	r3, #48	; 0x30
 800679c:	d10a      	bne.n	80067b4 <__cvt+0x8c>
 800679e:	2200      	movs	r2, #0
 80067a0:	2300      	movs	r3, #0
 80067a2:	4620      	mov	r0, r4
 80067a4:	4629      	mov	r1, r5
 80067a6:	f7fa f98f 	bl	8000ac8 <__aeabi_dcmpeq>
 80067aa:	b918      	cbnz	r0, 80067b4 <__cvt+0x8c>
 80067ac:	f1c6 0601 	rsb	r6, r6, #1
 80067b0:	f8ca 6000 	str.w	r6, [sl]
 80067b4:	f8da 3000 	ldr.w	r3, [sl]
 80067b8:	4499      	add	r9, r3
 80067ba:	2200      	movs	r2, #0
 80067bc:	2300      	movs	r3, #0
 80067be:	4620      	mov	r0, r4
 80067c0:	4629      	mov	r1, r5
 80067c2:	f7fa f981 	bl	8000ac8 <__aeabi_dcmpeq>
 80067c6:	b108      	cbz	r0, 80067cc <__cvt+0xa4>
 80067c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80067cc:	2230      	movs	r2, #48	; 0x30
 80067ce:	9b03      	ldr	r3, [sp, #12]
 80067d0:	454b      	cmp	r3, r9
 80067d2:	d307      	bcc.n	80067e4 <__cvt+0xbc>
 80067d4:	9b03      	ldr	r3, [sp, #12]
 80067d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067d8:	1bdb      	subs	r3, r3, r7
 80067da:	4638      	mov	r0, r7
 80067dc:	6013      	str	r3, [r2, #0]
 80067de:	b004      	add	sp, #16
 80067e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067e4:	1c59      	adds	r1, r3, #1
 80067e6:	9103      	str	r1, [sp, #12]
 80067e8:	701a      	strb	r2, [r3, #0]
 80067ea:	e7f0      	b.n	80067ce <__cvt+0xa6>

080067ec <__exponent>:
 80067ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067ee:	4603      	mov	r3, r0
 80067f0:	2900      	cmp	r1, #0
 80067f2:	bfb8      	it	lt
 80067f4:	4249      	neglt	r1, r1
 80067f6:	f803 2b02 	strb.w	r2, [r3], #2
 80067fa:	bfb4      	ite	lt
 80067fc:	222d      	movlt	r2, #45	; 0x2d
 80067fe:	222b      	movge	r2, #43	; 0x2b
 8006800:	2909      	cmp	r1, #9
 8006802:	7042      	strb	r2, [r0, #1]
 8006804:	dd2a      	ble.n	800685c <__exponent+0x70>
 8006806:	f10d 0407 	add.w	r4, sp, #7
 800680a:	46a4      	mov	ip, r4
 800680c:	270a      	movs	r7, #10
 800680e:	46a6      	mov	lr, r4
 8006810:	460a      	mov	r2, r1
 8006812:	fb91 f6f7 	sdiv	r6, r1, r7
 8006816:	fb07 1516 	mls	r5, r7, r6, r1
 800681a:	3530      	adds	r5, #48	; 0x30
 800681c:	2a63      	cmp	r2, #99	; 0x63
 800681e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006822:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006826:	4631      	mov	r1, r6
 8006828:	dcf1      	bgt.n	800680e <__exponent+0x22>
 800682a:	3130      	adds	r1, #48	; 0x30
 800682c:	f1ae 0502 	sub.w	r5, lr, #2
 8006830:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006834:	1c44      	adds	r4, r0, #1
 8006836:	4629      	mov	r1, r5
 8006838:	4561      	cmp	r1, ip
 800683a:	d30a      	bcc.n	8006852 <__exponent+0x66>
 800683c:	f10d 0209 	add.w	r2, sp, #9
 8006840:	eba2 020e 	sub.w	r2, r2, lr
 8006844:	4565      	cmp	r5, ip
 8006846:	bf88      	it	hi
 8006848:	2200      	movhi	r2, #0
 800684a:	4413      	add	r3, r2
 800684c:	1a18      	subs	r0, r3, r0
 800684e:	b003      	add	sp, #12
 8006850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006852:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006856:	f804 2f01 	strb.w	r2, [r4, #1]!
 800685a:	e7ed      	b.n	8006838 <__exponent+0x4c>
 800685c:	2330      	movs	r3, #48	; 0x30
 800685e:	3130      	adds	r1, #48	; 0x30
 8006860:	7083      	strb	r3, [r0, #2]
 8006862:	70c1      	strb	r1, [r0, #3]
 8006864:	1d03      	adds	r3, r0, #4
 8006866:	e7f1      	b.n	800684c <__exponent+0x60>

08006868 <_printf_float>:
 8006868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800686c:	ed2d 8b02 	vpush	{d8}
 8006870:	b08d      	sub	sp, #52	; 0x34
 8006872:	460c      	mov	r4, r1
 8006874:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006878:	4616      	mov	r6, r2
 800687a:	461f      	mov	r7, r3
 800687c:	4605      	mov	r5, r0
 800687e:	f001 fce9 	bl	8008254 <_localeconv_r>
 8006882:	f8d0 a000 	ldr.w	sl, [r0]
 8006886:	4650      	mov	r0, sl
 8006888:	f7f9 fca2 	bl	80001d0 <strlen>
 800688c:	2300      	movs	r3, #0
 800688e:	930a      	str	r3, [sp, #40]	; 0x28
 8006890:	6823      	ldr	r3, [r4, #0]
 8006892:	9305      	str	r3, [sp, #20]
 8006894:	f8d8 3000 	ldr.w	r3, [r8]
 8006898:	f894 b018 	ldrb.w	fp, [r4, #24]
 800689c:	3307      	adds	r3, #7
 800689e:	f023 0307 	bic.w	r3, r3, #7
 80068a2:	f103 0208 	add.w	r2, r3, #8
 80068a6:	f8c8 2000 	str.w	r2, [r8]
 80068aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80068b2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80068b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80068ba:	9307      	str	r3, [sp, #28]
 80068bc:	f8cd 8018 	str.w	r8, [sp, #24]
 80068c0:	ee08 0a10 	vmov	s16, r0
 80068c4:	4b9f      	ldr	r3, [pc, #636]	; (8006b44 <_printf_float+0x2dc>)
 80068c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068ca:	f04f 32ff 	mov.w	r2, #4294967295
 80068ce:	f7fa f92d 	bl	8000b2c <__aeabi_dcmpun>
 80068d2:	bb88      	cbnz	r0, 8006938 <_printf_float+0xd0>
 80068d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068d8:	4b9a      	ldr	r3, [pc, #616]	; (8006b44 <_printf_float+0x2dc>)
 80068da:	f04f 32ff 	mov.w	r2, #4294967295
 80068de:	f7fa f907 	bl	8000af0 <__aeabi_dcmple>
 80068e2:	bb48      	cbnz	r0, 8006938 <_printf_float+0xd0>
 80068e4:	2200      	movs	r2, #0
 80068e6:	2300      	movs	r3, #0
 80068e8:	4640      	mov	r0, r8
 80068ea:	4649      	mov	r1, r9
 80068ec:	f7fa f8f6 	bl	8000adc <__aeabi_dcmplt>
 80068f0:	b110      	cbz	r0, 80068f8 <_printf_float+0x90>
 80068f2:	232d      	movs	r3, #45	; 0x2d
 80068f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068f8:	4b93      	ldr	r3, [pc, #588]	; (8006b48 <_printf_float+0x2e0>)
 80068fa:	4894      	ldr	r0, [pc, #592]	; (8006b4c <_printf_float+0x2e4>)
 80068fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006900:	bf94      	ite	ls
 8006902:	4698      	movls	r8, r3
 8006904:	4680      	movhi	r8, r0
 8006906:	2303      	movs	r3, #3
 8006908:	6123      	str	r3, [r4, #16]
 800690a:	9b05      	ldr	r3, [sp, #20]
 800690c:	f023 0204 	bic.w	r2, r3, #4
 8006910:	6022      	str	r2, [r4, #0]
 8006912:	f04f 0900 	mov.w	r9, #0
 8006916:	9700      	str	r7, [sp, #0]
 8006918:	4633      	mov	r3, r6
 800691a:	aa0b      	add	r2, sp, #44	; 0x2c
 800691c:	4621      	mov	r1, r4
 800691e:	4628      	mov	r0, r5
 8006920:	f000 f9d8 	bl	8006cd4 <_printf_common>
 8006924:	3001      	adds	r0, #1
 8006926:	f040 8090 	bne.w	8006a4a <_printf_float+0x1e2>
 800692a:	f04f 30ff 	mov.w	r0, #4294967295
 800692e:	b00d      	add	sp, #52	; 0x34
 8006930:	ecbd 8b02 	vpop	{d8}
 8006934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006938:	4642      	mov	r2, r8
 800693a:	464b      	mov	r3, r9
 800693c:	4640      	mov	r0, r8
 800693e:	4649      	mov	r1, r9
 8006940:	f7fa f8f4 	bl	8000b2c <__aeabi_dcmpun>
 8006944:	b140      	cbz	r0, 8006958 <_printf_float+0xf0>
 8006946:	464b      	mov	r3, r9
 8006948:	2b00      	cmp	r3, #0
 800694a:	bfbc      	itt	lt
 800694c:	232d      	movlt	r3, #45	; 0x2d
 800694e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006952:	487f      	ldr	r0, [pc, #508]	; (8006b50 <_printf_float+0x2e8>)
 8006954:	4b7f      	ldr	r3, [pc, #508]	; (8006b54 <_printf_float+0x2ec>)
 8006956:	e7d1      	b.n	80068fc <_printf_float+0x94>
 8006958:	6863      	ldr	r3, [r4, #4]
 800695a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800695e:	9206      	str	r2, [sp, #24]
 8006960:	1c5a      	adds	r2, r3, #1
 8006962:	d13f      	bne.n	80069e4 <_printf_float+0x17c>
 8006964:	2306      	movs	r3, #6
 8006966:	6063      	str	r3, [r4, #4]
 8006968:	9b05      	ldr	r3, [sp, #20]
 800696a:	6861      	ldr	r1, [r4, #4]
 800696c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006970:	2300      	movs	r3, #0
 8006972:	9303      	str	r3, [sp, #12]
 8006974:	ab0a      	add	r3, sp, #40	; 0x28
 8006976:	e9cd b301 	strd	fp, r3, [sp, #4]
 800697a:	ab09      	add	r3, sp, #36	; 0x24
 800697c:	ec49 8b10 	vmov	d0, r8, r9
 8006980:	9300      	str	r3, [sp, #0]
 8006982:	6022      	str	r2, [r4, #0]
 8006984:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006988:	4628      	mov	r0, r5
 800698a:	f7ff fecd 	bl	8006728 <__cvt>
 800698e:	9b06      	ldr	r3, [sp, #24]
 8006990:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006992:	2b47      	cmp	r3, #71	; 0x47
 8006994:	4680      	mov	r8, r0
 8006996:	d108      	bne.n	80069aa <_printf_float+0x142>
 8006998:	1cc8      	adds	r0, r1, #3
 800699a:	db02      	blt.n	80069a2 <_printf_float+0x13a>
 800699c:	6863      	ldr	r3, [r4, #4]
 800699e:	4299      	cmp	r1, r3
 80069a0:	dd41      	ble.n	8006a26 <_printf_float+0x1be>
 80069a2:	f1ab 0b02 	sub.w	fp, fp, #2
 80069a6:	fa5f fb8b 	uxtb.w	fp, fp
 80069aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80069ae:	d820      	bhi.n	80069f2 <_printf_float+0x18a>
 80069b0:	3901      	subs	r1, #1
 80069b2:	465a      	mov	r2, fp
 80069b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80069b8:	9109      	str	r1, [sp, #36]	; 0x24
 80069ba:	f7ff ff17 	bl	80067ec <__exponent>
 80069be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069c0:	1813      	adds	r3, r2, r0
 80069c2:	2a01      	cmp	r2, #1
 80069c4:	4681      	mov	r9, r0
 80069c6:	6123      	str	r3, [r4, #16]
 80069c8:	dc02      	bgt.n	80069d0 <_printf_float+0x168>
 80069ca:	6822      	ldr	r2, [r4, #0]
 80069cc:	07d2      	lsls	r2, r2, #31
 80069ce:	d501      	bpl.n	80069d4 <_printf_float+0x16c>
 80069d0:	3301      	adds	r3, #1
 80069d2:	6123      	str	r3, [r4, #16]
 80069d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d09c      	beq.n	8006916 <_printf_float+0xae>
 80069dc:	232d      	movs	r3, #45	; 0x2d
 80069de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069e2:	e798      	b.n	8006916 <_printf_float+0xae>
 80069e4:	9a06      	ldr	r2, [sp, #24]
 80069e6:	2a47      	cmp	r2, #71	; 0x47
 80069e8:	d1be      	bne.n	8006968 <_printf_float+0x100>
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1bc      	bne.n	8006968 <_printf_float+0x100>
 80069ee:	2301      	movs	r3, #1
 80069f0:	e7b9      	b.n	8006966 <_printf_float+0xfe>
 80069f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80069f6:	d118      	bne.n	8006a2a <_printf_float+0x1c2>
 80069f8:	2900      	cmp	r1, #0
 80069fa:	6863      	ldr	r3, [r4, #4]
 80069fc:	dd0b      	ble.n	8006a16 <_printf_float+0x1ae>
 80069fe:	6121      	str	r1, [r4, #16]
 8006a00:	b913      	cbnz	r3, 8006a08 <_printf_float+0x1a0>
 8006a02:	6822      	ldr	r2, [r4, #0]
 8006a04:	07d0      	lsls	r0, r2, #31
 8006a06:	d502      	bpl.n	8006a0e <_printf_float+0x1a6>
 8006a08:	3301      	adds	r3, #1
 8006a0a:	440b      	add	r3, r1
 8006a0c:	6123      	str	r3, [r4, #16]
 8006a0e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006a10:	f04f 0900 	mov.w	r9, #0
 8006a14:	e7de      	b.n	80069d4 <_printf_float+0x16c>
 8006a16:	b913      	cbnz	r3, 8006a1e <_printf_float+0x1b6>
 8006a18:	6822      	ldr	r2, [r4, #0]
 8006a1a:	07d2      	lsls	r2, r2, #31
 8006a1c:	d501      	bpl.n	8006a22 <_printf_float+0x1ba>
 8006a1e:	3302      	adds	r3, #2
 8006a20:	e7f4      	b.n	8006a0c <_printf_float+0x1a4>
 8006a22:	2301      	movs	r3, #1
 8006a24:	e7f2      	b.n	8006a0c <_printf_float+0x1a4>
 8006a26:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006a2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a2c:	4299      	cmp	r1, r3
 8006a2e:	db05      	blt.n	8006a3c <_printf_float+0x1d4>
 8006a30:	6823      	ldr	r3, [r4, #0]
 8006a32:	6121      	str	r1, [r4, #16]
 8006a34:	07d8      	lsls	r0, r3, #31
 8006a36:	d5ea      	bpl.n	8006a0e <_printf_float+0x1a6>
 8006a38:	1c4b      	adds	r3, r1, #1
 8006a3a:	e7e7      	b.n	8006a0c <_printf_float+0x1a4>
 8006a3c:	2900      	cmp	r1, #0
 8006a3e:	bfd4      	ite	le
 8006a40:	f1c1 0202 	rsble	r2, r1, #2
 8006a44:	2201      	movgt	r2, #1
 8006a46:	4413      	add	r3, r2
 8006a48:	e7e0      	b.n	8006a0c <_printf_float+0x1a4>
 8006a4a:	6823      	ldr	r3, [r4, #0]
 8006a4c:	055a      	lsls	r2, r3, #21
 8006a4e:	d407      	bmi.n	8006a60 <_printf_float+0x1f8>
 8006a50:	6923      	ldr	r3, [r4, #16]
 8006a52:	4642      	mov	r2, r8
 8006a54:	4631      	mov	r1, r6
 8006a56:	4628      	mov	r0, r5
 8006a58:	47b8      	blx	r7
 8006a5a:	3001      	adds	r0, #1
 8006a5c:	d12c      	bne.n	8006ab8 <_printf_float+0x250>
 8006a5e:	e764      	b.n	800692a <_printf_float+0xc2>
 8006a60:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a64:	f240 80e0 	bls.w	8006c28 <_printf_float+0x3c0>
 8006a68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	2300      	movs	r3, #0
 8006a70:	f7fa f82a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a74:	2800      	cmp	r0, #0
 8006a76:	d034      	beq.n	8006ae2 <_printf_float+0x27a>
 8006a78:	4a37      	ldr	r2, [pc, #220]	; (8006b58 <_printf_float+0x2f0>)
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	4631      	mov	r1, r6
 8006a7e:	4628      	mov	r0, r5
 8006a80:	47b8      	blx	r7
 8006a82:	3001      	adds	r0, #1
 8006a84:	f43f af51 	beq.w	800692a <_printf_float+0xc2>
 8006a88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	db02      	blt.n	8006a96 <_printf_float+0x22e>
 8006a90:	6823      	ldr	r3, [r4, #0]
 8006a92:	07d8      	lsls	r0, r3, #31
 8006a94:	d510      	bpl.n	8006ab8 <_printf_float+0x250>
 8006a96:	ee18 3a10 	vmov	r3, s16
 8006a9a:	4652      	mov	r2, sl
 8006a9c:	4631      	mov	r1, r6
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	47b8      	blx	r7
 8006aa2:	3001      	adds	r0, #1
 8006aa4:	f43f af41 	beq.w	800692a <_printf_float+0xc2>
 8006aa8:	f04f 0800 	mov.w	r8, #0
 8006aac:	f104 091a 	add.w	r9, r4, #26
 8006ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	4543      	cmp	r3, r8
 8006ab6:	dc09      	bgt.n	8006acc <_printf_float+0x264>
 8006ab8:	6823      	ldr	r3, [r4, #0]
 8006aba:	079b      	lsls	r3, r3, #30
 8006abc:	f100 8105 	bmi.w	8006cca <_printf_float+0x462>
 8006ac0:	68e0      	ldr	r0, [r4, #12]
 8006ac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ac4:	4298      	cmp	r0, r3
 8006ac6:	bfb8      	it	lt
 8006ac8:	4618      	movlt	r0, r3
 8006aca:	e730      	b.n	800692e <_printf_float+0xc6>
 8006acc:	2301      	movs	r3, #1
 8006ace:	464a      	mov	r2, r9
 8006ad0:	4631      	mov	r1, r6
 8006ad2:	4628      	mov	r0, r5
 8006ad4:	47b8      	blx	r7
 8006ad6:	3001      	adds	r0, #1
 8006ad8:	f43f af27 	beq.w	800692a <_printf_float+0xc2>
 8006adc:	f108 0801 	add.w	r8, r8, #1
 8006ae0:	e7e6      	b.n	8006ab0 <_printf_float+0x248>
 8006ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	dc39      	bgt.n	8006b5c <_printf_float+0x2f4>
 8006ae8:	4a1b      	ldr	r2, [pc, #108]	; (8006b58 <_printf_float+0x2f0>)
 8006aea:	2301      	movs	r3, #1
 8006aec:	4631      	mov	r1, r6
 8006aee:	4628      	mov	r0, r5
 8006af0:	47b8      	blx	r7
 8006af2:	3001      	adds	r0, #1
 8006af4:	f43f af19 	beq.w	800692a <_printf_float+0xc2>
 8006af8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006afc:	4313      	orrs	r3, r2
 8006afe:	d102      	bne.n	8006b06 <_printf_float+0x29e>
 8006b00:	6823      	ldr	r3, [r4, #0]
 8006b02:	07d9      	lsls	r1, r3, #31
 8006b04:	d5d8      	bpl.n	8006ab8 <_printf_float+0x250>
 8006b06:	ee18 3a10 	vmov	r3, s16
 8006b0a:	4652      	mov	r2, sl
 8006b0c:	4631      	mov	r1, r6
 8006b0e:	4628      	mov	r0, r5
 8006b10:	47b8      	blx	r7
 8006b12:	3001      	adds	r0, #1
 8006b14:	f43f af09 	beq.w	800692a <_printf_float+0xc2>
 8006b18:	f04f 0900 	mov.w	r9, #0
 8006b1c:	f104 0a1a 	add.w	sl, r4, #26
 8006b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b22:	425b      	negs	r3, r3
 8006b24:	454b      	cmp	r3, r9
 8006b26:	dc01      	bgt.n	8006b2c <_printf_float+0x2c4>
 8006b28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b2a:	e792      	b.n	8006a52 <_printf_float+0x1ea>
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	4652      	mov	r2, sl
 8006b30:	4631      	mov	r1, r6
 8006b32:	4628      	mov	r0, r5
 8006b34:	47b8      	blx	r7
 8006b36:	3001      	adds	r0, #1
 8006b38:	f43f aef7 	beq.w	800692a <_printf_float+0xc2>
 8006b3c:	f109 0901 	add.w	r9, r9, #1
 8006b40:	e7ee      	b.n	8006b20 <_printf_float+0x2b8>
 8006b42:	bf00      	nop
 8006b44:	7fefffff 	.word	0x7fefffff
 8006b48:	08009418 	.word	0x08009418
 8006b4c:	0800941c 	.word	0x0800941c
 8006b50:	08009424 	.word	0x08009424
 8006b54:	08009420 	.word	0x08009420
 8006b58:	08009428 	.word	0x08009428
 8006b5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b60:	429a      	cmp	r2, r3
 8006b62:	bfa8      	it	ge
 8006b64:	461a      	movge	r2, r3
 8006b66:	2a00      	cmp	r2, #0
 8006b68:	4691      	mov	r9, r2
 8006b6a:	dc37      	bgt.n	8006bdc <_printf_float+0x374>
 8006b6c:	f04f 0b00 	mov.w	fp, #0
 8006b70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b74:	f104 021a 	add.w	r2, r4, #26
 8006b78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b7a:	9305      	str	r3, [sp, #20]
 8006b7c:	eba3 0309 	sub.w	r3, r3, r9
 8006b80:	455b      	cmp	r3, fp
 8006b82:	dc33      	bgt.n	8006bec <_printf_float+0x384>
 8006b84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	db3b      	blt.n	8006c04 <_printf_float+0x39c>
 8006b8c:	6823      	ldr	r3, [r4, #0]
 8006b8e:	07da      	lsls	r2, r3, #31
 8006b90:	d438      	bmi.n	8006c04 <_printf_float+0x39c>
 8006b92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b94:	9a05      	ldr	r2, [sp, #20]
 8006b96:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b98:	1a9a      	subs	r2, r3, r2
 8006b9a:	eba3 0901 	sub.w	r9, r3, r1
 8006b9e:	4591      	cmp	r9, r2
 8006ba0:	bfa8      	it	ge
 8006ba2:	4691      	movge	r9, r2
 8006ba4:	f1b9 0f00 	cmp.w	r9, #0
 8006ba8:	dc35      	bgt.n	8006c16 <_printf_float+0x3ae>
 8006baa:	f04f 0800 	mov.w	r8, #0
 8006bae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006bb2:	f104 0a1a 	add.w	sl, r4, #26
 8006bb6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bba:	1a9b      	subs	r3, r3, r2
 8006bbc:	eba3 0309 	sub.w	r3, r3, r9
 8006bc0:	4543      	cmp	r3, r8
 8006bc2:	f77f af79 	ble.w	8006ab8 <_printf_float+0x250>
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	4652      	mov	r2, sl
 8006bca:	4631      	mov	r1, r6
 8006bcc:	4628      	mov	r0, r5
 8006bce:	47b8      	blx	r7
 8006bd0:	3001      	adds	r0, #1
 8006bd2:	f43f aeaa 	beq.w	800692a <_printf_float+0xc2>
 8006bd6:	f108 0801 	add.w	r8, r8, #1
 8006bda:	e7ec      	b.n	8006bb6 <_printf_float+0x34e>
 8006bdc:	4613      	mov	r3, r2
 8006bde:	4631      	mov	r1, r6
 8006be0:	4642      	mov	r2, r8
 8006be2:	4628      	mov	r0, r5
 8006be4:	47b8      	blx	r7
 8006be6:	3001      	adds	r0, #1
 8006be8:	d1c0      	bne.n	8006b6c <_printf_float+0x304>
 8006bea:	e69e      	b.n	800692a <_printf_float+0xc2>
 8006bec:	2301      	movs	r3, #1
 8006bee:	4631      	mov	r1, r6
 8006bf0:	4628      	mov	r0, r5
 8006bf2:	9205      	str	r2, [sp, #20]
 8006bf4:	47b8      	blx	r7
 8006bf6:	3001      	adds	r0, #1
 8006bf8:	f43f ae97 	beq.w	800692a <_printf_float+0xc2>
 8006bfc:	9a05      	ldr	r2, [sp, #20]
 8006bfe:	f10b 0b01 	add.w	fp, fp, #1
 8006c02:	e7b9      	b.n	8006b78 <_printf_float+0x310>
 8006c04:	ee18 3a10 	vmov	r3, s16
 8006c08:	4652      	mov	r2, sl
 8006c0a:	4631      	mov	r1, r6
 8006c0c:	4628      	mov	r0, r5
 8006c0e:	47b8      	blx	r7
 8006c10:	3001      	adds	r0, #1
 8006c12:	d1be      	bne.n	8006b92 <_printf_float+0x32a>
 8006c14:	e689      	b.n	800692a <_printf_float+0xc2>
 8006c16:	9a05      	ldr	r2, [sp, #20]
 8006c18:	464b      	mov	r3, r9
 8006c1a:	4442      	add	r2, r8
 8006c1c:	4631      	mov	r1, r6
 8006c1e:	4628      	mov	r0, r5
 8006c20:	47b8      	blx	r7
 8006c22:	3001      	adds	r0, #1
 8006c24:	d1c1      	bne.n	8006baa <_printf_float+0x342>
 8006c26:	e680      	b.n	800692a <_printf_float+0xc2>
 8006c28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c2a:	2a01      	cmp	r2, #1
 8006c2c:	dc01      	bgt.n	8006c32 <_printf_float+0x3ca>
 8006c2e:	07db      	lsls	r3, r3, #31
 8006c30:	d538      	bpl.n	8006ca4 <_printf_float+0x43c>
 8006c32:	2301      	movs	r3, #1
 8006c34:	4642      	mov	r2, r8
 8006c36:	4631      	mov	r1, r6
 8006c38:	4628      	mov	r0, r5
 8006c3a:	47b8      	blx	r7
 8006c3c:	3001      	adds	r0, #1
 8006c3e:	f43f ae74 	beq.w	800692a <_printf_float+0xc2>
 8006c42:	ee18 3a10 	vmov	r3, s16
 8006c46:	4652      	mov	r2, sl
 8006c48:	4631      	mov	r1, r6
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	47b8      	blx	r7
 8006c4e:	3001      	adds	r0, #1
 8006c50:	f43f ae6b 	beq.w	800692a <_printf_float+0xc2>
 8006c54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c58:	2200      	movs	r2, #0
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	f7f9 ff34 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c60:	b9d8      	cbnz	r0, 8006c9a <_printf_float+0x432>
 8006c62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c64:	f108 0201 	add.w	r2, r8, #1
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	4631      	mov	r1, r6
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	47b8      	blx	r7
 8006c70:	3001      	adds	r0, #1
 8006c72:	d10e      	bne.n	8006c92 <_printf_float+0x42a>
 8006c74:	e659      	b.n	800692a <_printf_float+0xc2>
 8006c76:	2301      	movs	r3, #1
 8006c78:	4652      	mov	r2, sl
 8006c7a:	4631      	mov	r1, r6
 8006c7c:	4628      	mov	r0, r5
 8006c7e:	47b8      	blx	r7
 8006c80:	3001      	adds	r0, #1
 8006c82:	f43f ae52 	beq.w	800692a <_printf_float+0xc2>
 8006c86:	f108 0801 	add.w	r8, r8, #1
 8006c8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c8c:	3b01      	subs	r3, #1
 8006c8e:	4543      	cmp	r3, r8
 8006c90:	dcf1      	bgt.n	8006c76 <_printf_float+0x40e>
 8006c92:	464b      	mov	r3, r9
 8006c94:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006c98:	e6dc      	b.n	8006a54 <_printf_float+0x1ec>
 8006c9a:	f04f 0800 	mov.w	r8, #0
 8006c9e:	f104 0a1a 	add.w	sl, r4, #26
 8006ca2:	e7f2      	b.n	8006c8a <_printf_float+0x422>
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	4642      	mov	r2, r8
 8006ca8:	e7df      	b.n	8006c6a <_printf_float+0x402>
 8006caa:	2301      	movs	r3, #1
 8006cac:	464a      	mov	r2, r9
 8006cae:	4631      	mov	r1, r6
 8006cb0:	4628      	mov	r0, r5
 8006cb2:	47b8      	blx	r7
 8006cb4:	3001      	adds	r0, #1
 8006cb6:	f43f ae38 	beq.w	800692a <_printf_float+0xc2>
 8006cba:	f108 0801 	add.w	r8, r8, #1
 8006cbe:	68e3      	ldr	r3, [r4, #12]
 8006cc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006cc2:	1a5b      	subs	r3, r3, r1
 8006cc4:	4543      	cmp	r3, r8
 8006cc6:	dcf0      	bgt.n	8006caa <_printf_float+0x442>
 8006cc8:	e6fa      	b.n	8006ac0 <_printf_float+0x258>
 8006cca:	f04f 0800 	mov.w	r8, #0
 8006cce:	f104 0919 	add.w	r9, r4, #25
 8006cd2:	e7f4      	b.n	8006cbe <_printf_float+0x456>

08006cd4 <_printf_common>:
 8006cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cd8:	4616      	mov	r6, r2
 8006cda:	4699      	mov	r9, r3
 8006cdc:	688a      	ldr	r2, [r1, #8]
 8006cde:	690b      	ldr	r3, [r1, #16]
 8006ce0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	bfb8      	it	lt
 8006ce8:	4613      	movlt	r3, r2
 8006cea:	6033      	str	r3, [r6, #0]
 8006cec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cf0:	4607      	mov	r7, r0
 8006cf2:	460c      	mov	r4, r1
 8006cf4:	b10a      	cbz	r2, 8006cfa <_printf_common+0x26>
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	6033      	str	r3, [r6, #0]
 8006cfa:	6823      	ldr	r3, [r4, #0]
 8006cfc:	0699      	lsls	r1, r3, #26
 8006cfe:	bf42      	ittt	mi
 8006d00:	6833      	ldrmi	r3, [r6, #0]
 8006d02:	3302      	addmi	r3, #2
 8006d04:	6033      	strmi	r3, [r6, #0]
 8006d06:	6825      	ldr	r5, [r4, #0]
 8006d08:	f015 0506 	ands.w	r5, r5, #6
 8006d0c:	d106      	bne.n	8006d1c <_printf_common+0x48>
 8006d0e:	f104 0a19 	add.w	sl, r4, #25
 8006d12:	68e3      	ldr	r3, [r4, #12]
 8006d14:	6832      	ldr	r2, [r6, #0]
 8006d16:	1a9b      	subs	r3, r3, r2
 8006d18:	42ab      	cmp	r3, r5
 8006d1a:	dc26      	bgt.n	8006d6a <_printf_common+0x96>
 8006d1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d20:	1e13      	subs	r3, r2, #0
 8006d22:	6822      	ldr	r2, [r4, #0]
 8006d24:	bf18      	it	ne
 8006d26:	2301      	movne	r3, #1
 8006d28:	0692      	lsls	r2, r2, #26
 8006d2a:	d42b      	bmi.n	8006d84 <_printf_common+0xb0>
 8006d2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d30:	4649      	mov	r1, r9
 8006d32:	4638      	mov	r0, r7
 8006d34:	47c0      	blx	r8
 8006d36:	3001      	adds	r0, #1
 8006d38:	d01e      	beq.n	8006d78 <_printf_common+0xa4>
 8006d3a:	6823      	ldr	r3, [r4, #0]
 8006d3c:	68e5      	ldr	r5, [r4, #12]
 8006d3e:	6832      	ldr	r2, [r6, #0]
 8006d40:	f003 0306 	and.w	r3, r3, #6
 8006d44:	2b04      	cmp	r3, #4
 8006d46:	bf08      	it	eq
 8006d48:	1aad      	subeq	r5, r5, r2
 8006d4a:	68a3      	ldr	r3, [r4, #8]
 8006d4c:	6922      	ldr	r2, [r4, #16]
 8006d4e:	bf0c      	ite	eq
 8006d50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d54:	2500      	movne	r5, #0
 8006d56:	4293      	cmp	r3, r2
 8006d58:	bfc4      	itt	gt
 8006d5a:	1a9b      	subgt	r3, r3, r2
 8006d5c:	18ed      	addgt	r5, r5, r3
 8006d5e:	2600      	movs	r6, #0
 8006d60:	341a      	adds	r4, #26
 8006d62:	42b5      	cmp	r5, r6
 8006d64:	d11a      	bne.n	8006d9c <_printf_common+0xc8>
 8006d66:	2000      	movs	r0, #0
 8006d68:	e008      	b.n	8006d7c <_printf_common+0xa8>
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	4652      	mov	r2, sl
 8006d6e:	4649      	mov	r1, r9
 8006d70:	4638      	mov	r0, r7
 8006d72:	47c0      	blx	r8
 8006d74:	3001      	adds	r0, #1
 8006d76:	d103      	bne.n	8006d80 <_printf_common+0xac>
 8006d78:	f04f 30ff 	mov.w	r0, #4294967295
 8006d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d80:	3501      	adds	r5, #1
 8006d82:	e7c6      	b.n	8006d12 <_printf_common+0x3e>
 8006d84:	18e1      	adds	r1, r4, r3
 8006d86:	1c5a      	adds	r2, r3, #1
 8006d88:	2030      	movs	r0, #48	; 0x30
 8006d8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d8e:	4422      	add	r2, r4
 8006d90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d98:	3302      	adds	r3, #2
 8006d9a:	e7c7      	b.n	8006d2c <_printf_common+0x58>
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	4622      	mov	r2, r4
 8006da0:	4649      	mov	r1, r9
 8006da2:	4638      	mov	r0, r7
 8006da4:	47c0      	blx	r8
 8006da6:	3001      	adds	r0, #1
 8006da8:	d0e6      	beq.n	8006d78 <_printf_common+0xa4>
 8006daa:	3601      	adds	r6, #1
 8006dac:	e7d9      	b.n	8006d62 <_printf_common+0x8e>
	...

08006db0 <_printf_i>:
 8006db0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006db4:	7e0f      	ldrb	r7, [r1, #24]
 8006db6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006db8:	2f78      	cmp	r7, #120	; 0x78
 8006dba:	4691      	mov	r9, r2
 8006dbc:	4680      	mov	r8, r0
 8006dbe:	460c      	mov	r4, r1
 8006dc0:	469a      	mov	sl, r3
 8006dc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006dc6:	d807      	bhi.n	8006dd8 <_printf_i+0x28>
 8006dc8:	2f62      	cmp	r7, #98	; 0x62
 8006dca:	d80a      	bhi.n	8006de2 <_printf_i+0x32>
 8006dcc:	2f00      	cmp	r7, #0
 8006dce:	f000 80d8 	beq.w	8006f82 <_printf_i+0x1d2>
 8006dd2:	2f58      	cmp	r7, #88	; 0x58
 8006dd4:	f000 80a3 	beq.w	8006f1e <_printf_i+0x16e>
 8006dd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ddc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006de0:	e03a      	b.n	8006e58 <_printf_i+0xa8>
 8006de2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006de6:	2b15      	cmp	r3, #21
 8006de8:	d8f6      	bhi.n	8006dd8 <_printf_i+0x28>
 8006dea:	a101      	add	r1, pc, #4	; (adr r1, 8006df0 <_printf_i+0x40>)
 8006dec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006df0:	08006e49 	.word	0x08006e49
 8006df4:	08006e5d 	.word	0x08006e5d
 8006df8:	08006dd9 	.word	0x08006dd9
 8006dfc:	08006dd9 	.word	0x08006dd9
 8006e00:	08006dd9 	.word	0x08006dd9
 8006e04:	08006dd9 	.word	0x08006dd9
 8006e08:	08006e5d 	.word	0x08006e5d
 8006e0c:	08006dd9 	.word	0x08006dd9
 8006e10:	08006dd9 	.word	0x08006dd9
 8006e14:	08006dd9 	.word	0x08006dd9
 8006e18:	08006dd9 	.word	0x08006dd9
 8006e1c:	08006f69 	.word	0x08006f69
 8006e20:	08006e8d 	.word	0x08006e8d
 8006e24:	08006f4b 	.word	0x08006f4b
 8006e28:	08006dd9 	.word	0x08006dd9
 8006e2c:	08006dd9 	.word	0x08006dd9
 8006e30:	08006f8b 	.word	0x08006f8b
 8006e34:	08006dd9 	.word	0x08006dd9
 8006e38:	08006e8d 	.word	0x08006e8d
 8006e3c:	08006dd9 	.word	0x08006dd9
 8006e40:	08006dd9 	.word	0x08006dd9
 8006e44:	08006f53 	.word	0x08006f53
 8006e48:	682b      	ldr	r3, [r5, #0]
 8006e4a:	1d1a      	adds	r2, r3, #4
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	602a      	str	r2, [r5, #0]
 8006e50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e0a3      	b.n	8006fa4 <_printf_i+0x1f4>
 8006e5c:	6820      	ldr	r0, [r4, #0]
 8006e5e:	6829      	ldr	r1, [r5, #0]
 8006e60:	0606      	lsls	r6, r0, #24
 8006e62:	f101 0304 	add.w	r3, r1, #4
 8006e66:	d50a      	bpl.n	8006e7e <_printf_i+0xce>
 8006e68:	680e      	ldr	r6, [r1, #0]
 8006e6a:	602b      	str	r3, [r5, #0]
 8006e6c:	2e00      	cmp	r6, #0
 8006e6e:	da03      	bge.n	8006e78 <_printf_i+0xc8>
 8006e70:	232d      	movs	r3, #45	; 0x2d
 8006e72:	4276      	negs	r6, r6
 8006e74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e78:	485e      	ldr	r0, [pc, #376]	; (8006ff4 <_printf_i+0x244>)
 8006e7a:	230a      	movs	r3, #10
 8006e7c:	e019      	b.n	8006eb2 <_printf_i+0x102>
 8006e7e:	680e      	ldr	r6, [r1, #0]
 8006e80:	602b      	str	r3, [r5, #0]
 8006e82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e86:	bf18      	it	ne
 8006e88:	b236      	sxthne	r6, r6
 8006e8a:	e7ef      	b.n	8006e6c <_printf_i+0xbc>
 8006e8c:	682b      	ldr	r3, [r5, #0]
 8006e8e:	6820      	ldr	r0, [r4, #0]
 8006e90:	1d19      	adds	r1, r3, #4
 8006e92:	6029      	str	r1, [r5, #0]
 8006e94:	0601      	lsls	r1, r0, #24
 8006e96:	d501      	bpl.n	8006e9c <_printf_i+0xec>
 8006e98:	681e      	ldr	r6, [r3, #0]
 8006e9a:	e002      	b.n	8006ea2 <_printf_i+0xf2>
 8006e9c:	0646      	lsls	r6, r0, #25
 8006e9e:	d5fb      	bpl.n	8006e98 <_printf_i+0xe8>
 8006ea0:	881e      	ldrh	r6, [r3, #0]
 8006ea2:	4854      	ldr	r0, [pc, #336]	; (8006ff4 <_printf_i+0x244>)
 8006ea4:	2f6f      	cmp	r7, #111	; 0x6f
 8006ea6:	bf0c      	ite	eq
 8006ea8:	2308      	moveq	r3, #8
 8006eaa:	230a      	movne	r3, #10
 8006eac:	2100      	movs	r1, #0
 8006eae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006eb2:	6865      	ldr	r5, [r4, #4]
 8006eb4:	60a5      	str	r5, [r4, #8]
 8006eb6:	2d00      	cmp	r5, #0
 8006eb8:	bfa2      	ittt	ge
 8006eba:	6821      	ldrge	r1, [r4, #0]
 8006ebc:	f021 0104 	bicge.w	r1, r1, #4
 8006ec0:	6021      	strge	r1, [r4, #0]
 8006ec2:	b90e      	cbnz	r6, 8006ec8 <_printf_i+0x118>
 8006ec4:	2d00      	cmp	r5, #0
 8006ec6:	d04d      	beq.n	8006f64 <_printf_i+0x1b4>
 8006ec8:	4615      	mov	r5, r2
 8006eca:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ece:	fb03 6711 	mls	r7, r3, r1, r6
 8006ed2:	5dc7      	ldrb	r7, [r0, r7]
 8006ed4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ed8:	4637      	mov	r7, r6
 8006eda:	42bb      	cmp	r3, r7
 8006edc:	460e      	mov	r6, r1
 8006ede:	d9f4      	bls.n	8006eca <_printf_i+0x11a>
 8006ee0:	2b08      	cmp	r3, #8
 8006ee2:	d10b      	bne.n	8006efc <_printf_i+0x14c>
 8006ee4:	6823      	ldr	r3, [r4, #0]
 8006ee6:	07de      	lsls	r6, r3, #31
 8006ee8:	d508      	bpl.n	8006efc <_printf_i+0x14c>
 8006eea:	6923      	ldr	r3, [r4, #16]
 8006eec:	6861      	ldr	r1, [r4, #4]
 8006eee:	4299      	cmp	r1, r3
 8006ef0:	bfde      	ittt	le
 8006ef2:	2330      	movle	r3, #48	; 0x30
 8006ef4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ef8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006efc:	1b52      	subs	r2, r2, r5
 8006efe:	6122      	str	r2, [r4, #16]
 8006f00:	f8cd a000 	str.w	sl, [sp]
 8006f04:	464b      	mov	r3, r9
 8006f06:	aa03      	add	r2, sp, #12
 8006f08:	4621      	mov	r1, r4
 8006f0a:	4640      	mov	r0, r8
 8006f0c:	f7ff fee2 	bl	8006cd4 <_printf_common>
 8006f10:	3001      	adds	r0, #1
 8006f12:	d14c      	bne.n	8006fae <_printf_i+0x1fe>
 8006f14:	f04f 30ff 	mov.w	r0, #4294967295
 8006f18:	b004      	add	sp, #16
 8006f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f1e:	4835      	ldr	r0, [pc, #212]	; (8006ff4 <_printf_i+0x244>)
 8006f20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006f24:	6829      	ldr	r1, [r5, #0]
 8006f26:	6823      	ldr	r3, [r4, #0]
 8006f28:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f2c:	6029      	str	r1, [r5, #0]
 8006f2e:	061d      	lsls	r5, r3, #24
 8006f30:	d514      	bpl.n	8006f5c <_printf_i+0x1ac>
 8006f32:	07df      	lsls	r7, r3, #31
 8006f34:	bf44      	itt	mi
 8006f36:	f043 0320 	orrmi.w	r3, r3, #32
 8006f3a:	6023      	strmi	r3, [r4, #0]
 8006f3c:	b91e      	cbnz	r6, 8006f46 <_printf_i+0x196>
 8006f3e:	6823      	ldr	r3, [r4, #0]
 8006f40:	f023 0320 	bic.w	r3, r3, #32
 8006f44:	6023      	str	r3, [r4, #0]
 8006f46:	2310      	movs	r3, #16
 8006f48:	e7b0      	b.n	8006eac <_printf_i+0xfc>
 8006f4a:	6823      	ldr	r3, [r4, #0]
 8006f4c:	f043 0320 	orr.w	r3, r3, #32
 8006f50:	6023      	str	r3, [r4, #0]
 8006f52:	2378      	movs	r3, #120	; 0x78
 8006f54:	4828      	ldr	r0, [pc, #160]	; (8006ff8 <_printf_i+0x248>)
 8006f56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f5a:	e7e3      	b.n	8006f24 <_printf_i+0x174>
 8006f5c:	0659      	lsls	r1, r3, #25
 8006f5e:	bf48      	it	mi
 8006f60:	b2b6      	uxthmi	r6, r6
 8006f62:	e7e6      	b.n	8006f32 <_printf_i+0x182>
 8006f64:	4615      	mov	r5, r2
 8006f66:	e7bb      	b.n	8006ee0 <_printf_i+0x130>
 8006f68:	682b      	ldr	r3, [r5, #0]
 8006f6a:	6826      	ldr	r6, [r4, #0]
 8006f6c:	6961      	ldr	r1, [r4, #20]
 8006f6e:	1d18      	adds	r0, r3, #4
 8006f70:	6028      	str	r0, [r5, #0]
 8006f72:	0635      	lsls	r5, r6, #24
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	d501      	bpl.n	8006f7c <_printf_i+0x1cc>
 8006f78:	6019      	str	r1, [r3, #0]
 8006f7a:	e002      	b.n	8006f82 <_printf_i+0x1d2>
 8006f7c:	0670      	lsls	r0, r6, #25
 8006f7e:	d5fb      	bpl.n	8006f78 <_printf_i+0x1c8>
 8006f80:	8019      	strh	r1, [r3, #0]
 8006f82:	2300      	movs	r3, #0
 8006f84:	6123      	str	r3, [r4, #16]
 8006f86:	4615      	mov	r5, r2
 8006f88:	e7ba      	b.n	8006f00 <_printf_i+0x150>
 8006f8a:	682b      	ldr	r3, [r5, #0]
 8006f8c:	1d1a      	adds	r2, r3, #4
 8006f8e:	602a      	str	r2, [r5, #0]
 8006f90:	681d      	ldr	r5, [r3, #0]
 8006f92:	6862      	ldr	r2, [r4, #4]
 8006f94:	2100      	movs	r1, #0
 8006f96:	4628      	mov	r0, r5
 8006f98:	f7f9 f922 	bl	80001e0 <memchr>
 8006f9c:	b108      	cbz	r0, 8006fa2 <_printf_i+0x1f2>
 8006f9e:	1b40      	subs	r0, r0, r5
 8006fa0:	6060      	str	r0, [r4, #4]
 8006fa2:	6863      	ldr	r3, [r4, #4]
 8006fa4:	6123      	str	r3, [r4, #16]
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fac:	e7a8      	b.n	8006f00 <_printf_i+0x150>
 8006fae:	6923      	ldr	r3, [r4, #16]
 8006fb0:	462a      	mov	r2, r5
 8006fb2:	4649      	mov	r1, r9
 8006fb4:	4640      	mov	r0, r8
 8006fb6:	47d0      	blx	sl
 8006fb8:	3001      	adds	r0, #1
 8006fba:	d0ab      	beq.n	8006f14 <_printf_i+0x164>
 8006fbc:	6823      	ldr	r3, [r4, #0]
 8006fbe:	079b      	lsls	r3, r3, #30
 8006fc0:	d413      	bmi.n	8006fea <_printf_i+0x23a>
 8006fc2:	68e0      	ldr	r0, [r4, #12]
 8006fc4:	9b03      	ldr	r3, [sp, #12]
 8006fc6:	4298      	cmp	r0, r3
 8006fc8:	bfb8      	it	lt
 8006fca:	4618      	movlt	r0, r3
 8006fcc:	e7a4      	b.n	8006f18 <_printf_i+0x168>
 8006fce:	2301      	movs	r3, #1
 8006fd0:	4632      	mov	r2, r6
 8006fd2:	4649      	mov	r1, r9
 8006fd4:	4640      	mov	r0, r8
 8006fd6:	47d0      	blx	sl
 8006fd8:	3001      	adds	r0, #1
 8006fda:	d09b      	beq.n	8006f14 <_printf_i+0x164>
 8006fdc:	3501      	adds	r5, #1
 8006fde:	68e3      	ldr	r3, [r4, #12]
 8006fe0:	9903      	ldr	r1, [sp, #12]
 8006fe2:	1a5b      	subs	r3, r3, r1
 8006fe4:	42ab      	cmp	r3, r5
 8006fe6:	dcf2      	bgt.n	8006fce <_printf_i+0x21e>
 8006fe8:	e7eb      	b.n	8006fc2 <_printf_i+0x212>
 8006fea:	2500      	movs	r5, #0
 8006fec:	f104 0619 	add.w	r6, r4, #25
 8006ff0:	e7f5      	b.n	8006fde <_printf_i+0x22e>
 8006ff2:	bf00      	nop
 8006ff4:	0800942a 	.word	0x0800942a
 8006ff8:	0800943b 	.word	0x0800943b

08006ffc <cleanup_glue>:
 8006ffc:	b538      	push	{r3, r4, r5, lr}
 8006ffe:	460c      	mov	r4, r1
 8007000:	6809      	ldr	r1, [r1, #0]
 8007002:	4605      	mov	r5, r0
 8007004:	b109      	cbz	r1, 800700a <cleanup_glue+0xe>
 8007006:	f7ff fff9 	bl	8006ffc <cleanup_glue>
 800700a:	4621      	mov	r1, r4
 800700c:	4628      	mov	r0, r5
 800700e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007012:	f001 bd49 	b.w	8008aa8 <_free_r>
	...

08007018 <_reclaim_reent>:
 8007018:	4b2c      	ldr	r3, [pc, #176]	; (80070cc <_reclaim_reent+0xb4>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4283      	cmp	r3, r0
 800701e:	b570      	push	{r4, r5, r6, lr}
 8007020:	4604      	mov	r4, r0
 8007022:	d051      	beq.n	80070c8 <_reclaim_reent+0xb0>
 8007024:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007026:	b143      	cbz	r3, 800703a <_reclaim_reent+0x22>
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d14a      	bne.n	80070c4 <_reclaim_reent+0xac>
 800702e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007030:	6819      	ldr	r1, [r3, #0]
 8007032:	b111      	cbz	r1, 800703a <_reclaim_reent+0x22>
 8007034:	4620      	mov	r0, r4
 8007036:	f001 fd37 	bl	8008aa8 <_free_r>
 800703a:	6961      	ldr	r1, [r4, #20]
 800703c:	b111      	cbz	r1, 8007044 <_reclaim_reent+0x2c>
 800703e:	4620      	mov	r0, r4
 8007040:	f001 fd32 	bl	8008aa8 <_free_r>
 8007044:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007046:	b111      	cbz	r1, 800704e <_reclaim_reent+0x36>
 8007048:	4620      	mov	r0, r4
 800704a:	f001 fd2d 	bl	8008aa8 <_free_r>
 800704e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007050:	b111      	cbz	r1, 8007058 <_reclaim_reent+0x40>
 8007052:	4620      	mov	r0, r4
 8007054:	f001 fd28 	bl	8008aa8 <_free_r>
 8007058:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800705a:	b111      	cbz	r1, 8007062 <_reclaim_reent+0x4a>
 800705c:	4620      	mov	r0, r4
 800705e:	f001 fd23 	bl	8008aa8 <_free_r>
 8007062:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007064:	b111      	cbz	r1, 800706c <_reclaim_reent+0x54>
 8007066:	4620      	mov	r0, r4
 8007068:	f001 fd1e 	bl	8008aa8 <_free_r>
 800706c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800706e:	b111      	cbz	r1, 8007076 <_reclaim_reent+0x5e>
 8007070:	4620      	mov	r0, r4
 8007072:	f001 fd19 	bl	8008aa8 <_free_r>
 8007076:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007078:	b111      	cbz	r1, 8007080 <_reclaim_reent+0x68>
 800707a:	4620      	mov	r0, r4
 800707c:	f001 fd14 	bl	8008aa8 <_free_r>
 8007080:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007082:	b111      	cbz	r1, 800708a <_reclaim_reent+0x72>
 8007084:	4620      	mov	r0, r4
 8007086:	f001 fd0f 	bl	8008aa8 <_free_r>
 800708a:	69a3      	ldr	r3, [r4, #24]
 800708c:	b1e3      	cbz	r3, 80070c8 <_reclaim_reent+0xb0>
 800708e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007090:	4620      	mov	r0, r4
 8007092:	4798      	blx	r3
 8007094:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007096:	b1b9      	cbz	r1, 80070c8 <_reclaim_reent+0xb0>
 8007098:	4620      	mov	r0, r4
 800709a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800709e:	f7ff bfad 	b.w	8006ffc <cleanup_glue>
 80070a2:	5949      	ldr	r1, [r1, r5]
 80070a4:	b941      	cbnz	r1, 80070b8 <_reclaim_reent+0xa0>
 80070a6:	3504      	adds	r5, #4
 80070a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070aa:	2d80      	cmp	r5, #128	; 0x80
 80070ac:	68d9      	ldr	r1, [r3, #12]
 80070ae:	d1f8      	bne.n	80070a2 <_reclaim_reent+0x8a>
 80070b0:	4620      	mov	r0, r4
 80070b2:	f001 fcf9 	bl	8008aa8 <_free_r>
 80070b6:	e7ba      	b.n	800702e <_reclaim_reent+0x16>
 80070b8:	680e      	ldr	r6, [r1, #0]
 80070ba:	4620      	mov	r0, r4
 80070bc:	f001 fcf4 	bl	8008aa8 <_free_r>
 80070c0:	4631      	mov	r1, r6
 80070c2:	e7ef      	b.n	80070a4 <_reclaim_reent+0x8c>
 80070c4:	2500      	movs	r5, #0
 80070c6:	e7ef      	b.n	80070a8 <_reclaim_reent+0x90>
 80070c8:	bd70      	pop	{r4, r5, r6, pc}
 80070ca:	bf00      	nop
 80070cc:	20000010 	.word	0x20000010

080070d0 <_sbrk_r>:
 80070d0:	b538      	push	{r3, r4, r5, lr}
 80070d2:	4d06      	ldr	r5, [pc, #24]	; (80070ec <_sbrk_r+0x1c>)
 80070d4:	2300      	movs	r3, #0
 80070d6:	4604      	mov	r4, r0
 80070d8:	4608      	mov	r0, r1
 80070da:	602b      	str	r3, [r5, #0]
 80070dc:	f7fa fc28 	bl	8001930 <_sbrk>
 80070e0:	1c43      	adds	r3, r0, #1
 80070e2:	d102      	bne.n	80070ea <_sbrk_r+0x1a>
 80070e4:	682b      	ldr	r3, [r5, #0]
 80070e6:	b103      	cbz	r3, 80070ea <_sbrk_r+0x1a>
 80070e8:	6023      	str	r3, [r4, #0]
 80070ea:	bd38      	pop	{r3, r4, r5, pc}
 80070ec:	20001318 	.word	0x20001318

080070f0 <siprintf>:
 80070f0:	b40e      	push	{r1, r2, r3}
 80070f2:	b500      	push	{lr}
 80070f4:	b09c      	sub	sp, #112	; 0x70
 80070f6:	ab1d      	add	r3, sp, #116	; 0x74
 80070f8:	9002      	str	r0, [sp, #8]
 80070fa:	9006      	str	r0, [sp, #24]
 80070fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007100:	4809      	ldr	r0, [pc, #36]	; (8007128 <siprintf+0x38>)
 8007102:	9107      	str	r1, [sp, #28]
 8007104:	9104      	str	r1, [sp, #16]
 8007106:	4909      	ldr	r1, [pc, #36]	; (800712c <siprintf+0x3c>)
 8007108:	f853 2b04 	ldr.w	r2, [r3], #4
 800710c:	9105      	str	r1, [sp, #20]
 800710e:	6800      	ldr	r0, [r0, #0]
 8007110:	9301      	str	r3, [sp, #4]
 8007112:	a902      	add	r1, sp, #8
 8007114:	f001 fd70 	bl	8008bf8 <_svfiprintf_r>
 8007118:	9b02      	ldr	r3, [sp, #8]
 800711a:	2200      	movs	r2, #0
 800711c:	701a      	strb	r2, [r3, #0]
 800711e:	b01c      	add	sp, #112	; 0x70
 8007120:	f85d eb04 	ldr.w	lr, [sp], #4
 8007124:	b003      	add	sp, #12
 8007126:	4770      	bx	lr
 8007128:	20000010 	.word	0x20000010
 800712c:	ffff0208 	.word	0xffff0208

08007130 <__sread>:
 8007130:	b510      	push	{r4, lr}
 8007132:	460c      	mov	r4, r1
 8007134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007138:	f001 ffb8 	bl	80090ac <_read_r>
 800713c:	2800      	cmp	r0, #0
 800713e:	bfab      	itete	ge
 8007140:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007142:	89a3      	ldrhlt	r3, [r4, #12]
 8007144:	181b      	addge	r3, r3, r0
 8007146:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800714a:	bfac      	ite	ge
 800714c:	6563      	strge	r3, [r4, #84]	; 0x54
 800714e:	81a3      	strhlt	r3, [r4, #12]
 8007150:	bd10      	pop	{r4, pc}

08007152 <__swrite>:
 8007152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007156:	461f      	mov	r7, r3
 8007158:	898b      	ldrh	r3, [r1, #12]
 800715a:	05db      	lsls	r3, r3, #23
 800715c:	4605      	mov	r5, r0
 800715e:	460c      	mov	r4, r1
 8007160:	4616      	mov	r6, r2
 8007162:	d505      	bpl.n	8007170 <__swrite+0x1e>
 8007164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007168:	2302      	movs	r3, #2
 800716a:	2200      	movs	r2, #0
 800716c:	f001 f876 	bl	800825c <_lseek_r>
 8007170:	89a3      	ldrh	r3, [r4, #12]
 8007172:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007176:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800717a:	81a3      	strh	r3, [r4, #12]
 800717c:	4632      	mov	r2, r6
 800717e:	463b      	mov	r3, r7
 8007180:	4628      	mov	r0, r5
 8007182:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007186:	f000 b869 	b.w	800725c <_write_r>

0800718a <__sseek>:
 800718a:	b510      	push	{r4, lr}
 800718c:	460c      	mov	r4, r1
 800718e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007192:	f001 f863 	bl	800825c <_lseek_r>
 8007196:	1c43      	adds	r3, r0, #1
 8007198:	89a3      	ldrh	r3, [r4, #12]
 800719a:	bf15      	itete	ne
 800719c:	6560      	strne	r0, [r4, #84]	; 0x54
 800719e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80071a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80071a6:	81a3      	strheq	r3, [r4, #12]
 80071a8:	bf18      	it	ne
 80071aa:	81a3      	strhne	r3, [r4, #12]
 80071ac:	bd10      	pop	{r4, pc}

080071ae <__sclose>:
 80071ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071b2:	f000 b8f1 	b.w	8007398 <_close_r>
	...

080071b8 <__swbuf_r>:
 80071b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ba:	460e      	mov	r6, r1
 80071bc:	4614      	mov	r4, r2
 80071be:	4605      	mov	r5, r0
 80071c0:	b118      	cbz	r0, 80071ca <__swbuf_r+0x12>
 80071c2:	6983      	ldr	r3, [r0, #24]
 80071c4:	b90b      	cbnz	r3, 80071ca <__swbuf_r+0x12>
 80071c6:	f7ff f93f 	bl	8006448 <__sinit>
 80071ca:	4b21      	ldr	r3, [pc, #132]	; (8007250 <__swbuf_r+0x98>)
 80071cc:	429c      	cmp	r4, r3
 80071ce:	d12b      	bne.n	8007228 <__swbuf_r+0x70>
 80071d0:	686c      	ldr	r4, [r5, #4]
 80071d2:	69a3      	ldr	r3, [r4, #24]
 80071d4:	60a3      	str	r3, [r4, #8]
 80071d6:	89a3      	ldrh	r3, [r4, #12]
 80071d8:	071a      	lsls	r2, r3, #28
 80071da:	d52f      	bpl.n	800723c <__swbuf_r+0x84>
 80071dc:	6923      	ldr	r3, [r4, #16]
 80071de:	b36b      	cbz	r3, 800723c <__swbuf_r+0x84>
 80071e0:	6923      	ldr	r3, [r4, #16]
 80071e2:	6820      	ldr	r0, [r4, #0]
 80071e4:	1ac0      	subs	r0, r0, r3
 80071e6:	6963      	ldr	r3, [r4, #20]
 80071e8:	b2f6      	uxtb	r6, r6
 80071ea:	4283      	cmp	r3, r0
 80071ec:	4637      	mov	r7, r6
 80071ee:	dc04      	bgt.n	80071fa <__swbuf_r+0x42>
 80071f0:	4621      	mov	r1, r4
 80071f2:	4628      	mov	r0, r5
 80071f4:	f000 ffe0 	bl	80081b8 <_fflush_r>
 80071f8:	bb30      	cbnz	r0, 8007248 <__swbuf_r+0x90>
 80071fa:	68a3      	ldr	r3, [r4, #8]
 80071fc:	3b01      	subs	r3, #1
 80071fe:	60a3      	str	r3, [r4, #8]
 8007200:	6823      	ldr	r3, [r4, #0]
 8007202:	1c5a      	adds	r2, r3, #1
 8007204:	6022      	str	r2, [r4, #0]
 8007206:	701e      	strb	r6, [r3, #0]
 8007208:	6963      	ldr	r3, [r4, #20]
 800720a:	3001      	adds	r0, #1
 800720c:	4283      	cmp	r3, r0
 800720e:	d004      	beq.n	800721a <__swbuf_r+0x62>
 8007210:	89a3      	ldrh	r3, [r4, #12]
 8007212:	07db      	lsls	r3, r3, #31
 8007214:	d506      	bpl.n	8007224 <__swbuf_r+0x6c>
 8007216:	2e0a      	cmp	r6, #10
 8007218:	d104      	bne.n	8007224 <__swbuf_r+0x6c>
 800721a:	4621      	mov	r1, r4
 800721c:	4628      	mov	r0, r5
 800721e:	f000 ffcb 	bl	80081b8 <_fflush_r>
 8007222:	b988      	cbnz	r0, 8007248 <__swbuf_r+0x90>
 8007224:	4638      	mov	r0, r7
 8007226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007228:	4b0a      	ldr	r3, [pc, #40]	; (8007254 <__swbuf_r+0x9c>)
 800722a:	429c      	cmp	r4, r3
 800722c:	d101      	bne.n	8007232 <__swbuf_r+0x7a>
 800722e:	68ac      	ldr	r4, [r5, #8]
 8007230:	e7cf      	b.n	80071d2 <__swbuf_r+0x1a>
 8007232:	4b09      	ldr	r3, [pc, #36]	; (8007258 <__swbuf_r+0xa0>)
 8007234:	429c      	cmp	r4, r3
 8007236:	bf08      	it	eq
 8007238:	68ec      	ldreq	r4, [r5, #12]
 800723a:	e7ca      	b.n	80071d2 <__swbuf_r+0x1a>
 800723c:	4621      	mov	r1, r4
 800723e:	4628      	mov	r0, r5
 8007240:	f000 f81e 	bl	8007280 <__swsetup_r>
 8007244:	2800      	cmp	r0, #0
 8007246:	d0cb      	beq.n	80071e0 <__swbuf_r+0x28>
 8007248:	f04f 37ff 	mov.w	r7, #4294967295
 800724c:	e7ea      	b.n	8007224 <__swbuf_r+0x6c>
 800724e:	bf00      	nop
 8007250:	080093d4 	.word	0x080093d4
 8007254:	080093f4 	.word	0x080093f4
 8007258:	080093b4 	.word	0x080093b4

0800725c <_write_r>:
 800725c:	b538      	push	{r3, r4, r5, lr}
 800725e:	4d07      	ldr	r5, [pc, #28]	; (800727c <_write_r+0x20>)
 8007260:	4604      	mov	r4, r0
 8007262:	4608      	mov	r0, r1
 8007264:	4611      	mov	r1, r2
 8007266:	2200      	movs	r2, #0
 8007268:	602a      	str	r2, [r5, #0]
 800726a:	461a      	mov	r2, r3
 800726c:	f7fa fb0f 	bl	800188e <_write>
 8007270:	1c43      	adds	r3, r0, #1
 8007272:	d102      	bne.n	800727a <_write_r+0x1e>
 8007274:	682b      	ldr	r3, [r5, #0]
 8007276:	b103      	cbz	r3, 800727a <_write_r+0x1e>
 8007278:	6023      	str	r3, [r4, #0]
 800727a:	bd38      	pop	{r3, r4, r5, pc}
 800727c:	20001318 	.word	0x20001318

08007280 <__swsetup_r>:
 8007280:	4b32      	ldr	r3, [pc, #200]	; (800734c <__swsetup_r+0xcc>)
 8007282:	b570      	push	{r4, r5, r6, lr}
 8007284:	681d      	ldr	r5, [r3, #0]
 8007286:	4606      	mov	r6, r0
 8007288:	460c      	mov	r4, r1
 800728a:	b125      	cbz	r5, 8007296 <__swsetup_r+0x16>
 800728c:	69ab      	ldr	r3, [r5, #24]
 800728e:	b913      	cbnz	r3, 8007296 <__swsetup_r+0x16>
 8007290:	4628      	mov	r0, r5
 8007292:	f7ff f8d9 	bl	8006448 <__sinit>
 8007296:	4b2e      	ldr	r3, [pc, #184]	; (8007350 <__swsetup_r+0xd0>)
 8007298:	429c      	cmp	r4, r3
 800729a:	d10f      	bne.n	80072bc <__swsetup_r+0x3c>
 800729c:	686c      	ldr	r4, [r5, #4]
 800729e:	89a3      	ldrh	r3, [r4, #12]
 80072a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80072a4:	0719      	lsls	r1, r3, #28
 80072a6:	d42c      	bmi.n	8007302 <__swsetup_r+0x82>
 80072a8:	06dd      	lsls	r5, r3, #27
 80072aa:	d411      	bmi.n	80072d0 <__swsetup_r+0x50>
 80072ac:	2309      	movs	r3, #9
 80072ae:	6033      	str	r3, [r6, #0]
 80072b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80072b4:	81a3      	strh	r3, [r4, #12]
 80072b6:	f04f 30ff 	mov.w	r0, #4294967295
 80072ba:	e03e      	b.n	800733a <__swsetup_r+0xba>
 80072bc:	4b25      	ldr	r3, [pc, #148]	; (8007354 <__swsetup_r+0xd4>)
 80072be:	429c      	cmp	r4, r3
 80072c0:	d101      	bne.n	80072c6 <__swsetup_r+0x46>
 80072c2:	68ac      	ldr	r4, [r5, #8]
 80072c4:	e7eb      	b.n	800729e <__swsetup_r+0x1e>
 80072c6:	4b24      	ldr	r3, [pc, #144]	; (8007358 <__swsetup_r+0xd8>)
 80072c8:	429c      	cmp	r4, r3
 80072ca:	bf08      	it	eq
 80072cc:	68ec      	ldreq	r4, [r5, #12]
 80072ce:	e7e6      	b.n	800729e <__swsetup_r+0x1e>
 80072d0:	0758      	lsls	r0, r3, #29
 80072d2:	d512      	bpl.n	80072fa <__swsetup_r+0x7a>
 80072d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072d6:	b141      	cbz	r1, 80072ea <__swsetup_r+0x6a>
 80072d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072dc:	4299      	cmp	r1, r3
 80072de:	d002      	beq.n	80072e6 <__swsetup_r+0x66>
 80072e0:	4630      	mov	r0, r6
 80072e2:	f001 fbe1 	bl	8008aa8 <_free_r>
 80072e6:	2300      	movs	r3, #0
 80072e8:	6363      	str	r3, [r4, #52]	; 0x34
 80072ea:	89a3      	ldrh	r3, [r4, #12]
 80072ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80072f0:	81a3      	strh	r3, [r4, #12]
 80072f2:	2300      	movs	r3, #0
 80072f4:	6063      	str	r3, [r4, #4]
 80072f6:	6923      	ldr	r3, [r4, #16]
 80072f8:	6023      	str	r3, [r4, #0]
 80072fa:	89a3      	ldrh	r3, [r4, #12]
 80072fc:	f043 0308 	orr.w	r3, r3, #8
 8007300:	81a3      	strh	r3, [r4, #12]
 8007302:	6923      	ldr	r3, [r4, #16]
 8007304:	b94b      	cbnz	r3, 800731a <__swsetup_r+0x9a>
 8007306:	89a3      	ldrh	r3, [r4, #12]
 8007308:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800730c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007310:	d003      	beq.n	800731a <__swsetup_r+0x9a>
 8007312:	4621      	mov	r1, r4
 8007314:	4630      	mov	r0, r6
 8007316:	f000 ffd9 	bl	80082cc <__smakebuf_r>
 800731a:	89a0      	ldrh	r0, [r4, #12]
 800731c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007320:	f010 0301 	ands.w	r3, r0, #1
 8007324:	d00a      	beq.n	800733c <__swsetup_r+0xbc>
 8007326:	2300      	movs	r3, #0
 8007328:	60a3      	str	r3, [r4, #8]
 800732a:	6963      	ldr	r3, [r4, #20]
 800732c:	425b      	negs	r3, r3
 800732e:	61a3      	str	r3, [r4, #24]
 8007330:	6923      	ldr	r3, [r4, #16]
 8007332:	b943      	cbnz	r3, 8007346 <__swsetup_r+0xc6>
 8007334:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007338:	d1ba      	bne.n	80072b0 <__swsetup_r+0x30>
 800733a:	bd70      	pop	{r4, r5, r6, pc}
 800733c:	0781      	lsls	r1, r0, #30
 800733e:	bf58      	it	pl
 8007340:	6963      	ldrpl	r3, [r4, #20]
 8007342:	60a3      	str	r3, [r4, #8]
 8007344:	e7f4      	b.n	8007330 <__swsetup_r+0xb0>
 8007346:	2000      	movs	r0, #0
 8007348:	e7f7      	b.n	800733a <__swsetup_r+0xba>
 800734a:	bf00      	nop
 800734c:	20000010 	.word	0x20000010
 8007350:	080093d4 	.word	0x080093d4
 8007354:	080093f4 	.word	0x080093f4
 8007358:	080093b4 	.word	0x080093b4

0800735c <__assert_func>:
 800735c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800735e:	4614      	mov	r4, r2
 8007360:	461a      	mov	r2, r3
 8007362:	4b09      	ldr	r3, [pc, #36]	; (8007388 <__assert_func+0x2c>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4605      	mov	r5, r0
 8007368:	68d8      	ldr	r0, [r3, #12]
 800736a:	b14c      	cbz	r4, 8007380 <__assert_func+0x24>
 800736c:	4b07      	ldr	r3, [pc, #28]	; (800738c <__assert_func+0x30>)
 800736e:	9100      	str	r1, [sp, #0]
 8007370:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007374:	4906      	ldr	r1, [pc, #24]	; (8007390 <__assert_func+0x34>)
 8007376:	462b      	mov	r3, r5
 8007378:	f000 ff5a 	bl	8008230 <fiprintf>
 800737c:	f001 fea8 	bl	80090d0 <abort>
 8007380:	4b04      	ldr	r3, [pc, #16]	; (8007394 <__assert_func+0x38>)
 8007382:	461c      	mov	r4, r3
 8007384:	e7f3      	b.n	800736e <__assert_func+0x12>
 8007386:	bf00      	nop
 8007388:	20000010 	.word	0x20000010
 800738c:	0800944c 	.word	0x0800944c
 8007390:	08009459 	.word	0x08009459
 8007394:	08009487 	.word	0x08009487

08007398 <_close_r>:
 8007398:	b538      	push	{r3, r4, r5, lr}
 800739a:	4d06      	ldr	r5, [pc, #24]	; (80073b4 <_close_r+0x1c>)
 800739c:	2300      	movs	r3, #0
 800739e:	4604      	mov	r4, r0
 80073a0:	4608      	mov	r0, r1
 80073a2:	602b      	str	r3, [r5, #0]
 80073a4:	f7fa fa8f 	bl	80018c6 <_close>
 80073a8:	1c43      	adds	r3, r0, #1
 80073aa:	d102      	bne.n	80073b2 <_close_r+0x1a>
 80073ac:	682b      	ldr	r3, [r5, #0]
 80073ae:	b103      	cbz	r3, 80073b2 <_close_r+0x1a>
 80073b0:	6023      	str	r3, [r4, #0]
 80073b2:	bd38      	pop	{r3, r4, r5, pc}
 80073b4:	20001318 	.word	0x20001318

080073b8 <quorem>:
 80073b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073bc:	6903      	ldr	r3, [r0, #16]
 80073be:	690c      	ldr	r4, [r1, #16]
 80073c0:	42a3      	cmp	r3, r4
 80073c2:	4607      	mov	r7, r0
 80073c4:	f2c0 8081 	blt.w	80074ca <quorem+0x112>
 80073c8:	3c01      	subs	r4, #1
 80073ca:	f101 0814 	add.w	r8, r1, #20
 80073ce:	f100 0514 	add.w	r5, r0, #20
 80073d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073d6:	9301      	str	r3, [sp, #4]
 80073d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80073dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80073e0:	3301      	adds	r3, #1
 80073e2:	429a      	cmp	r2, r3
 80073e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80073e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80073ec:	fbb2 f6f3 	udiv	r6, r2, r3
 80073f0:	d331      	bcc.n	8007456 <quorem+0x9e>
 80073f2:	f04f 0e00 	mov.w	lr, #0
 80073f6:	4640      	mov	r0, r8
 80073f8:	46ac      	mov	ip, r5
 80073fa:	46f2      	mov	sl, lr
 80073fc:	f850 2b04 	ldr.w	r2, [r0], #4
 8007400:	b293      	uxth	r3, r2
 8007402:	fb06 e303 	mla	r3, r6, r3, lr
 8007406:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800740a:	b29b      	uxth	r3, r3
 800740c:	ebaa 0303 	sub.w	r3, sl, r3
 8007410:	f8dc a000 	ldr.w	sl, [ip]
 8007414:	0c12      	lsrs	r2, r2, #16
 8007416:	fa13 f38a 	uxtah	r3, r3, sl
 800741a:	fb06 e202 	mla	r2, r6, r2, lr
 800741e:	9300      	str	r3, [sp, #0]
 8007420:	9b00      	ldr	r3, [sp, #0]
 8007422:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007426:	b292      	uxth	r2, r2
 8007428:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800742c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007430:	f8bd 3000 	ldrh.w	r3, [sp]
 8007434:	4581      	cmp	r9, r0
 8007436:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800743a:	f84c 3b04 	str.w	r3, [ip], #4
 800743e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007442:	d2db      	bcs.n	80073fc <quorem+0x44>
 8007444:	f855 300b 	ldr.w	r3, [r5, fp]
 8007448:	b92b      	cbnz	r3, 8007456 <quorem+0x9e>
 800744a:	9b01      	ldr	r3, [sp, #4]
 800744c:	3b04      	subs	r3, #4
 800744e:	429d      	cmp	r5, r3
 8007450:	461a      	mov	r2, r3
 8007452:	d32e      	bcc.n	80074b2 <quorem+0xfa>
 8007454:	613c      	str	r4, [r7, #16]
 8007456:	4638      	mov	r0, r7
 8007458:	f001 fa0e 	bl	8008878 <__mcmp>
 800745c:	2800      	cmp	r0, #0
 800745e:	db24      	blt.n	80074aa <quorem+0xf2>
 8007460:	3601      	adds	r6, #1
 8007462:	4628      	mov	r0, r5
 8007464:	f04f 0c00 	mov.w	ip, #0
 8007468:	f858 2b04 	ldr.w	r2, [r8], #4
 800746c:	f8d0 e000 	ldr.w	lr, [r0]
 8007470:	b293      	uxth	r3, r2
 8007472:	ebac 0303 	sub.w	r3, ip, r3
 8007476:	0c12      	lsrs	r2, r2, #16
 8007478:	fa13 f38e 	uxtah	r3, r3, lr
 800747c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007480:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007484:	b29b      	uxth	r3, r3
 8007486:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800748a:	45c1      	cmp	r9, r8
 800748c:	f840 3b04 	str.w	r3, [r0], #4
 8007490:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007494:	d2e8      	bcs.n	8007468 <quorem+0xb0>
 8007496:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800749a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800749e:	b922      	cbnz	r2, 80074aa <quorem+0xf2>
 80074a0:	3b04      	subs	r3, #4
 80074a2:	429d      	cmp	r5, r3
 80074a4:	461a      	mov	r2, r3
 80074a6:	d30a      	bcc.n	80074be <quorem+0x106>
 80074a8:	613c      	str	r4, [r7, #16]
 80074aa:	4630      	mov	r0, r6
 80074ac:	b003      	add	sp, #12
 80074ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074b2:	6812      	ldr	r2, [r2, #0]
 80074b4:	3b04      	subs	r3, #4
 80074b6:	2a00      	cmp	r2, #0
 80074b8:	d1cc      	bne.n	8007454 <quorem+0x9c>
 80074ba:	3c01      	subs	r4, #1
 80074bc:	e7c7      	b.n	800744e <quorem+0x96>
 80074be:	6812      	ldr	r2, [r2, #0]
 80074c0:	3b04      	subs	r3, #4
 80074c2:	2a00      	cmp	r2, #0
 80074c4:	d1f0      	bne.n	80074a8 <quorem+0xf0>
 80074c6:	3c01      	subs	r4, #1
 80074c8:	e7eb      	b.n	80074a2 <quorem+0xea>
 80074ca:	2000      	movs	r0, #0
 80074cc:	e7ee      	b.n	80074ac <quorem+0xf4>
	...

080074d0 <_dtoa_r>:
 80074d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074d4:	ed2d 8b04 	vpush	{d8-d9}
 80074d8:	ec57 6b10 	vmov	r6, r7, d0
 80074dc:	b093      	sub	sp, #76	; 0x4c
 80074de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80074e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80074e4:	9106      	str	r1, [sp, #24]
 80074e6:	ee10 aa10 	vmov	sl, s0
 80074ea:	4604      	mov	r4, r0
 80074ec:	9209      	str	r2, [sp, #36]	; 0x24
 80074ee:	930c      	str	r3, [sp, #48]	; 0x30
 80074f0:	46bb      	mov	fp, r7
 80074f2:	b975      	cbnz	r5, 8007512 <_dtoa_r+0x42>
 80074f4:	2010      	movs	r0, #16
 80074f6:	f000 ff29 	bl	800834c <malloc>
 80074fa:	4602      	mov	r2, r0
 80074fc:	6260      	str	r0, [r4, #36]	; 0x24
 80074fe:	b920      	cbnz	r0, 800750a <_dtoa_r+0x3a>
 8007500:	4ba7      	ldr	r3, [pc, #668]	; (80077a0 <_dtoa_r+0x2d0>)
 8007502:	21ea      	movs	r1, #234	; 0xea
 8007504:	48a7      	ldr	r0, [pc, #668]	; (80077a4 <_dtoa_r+0x2d4>)
 8007506:	f7ff ff29 	bl	800735c <__assert_func>
 800750a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800750e:	6005      	str	r5, [r0, #0]
 8007510:	60c5      	str	r5, [r0, #12]
 8007512:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007514:	6819      	ldr	r1, [r3, #0]
 8007516:	b151      	cbz	r1, 800752e <_dtoa_r+0x5e>
 8007518:	685a      	ldr	r2, [r3, #4]
 800751a:	604a      	str	r2, [r1, #4]
 800751c:	2301      	movs	r3, #1
 800751e:	4093      	lsls	r3, r2
 8007520:	608b      	str	r3, [r1, #8]
 8007522:	4620      	mov	r0, r4
 8007524:	f000 ff66 	bl	80083f4 <_Bfree>
 8007528:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800752a:	2200      	movs	r2, #0
 800752c:	601a      	str	r2, [r3, #0]
 800752e:	1e3b      	subs	r3, r7, #0
 8007530:	bfaa      	itet	ge
 8007532:	2300      	movge	r3, #0
 8007534:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007538:	f8c8 3000 	strge.w	r3, [r8]
 800753c:	4b9a      	ldr	r3, [pc, #616]	; (80077a8 <_dtoa_r+0x2d8>)
 800753e:	bfbc      	itt	lt
 8007540:	2201      	movlt	r2, #1
 8007542:	f8c8 2000 	strlt.w	r2, [r8]
 8007546:	ea33 030b 	bics.w	r3, r3, fp
 800754a:	d11b      	bne.n	8007584 <_dtoa_r+0xb4>
 800754c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800754e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007552:	6013      	str	r3, [r2, #0]
 8007554:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007558:	4333      	orrs	r3, r6
 800755a:	f000 8592 	beq.w	8008082 <_dtoa_r+0xbb2>
 800755e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007560:	b963      	cbnz	r3, 800757c <_dtoa_r+0xac>
 8007562:	4b92      	ldr	r3, [pc, #584]	; (80077ac <_dtoa_r+0x2dc>)
 8007564:	e022      	b.n	80075ac <_dtoa_r+0xdc>
 8007566:	4b92      	ldr	r3, [pc, #584]	; (80077b0 <_dtoa_r+0x2e0>)
 8007568:	9301      	str	r3, [sp, #4]
 800756a:	3308      	adds	r3, #8
 800756c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800756e:	6013      	str	r3, [r2, #0]
 8007570:	9801      	ldr	r0, [sp, #4]
 8007572:	b013      	add	sp, #76	; 0x4c
 8007574:	ecbd 8b04 	vpop	{d8-d9}
 8007578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800757c:	4b8b      	ldr	r3, [pc, #556]	; (80077ac <_dtoa_r+0x2dc>)
 800757e:	9301      	str	r3, [sp, #4]
 8007580:	3303      	adds	r3, #3
 8007582:	e7f3      	b.n	800756c <_dtoa_r+0x9c>
 8007584:	2200      	movs	r2, #0
 8007586:	2300      	movs	r3, #0
 8007588:	4650      	mov	r0, sl
 800758a:	4659      	mov	r1, fp
 800758c:	f7f9 fa9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007590:	ec4b ab19 	vmov	d9, sl, fp
 8007594:	4680      	mov	r8, r0
 8007596:	b158      	cbz	r0, 80075b0 <_dtoa_r+0xe0>
 8007598:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800759a:	2301      	movs	r3, #1
 800759c:	6013      	str	r3, [r2, #0]
 800759e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	f000 856b 	beq.w	800807c <_dtoa_r+0xbac>
 80075a6:	4883      	ldr	r0, [pc, #524]	; (80077b4 <_dtoa_r+0x2e4>)
 80075a8:	6018      	str	r0, [r3, #0]
 80075aa:	1e43      	subs	r3, r0, #1
 80075ac:	9301      	str	r3, [sp, #4]
 80075ae:	e7df      	b.n	8007570 <_dtoa_r+0xa0>
 80075b0:	ec4b ab10 	vmov	d0, sl, fp
 80075b4:	aa10      	add	r2, sp, #64	; 0x40
 80075b6:	a911      	add	r1, sp, #68	; 0x44
 80075b8:	4620      	mov	r0, r4
 80075ba:	f001 fa03 	bl	80089c4 <__d2b>
 80075be:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80075c2:	ee08 0a10 	vmov	s16, r0
 80075c6:	2d00      	cmp	r5, #0
 80075c8:	f000 8084 	beq.w	80076d4 <_dtoa_r+0x204>
 80075cc:	ee19 3a90 	vmov	r3, s19
 80075d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075d4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80075d8:	4656      	mov	r6, sl
 80075da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80075de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80075e2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80075e6:	4b74      	ldr	r3, [pc, #464]	; (80077b8 <_dtoa_r+0x2e8>)
 80075e8:	2200      	movs	r2, #0
 80075ea:	4630      	mov	r0, r6
 80075ec:	4639      	mov	r1, r7
 80075ee:	f7f8 fe4b 	bl	8000288 <__aeabi_dsub>
 80075f2:	a365      	add	r3, pc, #404	; (adr r3, 8007788 <_dtoa_r+0x2b8>)
 80075f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f8:	f7f8 fffe 	bl	80005f8 <__aeabi_dmul>
 80075fc:	a364      	add	r3, pc, #400	; (adr r3, 8007790 <_dtoa_r+0x2c0>)
 80075fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007602:	f7f8 fe43 	bl	800028c <__adddf3>
 8007606:	4606      	mov	r6, r0
 8007608:	4628      	mov	r0, r5
 800760a:	460f      	mov	r7, r1
 800760c:	f7f8 ff8a 	bl	8000524 <__aeabi_i2d>
 8007610:	a361      	add	r3, pc, #388	; (adr r3, 8007798 <_dtoa_r+0x2c8>)
 8007612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007616:	f7f8 ffef 	bl	80005f8 <__aeabi_dmul>
 800761a:	4602      	mov	r2, r0
 800761c:	460b      	mov	r3, r1
 800761e:	4630      	mov	r0, r6
 8007620:	4639      	mov	r1, r7
 8007622:	f7f8 fe33 	bl	800028c <__adddf3>
 8007626:	4606      	mov	r6, r0
 8007628:	460f      	mov	r7, r1
 800762a:	f7f9 fa95 	bl	8000b58 <__aeabi_d2iz>
 800762e:	2200      	movs	r2, #0
 8007630:	9000      	str	r0, [sp, #0]
 8007632:	2300      	movs	r3, #0
 8007634:	4630      	mov	r0, r6
 8007636:	4639      	mov	r1, r7
 8007638:	f7f9 fa50 	bl	8000adc <__aeabi_dcmplt>
 800763c:	b150      	cbz	r0, 8007654 <_dtoa_r+0x184>
 800763e:	9800      	ldr	r0, [sp, #0]
 8007640:	f7f8 ff70 	bl	8000524 <__aeabi_i2d>
 8007644:	4632      	mov	r2, r6
 8007646:	463b      	mov	r3, r7
 8007648:	f7f9 fa3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800764c:	b910      	cbnz	r0, 8007654 <_dtoa_r+0x184>
 800764e:	9b00      	ldr	r3, [sp, #0]
 8007650:	3b01      	subs	r3, #1
 8007652:	9300      	str	r3, [sp, #0]
 8007654:	9b00      	ldr	r3, [sp, #0]
 8007656:	2b16      	cmp	r3, #22
 8007658:	d85a      	bhi.n	8007710 <_dtoa_r+0x240>
 800765a:	9a00      	ldr	r2, [sp, #0]
 800765c:	4b57      	ldr	r3, [pc, #348]	; (80077bc <_dtoa_r+0x2ec>)
 800765e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007666:	ec51 0b19 	vmov	r0, r1, d9
 800766a:	f7f9 fa37 	bl	8000adc <__aeabi_dcmplt>
 800766e:	2800      	cmp	r0, #0
 8007670:	d050      	beq.n	8007714 <_dtoa_r+0x244>
 8007672:	9b00      	ldr	r3, [sp, #0]
 8007674:	3b01      	subs	r3, #1
 8007676:	9300      	str	r3, [sp, #0]
 8007678:	2300      	movs	r3, #0
 800767a:	930b      	str	r3, [sp, #44]	; 0x2c
 800767c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800767e:	1b5d      	subs	r5, r3, r5
 8007680:	1e6b      	subs	r3, r5, #1
 8007682:	9305      	str	r3, [sp, #20]
 8007684:	bf45      	ittet	mi
 8007686:	f1c5 0301 	rsbmi	r3, r5, #1
 800768a:	9304      	strmi	r3, [sp, #16]
 800768c:	2300      	movpl	r3, #0
 800768e:	2300      	movmi	r3, #0
 8007690:	bf4c      	ite	mi
 8007692:	9305      	strmi	r3, [sp, #20]
 8007694:	9304      	strpl	r3, [sp, #16]
 8007696:	9b00      	ldr	r3, [sp, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	db3d      	blt.n	8007718 <_dtoa_r+0x248>
 800769c:	9b05      	ldr	r3, [sp, #20]
 800769e:	9a00      	ldr	r2, [sp, #0]
 80076a0:	920a      	str	r2, [sp, #40]	; 0x28
 80076a2:	4413      	add	r3, r2
 80076a4:	9305      	str	r3, [sp, #20]
 80076a6:	2300      	movs	r3, #0
 80076a8:	9307      	str	r3, [sp, #28]
 80076aa:	9b06      	ldr	r3, [sp, #24]
 80076ac:	2b09      	cmp	r3, #9
 80076ae:	f200 8089 	bhi.w	80077c4 <_dtoa_r+0x2f4>
 80076b2:	2b05      	cmp	r3, #5
 80076b4:	bfc4      	itt	gt
 80076b6:	3b04      	subgt	r3, #4
 80076b8:	9306      	strgt	r3, [sp, #24]
 80076ba:	9b06      	ldr	r3, [sp, #24]
 80076bc:	f1a3 0302 	sub.w	r3, r3, #2
 80076c0:	bfcc      	ite	gt
 80076c2:	2500      	movgt	r5, #0
 80076c4:	2501      	movle	r5, #1
 80076c6:	2b03      	cmp	r3, #3
 80076c8:	f200 8087 	bhi.w	80077da <_dtoa_r+0x30a>
 80076cc:	e8df f003 	tbb	[pc, r3]
 80076d0:	59383a2d 	.word	0x59383a2d
 80076d4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80076d8:	441d      	add	r5, r3
 80076da:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80076de:	2b20      	cmp	r3, #32
 80076e0:	bfc1      	itttt	gt
 80076e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80076e6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80076ea:	fa0b f303 	lslgt.w	r3, fp, r3
 80076ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 80076f2:	bfda      	itte	le
 80076f4:	f1c3 0320 	rsble	r3, r3, #32
 80076f8:	fa06 f003 	lslle.w	r0, r6, r3
 80076fc:	4318      	orrgt	r0, r3
 80076fe:	f7f8 ff01 	bl	8000504 <__aeabi_ui2d>
 8007702:	2301      	movs	r3, #1
 8007704:	4606      	mov	r6, r0
 8007706:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800770a:	3d01      	subs	r5, #1
 800770c:	930e      	str	r3, [sp, #56]	; 0x38
 800770e:	e76a      	b.n	80075e6 <_dtoa_r+0x116>
 8007710:	2301      	movs	r3, #1
 8007712:	e7b2      	b.n	800767a <_dtoa_r+0x1aa>
 8007714:	900b      	str	r0, [sp, #44]	; 0x2c
 8007716:	e7b1      	b.n	800767c <_dtoa_r+0x1ac>
 8007718:	9b04      	ldr	r3, [sp, #16]
 800771a:	9a00      	ldr	r2, [sp, #0]
 800771c:	1a9b      	subs	r3, r3, r2
 800771e:	9304      	str	r3, [sp, #16]
 8007720:	4253      	negs	r3, r2
 8007722:	9307      	str	r3, [sp, #28]
 8007724:	2300      	movs	r3, #0
 8007726:	930a      	str	r3, [sp, #40]	; 0x28
 8007728:	e7bf      	b.n	80076aa <_dtoa_r+0x1da>
 800772a:	2300      	movs	r3, #0
 800772c:	9308      	str	r3, [sp, #32]
 800772e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007730:	2b00      	cmp	r3, #0
 8007732:	dc55      	bgt.n	80077e0 <_dtoa_r+0x310>
 8007734:	2301      	movs	r3, #1
 8007736:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800773a:	461a      	mov	r2, r3
 800773c:	9209      	str	r2, [sp, #36]	; 0x24
 800773e:	e00c      	b.n	800775a <_dtoa_r+0x28a>
 8007740:	2301      	movs	r3, #1
 8007742:	e7f3      	b.n	800772c <_dtoa_r+0x25c>
 8007744:	2300      	movs	r3, #0
 8007746:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007748:	9308      	str	r3, [sp, #32]
 800774a:	9b00      	ldr	r3, [sp, #0]
 800774c:	4413      	add	r3, r2
 800774e:	9302      	str	r3, [sp, #8]
 8007750:	3301      	adds	r3, #1
 8007752:	2b01      	cmp	r3, #1
 8007754:	9303      	str	r3, [sp, #12]
 8007756:	bfb8      	it	lt
 8007758:	2301      	movlt	r3, #1
 800775a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800775c:	2200      	movs	r2, #0
 800775e:	6042      	str	r2, [r0, #4]
 8007760:	2204      	movs	r2, #4
 8007762:	f102 0614 	add.w	r6, r2, #20
 8007766:	429e      	cmp	r6, r3
 8007768:	6841      	ldr	r1, [r0, #4]
 800776a:	d93d      	bls.n	80077e8 <_dtoa_r+0x318>
 800776c:	4620      	mov	r0, r4
 800776e:	f000 fe01 	bl	8008374 <_Balloc>
 8007772:	9001      	str	r0, [sp, #4]
 8007774:	2800      	cmp	r0, #0
 8007776:	d13b      	bne.n	80077f0 <_dtoa_r+0x320>
 8007778:	4b11      	ldr	r3, [pc, #68]	; (80077c0 <_dtoa_r+0x2f0>)
 800777a:	4602      	mov	r2, r0
 800777c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007780:	e6c0      	b.n	8007504 <_dtoa_r+0x34>
 8007782:	2301      	movs	r3, #1
 8007784:	e7df      	b.n	8007746 <_dtoa_r+0x276>
 8007786:	bf00      	nop
 8007788:	636f4361 	.word	0x636f4361
 800778c:	3fd287a7 	.word	0x3fd287a7
 8007790:	8b60c8b3 	.word	0x8b60c8b3
 8007794:	3fc68a28 	.word	0x3fc68a28
 8007798:	509f79fb 	.word	0x509f79fb
 800779c:	3fd34413 	.word	0x3fd34413
 80077a0:	08009495 	.word	0x08009495
 80077a4:	080094ac 	.word	0x080094ac
 80077a8:	7ff00000 	.word	0x7ff00000
 80077ac:	08009491 	.word	0x08009491
 80077b0:	08009488 	.word	0x08009488
 80077b4:	08009429 	.word	0x08009429
 80077b8:	3ff80000 	.word	0x3ff80000
 80077bc:	080095a0 	.word	0x080095a0
 80077c0:	08009507 	.word	0x08009507
 80077c4:	2501      	movs	r5, #1
 80077c6:	2300      	movs	r3, #0
 80077c8:	9306      	str	r3, [sp, #24]
 80077ca:	9508      	str	r5, [sp, #32]
 80077cc:	f04f 33ff 	mov.w	r3, #4294967295
 80077d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80077d4:	2200      	movs	r2, #0
 80077d6:	2312      	movs	r3, #18
 80077d8:	e7b0      	b.n	800773c <_dtoa_r+0x26c>
 80077da:	2301      	movs	r3, #1
 80077dc:	9308      	str	r3, [sp, #32]
 80077de:	e7f5      	b.n	80077cc <_dtoa_r+0x2fc>
 80077e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80077e6:	e7b8      	b.n	800775a <_dtoa_r+0x28a>
 80077e8:	3101      	adds	r1, #1
 80077ea:	6041      	str	r1, [r0, #4]
 80077ec:	0052      	lsls	r2, r2, #1
 80077ee:	e7b8      	b.n	8007762 <_dtoa_r+0x292>
 80077f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077f2:	9a01      	ldr	r2, [sp, #4]
 80077f4:	601a      	str	r2, [r3, #0]
 80077f6:	9b03      	ldr	r3, [sp, #12]
 80077f8:	2b0e      	cmp	r3, #14
 80077fa:	f200 809d 	bhi.w	8007938 <_dtoa_r+0x468>
 80077fe:	2d00      	cmp	r5, #0
 8007800:	f000 809a 	beq.w	8007938 <_dtoa_r+0x468>
 8007804:	9b00      	ldr	r3, [sp, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	dd32      	ble.n	8007870 <_dtoa_r+0x3a0>
 800780a:	4ab7      	ldr	r2, [pc, #732]	; (8007ae8 <_dtoa_r+0x618>)
 800780c:	f003 030f 	and.w	r3, r3, #15
 8007810:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007814:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007818:	9b00      	ldr	r3, [sp, #0]
 800781a:	05d8      	lsls	r0, r3, #23
 800781c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007820:	d516      	bpl.n	8007850 <_dtoa_r+0x380>
 8007822:	4bb2      	ldr	r3, [pc, #712]	; (8007aec <_dtoa_r+0x61c>)
 8007824:	ec51 0b19 	vmov	r0, r1, d9
 8007828:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800782c:	f7f9 f80e 	bl	800084c <__aeabi_ddiv>
 8007830:	f007 070f 	and.w	r7, r7, #15
 8007834:	4682      	mov	sl, r0
 8007836:	468b      	mov	fp, r1
 8007838:	2503      	movs	r5, #3
 800783a:	4eac      	ldr	r6, [pc, #688]	; (8007aec <_dtoa_r+0x61c>)
 800783c:	b957      	cbnz	r7, 8007854 <_dtoa_r+0x384>
 800783e:	4642      	mov	r2, r8
 8007840:	464b      	mov	r3, r9
 8007842:	4650      	mov	r0, sl
 8007844:	4659      	mov	r1, fp
 8007846:	f7f9 f801 	bl	800084c <__aeabi_ddiv>
 800784a:	4682      	mov	sl, r0
 800784c:	468b      	mov	fp, r1
 800784e:	e028      	b.n	80078a2 <_dtoa_r+0x3d2>
 8007850:	2502      	movs	r5, #2
 8007852:	e7f2      	b.n	800783a <_dtoa_r+0x36a>
 8007854:	07f9      	lsls	r1, r7, #31
 8007856:	d508      	bpl.n	800786a <_dtoa_r+0x39a>
 8007858:	4640      	mov	r0, r8
 800785a:	4649      	mov	r1, r9
 800785c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007860:	f7f8 feca 	bl	80005f8 <__aeabi_dmul>
 8007864:	3501      	adds	r5, #1
 8007866:	4680      	mov	r8, r0
 8007868:	4689      	mov	r9, r1
 800786a:	107f      	asrs	r7, r7, #1
 800786c:	3608      	adds	r6, #8
 800786e:	e7e5      	b.n	800783c <_dtoa_r+0x36c>
 8007870:	f000 809b 	beq.w	80079aa <_dtoa_r+0x4da>
 8007874:	9b00      	ldr	r3, [sp, #0]
 8007876:	4f9d      	ldr	r7, [pc, #628]	; (8007aec <_dtoa_r+0x61c>)
 8007878:	425e      	negs	r6, r3
 800787a:	4b9b      	ldr	r3, [pc, #620]	; (8007ae8 <_dtoa_r+0x618>)
 800787c:	f006 020f 	and.w	r2, r6, #15
 8007880:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007888:	ec51 0b19 	vmov	r0, r1, d9
 800788c:	f7f8 feb4 	bl	80005f8 <__aeabi_dmul>
 8007890:	1136      	asrs	r6, r6, #4
 8007892:	4682      	mov	sl, r0
 8007894:	468b      	mov	fp, r1
 8007896:	2300      	movs	r3, #0
 8007898:	2502      	movs	r5, #2
 800789a:	2e00      	cmp	r6, #0
 800789c:	d17a      	bne.n	8007994 <_dtoa_r+0x4c4>
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d1d3      	bne.n	800784a <_dtoa_r+0x37a>
 80078a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	f000 8082 	beq.w	80079ae <_dtoa_r+0x4de>
 80078aa:	4b91      	ldr	r3, [pc, #580]	; (8007af0 <_dtoa_r+0x620>)
 80078ac:	2200      	movs	r2, #0
 80078ae:	4650      	mov	r0, sl
 80078b0:	4659      	mov	r1, fp
 80078b2:	f7f9 f913 	bl	8000adc <__aeabi_dcmplt>
 80078b6:	2800      	cmp	r0, #0
 80078b8:	d079      	beq.n	80079ae <_dtoa_r+0x4de>
 80078ba:	9b03      	ldr	r3, [sp, #12]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d076      	beq.n	80079ae <_dtoa_r+0x4de>
 80078c0:	9b02      	ldr	r3, [sp, #8]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	dd36      	ble.n	8007934 <_dtoa_r+0x464>
 80078c6:	9b00      	ldr	r3, [sp, #0]
 80078c8:	4650      	mov	r0, sl
 80078ca:	4659      	mov	r1, fp
 80078cc:	1e5f      	subs	r7, r3, #1
 80078ce:	2200      	movs	r2, #0
 80078d0:	4b88      	ldr	r3, [pc, #544]	; (8007af4 <_dtoa_r+0x624>)
 80078d2:	f7f8 fe91 	bl	80005f8 <__aeabi_dmul>
 80078d6:	9e02      	ldr	r6, [sp, #8]
 80078d8:	4682      	mov	sl, r0
 80078da:	468b      	mov	fp, r1
 80078dc:	3501      	adds	r5, #1
 80078de:	4628      	mov	r0, r5
 80078e0:	f7f8 fe20 	bl	8000524 <__aeabi_i2d>
 80078e4:	4652      	mov	r2, sl
 80078e6:	465b      	mov	r3, fp
 80078e8:	f7f8 fe86 	bl	80005f8 <__aeabi_dmul>
 80078ec:	4b82      	ldr	r3, [pc, #520]	; (8007af8 <_dtoa_r+0x628>)
 80078ee:	2200      	movs	r2, #0
 80078f0:	f7f8 fccc 	bl	800028c <__adddf3>
 80078f4:	46d0      	mov	r8, sl
 80078f6:	46d9      	mov	r9, fp
 80078f8:	4682      	mov	sl, r0
 80078fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80078fe:	2e00      	cmp	r6, #0
 8007900:	d158      	bne.n	80079b4 <_dtoa_r+0x4e4>
 8007902:	4b7e      	ldr	r3, [pc, #504]	; (8007afc <_dtoa_r+0x62c>)
 8007904:	2200      	movs	r2, #0
 8007906:	4640      	mov	r0, r8
 8007908:	4649      	mov	r1, r9
 800790a:	f7f8 fcbd 	bl	8000288 <__aeabi_dsub>
 800790e:	4652      	mov	r2, sl
 8007910:	465b      	mov	r3, fp
 8007912:	4680      	mov	r8, r0
 8007914:	4689      	mov	r9, r1
 8007916:	f7f9 f8ff 	bl	8000b18 <__aeabi_dcmpgt>
 800791a:	2800      	cmp	r0, #0
 800791c:	f040 8295 	bne.w	8007e4a <_dtoa_r+0x97a>
 8007920:	4652      	mov	r2, sl
 8007922:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007926:	4640      	mov	r0, r8
 8007928:	4649      	mov	r1, r9
 800792a:	f7f9 f8d7 	bl	8000adc <__aeabi_dcmplt>
 800792e:	2800      	cmp	r0, #0
 8007930:	f040 8289 	bne.w	8007e46 <_dtoa_r+0x976>
 8007934:	ec5b ab19 	vmov	sl, fp, d9
 8007938:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800793a:	2b00      	cmp	r3, #0
 800793c:	f2c0 8148 	blt.w	8007bd0 <_dtoa_r+0x700>
 8007940:	9a00      	ldr	r2, [sp, #0]
 8007942:	2a0e      	cmp	r2, #14
 8007944:	f300 8144 	bgt.w	8007bd0 <_dtoa_r+0x700>
 8007948:	4b67      	ldr	r3, [pc, #412]	; (8007ae8 <_dtoa_r+0x618>)
 800794a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800794e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007954:	2b00      	cmp	r3, #0
 8007956:	f280 80d5 	bge.w	8007b04 <_dtoa_r+0x634>
 800795a:	9b03      	ldr	r3, [sp, #12]
 800795c:	2b00      	cmp	r3, #0
 800795e:	f300 80d1 	bgt.w	8007b04 <_dtoa_r+0x634>
 8007962:	f040 826f 	bne.w	8007e44 <_dtoa_r+0x974>
 8007966:	4b65      	ldr	r3, [pc, #404]	; (8007afc <_dtoa_r+0x62c>)
 8007968:	2200      	movs	r2, #0
 800796a:	4640      	mov	r0, r8
 800796c:	4649      	mov	r1, r9
 800796e:	f7f8 fe43 	bl	80005f8 <__aeabi_dmul>
 8007972:	4652      	mov	r2, sl
 8007974:	465b      	mov	r3, fp
 8007976:	f7f9 f8c5 	bl	8000b04 <__aeabi_dcmpge>
 800797a:	9e03      	ldr	r6, [sp, #12]
 800797c:	4637      	mov	r7, r6
 800797e:	2800      	cmp	r0, #0
 8007980:	f040 8245 	bne.w	8007e0e <_dtoa_r+0x93e>
 8007984:	9d01      	ldr	r5, [sp, #4]
 8007986:	2331      	movs	r3, #49	; 0x31
 8007988:	f805 3b01 	strb.w	r3, [r5], #1
 800798c:	9b00      	ldr	r3, [sp, #0]
 800798e:	3301      	adds	r3, #1
 8007990:	9300      	str	r3, [sp, #0]
 8007992:	e240      	b.n	8007e16 <_dtoa_r+0x946>
 8007994:	07f2      	lsls	r2, r6, #31
 8007996:	d505      	bpl.n	80079a4 <_dtoa_r+0x4d4>
 8007998:	e9d7 2300 	ldrd	r2, r3, [r7]
 800799c:	f7f8 fe2c 	bl	80005f8 <__aeabi_dmul>
 80079a0:	3501      	adds	r5, #1
 80079a2:	2301      	movs	r3, #1
 80079a4:	1076      	asrs	r6, r6, #1
 80079a6:	3708      	adds	r7, #8
 80079a8:	e777      	b.n	800789a <_dtoa_r+0x3ca>
 80079aa:	2502      	movs	r5, #2
 80079ac:	e779      	b.n	80078a2 <_dtoa_r+0x3d2>
 80079ae:	9f00      	ldr	r7, [sp, #0]
 80079b0:	9e03      	ldr	r6, [sp, #12]
 80079b2:	e794      	b.n	80078de <_dtoa_r+0x40e>
 80079b4:	9901      	ldr	r1, [sp, #4]
 80079b6:	4b4c      	ldr	r3, [pc, #304]	; (8007ae8 <_dtoa_r+0x618>)
 80079b8:	4431      	add	r1, r6
 80079ba:	910d      	str	r1, [sp, #52]	; 0x34
 80079bc:	9908      	ldr	r1, [sp, #32]
 80079be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80079c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80079c6:	2900      	cmp	r1, #0
 80079c8:	d043      	beq.n	8007a52 <_dtoa_r+0x582>
 80079ca:	494d      	ldr	r1, [pc, #308]	; (8007b00 <_dtoa_r+0x630>)
 80079cc:	2000      	movs	r0, #0
 80079ce:	f7f8 ff3d 	bl	800084c <__aeabi_ddiv>
 80079d2:	4652      	mov	r2, sl
 80079d4:	465b      	mov	r3, fp
 80079d6:	f7f8 fc57 	bl	8000288 <__aeabi_dsub>
 80079da:	9d01      	ldr	r5, [sp, #4]
 80079dc:	4682      	mov	sl, r0
 80079de:	468b      	mov	fp, r1
 80079e0:	4649      	mov	r1, r9
 80079e2:	4640      	mov	r0, r8
 80079e4:	f7f9 f8b8 	bl	8000b58 <__aeabi_d2iz>
 80079e8:	4606      	mov	r6, r0
 80079ea:	f7f8 fd9b 	bl	8000524 <__aeabi_i2d>
 80079ee:	4602      	mov	r2, r0
 80079f0:	460b      	mov	r3, r1
 80079f2:	4640      	mov	r0, r8
 80079f4:	4649      	mov	r1, r9
 80079f6:	f7f8 fc47 	bl	8000288 <__aeabi_dsub>
 80079fa:	3630      	adds	r6, #48	; 0x30
 80079fc:	f805 6b01 	strb.w	r6, [r5], #1
 8007a00:	4652      	mov	r2, sl
 8007a02:	465b      	mov	r3, fp
 8007a04:	4680      	mov	r8, r0
 8007a06:	4689      	mov	r9, r1
 8007a08:	f7f9 f868 	bl	8000adc <__aeabi_dcmplt>
 8007a0c:	2800      	cmp	r0, #0
 8007a0e:	d163      	bne.n	8007ad8 <_dtoa_r+0x608>
 8007a10:	4642      	mov	r2, r8
 8007a12:	464b      	mov	r3, r9
 8007a14:	4936      	ldr	r1, [pc, #216]	; (8007af0 <_dtoa_r+0x620>)
 8007a16:	2000      	movs	r0, #0
 8007a18:	f7f8 fc36 	bl	8000288 <__aeabi_dsub>
 8007a1c:	4652      	mov	r2, sl
 8007a1e:	465b      	mov	r3, fp
 8007a20:	f7f9 f85c 	bl	8000adc <__aeabi_dcmplt>
 8007a24:	2800      	cmp	r0, #0
 8007a26:	f040 80b5 	bne.w	8007b94 <_dtoa_r+0x6c4>
 8007a2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a2c:	429d      	cmp	r5, r3
 8007a2e:	d081      	beq.n	8007934 <_dtoa_r+0x464>
 8007a30:	4b30      	ldr	r3, [pc, #192]	; (8007af4 <_dtoa_r+0x624>)
 8007a32:	2200      	movs	r2, #0
 8007a34:	4650      	mov	r0, sl
 8007a36:	4659      	mov	r1, fp
 8007a38:	f7f8 fdde 	bl	80005f8 <__aeabi_dmul>
 8007a3c:	4b2d      	ldr	r3, [pc, #180]	; (8007af4 <_dtoa_r+0x624>)
 8007a3e:	4682      	mov	sl, r0
 8007a40:	468b      	mov	fp, r1
 8007a42:	4640      	mov	r0, r8
 8007a44:	4649      	mov	r1, r9
 8007a46:	2200      	movs	r2, #0
 8007a48:	f7f8 fdd6 	bl	80005f8 <__aeabi_dmul>
 8007a4c:	4680      	mov	r8, r0
 8007a4e:	4689      	mov	r9, r1
 8007a50:	e7c6      	b.n	80079e0 <_dtoa_r+0x510>
 8007a52:	4650      	mov	r0, sl
 8007a54:	4659      	mov	r1, fp
 8007a56:	f7f8 fdcf 	bl	80005f8 <__aeabi_dmul>
 8007a5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a5c:	9d01      	ldr	r5, [sp, #4]
 8007a5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a60:	4682      	mov	sl, r0
 8007a62:	468b      	mov	fp, r1
 8007a64:	4649      	mov	r1, r9
 8007a66:	4640      	mov	r0, r8
 8007a68:	f7f9 f876 	bl	8000b58 <__aeabi_d2iz>
 8007a6c:	4606      	mov	r6, r0
 8007a6e:	f7f8 fd59 	bl	8000524 <__aeabi_i2d>
 8007a72:	3630      	adds	r6, #48	; 0x30
 8007a74:	4602      	mov	r2, r0
 8007a76:	460b      	mov	r3, r1
 8007a78:	4640      	mov	r0, r8
 8007a7a:	4649      	mov	r1, r9
 8007a7c:	f7f8 fc04 	bl	8000288 <__aeabi_dsub>
 8007a80:	f805 6b01 	strb.w	r6, [r5], #1
 8007a84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a86:	429d      	cmp	r5, r3
 8007a88:	4680      	mov	r8, r0
 8007a8a:	4689      	mov	r9, r1
 8007a8c:	f04f 0200 	mov.w	r2, #0
 8007a90:	d124      	bne.n	8007adc <_dtoa_r+0x60c>
 8007a92:	4b1b      	ldr	r3, [pc, #108]	; (8007b00 <_dtoa_r+0x630>)
 8007a94:	4650      	mov	r0, sl
 8007a96:	4659      	mov	r1, fp
 8007a98:	f7f8 fbf8 	bl	800028c <__adddf3>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	4640      	mov	r0, r8
 8007aa2:	4649      	mov	r1, r9
 8007aa4:	f7f9 f838 	bl	8000b18 <__aeabi_dcmpgt>
 8007aa8:	2800      	cmp	r0, #0
 8007aaa:	d173      	bne.n	8007b94 <_dtoa_r+0x6c4>
 8007aac:	4652      	mov	r2, sl
 8007aae:	465b      	mov	r3, fp
 8007ab0:	4913      	ldr	r1, [pc, #76]	; (8007b00 <_dtoa_r+0x630>)
 8007ab2:	2000      	movs	r0, #0
 8007ab4:	f7f8 fbe8 	bl	8000288 <__aeabi_dsub>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	460b      	mov	r3, r1
 8007abc:	4640      	mov	r0, r8
 8007abe:	4649      	mov	r1, r9
 8007ac0:	f7f9 f80c 	bl	8000adc <__aeabi_dcmplt>
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	f43f af35 	beq.w	8007934 <_dtoa_r+0x464>
 8007aca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007acc:	1e6b      	subs	r3, r5, #1
 8007ace:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ad0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007ad4:	2b30      	cmp	r3, #48	; 0x30
 8007ad6:	d0f8      	beq.n	8007aca <_dtoa_r+0x5fa>
 8007ad8:	9700      	str	r7, [sp, #0]
 8007ada:	e049      	b.n	8007b70 <_dtoa_r+0x6a0>
 8007adc:	4b05      	ldr	r3, [pc, #20]	; (8007af4 <_dtoa_r+0x624>)
 8007ade:	f7f8 fd8b 	bl	80005f8 <__aeabi_dmul>
 8007ae2:	4680      	mov	r8, r0
 8007ae4:	4689      	mov	r9, r1
 8007ae6:	e7bd      	b.n	8007a64 <_dtoa_r+0x594>
 8007ae8:	080095a0 	.word	0x080095a0
 8007aec:	08009578 	.word	0x08009578
 8007af0:	3ff00000 	.word	0x3ff00000
 8007af4:	40240000 	.word	0x40240000
 8007af8:	401c0000 	.word	0x401c0000
 8007afc:	40140000 	.word	0x40140000
 8007b00:	3fe00000 	.word	0x3fe00000
 8007b04:	9d01      	ldr	r5, [sp, #4]
 8007b06:	4656      	mov	r6, sl
 8007b08:	465f      	mov	r7, fp
 8007b0a:	4642      	mov	r2, r8
 8007b0c:	464b      	mov	r3, r9
 8007b0e:	4630      	mov	r0, r6
 8007b10:	4639      	mov	r1, r7
 8007b12:	f7f8 fe9b 	bl	800084c <__aeabi_ddiv>
 8007b16:	f7f9 f81f 	bl	8000b58 <__aeabi_d2iz>
 8007b1a:	4682      	mov	sl, r0
 8007b1c:	f7f8 fd02 	bl	8000524 <__aeabi_i2d>
 8007b20:	4642      	mov	r2, r8
 8007b22:	464b      	mov	r3, r9
 8007b24:	f7f8 fd68 	bl	80005f8 <__aeabi_dmul>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	4630      	mov	r0, r6
 8007b2e:	4639      	mov	r1, r7
 8007b30:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007b34:	f7f8 fba8 	bl	8000288 <__aeabi_dsub>
 8007b38:	f805 6b01 	strb.w	r6, [r5], #1
 8007b3c:	9e01      	ldr	r6, [sp, #4]
 8007b3e:	9f03      	ldr	r7, [sp, #12]
 8007b40:	1bae      	subs	r6, r5, r6
 8007b42:	42b7      	cmp	r7, r6
 8007b44:	4602      	mov	r2, r0
 8007b46:	460b      	mov	r3, r1
 8007b48:	d135      	bne.n	8007bb6 <_dtoa_r+0x6e6>
 8007b4a:	f7f8 fb9f 	bl	800028c <__adddf3>
 8007b4e:	4642      	mov	r2, r8
 8007b50:	464b      	mov	r3, r9
 8007b52:	4606      	mov	r6, r0
 8007b54:	460f      	mov	r7, r1
 8007b56:	f7f8 ffdf 	bl	8000b18 <__aeabi_dcmpgt>
 8007b5a:	b9d0      	cbnz	r0, 8007b92 <_dtoa_r+0x6c2>
 8007b5c:	4642      	mov	r2, r8
 8007b5e:	464b      	mov	r3, r9
 8007b60:	4630      	mov	r0, r6
 8007b62:	4639      	mov	r1, r7
 8007b64:	f7f8 ffb0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b68:	b110      	cbz	r0, 8007b70 <_dtoa_r+0x6a0>
 8007b6a:	f01a 0f01 	tst.w	sl, #1
 8007b6e:	d110      	bne.n	8007b92 <_dtoa_r+0x6c2>
 8007b70:	4620      	mov	r0, r4
 8007b72:	ee18 1a10 	vmov	r1, s16
 8007b76:	f000 fc3d 	bl	80083f4 <_Bfree>
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	9800      	ldr	r0, [sp, #0]
 8007b7e:	702b      	strb	r3, [r5, #0]
 8007b80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b82:	3001      	adds	r0, #1
 8007b84:	6018      	str	r0, [r3, #0]
 8007b86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f43f acf1 	beq.w	8007570 <_dtoa_r+0xa0>
 8007b8e:	601d      	str	r5, [r3, #0]
 8007b90:	e4ee      	b.n	8007570 <_dtoa_r+0xa0>
 8007b92:	9f00      	ldr	r7, [sp, #0]
 8007b94:	462b      	mov	r3, r5
 8007b96:	461d      	mov	r5, r3
 8007b98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b9c:	2a39      	cmp	r2, #57	; 0x39
 8007b9e:	d106      	bne.n	8007bae <_dtoa_r+0x6de>
 8007ba0:	9a01      	ldr	r2, [sp, #4]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d1f7      	bne.n	8007b96 <_dtoa_r+0x6c6>
 8007ba6:	9901      	ldr	r1, [sp, #4]
 8007ba8:	2230      	movs	r2, #48	; 0x30
 8007baa:	3701      	adds	r7, #1
 8007bac:	700a      	strb	r2, [r1, #0]
 8007bae:	781a      	ldrb	r2, [r3, #0]
 8007bb0:	3201      	adds	r2, #1
 8007bb2:	701a      	strb	r2, [r3, #0]
 8007bb4:	e790      	b.n	8007ad8 <_dtoa_r+0x608>
 8007bb6:	4ba6      	ldr	r3, [pc, #664]	; (8007e50 <_dtoa_r+0x980>)
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f7f8 fd1d 	bl	80005f8 <__aeabi_dmul>
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	4606      	mov	r6, r0
 8007bc4:	460f      	mov	r7, r1
 8007bc6:	f7f8 ff7f 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bca:	2800      	cmp	r0, #0
 8007bcc:	d09d      	beq.n	8007b0a <_dtoa_r+0x63a>
 8007bce:	e7cf      	b.n	8007b70 <_dtoa_r+0x6a0>
 8007bd0:	9a08      	ldr	r2, [sp, #32]
 8007bd2:	2a00      	cmp	r2, #0
 8007bd4:	f000 80d7 	beq.w	8007d86 <_dtoa_r+0x8b6>
 8007bd8:	9a06      	ldr	r2, [sp, #24]
 8007bda:	2a01      	cmp	r2, #1
 8007bdc:	f300 80ba 	bgt.w	8007d54 <_dtoa_r+0x884>
 8007be0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007be2:	2a00      	cmp	r2, #0
 8007be4:	f000 80b2 	beq.w	8007d4c <_dtoa_r+0x87c>
 8007be8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007bec:	9e07      	ldr	r6, [sp, #28]
 8007bee:	9d04      	ldr	r5, [sp, #16]
 8007bf0:	9a04      	ldr	r2, [sp, #16]
 8007bf2:	441a      	add	r2, r3
 8007bf4:	9204      	str	r2, [sp, #16]
 8007bf6:	9a05      	ldr	r2, [sp, #20]
 8007bf8:	2101      	movs	r1, #1
 8007bfa:	441a      	add	r2, r3
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	9205      	str	r2, [sp, #20]
 8007c00:	f000 fcb0 	bl	8008564 <__i2b>
 8007c04:	4607      	mov	r7, r0
 8007c06:	2d00      	cmp	r5, #0
 8007c08:	dd0c      	ble.n	8007c24 <_dtoa_r+0x754>
 8007c0a:	9b05      	ldr	r3, [sp, #20]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	dd09      	ble.n	8007c24 <_dtoa_r+0x754>
 8007c10:	42ab      	cmp	r3, r5
 8007c12:	9a04      	ldr	r2, [sp, #16]
 8007c14:	bfa8      	it	ge
 8007c16:	462b      	movge	r3, r5
 8007c18:	1ad2      	subs	r2, r2, r3
 8007c1a:	9204      	str	r2, [sp, #16]
 8007c1c:	9a05      	ldr	r2, [sp, #20]
 8007c1e:	1aed      	subs	r5, r5, r3
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	9305      	str	r3, [sp, #20]
 8007c24:	9b07      	ldr	r3, [sp, #28]
 8007c26:	b31b      	cbz	r3, 8007c70 <_dtoa_r+0x7a0>
 8007c28:	9b08      	ldr	r3, [sp, #32]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	f000 80af 	beq.w	8007d8e <_dtoa_r+0x8be>
 8007c30:	2e00      	cmp	r6, #0
 8007c32:	dd13      	ble.n	8007c5c <_dtoa_r+0x78c>
 8007c34:	4639      	mov	r1, r7
 8007c36:	4632      	mov	r2, r6
 8007c38:	4620      	mov	r0, r4
 8007c3a:	f000 fd53 	bl	80086e4 <__pow5mult>
 8007c3e:	ee18 2a10 	vmov	r2, s16
 8007c42:	4601      	mov	r1, r0
 8007c44:	4607      	mov	r7, r0
 8007c46:	4620      	mov	r0, r4
 8007c48:	f000 fca2 	bl	8008590 <__multiply>
 8007c4c:	ee18 1a10 	vmov	r1, s16
 8007c50:	4680      	mov	r8, r0
 8007c52:	4620      	mov	r0, r4
 8007c54:	f000 fbce 	bl	80083f4 <_Bfree>
 8007c58:	ee08 8a10 	vmov	s16, r8
 8007c5c:	9b07      	ldr	r3, [sp, #28]
 8007c5e:	1b9a      	subs	r2, r3, r6
 8007c60:	d006      	beq.n	8007c70 <_dtoa_r+0x7a0>
 8007c62:	ee18 1a10 	vmov	r1, s16
 8007c66:	4620      	mov	r0, r4
 8007c68:	f000 fd3c 	bl	80086e4 <__pow5mult>
 8007c6c:	ee08 0a10 	vmov	s16, r0
 8007c70:	2101      	movs	r1, #1
 8007c72:	4620      	mov	r0, r4
 8007c74:	f000 fc76 	bl	8008564 <__i2b>
 8007c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	4606      	mov	r6, r0
 8007c7e:	f340 8088 	ble.w	8007d92 <_dtoa_r+0x8c2>
 8007c82:	461a      	mov	r2, r3
 8007c84:	4601      	mov	r1, r0
 8007c86:	4620      	mov	r0, r4
 8007c88:	f000 fd2c 	bl	80086e4 <__pow5mult>
 8007c8c:	9b06      	ldr	r3, [sp, #24]
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	4606      	mov	r6, r0
 8007c92:	f340 8081 	ble.w	8007d98 <_dtoa_r+0x8c8>
 8007c96:	f04f 0800 	mov.w	r8, #0
 8007c9a:	6933      	ldr	r3, [r6, #16]
 8007c9c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007ca0:	6918      	ldr	r0, [r3, #16]
 8007ca2:	f000 fc0f 	bl	80084c4 <__hi0bits>
 8007ca6:	f1c0 0020 	rsb	r0, r0, #32
 8007caa:	9b05      	ldr	r3, [sp, #20]
 8007cac:	4418      	add	r0, r3
 8007cae:	f010 001f 	ands.w	r0, r0, #31
 8007cb2:	f000 8092 	beq.w	8007dda <_dtoa_r+0x90a>
 8007cb6:	f1c0 0320 	rsb	r3, r0, #32
 8007cba:	2b04      	cmp	r3, #4
 8007cbc:	f340 808a 	ble.w	8007dd4 <_dtoa_r+0x904>
 8007cc0:	f1c0 001c 	rsb	r0, r0, #28
 8007cc4:	9b04      	ldr	r3, [sp, #16]
 8007cc6:	4403      	add	r3, r0
 8007cc8:	9304      	str	r3, [sp, #16]
 8007cca:	9b05      	ldr	r3, [sp, #20]
 8007ccc:	4403      	add	r3, r0
 8007cce:	4405      	add	r5, r0
 8007cd0:	9305      	str	r3, [sp, #20]
 8007cd2:	9b04      	ldr	r3, [sp, #16]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	dd07      	ble.n	8007ce8 <_dtoa_r+0x818>
 8007cd8:	ee18 1a10 	vmov	r1, s16
 8007cdc:	461a      	mov	r2, r3
 8007cde:	4620      	mov	r0, r4
 8007ce0:	f000 fd5a 	bl	8008798 <__lshift>
 8007ce4:	ee08 0a10 	vmov	s16, r0
 8007ce8:	9b05      	ldr	r3, [sp, #20]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	dd05      	ble.n	8007cfa <_dtoa_r+0x82a>
 8007cee:	4631      	mov	r1, r6
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	f000 fd50 	bl	8008798 <__lshift>
 8007cf8:	4606      	mov	r6, r0
 8007cfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d06e      	beq.n	8007dde <_dtoa_r+0x90e>
 8007d00:	ee18 0a10 	vmov	r0, s16
 8007d04:	4631      	mov	r1, r6
 8007d06:	f000 fdb7 	bl	8008878 <__mcmp>
 8007d0a:	2800      	cmp	r0, #0
 8007d0c:	da67      	bge.n	8007dde <_dtoa_r+0x90e>
 8007d0e:	9b00      	ldr	r3, [sp, #0]
 8007d10:	3b01      	subs	r3, #1
 8007d12:	ee18 1a10 	vmov	r1, s16
 8007d16:	9300      	str	r3, [sp, #0]
 8007d18:	220a      	movs	r2, #10
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	f000 fb8b 	bl	8008438 <__multadd>
 8007d22:	9b08      	ldr	r3, [sp, #32]
 8007d24:	ee08 0a10 	vmov	s16, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	f000 81b1 	beq.w	8008090 <_dtoa_r+0xbc0>
 8007d2e:	2300      	movs	r3, #0
 8007d30:	4639      	mov	r1, r7
 8007d32:	220a      	movs	r2, #10
 8007d34:	4620      	mov	r0, r4
 8007d36:	f000 fb7f 	bl	8008438 <__multadd>
 8007d3a:	9b02      	ldr	r3, [sp, #8]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	4607      	mov	r7, r0
 8007d40:	f300 808e 	bgt.w	8007e60 <_dtoa_r+0x990>
 8007d44:	9b06      	ldr	r3, [sp, #24]
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	dc51      	bgt.n	8007dee <_dtoa_r+0x91e>
 8007d4a:	e089      	b.n	8007e60 <_dtoa_r+0x990>
 8007d4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007d52:	e74b      	b.n	8007bec <_dtoa_r+0x71c>
 8007d54:	9b03      	ldr	r3, [sp, #12]
 8007d56:	1e5e      	subs	r6, r3, #1
 8007d58:	9b07      	ldr	r3, [sp, #28]
 8007d5a:	42b3      	cmp	r3, r6
 8007d5c:	bfbf      	itttt	lt
 8007d5e:	9b07      	ldrlt	r3, [sp, #28]
 8007d60:	9607      	strlt	r6, [sp, #28]
 8007d62:	1af2      	sublt	r2, r6, r3
 8007d64:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007d66:	bfb6      	itet	lt
 8007d68:	189b      	addlt	r3, r3, r2
 8007d6a:	1b9e      	subge	r6, r3, r6
 8007d6c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007d6e:	9b03      	ldr	r3, [sp, #12]
 8007d70:	bfb8      	it	lt
 8007d72:	2600      	movlt	r6, #0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	bfb7      	itett	lt
 8007d78:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007d7c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007d80:	1a9d      	sublt	r5, r3, r2
 8007d82:	2300      	movlt	r3, #0
 8007d84:	e734      	b.n	8007bf0 <_dtoa_r+0x720>
 8007d86:	9e07      	ldr	r6, [sp, #28]
 8007d88:	9d04      	ldr	r5, [sp, #16]
 8007d8a:	9f08      	ldr	r7, [sp, #32]
 8007d8c:	e73b      	b.n	8007c06 <_dtoa_r+0x736>
 8007d8e:	9a07      	ldr	r2, [sp, #28]
 8007d90:	e767      	b.n	8007c62 <_dtoa_r+0x792>
 8007d92:	9b06      	ldr	r3, [sp, #24]
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	dc18      	bgt.n	8007dca <_dtoa_r+0x8fa>
 8007d98:	f1ba 0f00 	cmp.w	sl, #0
 8007d9c:	d115      	bne.n	8007dca <_dtoa_r+0x8fa>
 8007d9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007da2:	b993      	cbnz	r3, 8007dca <_dtoa_r+0x8fa>
 8007da4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007da8:	0d1b      	lsrs	r3, r3, #20
 8007daa:	051b      	lsls	r3, r3, #20
 8007dac:	b183      	cbz	r3, 8007dd0 <_dtoa_r+0x900>
 8007dae:	9b04      	ldr	r3, [sp, #16]
 8007db0:	3301      	adds	r3, #1
 8007db2:	9304      	str	r3, [sp, #16]
 8007db4:	9b05      	ldr	r3, [sp, #20]
 8007db6:	3301      	adds	r3, #1
 8007db8:	9305      	str	r3, [sp, #20]
 8007dba:	f04f 0801 	mov.w	r8, #1
 8007dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f47f af6a 	bne.w	8007c9a <_dtoa_r+0x7ca>
 8007dc6:	2001      	movs	r0, #1
 8007dc8:	e76f      	b.n	8007caa <_dtoa_r+0x7da>
 8007dca:	f04f 0800 	mov.w	r8, #0
 8007dce:	e7f6      	b.n	8007dbe <_dtoa_r+0x8ee>
 8007dd0:	4698      	mov	r8, r3
 8007dd2:	e7f4      	b.n	8007dbe <_dtoa_r+0x8ee>
 8007dd4:	f43f af7d 	beq.w	8007cd2 <_dtoa_r+0x802>
 8007dd8:	4618      	mov	r0, r3
 8007dda:	301c      	adds	r0, #28
 8007ddc:	e772      	b.n	8007cc4 <_dtoa_r+0x7f4>
 8007dde:	9b03      	ldr	r3, [sp, #12]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	dc37      	bgt.n	8007e54 <_dtoa_r+0x984>
 8007de4:	9b06      	ldr	r3, [sp, #24]
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	dd34      	ble.n	8007e54 <_dtoa_r+0x984>
 8007dea:	9b03      	ldr	r3, [sp, #12]
 8007dec:	9302      	str	r3, [sp, #8]
 8007dee:	9b02      	ldr	r3, [sp, #8]
 8007df0:	b96b      	cbnz	r3, 8007e0e <_dtoa_r+0x93e>
 8007df2:	4631      	mov	r1, r6
 8007df4:	2205      	movs	r2, #5
 8007df6:	4620      	mov	r0, r4
 8007df8:	f000 fb1e 	bl	8008438 <__multadd>
 8007dfc:	4601      	mov	r1, r0
 8007dfe:	4606      	mov	r6, r0
 8007e00:	ee18 0a10 	vmov	r0, s16
 8007e04:	f000 fd38 	bl	8008878 <__mcmp>
 8007e08:	2800      	cmp	r0, #0
 8007e0a:	f73f adbb 	bgt.w	8007984 <_dtoa_r+0x4b4>
 8007e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e10:	9d01      	ldr	r5, [sp, #4]
 8007e12:	43db      	mvns	r3, r3
 8007e14:	9300      	str	r3, [sp, #0]
 8007e16:	f04f 0800 	mov.w	r8, #0
 8007e1a:	4631      	mov	r1, r6
 8007e1c:	4620      	mov	r0, r4
 8007e1e:	f000 fae9 	bl	80083f4 <_Bfree>
 8007e22:	2f00      	cmp	r7, #0
 8007e24:	f43f aea4 	beq.w	8007b70 <_dtoa_r+0x6a0>
 8007e28:	f1b8 0f00 	cmp.w	r8, #0
 8007e2c:	d005      	beq.n	8007e3a <_dtoa_r+0x96a>
 8007e2e:	45b8      	cmp	r8, r7
 8007e30:	d003      	beq.n	8007e3a <_dtoa_r+0x96a>
 8007e32:	4641      	mov	r1, r8
 8007e34:	4620      	mov	r0, r4
 8007e36:	f000 fadd 	bl	80083f4 <_Bfree>
 8007e3a:	4639      	mov	r1, r7
 8007e3c:	4620      	mov	r0, r4
 8007e3e:	f000 fad9 	bl	80083f4 <_Bfree>
 8007e42:	e695      	b.n	8007b70 <_dtoa_r+0x6a0>
 8007e44:	2600      	movs	r6, #0
 8007e46:	4637      	mov	r7, r6
 8007e48:	e7e1      	b.n	8007e0e <_dtoa_r+0x93e>
 8007e4a:	9700      	str	r7, [sp, #0]
 8007e4c:	4637      	mov	r7, r6
 8007e4e:	e599      	b.n	8007984 <_dtoa_r+0x4b4>
 8007e50:	40240000 	.word	0x40240000
 8007e54:	9b08      	ldr	r3, [sp, #32]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	f000 80ca 	beq.w	8007ff0 <_dtoa_r+0xb20>
 8007e5c:	9b03      	ldr	r3, [sp, #12]
 8007e5e:	9302      	str	r3, [sp, #8]
 8007e60:	2d00      	cmp	r5, #0
 8007e62:	dd05      	ble.n	8007e70 <_dtoa_r+0x9a0>
 8007e64:	4639      	mov	r1, r7
 8007e66:	462a      	mov	r2, r5
 8007e68:	4620      	mov	r0, r4
 8007e6a:	f000 fc95 	bl	8008798 <__lshift>
 8007e6e:	4607      	mov	r7, r0
 8007e70:	f1b8 0f00 	cmp.w	r8, #0
 8007e74:	d05b      	beq.n	8007f2e <_dtoa_r+0xa5e>
 8007e76:	6879      	ldr	r1, [r7, #4]
 8007e78:	4620      	mov	r0, r4
 8007e7a:	f000 fa7b 	bl	8008374 <_Balloc>
 8007e7e:	4605      	mov	r5, r0
 8007e80:	b928      	cbnz	r0, 8007e8e <_dtoa_r+0x9be>
 8007e82:	4b87      	ldr	r3, [pc, #540]	; (80080a0 <_dtoa_r+0xbd0>)
 8007e84:	4602      	mov	r2, r0
 8007e86:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007e8a:	f7ff bb3b 	b.w	8007504 <_dtoa_r+0x34>
 8007e8e:	693a      	ldr	r2, [r7, #16]
 8007e90:	3202      	adds	r2, #2
 8007e92:	0092      	lsls	r2, r2, #2
 8007e94:	f107 010c 	add.w	r1, r7, #12
 8007e98:	300c      	adds	r0, #12
 8007e9a:	f7fe fb9a 	bl	80065d2 <memcpy>
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	4629      	mov	r1, r5
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	f000 fc78 	bl	8008798 <__lshift>
 8007ea8:	9b01      	ldr	r3, [sp, #4]
 8007eaa:	f103 0901 	add.w	r9, r3, #1
 8007eae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	9305      	str	r3, [sp, #20]
 8007eb6:	f00a 0301 	and.w	r3, sl, #1
 8007eba:	46b8      	mov	r8, r7
 8007ebc:	9304      	str	r3, [sp, #16]
 8007ebe:	4607      	mov	r7, r0
 8007ec0:	4631      	mov	r1, r6
 8007ec2:	ee18 0a10 	vmov	r0, s16
 8007ec6:	f7ff fa77 	bl	80073b8 <quorem>
 8007eca:	4641      	mov	r1, r8
 8007ecc:	9002      	str	r0, [sp, #8]
 8007ece:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007ed2:	ee18 0a10 	vmov	r0, s16
 8007ed6:	f000 fccf 	bl	8008878 <__mcmp>
 8007eda:	463a      	mov	r2, r7
 8007edc:	9003      	str	r0, [sp, #12]
 8007ede:	4631      	mov	r1, r6
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	f000 fce5 	bl	80088b0 <__mdiff>
 8007ee6:	68c2      	ldr	r2, [r0, #12]
 8007ee8:	f109 3bff 	add.w	fp, r9, #4294967295
 8007eec:	4605      	mov	r5, r0
 8007eee:	bb02      	cbnz	r2, 8007f32 <_dtoa_r+0xa62>
 8007ef0:	4601      	mov	r1, r0
 8007ef2:	ee18 0a10 	vmov	r0, s16
 8007ef6:	f000 fcbf 	bl	8008878 <__mcmp>
 8007efa:	4602      	mov	r2, r0
 8007efc:	4629      	mov	r1, r5
 8007efe:	4620      	mov	r0, r4
 8007f00:	9207      	str	r2, [sp, #28]
 8007f02:	f000 fa77 	bl	80083f4 <_Bfree>
 8007f06:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007f0a:	ea43 0102 	orr.w	r1, r3, r2
 8007f0e:	9b04      	ldr	r3, [sp, #16]
 8007f10:	430b      	orrs	r3, r1
 8007f12:	464d      	mov	r5, r9
 8007f14:	d10f      	bne.n	8007f36 <_dtoa_r+0xa66>
 8007f16:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007f1a:	d02a      	beq.n	8007f72 <_dtoa_r+0xaa2>
 8007f1c:	9b03      	ldr	r3, [sp, #12]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	dd02      	ble.n	8007f28 <_dtoa_r+0xa58>
 8007f22:	9b02      	ldr	r3, [sp, #8]
 8007f24:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007f28:	f88b a000 	strb.w	sl, [fp]
 8007f2c:	e775      	b.n	8007e1a <_dtoa_r+0x94a>
 8007f2e:	4638      	mov	r0, r7
 8007f30:	e7ba      	b.n	8007ea8 <_dtoa_r+0x9d8>
 8007f32:	2201      	movs	r2, #1
 8007f34:	e7e2      	b.n	8007efc <_dtoa_r+0xa2c>
 8007f36:	9b03      	ldr	r3, [sp, #12]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	db04      	blt.n	8007f46 <_dtoa_r+0xa76>
 8007f3c:	9906      	ldr	r1, [sp, #24]
 8007f3e:	430b      	orrs	r3, r1
 8007f40:	9904      	ldr	r1, [sp, #16]
 8007f42:	430b      	orrs	r3, r1
 8007f44:	d122      	bne.n	8007f8c <_dtoa_r+0xabc>
 8007f46:	2a00      	cmp	r2, #0
 8007f48:	ddee      	ble.n	8007f28 <_dtoa_r+0xa58>
 8007f4a:	ee18 1a10 	vmov	r1, s16
 8007f4e:	2201      	movs	r2, #1
 8007f50:	4620      	mov	r0, r4
 8007f52:	f000 fc21 	bl	8008798 <__lshift>
 8007f56:	4631      	mov	r1, r6
 8007f58:	ee08 0a10 	vmov	s16, r0
 8007f5c:	f000 fc8c 	bl	8008878 <__mcmp>
 8007f60:	2800      	cmp	r0, #0
 8007f62:	dc03      	bgt.n	8007f6c <_dtoa_r+0xa9c>
 8007f64:	d1e0      	bne.n	8007f28 <_dtoa_r+0xa58>
 8007f66:	f01a 0f01 	tst.w	sl, #1
 8007f6a:	d0dd      	beq.n	8007f28 <_dtoa_r+0xa58>
 8007f6c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007f70:	d1d7      	bne.n	8007f22 <_dtoa_r+0xa52>
 8007f72:	2339      	movs	r3, #57	; 0x39
 8007f74:	f88b 3000 	strb.w	r3, [fp]
 8007f78:	462b      	mov	r3, r5
 8007f7a:	461d      	mov	r5, r3
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007f82:	2a39      	cmp	r2, #57	; 0x39
 8007f84:	d071      	beq.n	800806a <_dtoa_r+0xb9a>
 8007f86:	3201      	adds	r2, #1
 8007f88:	701a      	strb	r2, [r3, #0]
 8007f8a:	e746      	b.n	8007e1a <_dtoa_r+0x94a>
 8007f8c:	2a00      	cmp	r2, #0
 8007f8e:	dd07      	ble.n	8007fa0 <_dtoa_r+0xad0>
 8007f90:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007f94:	d0ed      	beq.n	8007f72 <_dtoa_r+0xaa2>
 8007f96:	f10a 0301 	add.w	r3, sl, #1
 8007f9a:	f88b 3000 	strb.w	r3, [fp]
 8007f9e:	e73c      	b.n	8007e1a <_dtoa_r+0x94a>
 8007fa0:	9b05      	ldr	r3, [sp, #20]
 8007fa2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007fa6:	4599      	cmp	r9, r3
 8007fa8:	d047      	beq.n	800803a <_dtoa_r+0xb6a>
 8007faa:	ee18 1a10 	vmov	r1, s16
 8007fae:	2300      	movs	r3, #0
 8007fb0:	220a      	movs	r2, #10
 8007fb2:	4620      	mov	r0, r4
 8007fb4:	f000 fa40 	bl	8008438 <__multadd>
 8007fb8:	45b8      	cmp	r8, r7
 8007fba:	ee08 0a10 	vmov	s16, r0
 8007fbe:	f04f 0300 	mov.w	r3, #0
 8007fc2:	f04f 020a 	mov.w	r2, #10
 8007fc6:	4641      	mov	r1, r8
 8007fc8:	4620      	mov	r0, r4
 8007fca:	d106      	bne.n	8007fda <_dtoa_r+0xb0a>
 8007fcc:	f000 fa34 	bl	8008438 <__multadd>
 8007fd0:	4680      	mov	r8, r0
 8007fd2:	4607      	mov	r7, r0
 8007fd4:	f109 0901 	add.w	r9, r9, #1
 8007fd8:	e772      	b.n	8007ec0 <_dtoa_r+0x9f0>
 8007fda:	f000 fa2d 	bl	8008438 <__multadd>
 8007fde:	4639      	mov	r1, r7
 8007fe0:	4680      	mov	r8, r0
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	220a      	movs	r2, #10
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	f000 fa26 	bl	8008438 <__multadd>
 8007fec:	4607      	mov	r7, r0
 8007fee:	e7f1      	b.n	8007fd4 <_dtoa_r+0xb04>
 8007ff0:	9b03      	ldr	r3, [sp, #12]
 8007ff2:	9302      	str	r3, [sp, #8]
 8007ff4:	9d01      	ldr	r5, [sp, #4]
 8007ff6:	ee18 0a10 	vmov	r0, s16
 8007ffa:	4631      	mov	r1, r6
 8007ffc:	f7ff f9dc 	bl	80073b8 <quorem>
 8008000:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008004:	9b01      	ldr	r3, [sp, #4]
 8008006:	f805 ab01 	strb.w	sl, [r5], #1
 800800a:	1aea      	subs	r2, r5, r3
 800800c:	9b02      	ldr	r3, [sp, #8]
 800800e:	4293      	cmp	r3, r2
 8008010:	dd09      	ble.n	8008026 <_dtoa_r+0xb56>
 8008012:	ee18 1a10 	vmov	r1, s16
 8008016:	2300      	movs	r3, #0
 8008018:	220a      	movs	r2, #10
 800801a:	4620      	mov	r0, r4
 800801c:	f000 fa0c 	bl	8008438 <__multadd>
 8008020:	ee08 0a10 	vmov	s16, r0
 8008024:	e7e7      	b.n	8007ff6 <_dtoa_r+0xb26>
 8008026:	9b02      	ldr	r3, [sp, #8]
 8008028:	2b00      	cmp	r3, #0
 800802a:	bfc8      	it	gt
 800802c:	461d      	movgt	r5, r3
 800802e:	9b01      	ldr	r3, [sp, #4]
 8008030:	bfd8      	it	le
 8008032:	2501      	movle	r5, #1
 8008034:	441d      	add	r5, r3
 8008036:	f04f 0800 	mov.w	r8, #0
 800803a:	ee18 1a10 	vmov	r1, s16
 800803e:	2201      	movs	r2, #1
 8008040:	4620      	mov	r0, r4
 8008042:	f000 fba9 	bl	8008798 <__lshift>
 8008046:	4631      	mov	r1, r6
 8008048:	ee08 0a10 	vmov	s16, r0
 800804c:	f000 fc14 	bl	8008878 <__mcmp>
 8008050:	2800      	cmp	r0, #0
 8008052:	dc91      	bgt.n	8007f78 <_dtoa_r+0xaa8>
 8008054:	d102      	bne.n	800805c <_dtoa_r+0xb8c>
 8008056:	f01a 0f01 	tst.w	sl, #1
 800805a:	d18d      	bne.n	8007f78 <_dtoa_r+0xaa8>
 800805c:	462b      	mov	r3, r5
 800805e:	461d      	mov	r5, r3
 8008060:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008064:	2a30      	cmp	r2, #48	; 0x30
 8008066:	d0fa      	beq.n	800805e <_dtoa_r+0xb8e>
 8008068:	e6d7      	b.n	8007e1a <_dtoa_r+0x94a>
 800806a:	9a01      	ldr	r2, [sp, #4]
 800806c:	429a      	cmp	r2, r3
 800806e:	d184      	bne.n	8007f7a <_dtoa_r+0xaaa>
 8008070:	9b00      	ldr	r3, [sp, #0]
 8008072:	3301      	adds	r3, #1
 8008074:	9300      	str	r3, [sp, #0]
 8008076:	2331      	movs	r3, #49	; 0x31
 8008078:	7013      	strb	r3, [r2, #0]
 800807a:	e6ce      	b.n	8007e1a <_dtoa_r+0x94a>
 800807c:	4b09      	ldr	r3, [pc, #36]	; (80080a4 <_dtoa_r+0xbd4>)
 800807e:	f7ff ba95 	b.w	80075ac <_dtoa_r+0xdc>
 8008082:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008084:	2b00      	cmp	r3, #0
 8008086:	f47f aa6e 	bne.w	8007566 <_dtoa_r+0x96>
 800808a:	4b07      	ldr	r3, [pc, #28]	; (80080a8 <_dtoa_r+0xbd8>)
 800808c:	f7ff ba8e 	b.w	80075ac <_dtoa_r+0xdc>
 8008090:	9b02      	ldr	r3, [sp, #8]
 8008092:	2b00      	cmp	r3, #0
 8008094:	dcae      	bgt.n	8007ff4 <_dtoa_r+0xb24>
 8008096:	9b06      	ldr	r3, [sp, #24]
 8008098:	2b02      	cmp	r3, #2
 800809a:	f73f aea8 	bgt.w	8007dee <_dtoa_r+0x91e>
 800809e:	e7a9      	b.n	8007ff4 <_dtoa_r+0xb24>
 80080a0:	08009507 	.word	0x08009507
 80080a4:	08009428 	.word	0x08009428
 80080a8:	08009488 	.word	0x08009488

080080ac <__sflush_r>:
 80080ac:	898a      	ldrh	r2, [r1, #12]
 80080ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080b2:	4605      	mov	r5, r0
 80080b4:	0710      	lsls	r0, r2, #28
 80080b6:	460c      	mov	r4, r1
 80080b8:	d458      	bmi.n	800816c <__sflush_r+0xc0>
 80080ba:	684b      	ldr	r3, [r1, #4]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	dc05      	bgt.n	80080cc <__sflush_r+0x20>
 80080c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	dc02      	bgt.n	80080cc <__sflush_r+0x20>
 80080c6:	2000      	movs	r0, #0
 80080c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080ce:	2e00      	cmp	r6, #0
 80080d0:	d0f9      	beq.n	80080c6 <__sflush_r+0x1a>
 80080d2:	2300      	movs	r3, #0
 80080d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80080d8:	682f      	ldr	r7, [r5, #0]
 80080da:	602b      	str	r3, [r5, #0]
 80080dc:	d032      	beq.n	8008144 <__sflush_r+0x98>
 80080de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80080e0:	89a3      	ldrh	r3, [r4, #12]
 80080e2:	075a      	lsls	r2, r3, #29
 80080e4:	d505      	bpl.n	80080f2 <__sflush_r+0x46>
 80080e6:	6863      	ldr	r3, [r4, #4]
 80080e8:	1ac0      	subs	r0, r0, r3
 80080ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80080ec:	b10b      	cbz	r3, 80080f2 <__sflush_r+0x46>
 80080ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080f0:	1ac0      	subs	r0, r0, r3
 80080f2:	2300      	movs	r3, #0
 80080f4:	4602      	mov	r2, r0
 80080f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080f8:	6a21      	ldr	r1, [r4, #32]
 80080fa:	4628      	mov	r0, r5
 80080fc:	47b0      	blx	r6
 80080fe:	1c43      	adds	r3, r0, #1
 8008100:	89a3      	ldrh	r3, [r4, #12]
 8008102:	d106      	bne.n	8008112 <__sflush_r+0x66>
 8008104:	6829      	ldr	r1, [r5, #0]
 8008106:	291d      	cmp	r1, #29
 8008108:	d82c      	bhi.n	8008164 <__sflush_r+0xb8>
 800810a:	4a2a      	ldr	r2, [pc, #168]	; (80081b4 <__sflush_r+0x108>)
 800810c:	40ca      	lsrs	r2, r1
 800810e:	07d6      	lsls	r6, r2, #31
 8008110:	d528      	bpl.n	8008164 <__sflush_r+0xb8>
 8008112:	2200      	movs	r2, #0
 8008114:	6062      	str	r2, [r4, #4]
 8008116:	04d9      	lsls	r1, r3, #19
 8008118:	6922      	ldr	r2, [r4, #16]
 800811a:	6022      	str	r2, [r4, #0]
 800811c:	d504      	bpl.n	8008128 <__sflush_r+0x7c>
 800811e:	1c42      	adds	r2, r0, #1
 8008120:	d101      	bne.n	8008126 <__sflush_r+0x7a>
 8008122:	682b      	ldr	r3, [r5, #0]
 8008124:	b903      	cbnz	r3, 8008128 <__sflush_r+0x7c>
 8008126:	6560      	str	r0, [r4, #84]	; 0x54
 8008128:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800812a:	602f      	str	r7, [r5, #0]
 800812c:	2900      	cmp	r1, #0
 800812e:	d0ca      	beq.n	80080c6 <__sflush_r+0x1a>
 8008130:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008134:	4299      	cmp	r1, r3
 8008136:	d002      	beq.n	800813e <__sflush_r+0x92>
 8008138:	4628      	mov	r0, r5
 800813a:	f000 fcb5 	bl	8008aa8 <_free_r>
 800813e:	2000      	movs	r0, #0
 8008140:	6360      	str	r0, [r4, #52]	; 0x34
 8008142:	e7c1      	b.n	80080c8 <__sflush_r+0x1c>
 8008144:	6a21      	ldr	r1, [r4, #32]
 8008146:	2301      	movs	r3, #1
 8008148:	4628      	mov	r0, r5
 800814a:	47b0      	blx	r6
 800814c:	1c41      	adds	r1, r0, #1
 800814e:	d1c7      	bne.n	80080e0 <__sflush_r+0x34>
 8008150:	682b      	ldr	r3, [r5, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d0c4      	beq.n	80080e0 <__sflush_r+0x34>
 8008156:	2b1d      	cmp	r3, #29
 8008158:	d001      	beq.n	800815e <__sflush_r+0xb2>
 800815a:	2b16      	cmp	r3, #22
 800815c:	d101      	bne.n	8008162 <__sflush_r+0xb6>
 800815e:	602f      	str	r7, [r5, #0]
 8008160:	e7b1      	b.n	80080c6 <__sflush_r+0x1a>
 8008162:	89a3      	ldrh	r3, [r4, #12]
 8008164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008168:	81a3      	strh	r3, [r4, #12]
 800816a:	e7ad      	b.n	80080c8 <__sflush_r+0x1c>
 800816c:	690f      	ldr	r7, [r1, #16]
 800816e:	2f00      	cmp	r7, #0
 8008170:	d0a9      	beq.n	80080c6 <__sflush_r+0x1a>
 8008172:	0793      	lsls	r3, r2, #30
 8008174:	680e      	ldr	r6, [r1, #0]
 8008176:	bf08      	it	eq
 8008178:	694b      	ldreq	r3, [r1, #20]
 800817a:	600f      	str	r7, [r1, #0]
 800817c:	bf18      	it	ne
 800817e:	2300      	movne	r3, #0
 8008180:	eba6 0807 	sub.w	r8, r6, r7
 8008184:	608b      	str	r3, [r1, #8]
 8008186:	f1b8 0f00 	cmp.w	r8, #0
 800818a:	dd9c      	ble.n	80080c6 <__sflush_r+0x1a>
 800818c:	6a21      	ldr	r1, [r4, #32]
 800818e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008190:	4643      	mov	r3, r8
 8008192:	463a      	mov	r2, r7
 8008194:	4628      	mov	r0, r5
 8008196:	47b0      	blx	r6
 8008198:	2800      	cmp	r0, #0
 800819a:	dc06      	bgt.n	80081aa <__sflush_r+0xfe>
 800819c:	89a3      	ldrh	r3, [r4, #12]
 800819e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081a2:	81a3      	strh	r3, [r4, #12]
 80081a4:	f04f 30ff 	mov.w	r0, #4294967295
 80081a8:	e78e      	b.n	80080c8 <__sflush_r+0x1c>
 80081aa:	4407      	add	r7, r0
 80081ac:	eba8 0800 	sub.w	r8, r8, r0
 80081b0:	e7e9      	b.n	8008186 <__sflush_r+0xda>
 80081b2:	bf00      	nop
 80081b4:	20400001 	.word	0x20400001

080081b8 <_fflush_r>:
 80081b8:	b538      	push	{r3, r4, r5, lr}
 80081ba:	690b      	ldr	r3, [r1, #16]
 80081bc:	4605      	mov	r5, r0
 80081be:	460c      	mov	r4, r1
 80081c0:	b913      	cbnz	r3, 80081c8 <_fflush_r+0x10>
 80081c2:	2500      	movs	r5, #0
 80081c4:	4628      	mov	r0, r5
 80081c6:	bd38      	pop	{r3, r4, r5, pc}
 80081c8:	b118      	cbz	r0, 80081d2 <_fflush_r+0x1a>
 80081ca:	6983      	ldr	r3, [r0, #24]
 80081cc:	b90b      	cbnz	r3, 80081d2 <_fflush_r+0x1a>
 80081ce:	f7fe f93b 	bl	8006448 <__sinit>
 80081d2:	4b14      	ldr	r3, [pc, #80]	; (8008224 <_fflush_r+0x6c>)
 80081d4:	429c      	cmp	r4, r3
 80081d6:	d11b      	bne.n	8008210 <_fflush_r+0x58>
 80081d8:	686c      	ldr	r4, [r5, #4]
 80081da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d0ef      	beq.n	80081c2 <_fflush_r+0xa>
 80081e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80081e4:	07d0      	lsls	r0, r2, #31
 80081e6:	d404      	bmi.n	80081f2 <_fflush_r+0x3a>
 80081e8:	0599      	lsls	r1, r3, #22
 80081ea:	d402      	bmi.n	80081f2 <_fflush_r+0x3a>
 80081ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081ee:	f7fe f9ee 	bl	80065ce <__retarget_lock_acquire_recursive>
 80081f2:	4628      	mov	r0, r5
 80081f4:	4621      	mov	r1, r4
 80081f6:	f7ff ff59 	bl	80080ac <__sflush_r>
 80081fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081fc:	07da      	lsls	r2, r3, #31
 80081fe:	4605      	mov	r5, r0
 8008200:	d4e0      	bmi.n	80081c4 <_fflush_r+0xc>
 8008202:	89a3      	ldrh	r3, [r4, #12]
 8008204:	059b      	lsls	r3, r3, #22
 8008206:	d4dd      	bmi.n	80081c4 <_fflush_r+0xc>
 8008208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800820a:	f7fe f9e1 	bl	80065d0 <__retarget_lock_release_recursive>
 800820e:	e7d9      	b.n	80081c4 <_fflush_r+0xc>
 8008210:	4b05      	ldr	r3, [pc, #20]	; (8008228 <_fflush_r+0x70>)
 8008212:	429c      	cmp	r4, r3
 8008214:	d101      	bne.n	800821a <_fflush_r+0x62>
 8008216:	68ac      	ldr	r4, [r5, #8]
 8008218:	e7df      	b.n	80081da <_fflush_r+0x22>
 800821a:	4b04      	ldr	r3, [pc, #16]	; (800822c <_fflush_r+0x74>)
 800821c:	429c      	cmp	r4, r3
 800821e:	bf08      	it	eq
 8008220:	68ec      	ldreq	r4, [r5, #12]
 8008222:	e7da      	b.n	80081da <_fflush_r+0x22>
 8008224:	080093d4 	.word	0x080093d4
 8008228:	080093f4 	.word	0x080093f4
 800822c:	080093b4 	.word	0x080093b4

08008230 <fiprintf>:
 8008230:	b40e      	push	{r1, r2, r3}
 8008232:	b503      	push	{r0, r1, lr}
 8008234:	4601      	mov	r1, r0
 8008236:	ab03      	add	r3, sp, #12
 8008238:	4805      	ldr	r0, [pc, #20]	; (8008250 <fiprintf+0x20>)
 800823a:	f853 2b04 	ldr.w	r2, [r3], #4
 800823e:	6800      	ldr	r0, [r0, #0]
 8008240:	9301      	str	r3, [sp, #4]
 8008242:	f000 fe03 	bl	8008e4c <_vfiprintf_r>
 8008246:	b002      	add	sp, #8
 8008248:	f85d eb04 	ldr.w	lr, [sp], #4
 800824c:	b003      	add	sp, #12
 800824e:	4770      	bx	lr
 8008250:	20000010 	.word	0x20000010

08008254 <_localeconv_r>:
 8008254:	4800      	ldr	r0, [pc, #0]	; (8008258 <_localeconv_r+0x4>)
 8008256:	4770      	bx	lr
 8008258:	20000164 	.word	0x20000164

0800825c <_lseek_r>:
 800825c:	b538      	push	{r3, r4, r5, lr}
 800825e:	4d07      	ldr	r5, [pc, #28]	; (800827c <_lseek_r+0x20>)
 8008260:	4604      	mov	r4, r0
 8008262:	4608      	mov	r0, r1
 8008264:	4611      	mov	r1, r2
 8008266:	2200      	movs	r2, #0
 8008268:	602a      	str	r2, [r5, #0]
 800826a:	461a      	mov	r2, r3
 800826c:	f7f9 fb52 	bl	8001914 <_lseek>
 8008270:	1c43      	adds	r3, r0, #1
 8008272:	d102      	bne.n	800827a <_lseek_r+0x1e>
 8008274:	682b      	ldr	r3, [r5, #0]
 8008276:	b103      	cbz	r3, 800827a <_lseek_r+0x1e>
 8008278:	6023      	str	r3, [r4, #0]
 800827a:	bd38      	pop	{r3, r4, r5, pc}
 800827c:	20001318 	.word	0x20001318

08008280 <__swhatbuf_r>:
 8008280:	b570      	push	{r4, r5, r6, lr}
 8008282:	460e      	mov	r6, r1
 8008284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008288:	2900      	cmp	r1, #0
 800828a:	b096      	sub	sp, #88	; 0x58
 800828c:	4614      	mov	r4, r2
 800828e:	461d      	mov	r5, r3
 8008290:	da08      	bge.n	80082a4 <__swhatbuf_r+0x24>
 8008292:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008296:	2200      	movs	r2, #0
 8008298:	602a      	str	r2, [r5, #0]
 800829a:	061a      	lsls	r2, r3, #24
 800829c:	d410      	bmi.n	80082c0 <__swhatbuf_r+0x40>
 800829e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082a2:	e00e      	b.n	80082c2 <__swhatbuf_r+0x42>
 80082a4:	466a      	mov	r2, sp
 80082a6:	f000 ff1b 	bl	80090e0 <_fstat_r>
 80082aa:	2800      	cmp	r0, #0
 80082ac:	dbf1      	blt.n	8008292 <__swhatbuf_r+0x12>
 80082ae:	9a01      	ldr	r2, [sp, #4]
 80082b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80082b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80082b8:	425a      	negs	r2, r3
 80082ba:	415a      	adcs	r2, r3
 80082bc:	602a      	str	r2, [r5, #0]
 80082be:	e7ee      	b.n	800829e <__swhatbuf_r+0x1e>
 80082c0:	2340      	movs	r3, #64	; 0x40
 80082c2:	2000      	movs	r0, #0
 80082c4:	6023      	str	r3, [r4, #0]
 80082c6:	b016      	add	sp, #88	; 0x58
 80082c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080082cc <__smakebuf_r>:
 80082cc:	898b      	ldrh	r3, [r1, #12]
 80082ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80082d0:	079d      	lsls	r5, r3, #30
 80082d2:	4606      	mov	r6, r0
 80082d4:	460c      	mov	r4, r1
 80082d6:	d507      	bpl.n	80082e8 <__smakebuf_r+0x1c>
 80082d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80082dc:	6023      	str	r3, [r4, #0]
 80082de:	6123      	str	r3, [r4, #16]
 80082e0:	2301      	movs	r3, #1
 80082e2:	6163      	str	r3, [r4, #20]
 80082e4:	b002      	add	sp, #8
 80082e6:	bd70      	pop	{r4, r5, r6, pc}
 80082e8:	ab01      	add	r3, sp, #4
 80082ea:	466a      	mov	r2, sp
 80082ec:	f7ff ffc8 	bl	8008280 <__swhatbuf_r>
 80082f0:	9900      	ldr	r1, [sp, #0]
 80082f2:	4605      	mov	r5, r0
 80082f4:	4630      	mov	r0, r6
 80082f6:	f7fe f9a3 	bl	8006640 <_malloc_r>
 80082fa:	b948      	cbnz	r0, 8008310 <__smakebuf_r+0x44>
 80082fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008300:	059a      	lsls	r2, r3, #22
 8008302:	d4ef      	bmi.n	80082e4 <__smakebuf_r+0x18>
 8008304:	f023 0303 	bic.w	r3, r3, #3
 8008308:	f043 0302 	orr.w	r3, r3, #2
 800830c:	81a3      	strh	r3, [r4, #12]
 800830e:	e7e3      	b.n	80082d8 <__smakebuf_r+0xc>
 8008310:	4b0d      	ldr	r3, [pc, #52]	; (8008348 <__smakebuf_r+0x7c>)
 8008312:	62b3      	str	r3, [r6, #40]	; 0x28
 8008314:	89a3      	ldrh	r3, [r4, #12]
 8008316:	6020      	str	r0, [r4, #0]
 8008318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800831c:	81a3      	strh	r3, [r4, #12]
 800831e:	9b00      	ldr	r3, [sp, #0]
 8008320:	6163      	str	r3, [r4, #20]
 8008322:	9b01      	ldr	r3, [sp, #4]
 8008324:	6120      	str	r0, [r4, #16]
 8008326:	b15b      	cbz	r3, 8008340 <__smakebuf_r+0x74>
 8008328:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800832c:	4630      	mov	r0, r6
 800832e:	f000 fee9 	bl	8009104 <_isatty_r>
 8008332:	b128      	cbz	r0, 8008340 <__smakebuf_r+0x74>
 8008334:	89a3      	ldrh	r3, [r4, #12]
 8008336:	f023 0303 	bic.w	r3, r3, #3
 800833a:	f043 0301 	orr.w	r3, r3, #1
 800833e:	81a3      	strh	r3, [r4, #12]
 8008340:	89a0      	ldrh	r0, [r4, #12]
 8008342:	4305      	orrs	r5, r0
 8008344:	81a5      	strh	r5, [r4, #12]
 8008346:	e7cd      	b.n	80082e4 <__smakebuf_r+0x18>
 8008348:	080063e1 	.word	0x080063e1

0800834c <malloc>:
 800834c:	4b02      	ldr	r3, [pc, #8]	; (8008358 <malloc+0xc>)
 800834e:	4601      	mov	r1, r0
 8008350:	6818      	ldr	r0, [r3, #0]
 8008352:	f7fe b975 	b.w	8006640 <_malloc_r>
 8008356:	bf00      	nop
 8008358:	20000010 	.word	0x20000010

0800835c <__malloc_lock>:
 800835c:	4801      	ldr	r0, [pc, #4]	; (8008364 <__malloc_lock+0x8>)
 800835e:	f7fe b936 	b.w	80065ce <__retarget_lock_acquire_recursive>
 8008362:	bf00      	nop
 8008364:	2000130c 	.word	0x2000130c

08008368 <__malloc_unlock>:
 8008368:	4801      	ldr	r0, [pc, #4]	; (8008370 <__malloc_unlock+0x8>)
 800836a:	f7fe b931 	b.w	80065d0 <__retarget_lock_release_recursive>
 800836e:	bf00      	nop
 8008370:	2000130c 	.word	0x2000130c

08008374 <_Balloc>:
 8008374:	b570      	push	{r4, r5, r6, lr}
 8008376:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008378:	4604      	mov	r4, r0
 800837a:	460d      	mov	r5, r1
 800837c:	b976      	cbnz	r6, 800839c <_Balloc+0x28>
 800837e:	2010      	movs	r0, #16
 8008380:	f7ff ffe4 	bl	800834c <malloc>
 8008384:	4602      	mov	r2, r0
 8008386:	6260      	str	r0, [r4, #36]	; 0x24
 8008388:	b920      	cbnz	r0, 8008394 <_Balloc+0x20>
 800838a:	4b18      	ldr	r3, [pc, #96]	; (80083ec <_Balloc+0x78>)
 800838c:	4818      	ldr	r0, [pc, #96]	; (80083f0 <_Balloc+0x7c>)
 800838e:	2166      	movs	r1, #102	; 0x66
 8008390:	f7fe ffe4 	bl	800735c <__assert_func>
 8008394:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008398:	6006      	str	r6, [r0, #0]
 800839a:	60c6      	str	r6, [r0, #12]
 800839c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800839e:	68f3      	ldr	r3, [r6, #12]
 80083a0:	b183      	cbz	r3, 80083c4 <_Balloc+0x50>
 80083a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80083aa:	b9b8      	cbnz	r0, 80083dc <_Balloc+0x68>
 80083ac:	2101      	movs	r1, #1
 80083ae:	fa01 f605 	lsl.w	r6, r1, r5
 80083b2:	1d72      	adds	r2, r6, #5
 80083b4:	0092      	lsls	r2, r2, #2
 80083b6:	4620      	mov	r0, r4
 80083b8:	f000 fb60 	bl	8008a7c <_calloc_r>
 80083bc:	b160      	cbz	r0, 80083d8 <_Balloc+0x64>
 80083be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80083c2:	e00e      	b.n	80083e2 <_Balloc+0x6e>
 80083c4:	2221      	movs	r2, #33	; 0x21
 80083c6:	2104      	movs	r1, #4
 80083c8:	4620      	mov	r0, r4
 80083ca:	f000 fb57 	bl	8008a7c <_calloc_r>
 80083ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083d0:	60f0      	str	r0, [r6, #12]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d1e4      	bne.n	80083a2 <_Balloc+0x2e>
 80083d8:	2000      	movs	r0, #0
 80083da:	bd70      	pop	{r4, r5, r6, pc}
 80083dc:	6802      	ldr	r2, [r0, #0]
 80083de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80083e2:	2300      	movs	r3, #0
 80083e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80083e8:	e7f7      	b.n	80083da <_Balloc+0x66>
 80083ea:	bf00      	nop
 80083ec:	08009495 	.word	0x08009495
 80083f0:	08009518 	.word	0x08009518

080083f4 <_Bfree>:
 80083f4:	b570      	push	{r4, r5, r6, lr}
 80083f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80083f8:	4605      	mov	r5, r0
 80083fa:	460c      	mov	r4, r1
 80083fc:	b976      	cbnz	r6, 800841c <_Bfree+0x28>
 80083fe:	2010      	movs	r0, #16
 8008400:	f7ff ffa4 	bl	800834c <malloc>
 8008404:	4602      	mov	r2, r0
 8008406:	6268      	str	r0, [r5, #36]	; 0x24
 8008408:	b920      	cbnz	r0, 8008414 <_Bfree+0x20>
 800840a:	4b09      	ldr	r3, [pc, #36]	; (8008430 <_Bfree+0x3c>)
 800840c:	4809      	ldr	r0, [pc, #36]	; (8008434 <_Bfree+0x40>)
 800840e:	218a      	movs	r1, #138	; 0x8a
 8008410:	f7fe ffa4 	bl	800735c <__assert_func>
 8008414:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008418:	6006      	str	r6, [r0, #0]
 800841a:	60c6      	str	r6, [r0, #12]
 800841c:	b13c      	cbz	r4, 800842e <_Bfree+0x3a>
 800841e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008420:	6862      	ldr	r2, [r4, #4]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008428:	6021      	str	r1, [r4, #0]
 800842a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800842e:	bd70      	pop	{r4, r5, r6, pc}
 8008430:	08009495 	.word	0x08009495
 8008434:	08009518 	.word	0x08009518

08008438 <__multadd>:
 8008438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800843c:	690d      	ldr	r5, [r1, #16]
 800843e:	4607      	mov	r7, r0
 8008440:	460c      	mov	r4, r1
 8008442:	461e      	mov	r6, r3
 8008444:	f101 0c14 	add.w	ip, r1, #20
 8008448:	2000      	movs	r0, #0
 800844a:	f8dc 3000 	ldr.w	r3, [ip]
 800844e:	b299      	uxth	r1, r3
 8008450:	fb02 6101 	mla	r1, r2, r1, r6
 8008454:	0c1e      	lsrs	r6, r3, #16
 8008456:	0c0b      	lsrs	r3, r1, #16
 8008458:	fb02 3306 	mla	r3, r2, r6, r3
 800845c:	b289      	uxth	r1, r1
 800845e:	3001      	adds	r0, #1
 8008460:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008464:	4285      	cmp	r5, r0
 8008466:	f84c 1b04 	str.w	r1, [ip], #4
 800846a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800846e:	dcec      	bgt.n	800844a <__multadd+0x12>
 8008470:	b30e      	cbz	r6, 80084b6 <__multadd+0x7e>
 8008472:	68a3      	ldr	r3, [r4, #8]
 8008474:	42ab      	cmp	r3, r5
 8008476:	dc19      	bgt.n	80084ac <__multadd+0x74>
 8008478:	6861      	ldr	r1, [r4, #4]
 800847a:	4638      	mov	r0, r7
 800847c:	3101      	adds	r1, #1
 800847e:	f7ff ff79 	bl	8008374 <_Balloc>
 8008482:	4680      	mov	r8, r0
 8008484:	b928      	cbnz	r0, 8008492 <__multadd+0x5a>
 8008486:	4602      	mov	r2, r0
 8008488:	4b0c      	ldr	r3, [pc, #48]	; (80084bc <__multadd+0x84>)
 800848a:	480d      	ldr	r0, [pc, #52]	; (80084c0 <__multadd+0x88>)
 800848c:	21b5      	movs	r1, #181	; 0xb5
 800848e:	f7fe ff65 	bl	800735c <__assert_func>
 8008492:	6922      	ldr	r2, [r4, #16]
 8008494:	3202      	adds	r2, #2
 8008496:	f104 010c 	add.w	r1, r4, #12
 800849a:	0092      	lsls	r2, r2, #2
 800849c:	300c      	adds	r0, #12
 800849e:	f7fe f898 	bl	80065d2 <memcpy>
 80084a2:	4621      	mov	r1, r4
 80084a4:	4638      	mov	r0, r7
 80084a6:	f7ff ffa5 	bl	80083f4 <_Bfree>
 80084aa:	4644      	mov	r4, r8
 80084ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80084b0:	3501      	adds	r5, #1
 80084b2:	615e      	str	r6, [r3, #20]
 80084b4:	6125      	str	r5, [r4, #16]
 80084b6:	4620      	mov	r0, r4
 80084b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084bc:	08009507 	.word	0x08009507
 80084c0:	08009518 	.word	0x08009518

080084c4 <__hi0bits>:
 80084c4:	0c03      	lsrs	r3, r0, #16
 80084c6:	041b      	lsls	r3, r3, #16
 80084c8:	b9d3      	cbnz	r3, 8008500 <__hi0bits+0x3c>
 80084ca:	0400      	lsls	r0, r0, #16
 80084cc:	2310      	movs	r3, #16
 80084ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80084d2:	bf04      	itt	eq
 80084d4:	0200      	lsleq	r0, r0, #8
 80084d6:	3308      	addeq	r3, #8
 80084d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80084dc:	bf04      	itt	eq
 80084de:	0100      	lsleq	r0, r0, #4
 80084e0:	3304      	addeq	r3, #4
 80084e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80084e6:	bf04      	itt	eq
 80084e8:	0080      	lsleq	r0, r0, #2
 80084ea:	3302      	addeq	r3, #2
 80084ec:	2800      	cmp	r0, #0
 80084ee:	db05      	blt.n	80084fc <__hi0bits+0x38>
 80084f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80084f4:	f103 0301 	add.w	r3, r3, #1
 80084f8:	bf08      	it	eq
 80084fa:	2320      	moveq	r3, #32
 80084fc:	4618      	mov	r0, r3
 80084fe:	4770      	bx	lr
 8008500:	2300      	movs	r3, #0
 8008502:	e7e4      	b.n	80084ce <__hi0bits+0xa>

08008504 <__lo0bits>:
 8008504:	6803      	ldr	r3, [r0, #0]
 8008506:	f013 0207 	ands.w	r2, r3, #7
 800850a:	4601      	mov	r1, r0
 800850c:	d00b      	beq.n	8008526 <__lo0bits+0x22>
 800850e:	07da      	lsls	r2, r3, #31
 8008510:	d423      	bmi.n	800855a <__lo0bits+0x56>
 8008512:	0798      	lsls	r0, r3, #30
 8008514:	bf49      	itett	mi
 8008516:	085b      	lsrmi	r3, r3, #1
 8008518:	089b      	lsrpl	r3, r3, #2
 800851a:	2001      	movmi	r0, #1
 800851c:	600b      	strmi	r3, [r1, #0]
 800851e:	bf5c      	itt	pl
 8008520:	600b      	strpl	r3, [r1, #0]
 8008522:	2002      	movpl	r0, #2
 8008524:	4770      	bx	lr
 8008526:	b298      	uxth	r0, r3
 8008528:	b9a8      	cbnz	r0, 8008556 <__lo0bits+0x52>
 800852a:	0c1b      	lsrs	r3, r3, #16
 800852c:	2010      	movs	r0, #16
 800852e:	b2da      	uxtb	r2, r3
 8008530:	b90a      	cbnz	r2, 8008536 <__lo0bits+0x32>
 8008532:	3008      	adds	r0, #8
 8008534:	0a1b      	lsrs	r3, r3, #8
 8008536:	071a      	lsls	r2, r3, #28
 8008538:	bf04      	itt	eq
 800853a:	091b      	lsreq	r3, r3, #4
 800853c:	3004      	addeq	r0, #4
 800853e:	079a      	lsls	r2, r3, #30
 8008540:	bf04      	itt	eq
 8008542:	089b      	lsreq	r3, r3, #2
 8008544:	3002      	addeq	r0, #2
 8008546:	07da      	lsls	r2, r3, #31
 8008548:	d403      	bmi.n	8008552 <__lo0bits+0x4e>
 800854a:	085b      	lsrs	r3, r3, #1
 800854c:	f100 0001 	add.w	r0, r0, #1
 8008550:	d005      	beq.n	800855e <__lo0bits+0x5a>
 8008552:	600b      	str	r3, [r1, #0]
 8008554:	4770      	bx	lr
 8008556:	4610      	mov	r0, r2
 8008558:	e7e9      	b.n	800852e <__lo0bits+0x2a>
 800855a:	2000      	movs	r0, #0
 800855c:	4770      	bx	lr
 800855e:	2020      	movs	r0, #32
 8008560:	4770      	bx	lr
	...

08008564 <__i2b>:
 8008564:	b510      	push	{r4, lr}
 8008566:	460c      	mov	r4, r1
 8008568:	2101      	movs	r1, #1
 800856a:	f7ff ff03 	bl	8008374 <_Balloc>
 800856e:	4602      	mov	r2, r0
 8008570:	b928      	cbnz	r0, 800857e <__i2b+0x1a>
 8008572:	4b05      	ldr	r3, [pc, #20]	; (8008588 <__i2b+0x24>)
 8008574:	4805      	ldr	r0, [pc, #20]	; (800858c <__i2b+0x28>)
 8008576:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800857a:	f7fe feef 	bl	800735c <__assert_func>
 800857e:	2301      	movs	r3, #1
 8008580:	6144      	str	r4, [r0, #20]
 8008582:	6103      	str	r3, [r0, #16]
 8008584:	bd10      	pop	{r4, pc}
 8008586:	bf00      	nop
 8008588:	08009507 	.word	0x08009507
 800858c:	08009518 	.word	0x08009518

08008590 <__multiply>:
 8008590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008594:	4691      	mov	r9, r2
 8008596:	690a      	ldr	r2, [r1, #16]
 8008598:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800859c:	429a      	cmp	r2, r3
 800859e:	bfb8      	it	lt
 80085a0:	460b      	movlt	r3, r1
 80085a2:	460c      	mov	r4, r1
 80085a4:	bfbc      	itt	lt
 80085a6:	464c      	movlt	r4, r9
 80085a8:	4699      	movlt	r9, r3
 80085aa:	6927      	ldr	r7, [r4, #16]
 80085ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80085b0:	68a3      	ldr	r3, [r4, #8]
 80085b2:	6861      	ldr	r1, [r4, #4]
 80085b4:	eb07 060a 	add.w	r6, r7, sl
 80085b8:	42b3      	cmp	r3, r6
 80085ba:	b085      	sub	sp, #20
 80085bc:	bfb8      	it	lt
 80085be:	3101      	addlt	r1, #1
 80085c0:	f7ff fed8 	bl	8008374 <_Balloc>
 80085c4:	b930      	cbnz	r0, 80085d4 <__multiply+0x44>
 80085c6:	4602      	mov	r2, r0
 80085c8:	4b44      	ldr	r3, [pc, #272]	; (80086dc <__multiply+0x14c>)
 80085ca:	4845      	ldr	r0, [pc, #276]	; (80086e0 <__multiply+0x150>)
 80085cc:	f240 115d 	movw	r1, #349	; 0x15d
 80085d0:	f7fe fec4 	bl	800735c <__assert_func>
 80085d4:	f100 0514 	add.w	r5, r0, #20
 80085d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80085dc:	462b      	mov	r3, r5
 80085de:	2200      	movs	r2, #0
 80085e0:	4543      	cmp	r3, r8
 80085e2:	d321      	bcc.n	8008628 <__multiply+0x98>
 80085e4:	f104 0314 	add.w	r3, r4, #20
 80085e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80085ec:	f109 0314 	add.w	r3, r9, #20
 80085f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80085f4:	9202      	str	r2, [sp, #8]
 80085f6:	1b3a      	subs	r2, r7, r4
 80085f8:	3a15      	subs	r2, #21
 80085fa:	f022 0203 	bic.w	r2, r2, #3
 80085fe:	3204      	adds	r2, #4
 8008600:	f104 0115 	add.w	r1, r4, #21
 8008604:	428f      	cmp	r7, r1
 8008606:	bf38      	it	cc
 8008608:	2204      	movcc	r2, #4
 800860a:	9201      	str	r2, [sp, #4]
 800860c:	9a02      	ldr	r2, [sp, #8]
 800860e:	9303      	str	r3, [sp, #12]
 8008610:	429a      	cmp	r2, r3
 8008612:	d80c      	bhi.n	800862e <__multiply+0x9e>
 8008614:	2e00      	cmp	r6, #0
 8008616:	dd03      	ble.n	8008620 <__multiply+0x90>
 8008618:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800861c:	2b00      	cmp	r3, #0
 800861e:	d05a      	beq.n	80086d6 <__multiply+0x146>
 8008620:	6106      	str	r6, [r0, #16]
 8008622:	b005      	add	sp, #20
 8008624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008628:	f843 2b04 	str.w	r2, [r3], #4
 800862c:	e7d8      	b.n	80085e0 <__multiply+0x50>
 800862e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008632:	f1ba 0f00 	cmp.w	sl, #0
 8008636:	d024      	beq.n	8008682 <__multiply+0xf2>
 8008638:	f104 0e14 	add.w	lr, r4, #20
 800863c:	46a9      	mov	r9, r5
 800863e:	f04f 0c00 	mov.w	ip, #0
 8008642:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008646:	f8d9 1000 	ldr.w	r1, [r9]
 800864a:	fa1f fb82 	uxth.w	fp, r2
 800864e:	b289      	uxth	r1, r1
 8008650:	fb0a 110b 	mla	r1, sl, fp, r1
 8008654:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008658:	f8d9 2000 	ldr.w	r2, [r9]
 800865c:	4461      	add	r1, ip
 800865e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008662:	fb0a c20b 	mla	r2, sl, fp, ip
 8008666:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800866a:	b289      	uxth	r1, r1
 800866c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008670:	4577      	cmp	r7, lr
 8008672:	f849 1b04 	str.w	r1, [r9], #4
 8008676:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800867a:	d8e2      	bhi.n	8008642 <__multiply+0xb2>
 800867c:	9a01      	ldr	r2, [sp, #4]
 800867e:	f845 c002 	str.w	ip, [r5, r2]
 8008682:	9a03      	ldr	r2, [sp, #12]
 8008684:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008688:	3304      	adds	r3, #4
 800868a:	f1b9 0f00 	cmp.w	r9, #0
 800868e:	d020      	beq.n	80086d2 <__multiply+0x142>
 8008690:	6829      	ldr	r1, [r5, #0]
 8008692:	f104 0c14 	add.w	ip, r4, #20
 8008696:	46ae      	mov	lr, r5
 8008698:	f04f 0a00 	mov.w	sl, #0
 800869c:	f8bc b000 	ldrh.w	fp, [ip]
 80086a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80086a4:	fb09 220b 	mla	r2, r9, fp, r2
 80086a8:	4492      	add	sl, r2
 80086aa:	b289      	uxth	r1, r1
 80086ac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80086b0:	f84e 1b04 	str.w	r1, [lr], #4
 80086b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80086b8:	f8be 1000 	ldrh.w	r1, [lr]
 80086bc:	0c12      	lsrs	r2, r2, #16
 80086be:	fb09 1102 	mla	r1, r9, r2, r1
 80086c2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80086c6:	4567      	cmp	r7, ip
 80086c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80086cc:	d8e6      	bhi.n	800869c <__multiply+0x10c>
 80086ce:	9a01      	ldr	r2, [sp, #4]
 80086d0:	50a9      	str	r1, [r5, r2]
 80086d2:	3504      	adds	r5, #4
 80086d4:	e79a      	b.n	800860c <__multiply+0x7c>
 80086d6:	3e01      	subs	r6, #1
 80086d8:	e79c      	b.n	8008614 <__multiply+0x84>
 80086da:	bf00      	nop
 80086dc:	08009507 	.word	0x08009507
 80086e0:	08009518 	.word	0x08009518

080086e4 <__pow5mult>:
 80086e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086e8:	4615      	mov	r5, r2
 80086ea:	f012 0203 	ands.w	r2, r2, #3
 80086ee:	4606      	mov	r6, r0
 80086f0:	460f      	mov	r7, r1
 80086f2:	d007      	beq.n	8008704 <__pow5mult+0x20>
 80086f4:	4c25      	ldr	r4, [pc, #148]	; (800878c <__pow5mult+0xa8>)
 80086f6:	3a01      	subs	r2, #1
 80086f8:	2300      	movs	r3, #0
 80086fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80086fe:	f7ff fe9b 	bl	8008438 <__multadd>
 8008702:	4607      	mov	r7, r0
 8008704:	10ad      	asrs	r5, r5, #2
 8008706:	d03d      	beq.n	8008784 <__pow5mult+0xa0>
 8008708:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800870a:	b97c      	cbnz	r4, 800872c <__pow5mult+0x48>
 800870c:	2010      	movs	r0, #16
 800870e:	f7ff fe1d 	bl	800834c <malloc>
 8008712:	4602      	mov	r2, r0
 8008714:	6270      	str	r0, [r6, #36]	; 0x24
 8008716:	b928      	cbnz	r0, 8008724 <__pow5mult+0x40>
 8008718:	4b1d      	ldr	r3, [pc, #116]	; (8008790 <__pow5mult+0xac>)
 800871a:	481e      	ldr	r0, [pc, #120]	; (8008794 <__pow5mult+0xb0>)
 800871c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008720:	f7fe fe1c 	bl	800735c <__assert_func>
 8008724:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008728:	6004      	str	r4, [r0, #0]
 800872a:	60c4      	str	r4, [r0, #12]
 800872c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008730:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008734:	b94c      	cbnz	r4, 800874a <__pow5mult+0x66>
 8008736:	f240 2171 	movw	r1, #625	; 0x271
 800873a:	4630      	mov	r0, r6
 800873c:	f7ff ff12 	bl	8008564 <__i2b>
 8008740:	2300      	movs	r3, #0
 8008742:	f8c8 0008 	str.w	r0, [r8, #8]
 8008746:	4604      	mov	r4, r0
 8008748:	6003      	str	r3, [r0, #0]
 800874a:	f04f 0900 	mov.w	r9, #0
 800874e:	07eb      	lsls	r3, r5, #31
 8008750:	d50a      	bpl.n	8008768 <__pow5mult+0x84>
 8008752:	4639      	mov	r1, r7
 8008754:	4622      	mov	r2, r4
 8008756:	4630      	mov	r0, r6
 8008758:	f7ff ff1a 	bl	8008590 <__multiply>
 800875c:	4639      	mov	r1, r7
 800875e:	4680      	mov	r8, r0
 8008760:	4630      	mov	r0, r6
 8008762:	f7ff fe47 	bl	80083f4 <_Bfree>
 8008766:	4647      	mov	r7, r8
 8008768:	106d      	asrs	r5, r5, #1
 800876a:	d00b      	beq.n	8008784 <__pow5mult+0xa0>
 800876c:	6820      	ldr	r0, [r4, #0]
 800876e:	b938      	cbnz	r0, 8008780 <__pow5mult+0x9c>
 8008770:	4622      	mov	r2, r4
 8008772:	4621      	mov	r1, r4
 8008774:	4630      	mov	r0, r6
 8008776:	f7ff ff0b 	bl	8008590 <__multiply>
 800877a:	6020      	str	r0, [r4, #0]
 800877c:	f8c0 9000 	str.w	r9, [r0]
 8008780:	4604      	mov	r4, r0
 8008782:	e7e4      	b.n	800874e <__pow5mult+0x6a>
 8008784:	4638      	mov	r0, r7
 8008786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800878a:	bf00      	nop
 800878c:	08009668 	.word	0x08009668
 8008790:	08009495 	.word	0x08009495
 8008794:	08009518 	.word	0x08009518

08008798 <__lshift>:
 8008798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800879c:	460c      	mov	r4, r1
 800879e:	6849      	ldr	r1, [r1, #4]
 80087a0:	6923      	ldr	r3, [r4, #16]
 80087a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80087a6:	68a3      	ldr	r3, [r4, #8]
 80087a8:	4607      	mov	r7, r0
 80087aa:	4691      	mov	r9, r2
 80087ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80087b0:	f108 0601 	add.w	r6, r8, #1
 80087b4:	42b3      	cmp	r3, r6
 80087b6:	db0b      	blt.n	80087d0 <__lshift+0x38>
 80087b8:	4638      	mov	r0, r7
 80087ba:	f7ff fddb 	bl	8008374 <_Balloc>
 80087be:	4605      	mov	r5, r0
 80087c0:	b948      	cbnz	r0, 80087d6 <__lshift+0x3e>
 80087c2:	4602      	mov	r2, r0
 80087c4:	4b2a      	ldr	r3, [pc, #168]	; (8008870 <__lshift+0xd8>)
 80087c6:	482b      	ldr	r0, [pc, #172]	; (8008874 <__lshift+0xdc>)
 80087c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80087cc:	f7fe fdc6 	bl	800735c <__assert_func>
 80087d0:	3101      	adds	r1, #1
 80087d2:	005b      	lsls	r3, r3, #1
 80087d4:	e7ee      	b.n	80087b4 <__lshift+0x1c>
 80087d6:	2300      	movs	r3, #0
 80087d8:	f100 0114 	add.w	r1, r0, #20
 80087dc:	f100 0210 	add.w	r2, r0, #16
 80087e0:	4618      	mov	r0, r3
 80087e2:	4553      	cmp	r3, sl
 80087e4:	db37      	blt.n	8008856 <__lshift+0xbe>
 80087e6:	6920      	ldr	r0, [r4, #16]
 80087e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80087ec:	f104 0314 	add.w	r3, r4, #20
 80087f0:	f019 091f 	ands.w	r9, r9, #31
 80087f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80087f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80087fc:	d02f      	beq.n	800885e <__lshift+0xc6>
 80087fe:	f1c9 0e20 	rsb	lr, r9, #32
 8008802:	468a      	mov	sl, r1
 8008804:	f04f 0c00 	mov.w	ip, #0
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	fa02 f209 	lsl.w	r2, r2, r9
 800880e:	ea42 020c 	orr.w	r2, r2, ip
 8008812:	f84a 2b04 	str.w	r2, [sl], #4
 8008816:	f853 2b04 	ldr.w	r2, [r3], #4
 800881a:	4298      	cmp	r0, r3
 800881c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008820:	d8f2      	bhi.n	8008808 <__lshift+0x70>
 8008822:	1b03      	subs	r3, r0, r4
 8008824:	3b15      	subs	r3, #21
 8008826:	f023 0303 	bic.w	r3, r3, #3
 800882a:	3304      	adds	r3, #4
 800882c:	f104 0215 	add.w	r2, r4, #21
 8008830:	4290      	cmp	r0, r2
 8008832:	bf38      	it	cc
 8008834:	2304      	movcc	r3, #4
 8008836:	f841 c003 	str.w	ip, [r1, r3]
 800883a:	f1bc 0f00 	cmp.w	ip, #0
 800883e:	d001      	beq.n	8008844 <__lshift+0xac>
 8008840:	f108 0602 	add.w	r6, r8, #2
 8008844:	3e01      	subs	r6, #1
 8008846:	4638      	mov	r0, r7
 8008848:	612e      	str	r6, [r5, #16]
 800884a:	4621      	mov	r1, r4
 800884c:	f7ff fdd2 	bl	80083f4 <_Bfree>
 8008850:	4628      	mov	r0, r5
 8008852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008856:	f842 0f04 	str.w	r0, [r2, #4]!
 800885a:	3301      	adds	r3, #1
 800885c:	e7c1      	b.n	80087e2 <__lshift+0x4a>
 800885e:	3904      	subs	r1, #4
 8008860:	f853 2b04 	ldr.w	r2, [r3], #4
 8008864:	f841 2f04 	str.w	r2, [r1, #4]!
 8008868:	4298      	cmp	r0, r3
 800886a:	d8f9      	bhi.n	8008860 <__lshift+0xc8>
 800886c:	e7ea      	b.n	8008844 <__lshift+0xac>
 800886e:	bf00      	nop
 8008870:	08009507 	.word	0x08009507
 8008874:	08009518 	.word	0x08009518

08008878 <__mcmp>:
 8008878:	b530      	push	{r4, r5, lr}
 800887a:	6902      	ldr	r2, [r0, #16]
 800887c:	690c      	ldr	r4, [r1, #16]
 800887e:	1b12      	subs	r2, r2, r4
 8008880:	d10e      	bne.n	80088a0 <__mcmp+0x28>
 8008882:	f100 0314 	add.w	r3, r0, #20
 8008886:	3114      	adds	r1, #20
 8008888:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800888c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008890:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008894:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008898:	42a5      	cmp	r5, r4
 800889a:	d003      	beq.n	80088a4 <__mcmp+0x2c>
 800889c:	d305      	bcc.n	80088aa <__mcmp+0x32>
 800889e:	2201      	movs	r2, #1
 80088a0:	4610      	mov	r0, r2
 80088a2:	bd30      	pop	{r4, r5, pc}
 80088a4:	4283      	cmp	r3, r0
 80088a6:	d3f3      	bcc.n	8008890 <__mcmp+0x18>
 80088a8:	e7fa      	b.n	80088a0 <__mcmp+0x28>
 80088aa:	f04f 32ff 	mov.w	r2, #4294967295
 80088ae:	e7f7      	b.n	80088a0 <__mcmp+0x28>

080088b0 <__mdiff>:
 80088b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b4:	460c      	mov	r4, r1
 80088b6:	4606      	mov	r6, r0
 80088b8:	4611      	mov	r1, r2
 80088ba:	4620      	mov	r0, r4
 80088bc:	4690      	mov	r8, r2
 80088be:	f7ff ffdb 	bl	8008878 <__mcmp>
 80088c2:	1e05      	subs	r5, r0, #0
 80088c4:	d110      	bne.n	80088e8 <__mdiff+0x38>
 80088c6:	4629      	mov	r1, r5
 80088c8:	4630      	mov	r0, r6
 80088ca:	f7ff fd53 	bl	8008374 <_Balloc>
 80088ce:	b930      	cbnz	r0, 80088de <__mdiff+0x2e>
 80088d0:	4b3a      	ldr	r3, [pc, #232]	; (80089bc <__mdiff+0x10c>)
 80088d2:	4602      	mov	r2, r0
 80088d4:	f240 2132 	movw	r1, #562	; 0x232
 80088d8:	4839      	ldr	r0, [pc, #228]	; (80089c0 <__mdiff+0x110>)
 80088da:	f7fe fd3f 	bl	800735c <__assert_func>
 80088de:	2301      	movs	r3, #1
 80088e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80088e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088e8:	bfa4      	itt	ge
 80088ea:	4643      	movge	r3, r8
 80088ec:	46a0      	movge	r8, r4
 80088ee:	4630      	mov	r0, r6
 80088f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80088f4:	bfa6      	itte	ge
 80088f6:	461c      	movge	r4, r3
 80088f8:	2500      	movge	r5, #0
 80088fa:	2501      	movlt	r5, #1
 80088fc:	f7ff fd3a 	bl	8008374 <_Balloc>
 8008900:	b920      	cbnz	r0, 800890c <__mdiff+0x5c>
 8008902:	4b2e      	ldr	r3, [pc, #184]	; (80089bc <__mdiff+0x10c>)
 8008904:	4602      	mov	r2, r0
 8008906:	f44f 7110 	mov.w	r1, #576	; 0x240
 800890a:	e7e5      	b.n	80088d8 <__mdiff+0x28>
 800890c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008910:	6926      	ldr	r6, [r4, #16]
 8008912:	60c5      	str	r5, [r0, #12]
 8008914:	f104 0914 	add.w	r9, r4, #20
 8008918:	f108 0514 	add.w	r5, r8, #20
 800891c:	f100 0e14 	add.w	lr, r0, #20
 8008920:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008924:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008928:	f108 0210 	add.w	r2, r8, #16
 800892c:	46f2      	mov	sl, lr
 800892e:	2100      	movs	r1, #0
 8008930:	f859 3b04 	ldr.w	r3, [r9], #4
 8008934:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008938:	fa1f f883 	uxth.w	r8, r3
 800893c:	fa11 f18b 	uxtah	r1, r1, fp
 8008940:	0c1b      	lsrs	r3, r3, #16
 8008942:	eba1 0808 	sub.w	r8, r1, r8
 8008946:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800894a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800894e:	fa1f f888 	uxth.w	r8, r8
 8008952:	1419      	asrs	r1, r3, #16
 8008954:	454e      	cmp	r6, r9
 8008956:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800895a:	f84a 3b04 	str.w	r3, [sl], #4
 800895e:	d8e7      	bhi.n	8008930 <__mdiff+0x80>
 8008960:	1b33      	subs	r3, r6, r4
 8008962:	3b15      	subs	r3, #21
 8008964:	f023 0303 	bic.w	r3, r3, #3
 8008968:	3304      	adds	r3, #4
 800896a:	3415      	adds	r4, #21
 800896c:	42a6      	cmp	r6, r4
 800896e:	bf38      	it	cc
 8008970:	2304      	movcc	r3, #4
 8008972:	441d      	add	r5, r3
 8008974:	4473      	add	r3, lr
 8008976:	469e      	mov	lr, r3
 8008978:	462e      	mov	r6, r5
 800897a:	4566      	cmp	r6, ip
 800897c:	d30e      	bcc.n	800899c <__mdiff+0xec>
 800897e:	f10c 0203 	add.w	r2, ip, #3
 8008982:	1b52      	subs	r2, r2, r5
 8008984:	f022 0203 	bic.w	r2, r2, #3
 8008988:	3d03      	subs	r5, #3
 800898a:	45ac      	cmp	ip, r5
 800898c:	bf38      	it	cc
 800898e:	2200      	movcc	r2, #0
 8008990:	441a      	add	r2, r3
 8008992:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008996:	b17b      	cbz	r3, 80089b8 <__mdiff+0x108>
 8008998:	6107      	str	r7, [r0, #16]
 800899a:	e7a3      	b.n	80088e4 <__mdiff+0x34>
 800899c:	f856 8b04 	ldr.w	r8, [r6], #4
 80089a0:	fa11 f288 	uxtah	r2, r1, r8
 80089a4:	1414      	asrs	r4, r2, #16
 80089a6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80089aa:	b292      	uxth	r2, r2
 80089ac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80089b0:	f84e 2b04 	str.w	r2, [lr], #4
 80089b4:	1421      	asrs	r1, r4, #16
 80089b6:	e7e0      	b.n	800897a <__mdiff+0xca>
 80089b8:	3f01      	subs	r7, #1
 80089ba:	e7ea      	b.n	8008992 <__mdiff+0xe2>
 80089bc:	08009507 	.word	0x08009507
 80089c0:	08009518 	.word	0x08009518

080089c4 <__d2b>:
 80089c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80089c8:	4689      	mov	r9, r1
 80089ca:	2101      	movs	r1, #1
 80089cc:	ec57 6b10 	vmov	r6, r7, d0
 80089d0:	4690      	mov	r8, r2
 80089d2:	f7ff fccf 	bl	8008374 <_Balloc>
 80089d6:	4604      	mov	r4, r0
 80089d8:	b930      	cbnz	r0, 80089e8 <__d2b+0x24>
 80089da:	4602      	mov	r2, r0
 80089dc:	4b25      	ldr	r3, [pc, #148]	; (8008a74 <__d2b+0xb0>)
 80089de:	4826      	ldr	r0, [pc, #152]	; (8008a78 <__d2b+0xb4>)
 80089e0:	f240 310a 	movw	r1, #778	; 0x30a
 80089e4:	f7fe fcba 	bl	800735c <__assert_func>
 80089e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80089ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80089f0:	bb35      	cbnz	r5, 8008a40 <__d2b+0x7c>
 80089f2:	2e00      	cmp	r6, #0
 80089f4:	9301      	str	r3, [sp, #4]
 80089f6:	d028      	beq.n	8008a4a <__d2b+0x86>
 80089f8:	4668      	mov	r0, sp
 80089fa:	9600      	str	r6, [sp, #0]
 80089fc:	f7ff fd82 	bl	8008504 <__lo0bits>
 8008a00:	9900      	ldr	r1, [sp, #0]
 8008a02:	b300      	cbz	r0, 8008a46 <__d2b+0x82>
 8008a04:	9a01      	ldr	r2, [sp, #4]
 8008a06:	f1c0 0320 	rsb	r3, r0, #32
 8008a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a0e:	430b      	orrs	r3, r1
 8008a10:	40c2      	lsrs	r2, r0
 8008a12:	6163      	str	r3, [r4, #20]
 8008a14:	9201      	str	r2, [sp, #4]
 8008a16:	9b01      	ldr	r3, [sp, #4]
 8008a18:	61a3      	str	r3, [r4, #24]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	bf14      	ite	ne
 8008a1e:	2202      	movne	r2, #2
 8008a20:	2201      	moveq	r2, #1
 8008a22:	6122      	str	r2, [r4, #16]
 8008a24:	b1d5      	cbz	r5, 8008a5c <__d2b+0x98>
 8008a26:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008a2a:	4405      	add	r5, r0
 8008a2c:	f8c9 5000 	str.w	r5, [r9]
 8008a30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008a34:	f8c8 0000 	str.w	r0, [r8]
 8008a38:	4620      	mov	r0, r4
 8008a3a:	b003      	add	sp, #12
 8008a3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a44:	e7d5      	b.n	80089f2 <__d2b+0x2e>
 8008a46:	6161      	str	r1, [r4, #20]
 8008a48:	e7e5      	b.n	8008a16 <__d2b+0x52>
 8008a4a:	a801      	add	r0, sp, #4
 8008a4c:	f7ff fd5a 	bl	8008504 <__lo0bits>
 8008a50:	9b01      	ldr	r3, [sp, #4]
 8008a52:	6163      	str	r3, [r4, #20]
 8008a54:	2201      	movs	r2, #1
 8008a56:	6122      	str	r2, [r4, #16]
 8008a58:	3020      	adds	r0, #32
 8008a5a:	e7e3      	b.n	8008a24 <__d2b+0x60>
 8008a5c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008a60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008a64:	f8c9 0000 	str.w	r0, [r9]
 8008a68:	6918      	ldr	r0, [r3, #16]
 8008a6a:	f7ff fd2b 	bl	80084c4 <__hi0bits>
 8008a6e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008a72:	e7df      	b.n	8008a34 <__d2b+0x70>
 8008a74:	08009507 	.word	0x08009507
 8008a78:	08009518 	.word	0x08009518

08008a7c <_calloc_r>:
 8008a7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a7e:	fba1 2402 	umull	r2, r4, r1, r2
 8008a82:	b94c      	cbnz	r4, 8008a98 <_calloc_r+0x1c>
 8008a84:	4611      	mov	r1, r2
 8008a86:	9201      	str	r2, [sp, #4]
 8008a88:	f7fd fdda 	bl	8006640 <_malloc_r>
 8008a8c:	9a01      	ldr	r2, [sp, #4]
 8008a8e:	4605      	mov	r5, r0
 8008a90:	b930      	cbnz	r0, 8008aa0 <_calloc_r+0x24>
 8008a92:	4628      	mov	r0, r5
 8008a94:	b003      	add	sp, #12
 8008a96:	bd30      	pop	{r4, r5, pc}
 8008a98:	220c      	movs	r2, #12
 8008a9a:	6002      	str	r2, [r0, #0]
 8008a9c:	2500      	movs	r5, #0
 8008a9e:	e7f8      	b.n	8008a92 <_calloc_r+0x16>
 8008aa0:	4621      	mov	r1, r4
 8008aa2:	f7fd fda4 	bl	80065ee <memset>
 8008aa6:	e7f4      	b.n	8008a92 <_calloc_r+0x16>

08008aa8 <_free_r>:
 8008aa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008aaa:	2900      	cmp	r1, #0
 8008aac:	d044      	beq.n	8008b38 <_free_r+0x90>
 8008aae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ab2:	9001      	str	r0, [sp, #4]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f1a1 0404 	sub.w	r4, r1, #4
 8008aba:	bfb8      	it	lt
 8008abc:	18e4      	addlt	r4, r4, r3
 8008abe:	f7ff fc4d 	bl	800835c <__malloc_lock>
 8008ac2:	4a1e      	ldr	r2, [pc, #120]	; (8008b3c <_free_r+0x94>)
 8008ac4:	9801      	ldr	r0, [sp, #4]
 8008ac6:	6813      	ldr	r3, [r2, #0]
 8008ac8:	b933      	cbnz	r3, 8008ad8 <_free_r+0x30>
 8008aca:	6063      	str	r3, [r4, #4]
 8008acc:	6014      	str	r4, [r2, #0]
 8008ace:	b003      	add	sp, #12
 8008ad0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ad4:	f7ff bc48 	b.w	8008368 <__malloc_unlock>
 8008ad8:	42a3      	cmp	r3, r4
 8008ada:	d908      	bls.n	8008aee <_free_r+0x46>
 8008adc:	6825      	ldr	r5, [r4, #0]
 8008ade:	1961      	adds	r1, r4, r5
 8008ae0:	428b      	cmp	r3, r1
 8008ae2:	bf01      	itttt	eq
 8008ae4:	6819      	ldreq	r1, [r3, #0]
 8008ae6:	685b      	ldreq	r3, [r3, #4]
 8008ae8:	1949      	addeq	r1, r1, r5
 8008aea:	6021      	streq	r1, [r4, #0]
 8008aec:	e7ed      	b.n	8008aca <_free_r+0x22>
 8008aee:	461a      	mov	r2, r3
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	b10b      	cbz	r3, 8008af8 <_free_r+0x50>
 8008af4:	42a3      	cmp	r3, r4
 8008af6:	d9fa      	bls.n	8008aee <_free_r+0x46>
 8008af8:	6811      	ldr	r1, [r2, #0]
 8008afa:	1855      	adds	r5, r2, r1
 8008afc:	42a5      	cmp	r5, r4
 8008afe:	d10b      	bne.n	8008b18 <_free_r+0x70>
 8008b00:	6824      	ldr	r4, [r4, #0]
 8008b02:	4421      	add	r1, r4
 8008b04:	1854      	adds	r4, r2, r1
 8008b06:	42a3      	cmp	r3, r4
 8008b08:	6011      	str	r1, [r2, #0]
 8008b0a:	d1e0      	bne.n	8008ace <_free_r+0x26>
 8008b0c:	681c      	ldr	r4, [r3, #0]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	6053      	str	r3, [r2, #4]
 8008b12:	4421      	add	r1, r4
 8008b14:	6011      	str	r1, [r2, #0]
 8008b16:	e7da      	b.n	8008ace <_free_r+0x26>
 8008b18:	d902      	bls.n	8008b20 <_free_r+0x78>
 8008b1a:	230c      	movs	r3, #12
 8008b1c:	6003      	str	r3, [r0, #0]
 8008b1e:	e7d6      	b.n	8008ace <_free_r+0x26>
 8008b20:	6825      	ldr	r5, [r4, #0]
 8008b22:	1961      	adds	r1, r4, r5
 8008b24:	428b      	cmp	r3, r1
 8008b26:	bf04      	itt	eq
 8008b28:	6819      	ldreq	r1, [r3, #0]
 8008b2a:	685b      	ldreq	r3, [r3, #4]
 8008b2c:	6063      	str	r3, [r4, #4]
 8008b2e:	bf04      	itt	eq
 8008b30:	1949      	addeq	r1, r1, r5
 8008b32:	6021      	streq	r1, [r4, #0]
 8008b34:	6054      	str	r4, [r2, #4]
 8008b36:	e7ca      	b.n	8008ace <_free_r+0x26>
 8008b38:	b003      	add	sp, #12
 8008b3a:	bd30      	pop	{r4, r5, pc}
 8008b3c:	20001310 	.word	0x20001310

08008b40 <__ssputs_r>:
 8008b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b44:	688e      	ldr	r6, [r1, #8]
 8008b46:	429e      	cmp	r6, r3
 8008b48:	4682      	mov	sl, r0
 8008b4a:	460c      	mov	r4, r1
 8008b4c:	4690      	mov	r8, r2
 8008b4e:	461f      	mov	r7, r3
 8008b50:	d838      	bhi.n	8008bc4 <__ssputs_r+0x84>
 8008b52:	898a      	ldrh	r2, [r1, #12]
 8008b54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008b58:	d032      	beq.n	8008bc0 <__ssputs_r+0x80>
 8008b5a:	6825      	ldr	r5, [r4, #0]
 8008b5c:	6909      	ldr	r1, [r1, #16]
 8008b5e:	eba5 0901 	sub.w	r9, r5, r1
 8008b62:	6965      	ldr	r5, [r4, #20]
 8008b64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	444b      	add	r3, r9
 8008b70:	106d      	asrs	r5, r5, #1
 8008b72:	429d      	cmp	r5, r3
 8008b74:	bf38      	it	cc
 8008b76:	461d      	movcc	r5, r3
 8008b78:	0553      	lsls	r3, r2, #21
 8008b7a:	d531      	bpl.n	8008be0 <__ssputs_r+0xa0>
 8008b7c:	4629      	mov	r1, r5
 8008b7e:	f7fd fd5f 	bl	8006640 <_malloc_r>
 8008b82:	4606      	mov	r6, r0
 8008b84:	b950      	cbnz	r0, 8008b9c <__ssputs_r+0x5c>
 8008b86:	230c      	movs	r3, #12
 8008b88:	f8ca 3000 	str.w	r3, [sl]
 8008b8c:	89a3      	ldrh	r3, [r4, #12]
 8008b8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b92:	81a3      	strh	r3, [r4, #12]
 8008b94:	f04f 30ff 	mov.w	r0, #4294967295
 8008b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b9c:	6921      	ldr	r1, [r4, #16]
 8008b9e:	464a      	mov	r2, r9
 8008ba0:	f7fd fd17 	bl	80065d2 <memcpy>
 8008ba4:	89a3      	ldrh	r3, [r4, #12]
 8008ba6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bae:	81a3      	strh	r3, [r4, #12]
 8008bb0:	6126      	str	r6, [r4, #16]
 8008bb2:	6165      	str	r5, [r4, #20]
 8008bb4:	444e      	add	r6, r9
 8008bb6:	eba5 0509 	sub.w	r5, r5, r9
 8008bba:	6026      	str	r6, [r4, #0]
 8008bbc:	60a5      	str	r5, [r4, #8]
 8008bbe:	463e      	mov	r6, r7
 8008bc0:	42be      	cmp	r6, r7
 8008bc2:	d900      	bls.n	8008bc6 <__ssputs_r+0x86>
 8008bc4:	463e      	mov	r6, r7
 8008bc6:	6820      	ldr	r0, [r4, #0]
 8008bc8:	4632      	mov	r2, r6
 8008bca:	4641      	mov	r1, r8
 8008bcc:	f000 fabc 	bl	8009148 <memmove>
 8008bd0:	68a3      	ldr	r3, [r4, #8]
 8008bd2:	1b9b      	subs	r3, r3, r6
 8008bd4:	60a3      	str	r3, [r4, #8]
 8008bd6:	6823      	ldr	r3, [r4, #0]
 8008bd8:	4433      	add	r3, r6
 8008bda:	6023      	str	r3, [r4, #0]
 8008bdc:	2000      	movs	r0, #0
 8008bde:	e7db      	b.n	8008b98 <__ssputs_r+0x58>
 8008be0:	462a      	mov	r2, r5
 8008be2:	f000 facb 	bl	800917c <_realloc_r>
 8008be6:	4606      	mov	r6, r0
 8008be8:	2800      	cmp	r0, #0
 8008bea:	d1e1      	bne.n	8008bb0 <__ssputs_r+0x70>
 8008bec:	6921      	ldr	r1, [r4, #16]
 8008bee:	4650      	mov	r0, sl
 8008bf0:	f7ff ff5a 	bl	8008aa8 <_free_r>
 8008bf4:	e7c7      	b.n	8008b86 <__ssputs_r+0x46>
	...

08008bf8 <_svfiprintf_r>:
 8008bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bfc:	4698      	mov	r8, r3
 8008bfe:	898b      	ldrh	r3, [r1, #12]
 8008c00:	061b      	lsls	r3, r3, #24
 8008c02:	b09d      	sub	sp, #116	; 0x74
 8008c04:	4607      	mov	r7, r0
 8008c06:	460d      	mov	r5, r1
 8008c08:	4614      	mov	r4, r2
 8008c0a:	d50e      	bpl.n	8008c2a <_svfiprintf_r+0x32>
 8008c0c:	690b      	ldr	r3, [r1, #16]
 8008c0e:	b963      	cbnz	r3, 8008c2a <_svfiprintf_r+0x32>
 8008c10:	2140      	movs	r1, #64	; 0x40
 8008c12:	f7fd fd15 	bl	8006640 <_malloc_r>
 8008c16:	6028      	str	r0, [r5, #0]
 8008c18:	6128      	str	r0, [r5, #16]
 8008c1a:	b920      	cbnz	r0, 8008c26 <_svfiprintf_r+0x2e>
 8008c1c:	230c      	movs	r3, #12
 8008c1e:	603b      	str	r3, [r7, #0]
 8008c20:	f04f 30ff 	mov.w	r0, #4294967295
 8008c24:	e0d1      	b.n	8008dca <_svfiprintf_r+0x1d2>
 8008c26:	2340      	movs	r3, #64	; 0x40
 8008c28:	616b      	str	r3, [r5, #20]
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	9309      	str	r3, [sp, #36]	; 0x24
 8008c2e:	2320      	movs	r3, #32
 8008c30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c34:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c38:	2330      	movs	r3, #48	; 0x30
 8008c3a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008de4 <_svfiprintf_r+0x1ec>
 8008c3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c42:	f04f 0901 	mov.w	r9, #1
 8008c46:	4623      	mov	r3, r4
 8008c48:	469a      	mov	sl, r3
 8008c4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c4e:	b10a      	cbz	r2, 8008c54 <_svfiprintf_r+0x5c>
 8008c50:	2a25      	cmp	r2, #37	; 0x25
 8008c52:	d1f9      	bne.n	8008c48 <_svfiprintf_r+0x50>
 8008c54:	ebba 0b04 	subs.w	fp, sl, r4
 8008c58:	d00b      	beq.n	8008c72 <_svfiprintf_r+0x7a>
 8008c5a:	465b      	mov	r3, fp
 8008c5c:	4622      	mov	r2, r4
 8008c5e:	4629      	mov	r1, r5
 8008c60:	4638      	mov	r0, r7
 8008c62:	f7ff ff6d 	bl	8008b40 <__ssputs_r>
 8008c66:	3001      	adds	r0, #1
 8008c68:	f000 80aa 	beq.w	8008dc0 <_svfiprintf_r+0x1c8>
 8008c6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c6e:	445a      	add	r2, fp
 8008c70:	9209      	str	r2, [sp, #36]	; 0x24
 8008c72:	f89a 3000 	ldrb.w	r3, [sl]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	f000 80a2 	beq.w	8008dc0 <_svfiprintf_r+0x1c8>
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8008c82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c86:	f10a 0a01 	add.w	sl, sl, #1
 8008c8a:	9304      	str	r3, [sp, #16]
 8008c8c:	9307      	str	r3, [sp, #28]
 8008c8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c92:	931a      	str	r3, [sp, #104]	; 0x68
 8008c94:	4654      	mov	r4, sl
 8008c96:	2205      	movs	r2, #5
 8008c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c9c:	4851      	ldr	r0, [pc, #324]	; (8008de4 <_svfiprintf_r+0x1ec>)
 8008c9e:	f7f7 fa9f 	bl	80001e0 <memchr>
 8008ca2:	9a04      	ldr	r2, [sp, #16]
 8008ca4:	b9d8      	cbnz	r0, 8008cde <_svfiprintf_r+0xe6>
 8008ca6:	06d0      	lsls	r0, r2, #27
 8008ca8:	bf44      	itt	mi
 8008caa:	2320      	movmi	r3, #32
 8008cac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cb0:	0711      	lsls	r1, r2, #28
 8008cb2:	bf44      	itt	mi
 8008cb4:	232b      	movmi	r3, #43	; 0x2b
 8008cb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cba:	f89a 3000 	ldrb.w	r3, [sl]
 8008cbe:	2b2a      	cmp	r3, #42	; 0x2a
 8008cc0:	d015      	beq.n	8008cee <_svfiprintf_r+0xf6>
 8008cc2:	9a07      	ldr	r2, [sp, #28]
 8008cc4:	4654      	mov	r4, sl
 8008cc6:	2000      	movs	r0, #0
 8008cc8:	f04f 0c0a 	mov.w	ip, #10
 8008ccc:	4621      	mov	r1, r4
 8008cce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cd2:	3b30      	subs	r3, #48	; 0x30
 8008cd4:	2b09      	cmp	r3, #9
 8008cd6:	d94e      	bls.n	8008d76 <_svfiprintf_r+0x17e>
 8008cd8:	b1b0      	cbz	r0, 8008d08 <_svfiprintf_r+0x110>
 8008cda:	9207      	str	r2, [sp, #28]
 8008cdc:	e014      	b.n	8008d08 <_svfiprintf_r+0x110>
 8008cde:	eba0 0308 	sub.w	r3, r0, r8
 8008ce2:	fa09 f303 	lsl.w	r3, r9, r3
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	9304      	str	r3, [sp, #16]
 8008cea:	46a2      	mov	sl, r4
 8008cec:	e7d2      	b.n	8008c94 <_svfiprintf_r+0x9c>
 8008cee:	9b03      	ldr	r3, [sp, #12]
 8008cf0:	1d19      	adds	r1, r3, #4
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	9103      	str	r1, [sp, #12]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	bfbb      	ittet	lt
 8008cfa:	425b      	neglt	r3, r3
 8008cfc:	f042 0202 	orrlt.w	r2, r2, #2
 8008d00:	9307      	strge	r3, [sp, #28]
 8008d02:	9307      	strlt	r3, [sp, #28]
 8008d04:	bfb8      	it	lt
 8008d06:	9204      	strlt	r2, [sp, #16]
 8008d08:	7823      	ldrb	r3, [r4, #0]
 8008d0a:	2b2e      	cmp	r3, #46	; 0x2e
 8008d0c:	d10c      	bne.n	8008d28 <_svfiprintf_r+0x130>
 8008d0e:	7863      	ldrb	r3, [r4, #1]
 8008d10:	2b2a      	cmp	r3, #42	; 0x2a
 8008d12:	d135      	bne.n	8008d80 <_svfiprintf_r+0x188>
 8008d14:	9b03      	ldr	r3, [sp, #12]
 8008d16:	1d1a      	adds	r2, r3, #4
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	9203      	str	r2, [sp, #12]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	bfb8      	it	lt
 8008d20:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d24:	3402      	adds	r4, #2
 8008d26:	9305      	str	r3, [sp, #20]
 8008d28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008df4 <_svfiprintf_r+0x1fc>
 8008d2c:	7821      	ldrb	r1, [r4, #0]
 8008d2e:	2203      	movs	r2, #3
 8008d30:	4650      	mov	r0, sl
 8008d32:	f7f7 fa55 	bl	80001e0 <memchr>
 8008d36:	b140      	cbz	r0, 8008d4a <_svfiprintf_r+0x152>
 8008d38:	2340      	movs	r3, #64	; 0x40
 8008d3a:	eba0 000a 	sub.w	r0, r0, sl
 8008d3e:	fa03 f000 	lsl.w	r0, r3, r0
 8008d42:	9b04      	ldr	r3, [sp, #16]
 8008d44:	4303      	orrs	r3, r0
 8008d46:	3401      	adds	r4, #1
 8008d48:	9304      	str	r3, [sp, #16]
 8008d4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d4e:	4826      	ldr	r0, [pc, #152]	; (8008de8 <_svfiprintf_r+0x1f0>)
 8008d50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d54:	2206      	movs	r2, #6
 8008d56:	f7f7 fa43 	bl	80001e0 <memchr>
 8008d5a:	2800      	cmp	r0, #0
 8008d5c:	d038      	beq.n	8008dd0 <_svfiprintf_r+0x1d8>
 8008d5e:	4b23      	ldr	r3, [pc, #140]	; (8008dec <_svfiprintf_r+0x1f4>)
 8008d60:	bb1b      	cbnz	r3, 8008daa <_svfiprintf_r+0x1b2>
 8008d62:	9b03      	ldr	r3, [sp, #12]
 8008d64:	3307      	adds	r3, #7
 8008d66:	f023 0307 	bic.w	r3, r3, #7
 8008d6a:	3308      	adds	r3, #8
 8008d6c:	9303      	str	r3, [sp, #12]
 8008d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d70:	4433      	add	r3, r6
 8008d72:	9309      	str	r3, [sp, #36]	; 0x24
 8008d74:	e767      	b.n	8008c46 <_svfiprintf_r+0x4e>
 8008d76:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d7a:	460c      	mov	r4, r1
 8008d7c:	2001      	movs	r0, #1
 8008d7e:	e7a5      	b.n	8008ccc <_svfiprintf_r+0xd4>
 8008d80:	2300      	movs	r3, #0
 8008d82:	3401      	adds	r4, #1
 8008d84:	9305      	str	r3, [sp, #20]
 8008d86:	4619      	mov	r1, r3
 8008d88:	f04f 0c0a 	mov.w	ip, #10
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d92:	3a30      	subs	r2, #48	; 0x30
 8008d94:	2a09      	cmp	r2, #9
 8008d96:	d903      	bls.n	8008da0 <_svfiprintf_r+0x1a8>
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d0c5      	beq.n	8008d28 <_svfiprintf_r+0x130>
 8008d9c:	9105      	str	r1, [sp, #20]
 8008d9e:	e7c3      	b.n	8008d28 <_svfiprintf_r+0x130>
 8008da0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008da4:	4604      	mov	r4, r0
 8008da6:	2301      	movs	r3, #1
 8008da8:	e7f0      	b.n	8008d8c <_svfiprintf_r+0x194>
 8008daa:	ab03      	add	r3, sp, #12
 8008dac:	9300      	str	r3, [sp, #0]
 8008dae:	462a      	mov	r2, r5
 8008db0:	4b0f      	ldr	r3, [pc, #60]	; (8008df0 <_svfiprintf_r+0x1f8>)
 8008db2:	a904      	add	r1, sp, #16
 8008db4:	4638      	mov	r0, r7
 8008db6:	f7fd fd57 	bl	8006868 <_printf_float>
 8008dba:	1c42      	adds	r2, r0, #1
 8008dbc:	4606      	mov	r6, r0
 8008dbe:	d1d6      	bne.n	8008d6e <_svfiprintf_r+0x176>
 8008dc0:	89ab      	ldrh	r3, [r5, #12]
 8008dc2:	065b      	lsls	r3, r3, #25
 8008dc4:	f53f af2c 	bmi.w	8008c20 <_svfiprintf_r+0x28>
 8008dc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008dca:	b01d      	add	sp, #116	; 0x74
 8008dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dd0:	ab03      	add	r3, sp, #12
 8008dd2:	9300      	str	r3, [sp, #0]
 8008dd4:	462a      	mov	r2, r5
 8008dd6:	4b06      	ldr	r3, [pc, #24]	; (8008df0 <_svfiprintf_r+0x1f8>)
 8008dd8:	a904      	add	r1, sp, #16
 8008dda:	4638      	mov	r0, r7
 8008ddc:	f7fd ffe8 	bl	8006db0 <_printf_i>
 8008de0:	e7eb      	b.n	8008dba <_svfiprintf_r+0x1c2>
 8008de2:	bf00      	nop
 8008de4:	08009674 	.word	0x08009674
 8008de8:	0800967e 	.word	0x0800967e
 8008dec:	08006869 	.word	0x08006869
 8008df0:	08008b41 	.word	0x08008b41
 8008df4:	0800967a 	.word	0x0800967a

08008df8 <__sfputc_r>:
 8008df8:	6893      	ldr	r3, [r2, #8]
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	b410      	push	{r4}
 8008e00:	6093      	str	r3, [r2, #8]
 8008e02:	da08      	bge.n	8008e16 <__sfputc_r+0x1e>
 8008e04:	6994      	ldr	r4, [r2, #24]
 8008e06:	42a3      	cmp	r3, r4
 8008e08:	db01      	blt.n	8008e0e <__sfputc_r+0x16>
 8008e0a:	290a      	cmp	r1, #10
 8008e0c:	d103      	bne.n	8008e16 <__sfputc_r+0x1e>
 8008e0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e12:	f7fe b9d1 	b.w	80071b8 <__swbuf_r>
 8008e16:	6813      	ldr	r3, [r2, #0]
 8008e18:	1c58      	adds	r0, r3, #1
 8008e1a:	6010      	str	r0, [r2, #0]
 8008e1c:	7019      	strb	r1, [r3, #0]
 8008e1e:	4608      	mov	r0, r1
 8008e20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e24:	4770      	bx	lr

08008e26 <__sfputs_r>:
 8008e26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e28:	4606      	mov	r6, r0
 8008e2a:	460f      	mov	r7, r1
 8008e2c:	4614      	mov	r4, r2
 8008e2e:	18d5      	adds	r5, r2, r3
 8008e30:	42ac      	cmp	r4, r5
 8008e32:	d101      	bne.n	8008e38 <__sfputs_r+0x12>
 8008e34:	2000      	movs	r0, #0
 8008e36:	e007      	b.n	8008e48 <__sfputs_r+0x22>
 8008e38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e3c:	463a      	mov	r2, r7
 8008e3e:	4630      	mov	r0, r6
 8008e40:	f7ff ffda 	bl	8008df8 <__sfputc_r>
 8008e44:	1c43      	adds	r3, r0, #1
 8008e46:	d1f3      	bne.n	8008e30 <__sfputs_r+0xa>
 8008e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008e4c <_vfiprintf_r>:
 8008e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e50:	460d      	mov	r5, r1
 8008e52:	b09d      	sub	sp, #116	; 0x74
 8008e54:	4614      	mov	r4, r2
 8008e56:	4698      	mov	r8, r3
 8008e58:	4606      	mov	r6, r0
 8008e5a:	b118      	cbz	r0, 8008e64 <_vfiprintf_r+0x18>
 8008e5c:	6983      	ldr	r3, [r0, #24]
 8008e5e:	b90b      	cbnz	r3, 8008e64 <_vfiprintf_r+0x18>
 8008e60:	f7fd faf2 	bl	8006448 <__sinit>
 8008e64:	4b89      	ldr	r3, [pc, #548]	; (800908c <_vfiprintf_r+0x240>)
 8008e66:	429d      	cmp	r5, r3
 8008e68:	d11b      	bne.n	8008ea2 <_vfiprintf_r+0x56>
 8008e6a:	6875      	ldr	r5, [r6, #4]
 8008e6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e6e:	07d9      	lsls	r1, r3, #31
 8008e70:	d405      	bmi.n	8008e7e <_vfiprintf_r+0x32>
 8008e72:	89ab      	ldrh	r3, [r5, #12]
 8008e74:	059a      	lsls	r2, r3, #22
 8008e76:	d402      	bmi.n	8008e7e <_vfiprintf_r+0x32>
 8008e78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e7a:	f7fd fba8 	bl	80065ce <__retarget_lock_acquire_recursive>
 8008e7e:	89ab      	ldrh	r3, [r5, #12]
 8008e80:	071b      	lsls	r3, r3, #28
 8008e82:	d501      	bpl.n	8008e88 <_vfiprintf_r+0x3c>
 8008e84:	692b      	ldr	r3, [r5, #16]
 8008e86:	b9eb      	cbnz	r3, 8008ec4 <_vfiprintf_r+0x78>
 8008e88:	4629      	mov	r1, r5
 8008e8a:	4630      	mov	r0, r6
 8008e8c:	f7fe f9f8 	bl	8007280 <__swsetup_r>
 8008e90:	b1c0      	cbz	r0, 8008ec4 <_vfiprintf_r+0x78>
 8008e92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e94:	07dc      	lsls	r4, r3, #31
 8008e96:	d50e      	bpl.n	8008eb6 <_vfiprintf_r+0x6a>
 8008e98:	f04f 30ff 	mov.w	r0, #4294967295
 8008e9c:	b01d      	add	sp, #116	; 0x74
 8008e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ea2:	4b7b      	ldr	r3, [pc, #492]	; (8009090 <_vfiprintf_r+0x244>)
 8008ea4:	429d      	cmp	r5, r3
 8008ea6:	d101      	bne.n	8008eac <_vfiprintf_r+0x60>
 8008ea8:	68b5      	ldr	r5, [r6, #8]
 8008eaa:	e7df      	b.n	8008e6c <_vfiprintf_r+0x20>
 8008eac:	4b79      	ldr	r3, [pc, #484]	; (8009094 <_vfiprintf_r+0x248>)
 8008eae:	429d      	cmp	r5, r3
 8008eb0:	bf08      	it	eq
 8008eb2:	68f5      	ldreq	r5, [r6, #12]
 8008eb4:	e7da      	b.n	8008e6c <_vfiprintf_r+0x20>
 8008eb6:	89ab      	ldrh	r3, [r5, #12]
 8008eb8:	0598      	lsls	r0, r3, #22
 8008eba:	d4ed      	bmi.n	8008e98 <_vfiprintf_r+0x4c>
 8008ebc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ebe:	f7fd fb87 	bl	80065d0 <__retarget_lock_release_recursive>
 8008ec2:	e7e9      	b.n	8008e98 <_vfiprintf_r+0x4c>
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	9309      	str	r3, [sp, #36]	; 0x24
 8008ec8:	2320      	movs	r3, #32
 8008eca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ece:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ed2:	2330      	movs	r3, #48	; 0x30
 8008ed4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009098 <_vfiprintf_r+0x24c>
 8008ed8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008edc:	f04f 0901 	mov.w	r9, #1
 8008ee0:	4623      	mov	r3, r4
 8008ee2:	469a      	mov	sl, r3
 8008ee4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ee8:	b10a      	cbz	r2, 8008eee <_vfiprintf_r+0xa2>
 8008eea:	2a25      	cmp	r2, #37	; 0x25
 8008eec:	d1f9      	bne.n	8008ee2 <_vfiprintf_r+0x96>
 8008eee:	ebba 0b04 	subs.w	fp, sl, r4
 8008ef2:	d00b      	beq.n	8008f0c <_vfiprintf_r+0xc0>
 8008ef4:	465b      	mov	r3, fp
 8008ef6:	4622      	mov	r2, r4
 8008ef8:	4629      	mov	r1, r5
 8008efa:	4630      	mov	r0, r6
 8008efc:	f7ff ff93 	bl	8008e26 <__sfputs_r>
 8008f00:	3001      	adds	r0, #1
 8008f02:	f000 80aa 	beq.w	800905a <_vfiprintf_r+0x20e>
 8008f06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f08:	445a      	add	r2, fp
 8008f0a:	9209      	str	r2, [sp, #36]	; 0x24
 8008f0c:	f89a 3000 	ldrb.w	r3, [sl]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	f000 80a2 	beq.w	800905a <_vfiprintf_r+0x20e>
 8008f16:	2300      	movs	r3, #0
 8008f18:	f04f 32ff 	mov.w	r2, #4294967295
 8008f1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f20:	f10a 0a01 	add.w	sl, sl, #1
 8008f24:	9304      	str	r3, [sp, #16]
 8008f26:	9307      	str	r3, [sp, #28]
 8008f28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f2c:	931a      	str	r3, [sp, #104]	; 0x68
 8008f2e:	4654      	mov	r4, sl
 8008f30:	2205      	movs	r2, #5
 8008f32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f36:	4858      	ldr	r0, [pc, #352]	; (8009098 <_vfiprintf_r+0x24c>)
 8008f38:	f7f7 f952 	bl	80001e0 <memchr>
 8008f3c:	9a04      	ldr	r2, [sp, #16]
 8008f3e:	b9d8      	cbnz	r0, 8008f78 <_vfiprintf_r+0x12c>
 8008f40:	06d1      	lsls	r1, r2, #27
 8008f42:	bf44      	itt	mi
 8008f44:	2320      	movmi	r3, #32
 8008f46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f4a:	0713      	lsls	r3, r2, #28
 8008f4c:	bf44      	itt	mi
 8008f4e:	232b      	movmi	r3, #43	; 0x2b
 8008f50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f54:	f89a 3000 	ldrb.w	r3, [sl]
 8008f58:	2b2a      	cmp	r3, #42	; 0x2a
 8008f5a:	d015      	beq.n	8008f88 <_vfiprintf_r+0x13c>
 8008f5c:	9a07      	ldr	r2, [sp, #28]
 8008f5e:	4654      	mov	r4, sl
 8008f60:	2000      	movs	r0, #0
 8008f62:	f04f 0c0a 	mov.w	ip, #10
 8008f66:	4621      	mov	r1, r4
 8008f68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f6c:	3b30      	subs	r3, #48	; 0x30
 8008f6e:	2b09      	cmp	r3, #9
 8008f70:	d94e      	bls.n	8009010 <_vfiprintf_r+0x1c4>
 8008f72:	b1b0      	cbz	r0, 8008fa2 <_vfiprintf_r+0x156>
 8008f74:	9207      	str	r2, [sp, #28]
 8008f76:	e014      	b.n	8008fa2 <_vfiprintf_r+0x156>
 8008f78:	eba0 0308 	sub.w	r3, r0, r8
 8008f7c:	fa09 f303 	lsl.w	r3, r9, r3
 8008f80:	4313      	orrs	r3, r2
 8008f82:	9304      	str	r3, [sp, #16]
 8008f84:	46a2      	mov	sl, r4
 8008f86:	e7d2      	b.n	8008f2e <_vfiprintf_r+0xe2>
 8008f88:	9b03      	ldr	r3, [sp, #12]
 8008f8a:	1d19      	adds	r1, r3, #4
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	9103      	str	r1, [sp, #12]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	bfbb      	ittet	lt
 8008f94:	425b      	neglt	r3, r3
 8008f96:	f042 0202 	orrlt.w	r2, r2, #2
 8008f9a:	9307      	strge	r3, [sp, #28]
 8008f9c:	9307      	strlt	r3, [sp, #28]
 8008f9e:	bfb8      	it	lt
 8008fa0:	9204      	strlt	r2, [sp, #16]
 8008fa2:	7823      	ldrb	r3, [r4, #0]
 8008fa4:	2b2e      	cmp	r3, #46	; 0x2e
 8008fa6:	d10c      	bne.n	8008fc2 <_vfiprintf_r+0x176>
 8008fa8:	7863      	ldrb	r3, [r4, #1]
 8008faa:	2b2a      	cmp	r3, #42	; 0x2a
 8008fac:	d135      	bne.n	800901a <_vfiprintf_r+0x1ce>
 8008fae:	9b03      	ldr	r3, [sp, #12]
 8008fb0:	1d1a      	adds	r2, r3, #4
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	9203      	str	r2, [sp, #12]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	bfb8      	it	lt
 8008fba:	f04f 33ff 	movlt.w	r3, #4294967295
 8008fbe:	3402      	adds	r4, #2
 8008fc0:	9305      	str	r3, [sp, #20]
 8008fc2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80090a8 <_vfiprintf_r+0x25c>
 8008fc6:	7821      	ldrb	r1, [r4, #0]
 8008fc8:	2203      	movs	r2, #3
 8008fca:	4650      	mov	r0, sl
 8008fcc:	f7f7 f908 	bl	80001e0 <memchr>
 8008fd0:	b140      	cbz	r0, 8008fe4 <_vfiprintf_r+0x198>
 8008fd2:	2340      	movs	r3, #64	; 0x40
 8008fd4:	eba0 000a 	sub.w	r0, r0, sl
 8008fd8:	fa03 f000 	lsl.w	r0, r3, r0
 8008fdc:	9b04      	ldr	r3, [sp, #16]
 8008fde:	4303      	orrs	r3, r0
 8008fe0:	3401      	adds	r4, #1
 8008fe2:	9304      	str	r3, [sp, #16]
 8008fe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fe8:	482c      	ldr	r0, [pc, #176]	; (800909c <_vfiprintf_r+0x250>)
 8008fea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fee:	2206      	movs	r2, #6
 8008ff0:	f7f7 f8f6 	bl	80001e0 <memchr>
 8008ff4:	2800      	cmp	r0, #0
 8008ff6:	d03f      	beq.n	8009078 <_vfiprintf_r+0x22c>
 8008ff8:	4b29      	ldr	r3, [pc, #164]	; (80090a0 <_vfiprintf_r+0x254>)
 8008ffa:	bb1b      	cbnz	r3, 8009044 <_vfiprintf_r+0x1f8>
 8008ffc:	9b03      	ldr	r3, [sp, #12]
 8008ffe:	3307      	adds	r3, #7
 8009000:	f023 0307 	bic.w	r3, r3, #7
 8009004:	3308      	adds	r3, #8
 8009006:	9303      	str	r3, [sp, #12]
 8009008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800900a:	443b      	add	r3, r7
 800900c:	9309      	str	r3, [sp, #36]	; 0x24
 800900e:	e767      	b.n	8008ee0 <_vfiprintf_r+0x94>
 8009010:	fb0c 3202 	mla	r2, ip, r2, r3
 8009014:	460c      	mov	r4, r1
 8009016:	2001      	movs	r0, #1
 8009018:	e7a5      	b.n	8008f66 <_vfiprintf_r+0x11a>
 800901a:	2300      	movs	r3, #0
 800901c:	3401      	adds	r4, #1
 800901e:	9305      	str	r3, [sp, #20]
 8009020:	4619      	mov	r1, r3
 8009022:	f04f 0c0a 	mov.w	ip, #10
 8009026:	4620      	mov	r0, r4
 8009028:	f810 2b01 	ldrb.w	r2, [r0], #1
 800902c:	3a30      	subs	r2, #48	; 0x30
 800902e:	2a09      	cmp	r2, #9
 8009030:	d903      	bls.n	800903a <_vfiprintf_r+0x1ee>
 8009032:	2b00      	cmp	r3, #0
 8009034:	d0c5      	beq.n	8008fc2 <_vfiprintf_r+0x176>
 8009036:	9105      	str	r1, [sp, #20]
 8009038:	e7c3      	b.n	8008fc2 <_vfiprintf_r+0x176>
 800903a:	fb0c 2101 	mla	r1, ip, r1, r2
 800903e:	4604      	mov	r4, r0
 8009040:	2301      	movs	r3, #1
 8009042:	e7f0      	b.n	8009026 <_vfiprintf_r+0x1da>
 8009044:	ab03      	add	r3, sp, #12
 8009046:	9300      	str	r3, [sp, #0]
 8009048:	462a      	mov	r2, r5
 800904a:	4b16      	ldr	r3, [pc, #88]	; (80090a4 <_vfiprintf_r+0x258>)
 800904c:	a904      	add	r1, sp, #16
 800904e:	4630      	mov	r0, r6
 8009050:	f7fd fc0a 	bl	8006868 <_printf_float>
 8009054:	4607      	mov	r7, r0
 8009056:	1c78      	adds	r0, r7, #1
 8009058:	d1d6      	bne.n	8009008 <_vfiprintf_r+0x1bc>
 800905a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800905c:	07d9      	lsls	r1, r3, #31
 800905e:	d405      	bmi.n	800906c <_vfiprintf_r+0x220>
 8009060:	89ab      	ldrh	r3, [r5, #12]
 8009062:	059a      	lsls	r2, r3, #22
 8009064:	d402      	bmi.n	800906c <_vfiprintf_r+0x220>
 8009066:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009068:	f7fd fab2 	bl	80065d0 <__retarget_lock_release_recursive>
 800906c:	89ab      	ldrh	r3, [r5, #12]
 800906e:	065b      	lsls	r3, r3, #25
 8009070:	f53f af12 	bmi.w	8008e98 <_vfiprintf_r+0x4c>
 8009074:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009076:	e711      	b.n	8008e9c <_vfiprintf_r+0x50>
 8009078:	ab03      	add	r3, sp, #12
 800907a:	9300      	str	r3, [sp, #0]
 800907c:	462a      	mov	r2, r5
 800907e:	4b09      	ldr	r3, [pc, #36]	; (80090a4 <_vfiprintf_r+0x258>)
 8009080:	a904      	add	r1, sp, #16
 8009082:	4630      	mov	r0, r6
 8009084:	f7fd fe94 	bl	8006db0 <_printf_i>
 8009088:	e7e4      	b.n	8009054 <_vfiprintf_r+0x208>
 800908a:	bf00      	nop
 800908c:	080093d4 	.word	0x080093d4
 8009090:	080093f4 	.word	0x080093f4
 8009094:	080093b4 	.word	0x080093b4
 8009098:	08009674 	.word	0x08009674
 800909c:	0800967e 	.word	0x0800967e
 80090a0:	08006869 	.word	0x08006869
 80090a4:	08008e27 	.word	0x08008e27
 80090a8:	0800967a 	.word	0x0800967a

080090ac <_read_r>:
 80090ac:	b538      	push	{r3, r4, r5, lr}
 80090ae:	4d07      	ldr	r5, [pc, #28]	; (80090cc <_read_r+0x20>)
 80090b0:	4604      	mov	r4, r0
 80090b2:	4608      	mov	r0, r1
 80090b4:	4611      	mov	r1, r2
 80090b6:	2200      	movs	r2, #0
 80090b8:	602a      	str	r2, [r5, #0]
 80090ba:	461a      	mov	r2, r3
 80090bc:	f7f8 fbca 	bl	8001854 <_read>
 80090c0:	1c43      	adds	r3, r0, #1
 80090c2:	d102      	bne.n	80090ca <_read_r+0x1e>
 80090c4:	682b      	ldr	r3, [r5, #0]
 80090c6:	b103      	cbz	r3, 80090ca <_read_r+0x1e>
 80090c8:	6023      	str	r3, [r4, #0]
 80090ca:	bd38      	pop	{r3, r4, r5, pc}
 80090cc:	20001318 	.word	0x20001318

080090d0 <abort>:
 80090d0:	b508      	push	{r3, lr}
 80090d2:	2006      	movs	r0, #6
 80090d4:	f000 f8aa 	bl	800922c <raise>
 80090d8:	2001      	movs	r0, #1
 80090da:	f7f8 fbb1 	bl	8001840 <_exit>
	...

080090e0 <_fstat_r>:
 80090e0:	b538      	push	{r3, r4, r5, lr}
 80090e2:	4d07      	ldr	r5, [pc, #28]	; (8009100 <_fstat_r+0x20>)
 80090e4:	2300      	movs	r3, #0
 80090e6:	4604      	mov	r4, r0
 80090e8:	4608      	mov	r0, r1
 80090ea:	4611      	mov	r1, r2
 80090ec:	602b      	str	r3, [r5, #0]
 80090ee:	f7f8 fbf6 	bl	80018de <_fstat>
 80090f2:	1c43      	adds	r3, r0, #1
 80090f4:	d102      	bne.n	80090fc <_fstat_r+0x1c>
 80090f6:	682b      	ldr	r3, [r5, #0]
 80090f8:	b103      	cbz	r3, 80090fc <_fstat_r+0x1c>
 80090fa:	6023      	str	r3, [r4, #0]
 80090fc:	bd38      	pop	{r3, r4, r5, pc}
 80090fe:	bf00      	nop
 8009100:	20001318 	.word	0x20001318

08009104 <_isatty_r>:
 8009104:	b538      	push	{r3, r4, r5, lr}
 8009106:	4d06      	ldr	r5, [pc, #24]	; (8009120 <_isatty_r+0x1c>)
 8009108:	2300      	movs	r3, #0
 800910a:	4604      	mov	r4, r0
 800910c:	4608      	mov	r0, r1
 800910e:	602b      	str	r3, [r5, #0]
 8009110:	f7f8 fbf5 	bl	80018fe <_isatty>
 8009114:	1c43      	adds	r3, r0, #1
 8009116:	d102      	bne.n	800911e <_isatty_r+0x1a>
 8009118:	682b      	ldr	r3, [r5, #0]
 800911a:	b103      	cbz	r3, 800911e <_isatty_r+0x1a>
 800911c:	6023      	str	r3, [r4, #0]
 800911e:	bd38      	pop	{r3, r4, r5, pc}
 8009120:	20001318 	.word	0x20001318

08009124 <__ascii_mbtowc>:
 8009124:	b082      	sub	sp, #8
 8009126:	b901      	cbnz	r1, 800912a <__ascii_mbtowc+0x6>
 8009128:	a901      	add	r1, sp, #4
 800912a:	b142      	cbz	r2, 800913e <__ascii_mbtowc+0x1a>
 800912c:	b14b      	cbz	r3, 8009142 <__ascii_mbtowc+0x1e>
 800912e:	7813      	ldrb	r3, [r2, #0]
 8009130:	600b      	str	r3, [r1, #0]
 8009132:	7812      	ldrb	r2, [r2, #0]
 8009134:	1e10      	subs	r0, r2, #0
 8009136:	bf18      	it	ne
 8009138:	2001      	movne	r0, #1
 800913a:	b002      	add	sp, #8
 800913c:	4770      	bx	lr
 800913e:	4610      	mov	r0, r2
 8009140:	e7fb      	b.n	800913a <__ascii_mbtowc+0x16>
 8009142:	f06f 0001 	mvn.w	r0, #1
 8009146:	e7f8      	b.n	800913a <__ascii_mbtowc+0x16>

08009148 <memmove>:
 8009148:	4288      	cmp	r0, r1
 800914a:	b510      	push	{r4, lr}
 800914c:	eb01 0402 	add.w	r4, r1, r2
 8009150:	d902      	bls.n	8009158 <memmove+0x10>
 8009152:	4284      	cmp	r4, r0
 8009154:	4623      	mov	r3, r4
 8009156:	d807      	bhi.n	8009168 <memmove+0x20>
 8009158:	1e43      	subs	r3, r0, #1
 800915a:	42a1      	cmp	r1, r4
 800915c:	d008      	beq.n	8009170 <memmove+0x28>
 800915e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009162:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009166:	e7f8      	b.n	800915a <memmove+0x12>
 8009168:	4402      	add	r2, r0
 800916a:	4601      	mov	r1, r0
 800916c:	428a      	cmp	r2, r1
 800916e:	d100      	bne.n	8009172 <memmove+0x2a>
 8009170:	bd10      	pop	{r4, pc}
 8009172:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009176:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800917a:	e7f7      	b.n	800916c <memmove+0x24>

0800917c <_realloc_r>:
 800917c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009180:	4680      	mov	r8, r0
 8009182:	4614      	mov	r4, r2
 8009184:	460e      	mov	r6, r1
 8009186:	b921      	cbnz	r1, 8009192 <_realloc_r+0x16>
 8009188:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800918c:	4611      	mov	r1, r2
 800918e:	f7fd ba57 	b.w	8006640 <_malloc_r>
 8009192:	b92a      	cbnz	r2, 80091a0 <_realloc_r+0x24>
 8009194:	f7ff fc88 	bl	8008aa8 <_free_r>
 8009198:	4625      	mov	r5, r4
 800919a:	4628      	mov	r0, r5
 800919c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091a0:	f000 f86d 	bl	800927e <_malloc_usable_size_r>
 80091a4:	4284      	cmp	r4, r0
 80091a6:	4607      	mov	r7, r0
 80091a8:	d802      	bhi.n	80091b0 <_realloc_r+0x34>
 80091aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80091ae:	d812      	bhi.n	80091d6 <_realloc_r+0x5a>
 80091b0:	4621      	mov	r1, r4
 80091b2:	4640      	mov	r0, r8
 80091b4:	f7fd fa44 	bl	8006640 <_malloc_r>
 80091b8:	4605      	mov	r5, r0
 80091ba:	2800      	cmp	r0, #0
 80091bc:	d0ed      	beq.n	800919a <_realloc_r+0x1e>
 80091be:	42bc      	cmp	r4, r7
 80091c0:	4622      	mov	r2, r4
 80091c2:	4631      	mov	r1, r6
 80091c4:	bf28      	it	cs
 80091c6:	463a      	movcs	r2, r7
 80091c8:	f7fd fa03 	bl	80065d2 <memcpy>
 80091cc:	4631      	mov	r1, r6
 80091ce:	4640      	mov	r0, r8
 80091d0:	f7ff fc6a 	bl	8008aa8 <_free_r>
 80091d4:	e7e1      	b.n	800919a <_realloc_r+0x1e>
 80091d6:	4635      	mov	r5, r6
 80091d8:	e7df      	b.n	800919a <_realloc_r+0x1e>

080091da <_raise_r>:
 80091da:	291f      	cmp	r1, #31
 80091dc:	b538      	push	{r3, r4, r5, lr}
 80091de:	4604      	mov	r4, r0
 80091e0:	460d      	mov	r5, r1
 80091e2:	d904      	bls.n	80091ee <_raise_r+0x14>
 80091e4:	2316      	movs	r3, #22
 80091e6:	6003      	str	r3, [r0, #0]
 80091e8:	f04f 30ff 	mov.w	r0, #4294967295
 80091ec:	bd38      	pop	{r3, r4, r5, pc}
 80091ee:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80091f0:	b112      	cbz	r2, 80091f8 <_raise_r+0x1e>
 80091f2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80091f6:	b94b      	cbnz	r3, 800920c <_raise_r+0x32>
 80091f8:	4620      	mov	r0, r4
 80091fa:	f000 f831 	bl	8009260 <_getpid_r>
 80091fe:	462a      	mov	r2, r5
 8009200:	4601      	mov	r1, r0
 8009202:	4620      	mov	r0, r4
 8009204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009208:	f000 b818 	b.w	800923c <_kill_r>
 800920c:	2b01      	cmp	r3, #1
 800920e:	d00a      	beq.n	8009226 <_raise_r+0x4c>
 8009210:	1c59      	adds	r1, r3, #1
 8009212:	d103      	bne.n	800921c <_raise_r+0x42>
 8009214:	2316      	movs	r3, #22
 8009216:	6003      	str	r3, [r0, #0]
 8009218:	2001      	movs	r0, #1
 800921a:	e7e7      	b.n	80091ec <_raise_r+0x12>
 800921c:	2400      	movs	r4, #0
 800921e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009222:	4628      	mov	r0, r5
 8009224:	4798      	blx	r3
 8009226:	2000      	movs	r0, #0
 8009228:	e7e0      	b.n	80091ec <_raise_r+0x12>
	...

0800922c <raise>:
 800922c:	4b02      	ldr	r3, [pc, #8]	; (8009238 <raise+0xc>)
 800922e:	4601      	mov	r1, r0
 8009230:	6818      	ldr	r0, [r3, #0]
 8009232:	f7ff bfd2 	b.w	80091da <_raise_r>
 8009236:	bf00      	nop
 8009238:	20000010 	.word	0x20000010

0800923c <_kill_r>:
 800923c:	b538      	push	{r3, r4, r5, lr}
 800923e:	4d07      	ldr	r5, [pc, #28]	; (800925c <_kill_r+0x20>)
 8009240:	2300      	movs	r3, #0
 8009242:	4604      	mov	r4, r0
 8009244:	4608      	mov	r0, r1
 8009246:	4611      	mov	r1, r2
 8009248:	602b      	str	r3, [r5, #0]
 800924a:	f7f8 fae9 	bl	8001820 <_kill>
 800924e:	1c43      	adds	r3, r0, #1
 8009250:	d102      	bne.n	8009258 <_kill_r+0x1c>
 8009252:	682b      	ldr	r3, [r5, #0]
 8009254:	b103      	cbz	r3, 8009258 <_kill_r+0x1c>
 8009256:	6023      	str	r3, [r4, #0]
 8009258:	bd38      	pop	{r3, r4, r5, pc}
 800925a:	bf00      	nop
 800925c:	20001318 	.word	0x20001318

08009260 <_getpid_r>:
 8009260:	f7f8 bad6 	b.w	8001810 <_getpid>

08009264 <__ascii_wctomb>:
 8009264:	b149      	cbz	r1, 800927a <__ascii_wctomb+0x16>
 8009266:	2aff      	cmp	r2, #255	; 0xff
 8009268:	bf85      	ittet	hi
 800926a:	238a      	movhi	r3, #138	; 0x8a
 800926c:	6003      	strhi	r3, [r0, #0]
 800926e:	700a      	strbls	r2, [r1, #0]
 8009270:	f04f 30ff 	movhi.w	r0, #4294967295
 8009274:	bf98      	it	ls
 8009276:	2001      	movls	r0, #1
 8009278:	4770      	bx	lr
 800927a:	4608      	mov	r0, r1
 800927c:	4770      	bx	lr

0800927e <_malloc_usable_size_r>:
 800927e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009282:	1f18      	subs	r0, r3, #4
 8009284:	2b00      	cmp	r3, #0
 8009286:	bfbc      	itt	lt
 8009288:	580b      	ldrlt	r3, [r1, r0]
 800928a:	18c0      	addlt	r0, r0, r3
 800928c:	4770      	bx	lr
	...

08009290 <_init>:
 8009290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009292:	bf00      	nop
 8009294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009296:	bc08      	pop	{r3}
 8009298:	469e      	mov	lr, r3
 800929a:	4770      	bx	lr

0800929c <_fini>:
 800929c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800929e:	bf00      	nop
 80092a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092a2:	bc08      	pop	{r3}
 80092a4:	469e      	mov	lr, r3
 80092a6:	4770      	bx	lr
