
NoWayHome.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aefc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  0800b090  0800b090  0001b090  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b578  0800b578  00020224  2**0
                  CONTENTS
  4 .ARM          00000008  0800b578  0800b578  0001b578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b580  0800b580  00020224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b580  0800b580  0001b580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b584  0800b584  0001b584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  0800b588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001194  20000224  0800b7ac  00020224  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013b8  0800b7ac  000213b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020248  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043cb  00000000  00000000  0004049c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ad8  00000000  00000000  00044868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001900  00000000  00000000  00046340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b433  00000000  00000000  00047c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020180  00000000  00000000  00073073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101eea  00000000  00000000  000931f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001950dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007fbc  00000000  00000000  00195130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000224 	.word	0x20000224
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b074 	.word	0x0800b074

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000228 	.word	0x20000228
 80001cc:	0800b074 	.word	0x0800b074

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ebc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	4a06      	ldr	r2, [pc, #24]	; (8000edc <vApplicationGetIdleTaskMemory+0x30>)
 8000ec2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2280      	movs	r2, #128	; 0x80
 8000ec8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000eca:	bf00      	nop
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000240 	.word	0x20000240
 8000edc:	200002f4 	.word	0x200002f4

08000ee0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000ee8:	1d39      	adds	r1, r7, #4
 8000eea:	f04f 33ff 	mov.w	r3, #4294967295
 8000eee:	2201      	movs	r2, #1
 8000ef0:	4803      	ldr	r0, [pc, #12]	; (8000f00 <__io_putchar+0x20>)
 8000ef2:	f004 fa69 	bl	80053c8 <HAL_UART_Transmit>
  return ch;
 8000ef6:	687b      	ldr	r3, [r7, #4]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000548 	.word	0x20000548

08000f04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f04:	b5b0      	push	{r4, r5, r7, lr}
 8000f06:	b09c      	sub	sp, #112	; 0x70
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f0a:	f001 f993 	bl	8002234 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f0e:	f000 f86f 	bl	8000ff0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f12:	f000 f94b 	bl	80011ac <MX_GPIO_Init>
  MX_I2C2_Init();
 8000f16:	f000 f8c1 	bl	800109c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000f1a:	f000 f8fd 	bl	8001118 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	BSP_ACCELERO_Init();
 8000f1e:	f000 ff3d 	bl	8001d9c <BSP_ACCELERO_Init>
	BSP_TSENSOR_Init();
 8000f22:	f000 ff91 	bl	8001e48 <BSP_TSENSOR_Init>
  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
	/* add mutexes, ... */
	SimpleMutex = xSemaphoreCreateMutex();
 8000f26:	2001      	movs	r0, #1
 8000f28:	f005 f943 	bl	80061b2 <xQueueCreateMutex>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	4a27      	ldr	r2, [pc, #156]	; (8000fcc <main+0xc8>)
 8000f30:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000f32:	4b27      	ldr	r3, [pc, #156]	; (8000fd0 <main+0xcc>)
 8000f34:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000f38:	461d      	mov	r5, r3
 8000f3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000f46:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f004 ff55 	bl	8005dfc <osThreadCreate>
 8000f52:	4603      	mov	r3, r0
 8000f54:	4a1f      	ldr	r2, [pc, #124]	; (8000fd4 <main+0xd0>)
 8000f56:	6013      	str	r3, [r2, #0]

  /* definition and creation of BlinkLed */
  osThreadDef(BlinkLed, StartBlinkLed, osPriorityNormal, 0, 128);
 8000f58:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <main+0xd4>)
 8000f5a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000f5e:	461d      	mov	r5, r3
 8000f60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f64:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BlinkLedHandle = osThreadCreate(osThread(BlinkLed), NULL);
 8000f6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f004 ff42 	bl	8005dfc <osThreadCreate>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	4a18      	ldr	r2, [pc, #96]	; (8000fdc <main+0xd8>)
 8000f7c:	6013      	str	r3, [r2, #0]

  /* definition and creation of RnT_Sensor */
  osThreadDef(RnT_Sensor, Start_RnT_Sensor, osPriorityBelowNormal, 0, 128);
 8000f7e:	4b18      	ldr	r3, [pc, #96]	; (8000fe0 <main+0xdc>)
 8000f80:	f107 041c 	add.w	r4, r7, #28
 8000f84:	461d      	mov	r5, r3
 8000f86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RnT_SensorHandle = osThreadCreate(osThread(RnT_Sensor), NULL);
 8000f92:	f107 031c 	add.w	r3, r7, #28
 8000f96:	2100      	movs	r1, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f004 ff2f 	bl	8005dfc <osThreadCreate>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	4a10      	ldr	r2, [pc, #64]	; (8000fe4 <main+0xe0>)
 8000fa2:	6013      	str	r3, [r2, #0]

  /* definition and creation of Int_But */
  osThreadDef(Int_But, StartInt_But, osPriorityAboveNormal, 0, 128);
 8000fa4:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <main+0xe4>)
 8000fa6:	463c      	mov	r4, r7
 8000fa8:	461d      	mov	r5, r3
 8000faa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Int_ButHandle = osThreadCreate(osThread(Int_But), NULL);
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f004 ff1e 	bl	8005dfc <osThreadCreate>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <main+0xe8>)
 8000fc4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000fc6:	f004 ff12 	bl	8005dee <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000fca:	e7fe      	b.n	8000fca <main+0xc6>
 8000fcc:	200005e8 	.word	0x200005e8
 8000fd0:	0800b0bc 	.word	0x0800b0bc
 8000fd4:	200005cc 	.word	0x200005cc
 8000fd8:	0800b0d8 	.word	0x0800b0d8
 8000fdc:	200005d0 	.word	0x200005d0
 8000fe0:	0800b0f4 	.word	0x0800b0f4
 8000fe4:	200005d4 	.word	0x200005d4
 8000fe8:	0800b110 	.word	0x0800b110
 8000fec:	200005d8 	.word	0x200005d8

08000ff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b096      	sub	sp, #88	; 0x58
 8000ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	2244      	movs	r2, #68	; 0x44
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f007 fb9d 	bl	800873e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001004:	463b      	mov	r3, r7
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
 8001010:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001012:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001016:	f002 fb63 	bl	80036e0 <HAL_PWREx_ControlVoltageScaling>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001020:	f000 fa60 	bl	80014e4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001024:	f002 fb3e 	bl	80036a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001028:	4b1b      	ldr	r3, [pc, #108]	; (8001098 <SystemClock_Config+0xa8>)
 800102a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800102e:	4a1a      	ldr	r2, [pc, #104]	; (8001098 <SystemClock_Config+0xa8>)
 8001030:	f023 0318 	bic.w	r3, r3, #24
 8001034:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001038:	2314      	movs	r3, #20
 800103a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800103c:	2301      	movs	r3, #1
 800103e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001040:	2301      	movs	r3, #1
 8001042:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001048:	2360      	movs	r3, #96	; 0x60
 800104a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800104c:	2300      	movs	r3, #0
 800104e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	4618      	mov	r0, r3
 8001056:	f002 fb99 	bl	800378c <HAL_RCC_OscConfig>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001060:	f000 fa40 	bl	80014e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001064:	230f      	movs	r3, #15
 8001066:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001068:	2300      	movs	r3, #0
 800106a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800106c:	2300      	movs	r3, #0
 800106e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001070:	2300      	movs	r3, #0
 8001072:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001078:	463b      	mov	r3, r7
 800107a:	2100      	movs	r1, #0
 800107c:	4618      	mov	r0, r3
 800107e:	f002 ff61 	bl	8003f44 <HAL_RCC_ClockConfig>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001088:	f000 fa2c 	bl	80014e4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800108c:	f003 fc9a 	bl	80049c4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001090:	bf00      	nop
 8001092:	3758      	adds	r7, #88	; 0x58
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40021000 	.word	0x40021000

0800109c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010a0:	4b1b      	ldr	r3, [pc, #108]	; (8001110 <MX_I2C2_Init+0x74>)
 80010a2:	4a1c      	ldr	r2, [pc, #112]	; (8001114 <MX_I2C2_Init+0x78>)
 80010a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80010a6:	4b1a      	ldr	r3, [pc, #104]	; (8001110 <MX_I2C2_Init+0x74>)
 80010a8:	f640 6214 	movw	r2, #3604	; 0xe14
 80010ac:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80010ae:	4b18      	ldr	r3, [pc, #96]	; (8001110 <MX_I2C2_Init+0x74>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010b4:	4b16      	ldr	r3, [pc, #88]	; (8001110 <MX_I2C2_Init+0x74>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <MX_I2C2_Init+0x74>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80010c0:	4b13      	ldr	r3, [pc, #76]	; (8001110 <MX_I2C2_Init+0x74>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010c6:	4b12      	ldr	r3, [pc, #72]	; (8001110 <MX_I2C2_Init+0x74>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010cc:	4b10      	ldr	r3, [pc, #64]	; (8001110 <MX_I2C2_Init+0x74>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010d2:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <MX_I2C2_Init+0x74>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80010d8:	480d      	ldr	r0, [pc, #52]	; (8001110 <MX_I2C2_Init+0x74>)
 80010da:	f001 fcb8 	bl	8002a4e <HAL_I2C_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80010e4:	f000 f9fe 	bl	80014e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010e8:	2100      	movs	r1, #0
 80010ea:	4809      	ldr	r0, [pc, #36]	; (8001110 <MX_I2C2_Init+0x74>)
 80010ec:	f002 fa42 	bl	8003574 <HAL_I2CEx_ConfigAnalogFilter>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80010f6:	f000 f9f5 	bl	80014e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80010fa:	2100      	movs	r1, #0
 80010fc:	4804      	ldr	r0, [pc, #16]	; (8001110 <MX_I2C2_Init+0x74>)
 80010fe:	f002 fa84 	bl	800360a <HAL_I2CEx_ConfigDigitalFilter>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001108:	f000 f9ec 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	200004f4 	.word	0x200004f4
 8001114:	40005800 	.word	0x40005800

08001118 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */
//    __HAL_RCC_GPIOB_CLK_ENABLE();
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800112c:	2307      	movs	r3, #7
 800112e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001130:	23c0      	movs	r3, #192	; 0xc0
 8001132:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001134:	2302      	movs	r3, #2
 8001136:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113c:	2303      	movs	r3, #3
 800113e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	4619      	mov	r1, r3
 8001144:	4816      	ldr	r0, [pc, #88]	; (80011a0 <MX_USART1_UART_Init+0x88>)
 8001146:	f001 f98f 	bl	8002468 <HAL_GPIO_Init>
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800114a:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <MX_USART1_UART_Init+0x8c>)
 800114c:	4a16      	ldr	r2, [pc, #88]	; (80011a8 <MX_USART1_UART_Init+0x90>)
 800114e:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001150:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <MX_USART1_UART_Init+0x8c>)
 8001152:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001156:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <MX_USART1_UART_Init+0x8c>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <MX_USART1_UART_Init+0x8c>)
 8001160:	2200      	movs	r2, #0
 8001162:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001164:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <MX_USART1_UART_Init+0x8c>)
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <MX_USART1_UART_Init+0x8c>)
 800116c:	220c      	movs	r2, #12
 800116e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <MX_USART1_UART_Init+0x8c>)
 8001172:	2200      	movs	r2, #0
 8001174:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001176:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <MX_USART1_UART_Init+0x8c>)
 8001178:	2200      	movs	r2, #0
 800117a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800117c:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <MX_USART1_UART_Init+0x8c>)
 800117e:	2200      	movs	r2, #0
 8001180:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001182:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <MX_USART1_UART_Init+0x8c>)
 8001184:	2200      	movs	r2, #0
 8001186:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001188:	4806      	ldr	r0, [pc, #24]	; (80011a4 <MX_USART1_UART_Init+0x8c>)
 800118a:	f004 f8cf 	bl	800532c <HAL_UART_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8001194:	f000 f9a6 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001198:	bf00      	nop
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	48000400 	.word	0x48000400
 80011a4:	20000548 	.word	0x20000548
 80011a8:	40013800 	.word	0x40013800

080011ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	; 0x28
 80011b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
 80011c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c2:	4b2f      	ldr	r3, [pc, #188]	; (8001280 <MX_GPIO_Init+0xd4>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c6:	4a2e      	ldr	r2, [pc, #184]	; (8001280 <MX_GPIO_Init+0xd4>)
 80011c8:	f043 0304 	orr.w	r3, r3, #4
 80011cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ce:	4b2c      	ldr	r3, [pc, #176]	; (8001280 <MX_GPIO_Init+0xd4>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d2:	f003 0304 	and.w	r3, r3, #4
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011da:	4b29      	ldr	r3, [pc, #164]	; (8001280 <MX_GPIO_Init+0xd4>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011de:	4a28      	ldr	r2, [pc, #160]	; (8001280 <MX_GPIO_Init+0xd4>)
 80011e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e6:	4b26      	ldr	r3, [pc, #152]	; (8001280 <MX_GPIO_Init+0xd4>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f2:	4b23      	ldr	r3, [pc, #140]	; (8001280 <MX_GPIO_Init+0xd4>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f6:	4a22      	ldr	r2, [pc, #136]	; (8001280 <MX_GPIO_Init+0xd4>)
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fe:	4b20      	ldr	r3, [pc, #128]	; (8001280 <MX_GPIO_Init+0xd4>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800120a:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <MX_GPIO_Init+0xd4>)
 800120c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120e:	4a1c      	ldr	r2, [pc, #112]	; (8001280 <MX_GPIO_Init+0xd4>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001216:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <MX_GPIO_Init+0xd4>)
 8001218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001228:	4816      	ldr	r0, [pc, #88]	; (8001284 <MX_GPIO_Init+0xd8>)
 800122a:	f001 fbbb 	bl	80029a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800122e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001234:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001238:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	4619      	mov	r1, r3
 8001244:	4810      	ldr	r0, [pc, #64]	; (8001288 <MX_GPIO_Init+0xdc>)
 8001246:	f001 f90f 	bl	8002468 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800124a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800124e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001250:	2301      	movs	r3, #1
 8001252:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001258:	2300      	movs	r3, #0
 800125a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	4619      	mov	r1, r3
 8001262:	4808      	ldr	r0, [pc, #32]	; (8001284 <MX_GPIO_Init+0xd8>)
 8001264:	f001 f900 	bl	8002468 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001268:	2200      	movs	r2, #0
 800126a:	2105      	movs	r1, #5
 800126c:	2028      	movs	r0, #40	; 0x28
 800126e:	f001 f8d1 	bl	8002414 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001272:	2028      	movs	r0, #40	; 0x28
 8001274:	f001 f8ea 	bl	800244c <HAL_NVIC_EnableIRQ>

}
 8001278:	bf00      	nop
 800127a:	3728      	adds	r7, #40	; 0x28
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40021000 	.word	0x40021000
 8001284:	48000400 	.word	0x48000400
 8001288:	48000800 	.word	0x48000800

0800128c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	const portTickType freq_button_sleep = 1000;
 8001294:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001298:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{
		if(button_press > 0)
 800129a:	4b08      	ldr	r3, [pc, #32]	; (80012bc <StartDefaultTask+0x30>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	dd07      	ble.n	80012b2 <StartDefaultTask+0x26>
		{
			vTaskDelay(freq_button_sleep);
 80012a2:	68f8      	ldr	r0, [r7, #12]
 80012a4:	f005 fcd2 	bl	8006c4c <vTaskDelay>
			vTaskResume(Int_ButHandle);
 80012a8:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <StartDefaultTask+0x34>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f005 fdc5 	bl	8006e3c <vTaskResume>
		}
		vTaskSuspend(NULL);
 80012b2:	2000      	movs	r0, #0
 80012b4:	f005 fcfe 	bl	8006cb4 <vTaskSuspend>
		if(button_press > 0)
 80012b8:	e7ef      	b.n	800129a <StartDefaultTask+0xe>
 80012ba:	bf00      	nop
 80012bc:	200005e4 	.word	0x200005e4
 80012c0:	200005d8 	.word	0x200005d8

080012c4 <StartBlinkLed>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlinkLed */
void StartBlinkLed(void const * argument)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkLed */
	portTickType lastRun;
	const portTickType frequency_battle = 500;
 80012cc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012d0:	617b      	str	r3, [r7, #20]
	const portTickType frequency_warning = 166;
 80012d2:	23a6      	movs	r3, #166	; 0xa6
 80012d4:	613b      	str	r3, [r7, #16]
	lastRun = xTaskGetTickCount();
 80012d6:	f005 ff95 	bl	8007204 <xTaskGetTickCount>
 80012da:	4603      	mov	r3, r0
 80012dc:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{
		if(mode == 1 && state == 0)
 80012de:	4b1c      	ldr	r3, [pc, #112]	; (8001350 <StartBlinkLed+0x8c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d11d      	bne.n	8001322 <StartBlinkLed+0x5e>
 80012e6:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <StartBlinkLed+0x90>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d119      	bne.n	8001322 <StartBlinkLed+0x5e>
		{
			xSemaphoreTake(SimpleMutex, portMAX_DELAY);
 80012ee:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <StartBlinkLed+0x94>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f04f 31ff 	mov.w	r1, #4294967295
 80012f6:	4618      	mov	r0, r3
 80012f8:	f005 f872 	bl	80063e0 <xQueueSemaphoreTake>
			HAL_GPIO_TogglePin(GPIOB, LED_Pin);
 80012fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001300:	4816      	ldr	r0, [pc, #88]	; (800135c <StartBlinkLed+0x98>)
 8001302:	f001 fb67 	bl	80029d4 <HAL_GPIO_TogglePin>
			xSemaphoreGive(SimpleMutex);
 8001306:	4b14      	ldr	r3, [pc, #80]	; (8001358 <StartBlinkLed+0x94>)
 8001308:	6818      	ldr	r0, [r3, #0]
 800130a:	2300      	movs	r3, #0
 800130c:	2200      	movs	r2, #0
 800130e:	2100      	movs	r1, #0
 8001310:	f004 ff68 	bl	80061e4 <xQueueGenericSend>
			vTaskDelayUntil(&lastRun,frequency_battle);
 8001314:	f107 030c 	add.w	r3, r7, #12
 8001318:	6979      	ldr	r1, [r7, #20]
 800131a:	4618      	mov	r0, r3
 800131c:	f005 fc18 	bl	8006b50 <vTaskDelayUntil>
 8001320:	e015      	b.n	800134e <StartBlinkLed+0x8a>
		}
		else if(state == 1)
 8001322:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <StartBlinkLed+0x90>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d10b      	bne.n	8001342 <StartBlinkLed+0x7e>
		{
//			xSemaphoreTake(SimpleMutex, portMAX_DELAY);
			HAL_GPIO_TogglePin(GPIOB, LED_Pin);
 800132a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800132e:	480b      	ldr	r0, [pc, #44]	; (800135c <StartBlinkLed+0x98>)
 8001330:	f001 fb50 	bl	80029d4 <HAL_GPIO_TogglePin>

			vTaskDelayUntil(&lastRun,frequency_warning);
 8001334:	f107 030c 	add.w	r3, r7, #12
 8001338:	6939      	ldr	r1, [r7, #16]
 800133a:	4618      	mov	r0, r3
 800133c:	f005 fc08 	bl	8006b50 <vTaskDelayUntil>
 8001340:	e7cd      	b.n	80012de <StartBlinkLed+0x1a>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_SET);
 8001342:	2201      	movs	r2, #1
 8001344:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001348:	4804      	ldr	r0, [pc, #16]	; (800135c <StartBlinkLed+0x98>)
 800134a:	f001 fb2b 	bl	80029a4 <HAL_GPIO_WritePin>
		if(mode == 1 && state == 0)
 800134e:	e7c6      	b.n	80012de <StartBlinkLed+0x1a>
 8001350:	200005dc 	.word	0x200005dc
 8001354:	200005e0 	.word	0x200005e0
 8001358:	200005e8 	.word	0x200005e8
 800135c:	48000400 	.word	0x48000400

08001360 <Start_RnT_Sensor>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_RnT_Sensor */
void Start_RnT_Sensor(void const * argument)
{
 8001360:	b5b0      	push	{r4, r5, r7, lr}
 8001362:	b08a      	sub	sp, #40	; 0x28
 8001364:	af02      	add	r7, sp, #8
 8001366:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_RnT_Sensor */
	portTickType lastRun;
	const portTickType frequency_transmit = 4000;
 8001368:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800136c:	61fb      	str	r3, [r7, #28]
	float accel_data[3];
	float temp_data[1];
	/* Infinite loop */
	for(;;)
	{
		if(mode == 0 && state == 0)
 800136e:	4b22      	ldr	r3, [pc, #136]	; (80013f8 <Start_RnT_Sensor+0x98>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d103      	bne.n	800137e <Start_RnT_Sensor+0x1e>
 8001376:	4b21      	ldr	r3, [pc, #132]	; (80013fc <Start_RnT_Sensor+0x9c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d039      	beq.n	80013f2 <Start_RnT_Sensor+0x92>
		{
			continue;
		}
		else if(mode == 1 && state == 0)
 800137e:	4b1e      	ldr	r3, [pc, #120]	; (80013f8 <Start_RnT_Sensor+0x98>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d1f3      	bne.n	800136e <Start_RnT_Sensor+0xe>
 8001386:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <Start_RnT_Sensor+0x9c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1ef      	bne.n	800136e <Start_RnT_Sensor+0xe>
		{
			Read_Acc(accel_data);
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	4618      	mov	r0, r3
 8001394:	f000 f8ac 	bl	80014f0 <Read_Acc>
			Read_Temp(temp_data);
 8001398:	f107 0308 	add.w	r3, r7, #8
 800139c:	4618      	mov	r0, r3
 800139e:	f000 f8e5 	bl	800156c <Read_Temp>
//			accel_data[2] = 0;
//			temp_data[0] = 0;

			xSemaphoreTake(SimpleMutex, portMAX_DELAY);
 80013a2:	4b17      	ldr	r3, [pc, #92]	; (8001400 <Start_RnT_Sensor+0xa0>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f04f 31ff 	mov.w	r1, #4294967295
 80013aa:	4618      	mov	r0, r3
 80013ac:	f005 f818 	bl	80063e0 <xQueueSemaphoreTake>
			printf("T:%2.2f (°C),A:%2.2f (m/s^2)\r\n", temp_data[0], accel_data[2]);
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff f8c8 	bl	8000548 <__aeabi_f2d>
 80013b8:	4604      	mov	r4, r0
 80013ba:	460d      	mov	r5, r1
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff f8c2 	bl	8000548 <__aeabi_f2d>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	e9cd 2300 	strd	r2, r3, [sp]
 80013cc:	4622      	mov	r2, r4
 80013ce:	462b      	mov	r3, r5
 80013d0:	480c      	ldr	r0, [pc, #48]	; (8001404 <Start_RnT_Sensor+0xa4>)
 80013d2:	f007 febb 	bl	800914c <iprintf>
			xSemaphoreGive(SimpleMutex);
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <Start_RnT_Sensor+0xa0>)
 80013d8:	6818      	ldr	r0, [r3, #0]
 80013da:	2300      	movs	r3, #0
 80013dc:	2200      	movs	r2, #0
 80013de:	2100      	movs	r1, #0
 80013e0:	f004 ff00 	bl	80061e4 <xQueueGenericSend>
			vTaskDelayUntil(&lastRun,frequency_transmit);
 80013e4:	f107 0318 	add.w	r3, r7, #24
 80013e8:	69f9      	ldr	r1, [r7, #28]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f005 fbb0 	bl	8006b50 <vTaskDelayUntil>
 80013f0:	e7bd      	b.n	800136e <Start_RnT_Sensor+0xe>
			continue;
 80013f2:	bf00      	nop
		if(mode == 0 && state == 0)
 80013f4:	e7bb      	b.n	800136e <Start_RnT_Sensor+0xe>
 80013f6:	bf00      	nop
 80013f8:	200005dc 	.word	0x200005dc
 80013fc:	200005e0 	.word	0x200005e0
 8001400:	200005e8 	.word	0x200005e8
 8001404:	0800b12c 	.word	0x0800b12c

08001408 <StartInt_But>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartInt_But */
void StartInt_But(void const * argument)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartInt_But */
	portTickType lastRun;
	lastRun = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{
		vTaskSuspend(NULL);
 8001414:	2000      	movs	r0, #0
 8001416:	f005 fc4d 	bl	8006cb4 <vTaskSuspend>
		if((xTaskGetTickCount() - lastRun) > 750)
 800141a:	f005 fef3 	bl	8007204 <xTaskGetTickCount>
 800141e:	4602      	mov	r2, r0
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001428:	4293      	cmp	r3, r2
 800142a:	d93b      	bls.n	80014a4 <StartInt_But+0x9c>
		{
			if(button_press == 0)
 800142c:	4b20      	ldr	r3, [pc, #128]	; (80014b0 <StartInt_But+0xa8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d10b      	bne.n	800144c <StartInt_But+0x44>
			{
				button_press = 1;
 8001434:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <StartInt_But+0xa8>)
 8001436:	2201      	movs	r2, #1
 8001438:	601a      	str	r2, [r3, #0]
				lastRun = xTaskGetTickCount();
 800143a:	f005 fee3 	bl	8007204 <xTaskGetTickCount>
 800143e:	60f8      	str	r0, [r7, #12]
				vTaskResume(defaultTaskHandle);
 8001440:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <StartInt_But+0xac>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f005 fcf9 	bl	8006e3c <vTaskResume>
 800144a:	e7e3      	b.n	8001414 <StartInt_But+0xc>
			}
			else if(button_press == 1)
 800144c:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <StartInt_But+0xa8>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d10d      	bne.n	8001470 <StartInt_But+0x68>
			{
				state = !state;
 8001454:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <StartInt_But+0xb0>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	bf0c      	ite	eq
 800145c:	2301      	moveq	r3, #1
 800145e:	2300      	movne	r3, #0
 8001460:	b2db      	uxtb	r3, r3
 8001462:	461a      	mov	r2, r3
 8001464:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <StartInt_But+0xb0>)
 8001466:	601a      	str	r2, [r3, #0]
				button_press = 0;
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <StartInt_But+0xa8>)
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	e7d1      	b.n	8001414 <StartInt_But+0xc>
			}
			else if(button_press == 2 && state == 0)
 8001470:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <StartInt_But+0xa8>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b02      	cmp	r3, #2
 8001476:	d111      	bne.n	800149c <StartInt_But+0x94>
 8001478:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <StartInt_But+0xb0>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d10d      	bne.n	800149c <StartInt_But+0x94>
			{
				mode = !mode;
 8001480:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <StartInt_But+0xb4>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	bf0c      	ite	eq
 8001488:	2301      	moveq	r3, #1
 800148a:	2300      	movne	r3, #0
 800148c:	b2db      	uxtb	r3, r3
 800148e:	461a      	mov	r2, r3
 8001490:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <StartInt_But+0xb4>)
 8001492:	601a      	str	r2, [r3, #0]
				button_press = 0;
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <StartInt_But+0xa8>)
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	e008      	b.n	80014ae <StartInt_But+0xa6>
			}
			else
			{
				button_press = 0;
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <StartInt_But+0xa8>)
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	e7b7      	b.n	8001414 <StartInt_But+0xc>
			}
		}
		else
		{
			button_press += 1;
 80014a4:	4b02      	ldr	r3, [pc, #8]	; (80014b0 <StartInt_But+0xa8>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	3301      	adds	r3, #1
 80014aa:	4a01      	ldr	r2, [pc, #4]	; (80014b0 <StartInt_But+0xa8>)
 80014ac:	6013      	str	r3, [r2, #0]
		vTaskSuspend(NULL);
 80014ae:	e7b1      	b.n	8001414 <StartInt_But+0xc>
 80014b0:	200005e4 	.word	0x200005e4
 80014b4:	200005cc 	.word	0x200005cc
 80014b8:	200005e0 	.word	0x200005e0
 80014bc:	200005dc 	.word	0x200005dc

080014c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d101      	bne.n	80014d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014d2:	f000 fec7 	bl	8002264 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40012c00 	.word	0x40012c00

080014e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e8:	b672      	cpsid	i
}
 80014ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80014ec:	e7fe      	b.n	80014ec <Error_Handler+0x8>
	...

080014f0 <Read_Acc>:
 */

#include "sensorIO.h"

void Read_Acc(float *accel_data)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	int16_t accel_data_i16[3] = { 0 };
 80014f8:	f107 0308 	add.w	r3, r7, #8
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	809a      	strh	r2, [r3, #4]
	BSP_ACCELERO_AccGetXYZ(accel_data_i16);
 8001502:	f107 0308 	add.w	r3, r7, #8
 8001506:	4618      	mov	r0, r3
 8001508:	f000 fc86 	bl	8001e18 <BSP_ACCELERO_AccGetXYZ>

	accel_data[0] = (float)accel_data_i16[0] / 100.0f;
 800150c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001510:	ee07 3a90 	vmov	s15, r3
 8001514:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001518:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001568 <Read_Acc+0x78>
 800151c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	edc3 7a00 	vstr	s15, [r3]
	accel_data[1] = (float)accel_data_i16[1] / 100.0f;
 8001526:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800152a:	ee07 3a90 	vmov	s15, r3
 800152e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3304      	adds	r3, #4
 8001536:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001568 <Read_Acc+0x78>
 800153a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800153e:	edc3 7a00 	vstr	s15, [r3]
	accel_data[2] = (float)accel_data_i16[2] / 100.0f;
 8001542:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001546:	ee07 3a90 	vmov	s15, r3
 800154a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	3308      	adds	r3, #8
 8001552:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001568 <Read_Acc+0x78>
 8001556:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800155a:	edc3 7a00 	vstr	s15, [r3]

	return;
 800155e:	bf00      	nop
}
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	42c80000 	.word	0x42c80000

0800156c <Read_Temp>:
void Read_Temp(float *temp_data)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
	temp_data[0] = BSP_TSENSOR_ReadTemp();			// read temperature sensor
 8001574:	f000 fc84 	bl	8001e80 <BSP_TSENSOR_ReadTemp>
 8001578:	eef0 7a40 	vmov.f32	s15, s0
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	edc3 7a00 	vstr	s15, [r3]
	return;
 8001582:	bf00      	nop
}
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001592:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <HAL_MspInit+0x4c>)
 8001594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001596:	4a10      	ldr	r2, [pc, #64]	; (80015d8 <HAL_MspInit+0x4c>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6613      	str	r3, [r2, #96]	; 0x60
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <HAL_MspInit+0x4c>)
 80015a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015aa:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <HAL_MspInit+0x4c>)
 80015ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ae:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <HAL_MspInit+0x4c>)
 80015b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b4:	6593      	str	r3, [r2, #88]	; 0x58
 80015b6:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <HAL_MspInit+0x4c>)
 80015b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	210f      	movs	r1, #15
 80015c6:	f06f 0001 	mvn.w	r0, #1
 80015ca:	f000 ff23 	bl	8002414 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40021000 	.word	0x40021000

080015dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b0ac      	sub	sp, #176	; 0xb0
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	2288      	movs	r2, #136	; 0x88
 80015fa:	2100      	movs	r1, #0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f007 f89e 	bl	800873e <memset>
  if(hi2c->Instance==I2C2)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a21      	ldr	r2, [pc, #132]	; (800168c <HAL_I2C_MspInit+0xb0>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d13b      	bne.n	8001684 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800160c:	2380      	movs	r3, #128	; 0x80
 800160e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001610:	2300      	movs	r3, #0
 8001612:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	4618      	mov	r0, r3
 800161a:	f002 fee9 	bl	80043f0 <HAL_RCCEx_PeriphCLKConfig>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001624:	f7ff ff5e 	bl	80014e4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001628:	4b19      	ldr	r3, [pc, #100]	; (8001690 <HAL_I2C_MspInit+0xb4>)
 800162a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162c:	4a18      	ldr	r2, [pc, #96]	; (8001690 <HAL_I2C_MspInit+0xb4>)
 800162e:	f043 0302 	orr.w	r3, r3, #2
 8001632:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001634:	4b16      	ldr	r3, [pc, #88]	; (8001690 <HAL_I2C_MspInit+0xb4>)
 8001636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	613b      	str	r3, [r7, #16]
 800163e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001640:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001644:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001648:	2312      	movs	r3, #18
 800164a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001654:	2303      	movs	r3, #3
 8001656:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800165a:	2304      	movs	r3, #4
 800165c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001660:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001664:	4619      	mov	r1, r3
 8001666:	480b      	ldr	r0, [pc, #44]	; (8001694 <HAL_I2C_MspInit+0xb8>)
 8001668:	f000 fefe 	bl	8002468 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800166c:	4b08      	ldr	r3, [pc, #32]	; (8001690 <HAL_I2C_MspInit+0xb4>)
 800166e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001670:	4a07      	ldr	r2, [pc, #28]	; (8001690 <HAL_I2C_MspInit+0xb4>)
 8001672:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001676:	6593      	str	r3, [r2, #88]	; 0x58
 8001678:	4b05      	ldr	r3, [pc, #20]	; (8001690 <HAL_I2C_MspInit+0xb4>)
 800167a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001684:	bf00      	nop
 8001686:	37b0      	adds	r7, #176	; 0xb0
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40005800 	.word	0x40005800
 8001690:	40021000 	.word	0x40021000
 8001694:	48000400 	.word	0x48000400

08001698 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0b      	ldr	r2, [pc, #44]	; (80016d4 <HAL_I2C_MspDeInit+0x3c>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d10f      	bne.n	80016ca <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80016aa:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <HAL_I2C_MspDeInit+0x40>)
 80016ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ae:	4a0a      	ldr	r2, [pc, #40]	; (80016d8 <HAL_I2C_MspDeInit+0x40>)
 80016b0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80016b4:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 80016b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016ba:	4808      	ldr	r0, [pc, #32]	; (80016dc <HAL_I2C_MspDeInit+0x44>)
 80016bc:	f001 f87e 	bl	80027bc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 80016c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016c4:	4805      	ldr	r0, [pc, #20]	; (80016dc <HAL_I2C_MspDeInit+0x44>)
 80016c6:	f001 f879 	bl	80027bc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40005800 	.word	0x40005800
 80016d8:	40021000 	.word	0x40021000
 80016dc:	48000400 	.word	0x48000400

080016e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b0ac      	sub	sp, #176	; 0xb0
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	2288      	movs	r2, #136	; 0x88
 80016fe:	2100      	movs	r1, #0
 8001700:	4618      	mov	r0, r3
 8001702:	f007 f81c 	bl	800873e <memset>
  if(huart->Instance==USART1)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a22      	ldr	r2, [pc, #136]	; (8001794 <HAL_UART_MspInit+0xb4>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d13c      	bne.n	800178a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001710:	2301      	movs	r3, #1
 8001712:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001714:	2300      	movs	r3, #0
 8001716:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	4618      	mov	r0, r3
 800171e:	f002 fe67 	bl	80043f0 <HAL_RCCEx_PeriphCLKConfig>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001728:	f7ff fedc 	bl	80014e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800172c:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <HAL_UART_MspInit+0xb8>)
 800172e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001730:	4a19      	ldr	r2, [pc, #100]	; (8001798 <HAL_UART_MspInit+0xb8>)
 8001732:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001736:	6613      	str	r3, [r2, #96]	; 0x60
 8001738:	4b17      	ldr	r3, [pc, #92]	; (8001798 <HAL_UART_MspInit+0xb8>)
 800173a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800173c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001744:	4b14      	ldr	r3, [pc, #80]	; (8001798 <HAL_UART_MspInit+0xb8>)
 8001746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001748:	4a13      	ldr	r2, [pc, #76]	; (8001798 <HAL_UART_MspInit+0xb8>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001750:	4b11      	ldr	r3, [pc, #68]	; (8001798 <HAL_UART_MspInit+0xb8>)
 8001752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800175c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001760:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	2302      	movs	r3, #2
 8001766:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001770:	2303      	movs	r3, #3
 8001772:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001776:	2307      	movs	r3, #7
 8001778:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001780:	4619      	mov	r1, r3
 8001782:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001786:	f000 fe6f 	bl	8002468 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800178a:	bf00      	nop
 800178c:	37b0      	adds	r7, #176	; 0xb0
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40013800 	.word	0x40013800
 8001798:	40021000 	.word	0x40021000

0800179c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08c      	sub	sp, #48	; 0x30
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80017a4:	2300      	movs	r3, #0
 80017a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80017aa:	4b2e      	ldr	r3, [pc, #184]	; (8001864 <HAL_InitTick+0xc8>)
 80017ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ae:	4a2d      	ldr	r2, [pc, #180]	; (8001864 <HAL_InitTick+0xc8>)
 80017b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017b4:	6613      	str	r3, [r2, #96]	; 0x60
 80017b6:	4b2b      	ldr	r3, [pc, #172]	; (8001864 <HAL_InitTick+0xc8>)
 80017b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017c2:	f107 020c 	add.w	r2, r7, #12
 80017c6:	f107 0310 	add.w	r3, r7, #16
 80017ca:	4611      	mov	r1, r2
 80017cc:	4618      	mov	r0, r3
 80017ce:	f002 fd7d 	bl	80042cc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80017d2:	f002 fd65 	bl	80042a0 <HAL_RCC_GetPCLK2Freq>
 80017d6:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017da:	4a23      	ldr	r2, [pc, #140]	; (8001868 <HAL_InitTick+0xcc>)
 80017dc:	fba2 2303 	umull	r2, r3, r2, r3
 80017e0:	0c9b      	lsrs	r3, r3, #18
 80017e2:	3b01      	subs	r3, #1
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80017e6:	4b21      	ldr	r3, [pc, #132]	; (800186c <HAL_InitTick+0xd0>)
 80017e8:	4a21      	ldr	r2, [pc, #132]	; (8001870 <HAL_InitTick+0xd4>)
 80017ea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80017ec:	4b1f      	ldr	r3, [pc, #124]	; (800186c <HAL_InitTick+0xd0>)
 80017ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017f2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80017f4:	4a1d      	ldr	r2, [pc, #116]	; (800186c <HAL_InitTick+0xd0>)
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80017fa:	4b1c      	ldr	r3, [pc, #112]	; (800186c <HAL_InitTick+0xd0>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001800:	4b1a      	ldr	r3, [pc, #104]	; (800186c <HAL_InitTick+0xd0>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001806:	4b19      	ldr	r3, [pc, #100]	; (800186c <HAL_InitTick+0xd0>)
 8001808:	2200      	movs	r2, #0
 800180a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800180c:	4817      	ldr	r0, [pc, #92]	; (800186c <HAL_InitTick+0xd0>)
 800180e:	f003 fabb 	bl	8004d88 <HAL_TIM_Base_Init>
 8001812:	4603      	mov	r3, r0
 8001814:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001818:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800181c:	2b00      	cmp	r3, #0
 800181e:	d11b      	bne.n	8001858 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001820:	4812      	ldr	r0, [pc, #72]	; (800186c <HAL_InitTick+0xd0>)
 8001822:	f003 fb13 	bl	8004e4c <HAL_TIM_Base_Start_IT>
 8001826:	4603      	mov	r3, r0
 8001828:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800182c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001830:	2b00      	cmp	r3, #0
 8001832:	d111      	bne.n	8001858 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001834:	2019      	movs	r0, #25
 8001836:	f000 fe09 	bl	800244c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b0f      	cmp	r3, #15
 800183e:	d808      	bhi.n	8001852 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001840:	2200      	movs	r2, #0
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	2019      	movs	r0, #25
 8001846:	f000 fde5 	bl	8002414 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800184a:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <HAL_InitTick+0xd8>)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	e002      	b.n	8001858 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001858:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800185c:	4618      	mov	r0, r3
 800185e:	3730      	adds	r7, #48	; 0x30
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40021000 	.word	0x40021000
 8001868:	431bde83 	.word	0x431bde83
 800186c:	200005ec 	.word	0x200005ec
 8001870:	40012c00 	.word	0x40012c00
 8001874:	20000048 	.word	0x20000048

08001878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800187c:	e7fe      	b.n	800187c <NMI_Handler+0x4>

0800187e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001882:	e7fe      	b.n	8001882 <HardFault_Handler+0x4>

08001884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <MemManage_Handler+0x4>

0800188a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800188e:	e7fe      	b.n	800188e <BusFault_Handler+0x4>

08001890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001894:	e7fe      	b.n	8001894 <UsageFault_Handler+0x4>

08001896 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018a8:	4802      	ldr	r0, [pc, #8]	; (80018b4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80018aa:	f003 fb3f 	bl	8004f2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200005ec 	.word	0x200005ec

080018b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80018be:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018c2:	f001 f8a1 	bl	8002a08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  BaseType_t checkIfYieldRequired;
  checkIfYieldRequired = xTaskResumeFromISR(Int_ButHandle);
 80018c6:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <EXTI15_10_IRQHandler+0x38>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f005 fb14 	bl	8006ef8 <xTaskResumeFromISR>
 80018d0:	6078      	str	r0, [r7, #4]
  portYIELD_FROM_ISR(checkIfYieldRequired);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d007      	beq.n	80018e8 <EXTI15_10_IRQHandler+0x30>
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <EXTI15_10_IRQHandler+0x3c>)
 80018da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	f3bf 8f4f 	dsb	sy
 80018e4:	f3bf 8f6f 	isb	sy


  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	200005d8 	.word	0x200005d8
 80018f4:	e000ed04 	.word	0xe000ed04

080018f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
	return 1;
 80018fc:	2301      	movs	r3, #1
}
 80018fe:	4618      	mov	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <_kill>:

int _kill(int pid, int sig)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001912:	f006 fde3 	bl	80084dc <__errno>
 8001916:	4603      	mov	r3, r0
 8001918:	2216      	movs	r2, #22
 800191a:	601a      	str	r2, [r3, #0]
	return -1;
 800191c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001920:	4618      	mov	r0, r3
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <_exit>:

void _exit (int status)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001930:	f04f 31ff 	mov.w	r1, #4294967295
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff ffe7 	bl	8001908 <_kill>
	while (1) {}		/* Make sure we hang here */
 800193a:	e7fe      	b.n	800193a <_exit+0x12>

0800193c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	e00a      	b.n	8001964 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800194e:	f3af 8000 	nop.w
 8001952:	4601      	mov	r1, r0
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	1c5a      	adds	r2, r3, #1
 8001958:	60ba      	str	r2, [r7, #8]
 800195a:	b2ca      	uxtb	r2, r1
 800195c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	3301      	adds	r3, #1
 8001962:	617b      	str	r3, [r7, #20]
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	429a      	cmp	r2, r3
 800196a:	dbf0      	blt.n	800194e <_read+0x12>
	}

return len;
 800196c:	687b      	ldr	r3, [r7, #4]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3718      	adds	r7, #24
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b086      	sub	sp, #24
 800197a:	af00      	add	r7, sp, #0
 800197c:	60f8      	str	r0, [r7, #12]
 800197e:	60b9      	str	r1, [r7, #8]
 8001980:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	e009      	b.n	800199c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	1c5a      	adds	r2, r3, #1
 800198c:	60ba      	str	r2, [r7, #8]
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff faa5 	bl	8000ee0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	3301      	adds	r3, #1
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	697a      	ldr	r2, [r7, #20]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	dbf1      	blt.n	8001988 <_write+0x12>
	}
	return len;
 80019a4:	687b      	ldr	r3, [r7, #4]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <_close>:

int _close(int file)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
	return -1;
 80019b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
 80019ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019d6:	605a      	str	r2, [r3, #4]
	return 0;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <_isatty>:

int _isatty(int file)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
	return 1;
 80019ee:	2301      	movs	r3, #1
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
	return 0;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
	...

08001a18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a20:	4a14      	ldr	r2, [pc, #80]	; (8001a74 <_sbrk+0x5c>)
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <_sbrk+0x60>)
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a2c:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <_sbrk+0x64>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d102      	bne.n	8001a3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a34:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <_sbrk+0x64>)
 8001a36:	4a12      	ldr	r2, [pc, #72]	; (8001a80 <_sbrk+0x68>)
 8001a38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a3a:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <_sbrk+0x64>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4413      	add	r3, r2
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d207      	bcs.n	8001a58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a48:	f006 fd48 	bl	80084dc <__errno>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	220c      	movs	r2, #12
 8001a50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a52:	f04f 33ff 	mov.w	r3, #4294967295
 8001a56:	e009      	b.n	8001a6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a58:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <_sbrk+0x64>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a5e:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <_sbrk+0x64>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4413      	add	r3, r2
 8001a66:	4a05      	ldr	r2, [pc, #20]	; (8001a7c <_sbrk+0x64>)
 8001a68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20018000 	.word	0x20018000
 8001a78:	00000400 	.word	0x00000400
 8001a7c:	20000638 	.word	0x20000638
 8001a80:	200013b8 	.word	0x200013b8

08001a84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <SystemInit+0x20>)
 8001a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a8e:	4a05      	ldr	r2, [pc, #20]	; (8001aa4 <SystemInit+0x20>)
 8001a90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001aa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ae0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001aac:	f7ff ffea 	bl	8001a84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ab0:	480c      	ldr	r0, [pc, #48]	; (8001ae4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ab2:	490d      	ldr	r1, [pc, #52]	; (8001ae8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ab4:	4a0d      	ldr	r2, [pc, #52]	; (8001aec <LoopForever+0xe>)
  movs r3, #0
 8001ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab8:	e002      	b.n	8001ac0 <LoopCopyDataInit>

08001aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001abe:	3304      	adds	r3, #4

08001ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac4:	d3f9      	bcc.n	8001aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ac8:	4c0a      	ldr	r4, [pc, #40]	; (8001af4 <LoopForever+0x16>)
  movs r3, #0
 8001aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001acc:	e001      	b.n	8001ad2 <LoopFillZerobss>

08001ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad0:	3204      	adds	r2, #4

08001ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad4:	d3fb      	bcc.n	8001ace <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ad6:	f006 fdfd 	bl	80086d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ada:	f7ff fa13 	bl	8000f04 <main>

08001ade <LoopForever>:

LoopForever:
    b LoopForever
 8001ade:	e7fe      	b.n	8001ade <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ae0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae8:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8001aec:	0800b588 	.word	0x0800b588
  ldr r2, =_sbss
 8001af0:	20000224 	.word	0x20000224
  ldr r4, =_ebss
 8001af4:	200013b8 	.word	0x200013b8

08001af8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001af8:	e7fe      	b.n	8001af8 <ADC1_2_IRQHandler>
	...

08001afc <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08a      	sub	sp, #40	; 0x28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001b04:	4b27      	ldr	r3, [pc, #156]	; (8001ba4 <I2Cx_MspInit+0xa8>)
 8001b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b08:	4a26      	ldr	r2, [pc, #152]	; (8001ba4 <I2Cx_MspInit+0xa8>)
 8001b0a:	f043 0302 	orr.w	r3, r3, #2
 8001b0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b10:	4b24      	ldr	r3, [pc, #144]	; (8001ba4 <I2Cx_MspInit+0xa8>)
 8001b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001b1c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b20:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001b22:	2312      	movs	r3, #18
 8001b24:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001b26:	2301      	movs	r3, #1
 8001b28:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001b2e:	2304      	movs	r3, #4
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001b32:	f107 0314 	add.w	r3, r7, #20
 8001b36:	4619      	mov	r1, r3
 8001b38:	481b      	ldr	r0, [pc, #108]	; (8001ba8 <I2Cx_MspInit+0xac>)
 8001b3a:	f000 fc95 	bl	8002468 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001b3e:	f107 0314 	add.w	r3, r7, #20
 8001b42:	4619      	mov	r1, r3
 8001b44:	4818      	ldr	r0, [pc, #96]	; (8001ba8 <I2Cx_MspInit+0xac>)
 8001b46:	f000 fc8f 	bl	8002468 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001b4a:	4b16      	ldr	r3, [pc, #88]	; (8001ba4 <I2Cx_MspInit+0xa8>)
 8001b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4e:	4a15      	ldr	r2, [pc, #84]	; (8001ba4 <I2Cx_MspInit+0xa8>)
 8001b50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b54:	6593      	str	r3, [r2, #88]	; 0x58
 8001b56:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <I2Cx_MspInit+0xa8>)
 8001b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001b62:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <I2Cx_MspInit+0xa8>)
 8001b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b66:	4a0f      	ldr	r2, [pc, #60]	; (8001ba4 <I2Cx_MspInit+0xa8>)
 8001b68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b6c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001b6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ba4 <I2Cx_MspInit+0xa8>)
 8001b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b72:	4a0c      	ldr	r2, [pc, #48]	; (8001ba4 <I2Cx_MspInit+0xa8>)
 8001b74:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001b78:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	210f      	movs	r1, #15
 8001b7e:	2021      	movs	r0, #33	; 0x21
 8001b80:	f000 fc48 	bl	8002414 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001b84:	2021      	movs	r0, #33	; 0x21
 8001b86:	f000 fc61 	bl	800244c <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	210f      	movs	r1, #15
 8001b8e:	2022      	movs	r0, #34	; 0x22
 8001b90:	f000 fc40 	bl	8002414 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001b94:	2022      	movs	r0, #34	; 0x22
 8001b96:	f000 fc59 	bl	800244c <HAL_NVIC_EnableIRQ>
}
 8001b9a:	bf00      	nop
 8001b9c:	3728      	adds	r7, #40	; 0x28
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	48000400 	.word	0x48000400

08001bac <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a12      	ldr	r2, [pc, #72]	; (8001c00 <I2Cx_Init+0x54>)
 8001bb8:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a11      	ldr	r2, [pc, #68]	; (8001c04 <I2Cx_Init+0x58>)
 8001bbe:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff ff89 	bl	8001afc <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 ff2f 	bl	8002a4e <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f001 fcbe 	bl	8003574 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40005800 	.word	0x40005800
 8001c04:	00702681 	.word	0x00702681

08001c08 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	; 0x28
 8001c0c:	af04      	add	r7, sp, #16
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	4608      	mov	r0, r1
 8001c12:	4611      	mov	r1, r2
 8001c14:	461a      	mov	r2, r3
 8001c16:	4603      	mov	r3, r0
 8001c18:	72fb      	strb	r3, [r7, #11]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	813b      	strh	r3, [r7, #8]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001c22:	2300      	movs	r3, #0
 8001c24:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001c26:	7afb      	ldrb	r3, [r7, #11]
 8001c28:	b299      	uxth	r1, r3
 8001c2a:	88f8      	ldrh	r0, [r7, #6]
 8001c2c:	893a      	ldrh	r2, [r7, #8]
 8001c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c32:	9302      	str	r3, [sp, #8]
 8001c34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c36:	9301      	str	r3, [sp, #4]
 8001c38:	6a3b      	ldr	r3, [r7, #32]
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f001 f8d8 	bl	8002df4 <HAL_I2C_Mem_Read>
 8001c44:	4603      	mov	r3, r0
 8001c46:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001c48:	7dfb      	ldrb	r3, [r7, #23]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d004      	beq.n	8001c58 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8001c4e:	7afb      	ldrb	r3, [r7, #11]
 8001c50:	4619      	mov	r1, r3
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	f000 f832 	bl	8001cbc <I2Cx_Error>
  }
  return status;
 8001c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b08a      	sub	sp, #40	; 0x28
 8001c66:	af04      	add	r7, sp, #16
 8001c68:	60f8      	str	r0, [r7, #12]
 8001c6a:	4608      	mov	r0, r1
 8001c6c:	4611      	mov	r1, r2
 8001c6e:	461a      	mov	r2, r3
 8001c70:	4603      	mov	r3, r0
 8001c72:	72fb      	strb	r3, [r7, #11]
 8001c74:	460b      	mov	r3, r1
 8001c76:	813b      	strh	r3, [r7, #8]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001c80:	7afb      	ldrb	r3, [r7, #11]
 8001c82:	b299      	uxth	r1, r3
 8001c84:	88f8      	ldrh	r0, [r7, #6]
 8001c86:	893a      	ldrh	r2, [r7, #8]
 8001c88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c8c:	9302      	str	r3, [sp, #8]
 8001c8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c90:	9301      	str	r3, [sp, #4]
 8001c92:	6a3b      	ldr	r3, [r7, #32]
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	4603      	mov	r3, r0
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	f000 ff97 	bl	8002bcc <HAL_I2C_Mem_Write>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001ca2:	7dfb      	ldrb	r3, [r7, #23]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d004      	beq.n	8001cb2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001ca8:	7afb      	ldrb	r3, [r7, #11]
 8001caa:	4619      	mov	r1, r3
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f000 f805 	bl	8001cbc <I2Cx_Error>
  }
  return status;
 8001cb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f000 ff4f 	bl	8002b6c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff ff6c 	bl	8001bac <I2Cx_Init>
}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001ce0:	4802      	ldr	r0, [pc, #8]	; (8001cec <SENSOR_IO_Init+0x10>)
 8001ce2:	f7ff ff63 	bl	8001bac <I2Cx_Init>
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	2000063c 	.word	0x2000063c

08001cf0 <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af02      	add	r7, sp, #8
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	71fb      	strb	r3, [r7, #7]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	71bb      	strb	r3, [r7, #6]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001d02:	79bb      	ldrb	r3, [r7, #6]
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	79f9      	ldrb	r1, [r7, #7]
 8001d08:	2301      	movs	r3, #1
 8001d0a:	9301      	str	r3, [sp, #4]
 8001d0c:	1d7b      	adds	r3, r7, #5
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	2301      	movs	r3, #1
 8001d12:	4803      	ldr	r0, [pc, #12]	; (8001d20 <SENSOR_IO_Write+0x30>)
 8001d14:	f7ff ffa5 	bl	8001c62 <I2Cx_WriteMultiple>
}
 8001d18:	bf00      	nop
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	2000063c 	.word	0x2000063c

08001d24 <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af02      	add	r7, sp, #8
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	460a      	mov	r2, r1
 8001d2e:	71fb      	strb	r3, [r7, #7]
 8001d30:	4613      	mov	r3, r2
 8001d32:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001d38:	79bb      	ldrb	r3, [r7, #6]
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	79f9      	ldrb	r1, [r7, #7]
 8001d3e:	2301      	movs	r3, #1
 8001d40:	9301      	str	r3, [sp, #4]
 8001d42:	f107 030f 	add.w	r3, r7, #15
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	2301      	movs	r3, #1
 8001d4a:	4804      	ldr	r0, [pc, #16]	; (8001d5c <SENSOR_IO_Read+0x38>)
 8001d4c:	f7ff ff5c 	bl	8001c08 <I2Cx_ReadMultiple>

  return read_value;
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	2000063c 	.word	0x2000063c

08001d60 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af02      	add	r7, sp, #8
 8001d66:	603a      	str	r2, [r7, #0]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
 8001d6e:	460b      	mov	r3, r1
 8001d70:	71bb      	strb	r3, [r7, #6]
 8001d72:	4613      	mov	r3, r2
 8001d74:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001d76:	79bb      	ldrb	r3, [r7, #6]
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	79f9      	ldrb	r1, [r7, #7]
 8001d7c:	88bb      	ldrh	r3, [r7, #4]
 8001d7e:	9301      	str	r3, [sp, #4]
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	2301      	movs	r3, #1
 8001d86:	4804      	ldr	r0, [pc, #16]	; (8001d98 <SENSOR_IO_ReadMultiple+0x38>)
 8001d88:	f7ff ff3e 	bl	8001c08 <I2Cx_ReadMultiple>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	b29b      	uxth	r3, r3
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	2000063c 	.word	0x2000063c

08001d9c <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8001da2:	2300      	movs	r3, #0
 8001da4:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001da6:	2300      	movs	r3, #0
 8001da8:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001daa:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <BSP_ACCELERO_Init+0x74>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	4798      	blx	r3
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b6a      	cmp	r3, #106	; 0x6a
 8001db4:	d002      	beq.n	8001dbc <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	73fb      	strb	r3, [r7, #15]
 8001dba:	e024      	b.n	8001e06 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001dbc:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <BSP_ACCELERO_Init+0x78>)
 8001dbe:	4a14      	ldr	r2, [pc, #80]	; (8001e10 <BSP_ACCELERO_Init+0x74>)
 8001dc0:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8001dc2:	2330      	movs	r3, #48	; 0x30
 8001dc4:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001dce:	2340      	movs	r3, #64	; 0x40
 8001dd0:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8001dda:	797a      	ldrb	r2, [r7, #5]
 8001ddc:	7abb      	ldrb	r3, [r7, #10]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001de4:	7a3b      	ldrb	r3, [r7, #8]
 8001de6:	f043 0304 	orr.w	r3, r3, #4
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	021b      	lsls	r3, r3, #8
 8001dee:	b21a      	sxth	r2, r3
 8001df0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	b21b      	sxth	r3, r3
 8001df8:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001dfa:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <BSP_ACCELERO_Init+0x78>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	89ba      	ldrh	r2, [r7, #12]
 8001e02:	4610      	mov	r0, r2
 8001e04:	4798      	blx	r3
  }  

  return ret;
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20000014 	.word	0x20000014
 8001e14:	20000690 	.word	0x20000690

08001e18 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8001e20:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d009      	beq.n	8001e3c <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001e28:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d004      	beq.n	8001e3c <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8001e32:	4b04      	ldr	r3, [pc, #16]	; (8001e44 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	4798      	blx	r3
    }
  }
}
 8001e3c:	bf00      	nop
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000690 	.word	0x20000690

08001e48 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8001e52:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <BSP_TSENSOR_Init+0x30>)
 8001e54:	4a09      	ldr	r2, [pc, #36]	; (8001e7c <BSP_TSENSOR_Init+0x34>)
 8001e56:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8001e58:	f7ff ff40 	bl	8001cdc <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <BSP_TSENSOR_Init+0x30>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2100      	movs	r1, #0
 8001e64:	20be      	movs	r0, #190	; 0xbe
 8001e66:	4798      	blx	r3

  ret = TSENSOR_OK;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20000694 	.word	0x20000694
 8001e7c:	20000004 	.word	0x20000004

08001e80 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8001e84:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <BSP_TSENSOR_ReadTemp+0x18>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	20be      	movs	r0, #190	; 0xbe
 8001e8c:	4798      	blx	r3
 8001e8e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001e92:	eeb0 0a67 	vmov.f32	s0, s15
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20000694 	.word	0x20000694

08001e9c <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	6039      	str	r1, [r7, #0]
 8001ea6:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001ea8:	88fb      	ldrh	r3, [r7, #6]
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2120      	movs	r1, #32
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff ff38 	bl	8001d24 <SENSOR_IO_Read>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001eb8:	7bfb      	ldrb	r3, [r7, #15]
 8001eba:	f023 0304 	bic.w	r3, r3, #4
 8001ebe:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
 8001ec2:	f043 0304 	orr.w	r3, r3, #4
 8001ec6:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	f023 0303 	bic.w	r3, r3, #3
 8001ece:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
 8001ed2:	f043 0301 	orr.w	r3, r3, #1
 8001ed6:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
 8001eda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ede:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001ee0:	88fb      	ldrh	r3, [r7, #6]
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	7bfa      	ldrb	r2, [r7, #15]
 8001ee6:	2120      	movs	r1, #32
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff01 	bl	8001cf0 <SENSOR_IO_Write>
}
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b088      	sub	sp, #32
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	4603      	mov	r3, r0
 8001efe:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8001f00:	88fb      	ldrh	r3, [r7, #6]
 8001f02:	b2d8      	uxtb	r0, r3
 8001f04:	f107 0208 	add.w	r2, r7, #8
 8001f08:	2302      	movs	r3, #2
 8001f0a:	21b2      	movs	r1, #178	; 0xb2
 8001f0c:	f7ff ff28 	bl	8001d60 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8001f10:	88fb      	ldrh	r3, [r7, #6]
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2135      	movs	r1, #53	; 0x35
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff ff04 	bl	8001d24 <SENSOR_IO_Read>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001f20:	7ffb      	ldrb	r3, [r7, #31]
 8001f22:	021b      	lsls	r3, r3, #8
 8001f24:	b21b      	sxth	r3, r3
 8001f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f2a:	b21a      	sxth	r2, r3
 8001f2c:	7a3b      	ldrb	r3, [r7, #8]
 8001f2e:	b21b      	sxth	r3, r3
 8001f30:	4313      	orrs	r3, r2
 8001f32:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001f34:	7ffb      	ldrb	r3, [r7, #31]
 8001f36:	019b      	lsls	r3, r3, #6
 8001f38:	b21b      	sxth	r3, r3
 8001f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f3e:	b21a      	sxth	r2, r3
 8001f40:	7a7b      	ldrb	r3, [r7, #9]
 8001f42:	b21b      	sxth	r3, r3
 8001f44:	4313      	orrs	r3, r2
 8001f46:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8001f48:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f4c:	10db      	asrs	r3, r3, #3
 8001f4e:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8001f50:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001f54:	10db      	asrs	r3, r3, #3
 8001f56:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001f58:	88fb      	ldrh	r3, [r7, #6]
 8001f5a:	b2d8      	uxtb	r0, r3
 8001f5c:	f107 0208 	add.w	r2, r7, #8
 8001f60:	2304      	movs	r3, #4
 8001f62:	21bc      	movs	r1, #188	; 0xbc
 8001f64:	f7ff fefc 	bl	8001d60 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001f68:	7a7b      	ldrb	r3, [r7, #9]
 8001f6a:	021b      	lsls	r3, r3, #8
 8001f6c:	b21a      	sxth	r2, r3
 8001f6e:	7a3b      	ldrb	r3, [r7, #8]
 8001f70:	b21b      	sxth	r3, r3
 8001f72:	4313      	orrs	r3, r2
 8001f74:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001f76:	7afb      	ldrb	r3, [r7, #11]
 8001f78:	021b      	lsls	r3, r3, #8
 8001f7a:	b21a      	sxth	r2, r3
 8001f7c:	7abb      	ldrb	r3, [r7, #10]
 8001f7e:	b21b      	sxth	r3, r3
 8001f80:	4313      	orrs	r3, r2
 8001f82:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001f84:	88fb      	ldrh	r3, [r7, #6]
 8001f86:	b2d8      	uxtb	r0, r3
 8001f88:	f107 0208 	add.w	r2, r7, #8
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	21aa      	movs	r1, #170	; 0xaa
 8001f90:	f7ff fee6 	bl	8001d60 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001f94:	7a7b      	ldrb	r3, [r7, #9]
 8001f96:	021b      	lsls	r3, r3, #8
 8001f98:	b21a      	sxth	r2, r3
 8001f9a:	7a3b      	ldrb	r3, [r7, #8]
 8001f9c:	b21b      	sxth	r3, r3
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8001fa2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001fa6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	ee07 3a90 	vmov	s15, r3
 8001fb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fb4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001fb8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	ee07 3a90 	vmov	s15, r3
 8001fc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fc6:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001fca:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001fce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	ee07 3a90 	vmov	s15, r3
 8001fd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fe0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001fe4:	ee07 3a90 	vmov	s15, r3
 8001fe8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ff0:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	ee07 3a90 	vmov	s15, r3
}
 8001ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8001ffe:	3720      	adds	r7, #32
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800200e:	2300      	movs	r3, #0
 8002010:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002012:	2110      	movs	r1, #16
 8002014:	20d4      	movs	r0, #212	; 0xd4
 8002016:	f7ff fe85 	bl	8001d24 <SENSOR_IO_Read>
 800201a:	4603      	mov	r3, r0
 800201c:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800201e:	88fb      	ldrh	r3, [r7, #6]
 8002020:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8002022:	7bbb      	ldrb	r3, [r7, #14]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800202a:	7bba      	ldrb	r2, [r7, #14]
 800202c:	7bfb      	ldrb	r3, [r7, #15]
 800202e:	4313      	orrs	r3, r2
 8002030:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8002032:	7bbb      	ldrb	r3, [r7, #14]
 8002034:	461a      	mov	r2, r3
 8002036:	2110      	movs	r1, #16
 8002038:	20d4      	movs	r0, #212	; 0xd4
 800203a:	f7ff fe59 	bl	8001cf0 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800203e:	2112      	movs	r1, #18
 8002040:	20d4      	movs	r0, #212	; 0xd4
 8002042:	f7ff fe6f 	bl	8001d24 <SENSOR_IO_Read>
 8002046:	4603      	mov	r3, r0
 8002048:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800204a:	88fb      	ldrh	r3, [r7, #6]
 800204c:	0a1b      	lsrs	r3, r3, #8
 800204e:	b29b      	uxth	r3, r3
 8002050:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8002052:	7bbb      	ldrb	r3, [r7, #14]
 8002054:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8002058:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800205a:	7bba      	ldrb	r2, [r7, #14]
 800205c:	7bfb      	ldrb	r3, [r7, #15]
 800205e:	4313      	orrs	r3, r2
 8002060:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002062:	7bbb      	ldrb	r3, [r7, #14]
 8002064:	461a      	mov	r2, r3
 8002066:	2112      	movs	r1, #18
 8002068:	20d4      	movs	r0, #212	; 0xd4
 800206a:	f7ff fe41 	bl	8001cf0 <SENSOR_IO_Write>
}
 800206e:	bf00      	nop
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800207c:	2300      	movs	r3, #0
 800207e:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002080:	2110      	movs	r1, #16
 8002082:	20d4      	movs	r0, #212	; 0xd4
 8002084:	f7ff fe4e 	bl	8001d24 <SENSOR_IO_Read>
 8002088:	4603      	mov	r3, r0
 800208a:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	f003 030f 	and.w	r3, r3, #15
 8002092:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	461a      	mov	r2, r3
 8002098:	2110      	movs	r1, #16
 800209a:	20d4      	movs	r0, #212	; 0xd4
 800209c:	f7ff fe28 	bl	8001cf0 <SENSOR_IO_Write>
}
 80020a0:	bf00      	nop
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80020ac:	f7ff fe16 	bl	8001cdc <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80020b0:	210f      	movs	r1, #15
 80020b2:	20d4      	movs	r0, #212	; 0xd4
 80020b4:	f7ff fe36 	bl	8001d24 <SENSOR_IO_Read>
 80020b8:	4603      	mov	r3, r0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	bd80      	pop	{r7, pc}

080020be <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b084      	sub	sp, #16
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	4603      	mov	r3, r0
 80020c6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80020c8:	2300      	movs	r3, #0
 80020ca:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80020cc:	2115      	movs	r1, #21
 80020ce:	20d4      	movs	r0, #212	; 0xd4
 80020d0:	f7ff fe28 	bl	8001d24 <SENSOR_IO_Read>
 80020d4:	4603      	mov	r3, r0
 80020d6:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
 80020da:	f023 0310 	bic.w	r3, r3, #16
 80020de:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80020e0:	88fb      	ldrh	r3, [r7, #6]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
 80020e8:	f043 0310 	orr.w	r3, r3, #16
 80020ec:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
 80020f0:	461a      	mov	r2, r3
 80020f2:	2115      	movs	r1, #21
 80020f4:	20d4      	movs	r0, #212	; 0xd4
 80020f6:	f7ff fdfb 	bl	8001cf0 <SENSOR_IO_Write>
}
 80020fa:	bf00      	nop
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
	...

08002104 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b088      	sub	sp, #32
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 800210c:	2300      	movs	r3, #0
 800210e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002110:	2300      	movs	r3, #0
 8002112:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002114:	f04f 0300 	mov.w	r3, #0
 8002118:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800211a:	2110      	movs	r1, #16
 800211c:	20d4      	movs	r0, #212	; 0xd4
 800211e:	f7ff fe01 	bl	8001d24 <SENSOR_IO_Read>
 8002122:	4603      	mov	r3, r0
 8002124:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8002126:	f107 0208 	add.w	r2, r7, #8
 800212a:	2306      	movs	r3, #6
 800212c:	2128      	movs	r1, #40	; 0x28
 800212e:	20d4      	movs	r0, #212	; 0xd4
 8002130:	f7ff fe16 	bl	8001d60 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002134:	2300      	movs	r3, #0
 8002136:	77fb      	strb	r3, [r7, #31]
 8002138:	e01c      	b.n	8002174 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800213a:	7ffb      	ldrb	r3, [r7, #31]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	3301      	adds	r3, #1
 8002140:	3320      	adds	r3, #32
 8002142:	443b      	add	r3, r7
 8002144:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002148:	b29b      	uxth	r3, r3
 800214a:	021b      	lsls	r3, r3, #8
 800214c:	b29a      	uxth	r2, r3
 800214e:	7ffb      	ldrb	r3, [r7, #31]
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	3320      	adds	r3, #32
 8002154:	443b      	add	r3, r7
 8002156:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800215a:	b29b      	uxth	r3, r3
 800215c:	4413      	add	r3, r2
 800215e:	b29a      	uxth	r2, r3
 8002160:	7ffb      	ldrb	r3, [r7, #31]
 8002162:	b212      	sxth	r2, r2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	3320      	adds	r3, #32
 8002168:	443b      	add	r3, r7
 800216a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800216e:	7ffb      	ldrb	r3, [r7, #31]
 8002170:	3301      	adds	r3, #1
 8002172:	77fb      	strb	r3, [r7, #31]
 8002174:	7ffb      	ldrb	r3, [r7, #31]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d9df      	bls.n	800213a <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800217a:	7dfb      	ldrb	r3, [r7, #23]
 800217c:	f003 030c 	and.w	r3, r3, #12
 8002180:	2b0c      	cmp	r3, #12
 8002182:	d829      	bhi.n	80021d8 <LSM6DSL_AccReadXYZ+0xd4>
 8002184:	a201      	add	r2, pc, #4	; (adr r2, 800218c <LSM6DSL_AccReadXYZ+0x88>)
 8002186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800218a:	bf00      	nop
 800218c:	080021c1 	.word	0x080021c1
 8002190:	080021d9 	.word	0x080021d9
 8002194:	080021d9 	.word	0x080021d9
 8002198:	080021d9 	.word	0x080021d9
 800219c:	080021d3 	.word	0x080021d3
 80021a0:	080021d9 	.word	0x080021d9
 80021a4:	080021d9 	.word	0x080021d9
 80021a8:	080021d9 	.word	0x080021d9
 80021ac:	080021c7 	.word	0x080021c7
 80021b0:	080021d9 	.word	0x080021d9
 80021b4:	080021d9 	.word	0x080021d9
 80021b8:	080021d9 	.word	0x080021d9
 80021bc:	080021cd 	.word	0x080021cd
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80021c0:	4b18      	ldr	r3, [pc, #96]	; (8002224 <LSM6DSL_AccReadXYZ+0x120>)
 80021c2:	61bb      	str	r3, [r7, #24]
    break;
 80021c4:	e008      	b.n	80021d8 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80021c6:	4b18      	ldr	r3, [pc, #96]	; (8002228 <LSM6DSL_AccReadXYZ+0x124>)
 80021c8:	61bb      	str	r3, [r7, #24]
    break;
 80021ca:	e005      	b.n	80021d8 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80021cc:	4b17      	ldr	r3, [pc, #92]	; (800222c <LSM6DSL_AccReadXYZ+0x128>)
 80021ce:	61bb      	str	r3, [r7, #24]
    break;
 80021d0:	e002      	b.n	80021d8 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80021d2:	4b17      	ldr	r3, [pc, #92]	; (8002230 <LSM6DSL_AccReadXYZ+0x12c>)
 80021d4:	61bb      	str	r3, [r7, #24]
    break;    
 80021d6:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80021d8:	2300      	movs	r3, #0
 80021da:	77fb      	strb	r3, [r7, #31]
 80021dc:	e01a      	b.n	8002214 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80021de:	7ffb      	ldrb	r3, [r7, #31]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	3320      	adds	r3, #32
 80021e4:	443b      	add	r3, r7
 80021e6:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80021ea:	ee07 3a90 	vmov	s15, r3
 80021ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80021f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021fa:	7ffb      	ldrb	r3, [r7, #31]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	4413      	add	r3, r2
 8002202:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002206:	ee17 2a90 	vmov	r2, s15
 800220a:	b212      	sxth	r2, r2
 800220c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800220e:	7ffb      	ldrb	r3, [r7, #31]
 8002210:	3301      	adds	r3, #1
 8002212:	77fb      	strb	r3, [r7, #31]
 8002214:	7ffb      	ldrb	r3, [r7, #31]
 8002216:	2b02      	cmp	r3, #2
 8002218:	d9e1      	bls.n	80021de <LSM6DSL_AccReadXYZ+0xda>
  }
}
 800221a:	bf00      	nop
 800221c:	bf00      	nop
 800221e:	3720      	adds	r7, #32
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	3d79db23 	.word	0x3d79db23
 8002228:	3df9db23 	.word	0x3df9db23
 800222c:	3e79db23 	.word	0x3e79db23
 8002230:	3ef9db23 	.word	0x3ef9db23

08002234 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800223a:	2300      	movs	r3, #0
 800223c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800223e:	2003      	movs	r0, #3
 8002240:	f000 f8dd 	bl	80023fe <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002244:	200f      	movs	r0, #15
 8002246:	f7ff faa9 	bl	800179c <HAL_InitTick>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d002      	beq.n	8002256 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	71fb      	strb	r3, [r7, #7]
 8002254:	e001      	b.n	800225a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002256:	f7ff f999 	bl	800158c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800225a:	79fb      	ldrb	r3, [r7, #7]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002268:	4b06      	ldr	r3, [pc, #24]	; (8002284 <HAL_IncTick+0x20>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	461a      	mov	r2, r3
 800226e:	4b06      	ldr	r3, [pc, #24]	; (8002288 <HAL_IncTick+0x24>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4413      	add	r3, r2
 8002274:	4a04      	ldr	r2, [pc, #16]	; (8002288 <HAL_IncTick+0x24>)
 8002276:	6013      	str	r3, [r2, #0]
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	2000004c 	.word	0x2000004c
 8002288:	20000698 	.word	0x20000698

0800228c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return uwTick;
 8002290:	4b03      	ldr	r3, [pc, #12]	; (80022a0 <HAL_GetTick+0x14>)
 8002292:	681b      	ldr	r3, [r3, #0]
}
 8002294:	4618      	mov	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	20000698 	.word	0x20000698

080022a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022b4:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <__NVIC_SetPriorityGrouping+0x44>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022c0:	4013      	ands	r3, r2
 80022c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022d6:	4a04      	ldr	r2, [pc, #16]	; (80022e8 <__NVIC_SetPriorityGrouping+0x44>)
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	60d3      	str	r3, [r2, #12]
}
 80022dc:	bf00      	nop
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022f0:	4b04      	ldr	r3, [pc, #16]	; (8002304 <__NVIC_GetPriorityGrouping+0x18>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	0a1b      	lsrs	r3, r3, #8
 80022f6:	f003 0307 	and.w	r3, r3, #7
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002316:	2b00      	cmp	r3, #0
 8002318:	db0b      	blt.n	8002332 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	f003 021f 	and.w	r2, r3, #31
 8002320:	4907      	ldr	r1, [pc, #28]	; (8002340 <__NVIC_EnableIRQ+0x38>)
 8002322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002326:	095b      	lsrs	r3, r3, #5
 8002328:	2001      	movs	r0, #1
 800232a:	fa00 f202 	lsl.w	r2, r0, r2
 800232e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	e000e100 	.word	0xe000e100

08002344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	6039      	str	r1, [r7, #0]
 800234e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002354:	2b00      	cmp	r3, #0
 8002356:	db0a      	blt.n	800236e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	b2da      	uxtb	r2, r3
 800235c:	490c      	ldr	r1, [pc, #48]	; (8002390 <__NVIC_SetPriority+0x4c>)
 800235e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002362:	0112      	lsls	r2, r2, #4
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	440b      	add	r3, r1
 8002368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800236c:	e00a      	b.n	8002384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	b2da      	uxtb	r2, r3
 8002372:	4908      	ldr	r1, [pc, #32]	; (8002394 <__NVIC_SetPriority+0x50>)
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	3b04      	subs	r3, #4
 800237c:	0112      	lsls	r2, r2, #4
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	440b      	add	r3, r1
 8002382:	761a      	strb	r2, [r3, #24]
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	e000e100 	.word	0xe000e100
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002398:	b480      	push	{r7}
 800239a:	b089      	sub	sp, #36	; 0x24
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f1c3 0307 	rsb	r3, r3, #7
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	bf28      	it	cs
 80023b6:	2304      	movcs	r3, #4
 80023b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	3304      	adds	r3, #4
 80023be:	2b06      	cmp	r3, #6
 80023c0:	d902      	bls.n	80023c8 <NVIC_EncodePriority+0x30>
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	3b03      	subs	r3, #3
 80023c6:	e000      	b.n	80023ca <NVIC_EncodePriority+0x32>
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023cc:	f04f 32ff 	mov.w	r2, #4294967295
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43da      	mvns	r2, r3
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	401a      	ands	r2, r3
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e0:	f04f 31ff 	mov.w	r1, #4294967295
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ea:	43d9      	mvns	r1, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f0:	4313      	orrs	r3, r2
         );
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3724      	adds	r7, #36	; 0x24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7ff ff4c 	bl	80022a4 <__NVIC_SetPriorityGrouping>
}
 800240c:	bf00      	nop
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
 8002420:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002422:	2300      	movs	r3, #0
 8002424:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002426:	f7ff ff61 	bl	80022ec <__NVIC_GetPriorityGrouping>
 800242a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	68b9      	ldr	r1, [r7, #8]
 8002430:	6978      	ldr	r0, [r7, #20]
 8002432:	f7ff ffb1 	bl	8002398 <NVIC_EncodePriority>
 8002436:	4602      	mov	r2, r0
 8002438:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800243c:	4611      	mov	r1, r2
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff ff80 	bl	8002344 <__NVIC_SetPriority>
}
 8002444:	bf00      	nop
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff ff54 	bl	8002308 <__NVIC_EnableIRQ>
}
 8002460:	bf00      	nop
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002468:	b480      	push	{r7}
 800246a:	b087      	sub	sp, #28
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002476:	e17f      	b.n	8002778 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	2101      	movs	r1, #1
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	fa01 f303 	lsl.w	r3, r1, r3
 8002484:	4013      	ands	r3, r2
 8002486:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 8171 	beq.w	8002772 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 0303 	and.w	r3, r3, #3
 8002498:	2b01      	cmp	r3, #1
 800249a:	d005      	beq.n	80024a8 <HAL_GPIO_Init+0x40>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d130      	bne.n	800250a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	2203      	movs	r2, #3
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4013      	ands	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	68da      	ldr	r2, [r3, #12]
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024de:	2201      	movs	r2, #1
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	43db      	mvns	r3, r3
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	4013      	ands	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	091b      	lsrs	r3, r3, #4
 80024f4:	f003 0201 	and.w	r2, r3, #1
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	4313      	orrs	r3, r2
 8002502:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	2b03      	cmp	r3, #3
 8002514:	d118      	bne.n	8002548 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800251c:	2201      	movs	r2, #1
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	4013      	ands	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	08db      	lsrs	r3, r3, #3
 8002532:	f003 0201 	and.w	r2, r3, #1
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	4313      	orrs	r3, r2
 8002540:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	2b03      	cmp	r3, #3
 8002552:	d017      	beq.n	8002584 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	2203      	movs	r2, #3
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	4013      	ands	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 0303 	and.w	r3, r3, #3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d123      	bne.n	80025d8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	08da      	lsrs	r2, r3, #3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3208      	adds	r2, #8
 8002598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800259c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	220f      	movs	r2, #15
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4013      	ands	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	691a      	ldr	r2, [r3, #16]
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	08da      	lsrs	r2, r3, #3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	3208      	adds	r2, #8
 80025d2:	6939      	ldr	r1, [r7, #16]
 80025d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	2203      	movs	r2, #3
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4013      	ands	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 0203 	and.w	r2, r3, #3
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	4313      	orrs	r3, r2
 8002604:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 80ac 	beq.w	8002772 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800261a:	4b5f      	ldr	r3, [pc, #380]	; (8002798 <HAL_GPIO_Init+0x330>)
 800261c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800261e:	4a5e      	ldr	r2, [pc, #376]	; (8002798 <HAL_GPIO_Init+0x330>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6613      	str	r3, [r2, #96]	; 0x60
 8002626:	4b5c      	ldr	r3, [pc, #368]	; (8002798 <HAL_GPIO_Init+0x330>)
 8002628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	60bb      	str	r3, [r7, #8]
 8002630:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002632:	4a5a      	ldr	r2, [pc, #360]	; (800279c <HAL_GPIO_Init+0x334>)
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	089b      	lsrs	r3, r3, #2
 8002638:	3302      	adds	r3, #2
 800263a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800263e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	f003 0303 	and.w	r3, r3, #3
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	220f      	movs	r2, #15
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	43db      	mvns	r3, r3
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	4013      	ands	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800265c:	d025      	beq.n	80026aa <HAL_GPIO_Init+0x242>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a4f      	ldr	r2, [pc, #316]	; (80027a0 <HAL_GPIO_Init+0x338>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d01f      	beq.n	80026a6 <HAL_GPIO_Init+0x23e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a4e      	ldr	r2, [pc, #312]	; (80027a4 <HAL_GPIO_Init+0x33c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d019      	beq.n	80026a2 <HAL_GPIO_Init+0x23a>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a4d      	ldr	r2, [pc, #308]	; (80027a8 <HAL_GPIO_Init+0x340>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d013      	beq.n	800269e <HAL_GPIO_Init+0x236>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a4c      	ldr	r2, [pc, #304]	; (80027ac <HAL_GPIO_Init+0x344>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d00d      	beq.n	800269a <HAL_GPIO_Init+0x232>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a4b      	ldr	r2, [pc, #300]	; (80027b0 <HAL_GPIO_Init+0x348>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d007      	beq.n	8002696 <HAL_GPIO_Init+0x22e>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a4a      	ldr	r2, [pc, #296]	; (80027b4 <HAL_GPIO_Init+0x34c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d101      	bne.n	8002692 <HAL_GPIO_Init+0x22a>
 800268e:	2306      	movs	r3, #6
 8002690:	e00c      	b.n	80026ac <HAL_GPIO_Init+0x244>
 8002692:	2307      	movs	r3, #7
 8002694:	e00a      	b.n	80026ac <HAL_GPIO_Init+0x244>
 8002696:	2305      	movs	r3, #5
 8002698:	e008      	b.n	80026ac <HAL_GPIO_Init+0x244>
 800269a:	2304      	movs	r3, #4
 800269c:	e006      	b.n	80026ac <HAL_GPIO_Init+0x244>
 800269e:	2303      	movs	r3, #3
 80026a0:	e004      	b.n	80026ac <HAL_GPIO_Init+0x244>
 80026a2:	2302      	movs	r3, #2
 80026a4:	e002      	b.n	80026ac <HAL_GPIO_Init+0x244>
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <HAL_GPIO_Init+0x244>
 80026aa:	2300      	movs	r3, #0
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	f002 0203 	and.w	r2, r2, #3
 80026b2:	0092      	lsls	r2, r2, #2
 80026b4:	4093      	lsls	r3, r2
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026bc:	4937      	ldr	r1, [pc, #220]	; (800279c <HAL_GPIO_Init+0x334>)
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	089b      	lsrs	r3, r3, #2
 80026c2:	3302      	adds	r3, #2
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026ca:	4b3b      	ldr	r3, [pc, #236]	; (80027b8 <HAL_GPIO_Init+0x350>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	43db      	mvns	r3, r3
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	4013      	ands	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026ee:	4a32      	ldr	r2, [pc, #200]	; (80027b8 <HAL_GPIO_Init+0x350>)
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026f4:	4b30      	ldr	r3, [pc, #192]	; (80027b8 <HAL_GPIO_Init+0x350>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	43db      	mvns	r3, r3
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	4013      	ands	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	4313      	orrs	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002718:	4a27      	ldr	r2, [pc, #156]	; (80027b8 <HAL_GPIO_Init+0x350>)
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800271e:	4b26      	ldr	r3, [pc, #152]	; (80027b8 <HAL_GPIO_Init+0x350>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	43db      	mvns	r3, r3
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	4013      	ands	r3, r2
 800272c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4313      	orrs	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002742:	4a1d      	ldr	r2, [pc, #116]	; (80027b8 <HAL_GPIO_Init+0x350>)
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002748:	4b1b      	ldr	r3, [pc, #108]	; (80027b8 <HAL_GPIO_Init+0x350>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	43db      	mvns	r3, r3
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	4013      	ands	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d003      	beq.n	800276c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	4313      	orrs	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800276c:	4a12      	ldr	r2, [pc, #72]	; (80027b8 <HAL_GPIO_Init+0x350>)
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	3301      	adds	r3, #1
 8002776:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	fa22 f303 	lsr.w	r3, r2, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	f47f ae78 	bne.w	8002478 <HAL_GPIO_Init+0x10>
  }
}
 8002788:	bf00      	nop
 800278a:	bf00      	nop
 800278c:	371c      	adds	r7, #28
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	40021000 	.word	0x40021000
 800279c:	40010000 	.word	0x40010000
 80027a0:	48000400 	.word	0x48000400
 80027a4:	48000800 	.word	0x48000800
 80027a8:	48000c00 	.word	0x48000c00
 80027ac:	48001000 	.word	0x48001000
 80027b0:	48001400 	.word	0x48001400
 80027b4:	48001800 	.word	0x48001800
 80027b8:	40010400 	.word	0x40010400

080027bc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80027bc:	b480      	push	{r7}
 80027be:	b087      	sub	sp, #28
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027c6:	2300      	movs	r3, #0
 80027c8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80027ca:	e0cd      	b.n	8002968 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80027cc:	2201      	movs	r2, #1
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	4013      	ands	r3, r2
 80027d8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 80c0 	beq.w	8002962 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80027e2:	4a68      	ldr	r2, [pc, #416]	; (8002984 <HAL_GPIO_DeInit+0x1c8>)
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	089b      	lsrs	r3, r3, #2
 80027e8:	3302      	adds	r3, #2
 80027ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ee:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	220f      	movs	r2, #15
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	4013      	ands	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800280a:	d025      	beq.n	8002858 <HAL_GPIO_DeInit+0x9c>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a5e      	ldr	r2, [pc, #376]	; (8002988 <HAL_GPIO_DeInit+0x1cc>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d01f      	beq.n	8002854 <HAL_GPIO_DeInit+0x98>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a5d      	ldr	r2, [pc, #372]	; (800298c <HAL_GPIO_DeInit+0x1d0>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d019      	beq.n	8002850 <HAL_GPIO_DeInit+0x94>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a5c      	ldr	r2, [pc, #368]	; (8002990 <HAL_GPIO_DeInit+0x1d4>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d013      	beq.n	800284c <HAL_GPIO_DeInit+0x90>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a5b      	ldr	r2, [pc, #364]	; (8002994 <HAL_GPIO_DeInit+0x1d8>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d00d      	beq.n	8002848 <HAL_GPIO_DeInit+0x8c>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a5a      	ldr	r2, [pc, #360]	; (8002998 <HAL_GPIO_DeInit+0x1dc>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d007      	beq.n	8002844 <HAL_GPIO_DeInit+0x88>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a59      	ldr	r2, [pc, #356]	; (800299c <HAL_GPIO_DeInit+0x1e0>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d101      	bne.n	8002840 <HAL_GPIO_DeInit+0x84>
 800283c:	2306      	movs	r3, #6
 800283e:	e00c      	b.n	800285a <HAL_GPIO_DeInit+0x9e>
 8002840:	2307      	movs	r3, #7
 8002842:	e00a      	b.n	800285a <HAL_GPIO_DeInit+0x9e>
 8002844:	2305      	movs	r3, #5
 8002846:	e008      	b.n	800285a <HAL_GPIO_DeInit+0x9e>
 8002848:	2304      	movs	r3, #4
 800284a:	e006      	b.n	800285a <HAL_GPIO_DeInit+0x9e>
 800284c:	2303      	movs	r3, #3
 800284e:	e004      	b.n	800285a <HAL_GPIO_DeInit+0x9e>
 8002850:	2302      	movs	r3, #2
 8002852:	e002      	b.n	800285a <HAL_GPIO_DeInit+0x9e>
 8002854:	2301      	movs	r3, #1
 8002856:	e000      	b.n	800285a <HAL_GPIO_DeInit+0x9e>
 8002858:	2300      	movs	r3, #0
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	f002 0203 	and.w	r2, r2, #3
 8002860:	0092      	lsls	r2, r2, #2
 8002862:	4093      	lsls	r3, r2
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	429a      	cmp	r2, r3
 8002868:	d132      	bne.n	80028d0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800286a:	4b4d      	ldr	r3, [pc, #308]	; (80029a0 <HAL_GPIO_DeInit+0x1e4>)
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	43db      	mvns	r3, r3
 8002872:	494b      	ldr	r1, [pc, #300]	; (80029a0 <HAL_GPIO_DeInit+0x1e4>)
 8002874:	4013      	ands	r3, r2
 8002876:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002878:	4b49      	ldr	r3, [pc, #292]	; (80029a0 <HAL_GPIO_DeInit+0x1e4>)
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	43db      	mvns	r3, r3
 8002880:	4947      	ldr	r1, [pc, #284]	; (80029a0 <HAL_GPIO_DeInit+0x1e4>)
 8002882:	4013      	ands	r3, r2
 8002884:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002886:	4b46      	ldr	r3, [pc, #280]	; (80029a0 <HAL_GPIO_DeInit+0x1e4>)
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	43db      	mvns	r3, r3
 800288e:	4944      	ldr	r1, [pc, #272]	; (80029a0 <HAL_GPIO_DeInit+0x1e4>)
 8002890:	4013      	ands	r3, r2
 8002892:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002894:	4b42      	ldr	r3, [pc, #264]	; (80029a0 <HAL_GPIO_DeInit+0x1e4>)
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	43db      	mvns	r3, r3
 800289c:	4940      	ldr	r1, [pc, #256]	; (80029a0 <HAL_GPIO_DeInit+0x1e4>)
 800289e:	4013      	ands	r3, r2
 80028a0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f003 0303 	and.w	r3, r3, #3
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	220f      	movs	r2, #15
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80028b2:	4a34      	ldr	r2, [pc, #208]	; (8002984 <HAL_GPIO_DeInit+0x1c8>)
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	089b      	lsrs	r3, r3, #2
 80028b8:	3302      	adds	r3, #2
 80028ba:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	43da      	mvns	r2, r3
 80028c2:	4830      	ldr	r0, [pc, #192]	; (8002984 <HAL_GPIO_DeInit+0x1c8>)
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	089b      	lsrs	r3, r3, #2
 80028c8:	400a      	ands	r2, r1
 80028ca:	3302      	adds	r3, #2
 80028cc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	2103      	movs	r1, #3
 80028da:	fa01 f303 	lsl.w	r3, r1, r3
 80028de:	431a      	orrs	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	08da      	lsrs	r2, r3, #3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3208      	adds	r2, #8
 80028ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	220f      	movs	r2, #15
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43db      	mvns	r3, r3
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	08d2      	lsrs	r2, r2, #3
 8002904:	4019      	ands	r1, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	3208      	adds	r2, #8
 800290a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	2103      	movs	r1, #3
 8002918:	fa01 f303 	lsl.w	r3, r1, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	401a      	ands	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	2101      	movs	r1, #1
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	fa01 f303 	lsl.w	r3, r1, r3
 8002930:	43db      	mvns	r3, r3
 8002932:	401a      	ands	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68da      	ldr	r2, [r3, #12]
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	2103      	movs	r1, #3
 8002942:	fa01 f303 	lsl.w	r3, r1, r3
 8002946:	43db      	mvns	r3, r3
 8002948:	401a      	ands	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002952:	2101      	movs	r1, #1
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	fa01 f303 	lsl.w	r3, r1, r3
 800295a:	43db      	mvns	r3, r3
 800295c:	401a      	ands	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	3301      	adds	r3, #1
 8002966:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	fa22 f303 	lsr.w	r3, r2, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	f47f af2b 	bne.w	80027cc <HAL_GPIO_DeInit+0x10>
  }
}
 8002976:	bf00      	nop
 8002978:	bf00      	nop
 800297a:	371c      	adds	r7, #28
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	40010000 	.word	0x40010000
 8002988:	48000400 	.word	0x48000400
 800298c:	48000800 	.word	0x48000800
 8002990:	48000c00 	.word	0x48000c00
 8002994:	48001000 	.word	0x48001000
 8002998:	48001400 	.word	0x48001400
 800299c:	48001800 	.word	0x48001800
 80029a0:	40010400 	.word	0x40010400

080029a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	460b      	mov	r3, r1
 80029ae:	807b      	strh	r3, [r7, #2]
 80029b0:	4613      	mov	r3, r2
 80029b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029b4:	787b      	ldrb	r3, [r7, #1]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029ba:	887a      	ldrh	r2, [r7, #2]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029c0:	e002      	b.n	80029c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029c2:	887a      	ldrh	r2, [r7, #2]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029e6:	887a      	ldrh	r2, [r7, #2]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4013      	ands	r3, r2
 80029ec:	041a      	lsls	r2, r3, #16
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	43d9      	mvns	r1, r3
 80029f2:	887b      	ldrh	r3, [r7, #2]
 80029f4:	400b      	ands	r3, r1
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	619a      	str	r2, [r3, #24]
}
 80029fc:	bf00      	nop
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a12:	4b08      	ldr	r3, [pc, #32]	; (8002a34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a14:	695a      	ldr	r2, [r3, #20]
 8002a16:	88fb      	ldrh	r3, [r7, #6]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d006      	beq.n	8002a2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a1e:	4a05      	ldr	r2, [pc, #20]	; (8002a34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a20:	88fb      	ldrh	r3, [r7, #6]
 8002a22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a24:	88fb      	ldrh	r3, [r7, #6]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 f806 	bl	8002a38 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a2c:	bf00      	nop
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	40010400 	.word	0x40010400

08002a38 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	4603      	mov	r3, r0
 8002a40:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e081      	b.n	8002b64 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d106      	bne.n	8002a7a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f7fe fdb1 	bl	80015dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2224      	movs	r2, #36	; 0x24
 8002a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0201 	bic.w	r2, r2, #1
 8002a90:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a9e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002aae:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d107      	bne.n	8002ac8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ac4:	609a      	str	r2, [r3, #8]
 8002ac6:	e006      	b.n	8002ad6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002ad4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d104      	bne.n	8002ae8 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ae6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	6812      	ldr	r2, [r2, #0]
 8002af2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002af6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002afa:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68da      	ldr	r2, [r3, #12]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b0a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	691a      	ldr	r2, [r3, #16]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69d9      	ldr	r1, [r3, #28]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1a      	ldr	r2, [r3, #32]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f042 0201 	orr.w	r2, r2, #1
 8002b44:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2220      	movs	r2, #32
 8002b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e021      	b.n	8002bc2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2224      	movs	r2, #36	; 0x24
 8002b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0201 	bic.w	r2, r2, #1
 8002b94:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7fe fd7e 	bl	8001698 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b088      	sub	sp, #32
 8002bd0:	af02      	add	r7, sp, #8
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	4608      	mov	r0, r1
 8002bd6:	4611      	mov	r1, r2
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4603      	mov	r3, r0
 8002bdc:	817b      	strh	r3, [r7, #10]
 8002bde:	460b      	mov	r3, r1
 8002be0:	813b      	strh	r3, [r7, #8]
 8002be2:	4613      	mov	r3, r2
 8002be4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b20      	cmp	r3, #32
 8002bf0:	f040 80f9 	bne.w	8002de6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d002      	beq.n	8002c00 <HAL_I2C_Mem_Write+0x34>
 8002bfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d105      	bne.n	8002c0c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c06:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e0ed      	b.n	8002de8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d101      	bne.n	8002c1a <HAL_I2C_Mem_Write+0x4e>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e0e6      	b.n	8002de8 <HAL_I2C_Mem_Write+0x21c>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c22:	f7ff fb33 	bl	800228c <HAL_GetTick>
 8002c26:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	2319      	movs	r3, #25
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 fac3 	bl	80031c0 <I2C_WaitOnFlagUntilTimeout>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e0d1      	b.n	8002de8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2221      	movs	r2, #33	; 0x21
 8002c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2240      	movs	r2, #64	; 0x40
 8002c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6a3a      	ldr	r2, [r7, #32]
 8002c5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c6c:	88f8      	ldrh	r0, [r7, #6]
 8002c6e:	893a      	ldrh	r2, [r7, #8]
 8002c70:	8979      	ldrh	r1, [r7, #10]
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	9301      	str	r3, [sp, #4]
 8002c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f000 f9d3 	bl	8003028 <I2C_RequestMemoryWrite>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d005      	beq.n	8002c94 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e0a9      	b.n	8002de8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	2bff      	cmp	r3, #255	; 0xff
 8002c9c:	d90e      	bls.n	8002cbc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	22ff      	movs	r2, #255	; 0xff
 8002ca2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	8979      	ldrh	r1, [r7, #10]
 8002cac:	2300      	movs	r3, #0
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 fc2b 	bl	8003510 <I2C_TransferConfig>
 8002cba:	e00f      	b.n	8002cdc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	8979      	ldrh	r1, [r7, #10]
 8002cce:	2300      	movs	r3, #0
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 fc1a 	bl	8003510 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 faad 	bl	8003240 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e07b      	b.n	8002de8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	781a      	ldrb	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	1c5a      	adds	r2, r3, #1
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d034      	beq.n	8002d94 <HAL_I2C_Mem_Write+0x1c8>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d130      	bne.n	8002d94 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d38:	2200      	movs	r2, #0
 8002d3a:	2180      	movs	r1, #128	; 0x80
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 fa3f 	bl	80031c0 <I2C_WaitOnFlagUntilTimeout>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e04d      	b.n	8002de8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	2bff      	cmp	r3, #255	; 0xff
 8002d54:	d90e      	bls.n	8002d74 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	22ff      	movs	r2, #255	; 0xff
 8002d5a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	8979      	ldrh	r1, [r7, #10]
 8002d64:	2300      	movs	r3, #0
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 fbcf 	bl	8003510 <I2C_TransferConfig>
 8002d72:	e00f      	b.n	8002d94 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	8979      	ldrh	r1, [r7, #10]
 8002d86:	2300      	movs	r3, #0
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 fbbe 	bl	8003510 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d19e      	bne.n	8002cdc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 fa8c 	bl	80032c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e01a      	b.n	8002de8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2220      	movs	r2, #32
 8002db8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6859      	ldr	r1, [r3, #4]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	4b0a      	ldr	r3, [pc, #40]	; (8002df0 <HAL_I2C_Mem_Write+0x224>)
 8002dc6:	400b      	ands	r3, r1
 8002dc8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002de2:	2300      	movs	r3, #0
 8002de4:	e000      	b.n	8002de8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002de6:	2302      	movs	r3, #2
  }
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	fe00e800 	.word	0xfe00e800

08002df4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b088      	sub	sp, #32
 8002df8:	af02      	add	r7, sp, #8
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	4608      	mov	r0, r1
 8002dfe:	4611      	mov	r1, r2
 8002e00:	461a      	mov	r2, r3
 8002e02:	4603      	mov	r3, r0
 8002e04:	817b      	strh	r3, [r7, #10]
 8002e06:	460b      	mov	r3, r1
 8002e08:	813b      	strh	r3, [r7, #8]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b20      	cmp	r3, #32
 8002e18:	f040 80fd 	bne.w	8003016 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e1c:	6a3b      	ldr	r3, [r7, #32]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d002      	beq.n	8002e28 <HAL_I2C_Mem_Read+0x34>
 8002e22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d105      	bne.n	8002e34 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e2e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e0f1      	b.n	8003018 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d101      	bne.n	8002e42 <HAL_I2C_Mem_Read+0x4e>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e0ea      	b.n	8003018 <HAL_I2C_Mem_Read+0x224>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e4a:	f7ff fa1f 	bl	800228c <HAL_GetTick>
 8002e4e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	2319      	movs	r3, #25
 8002e56:	2201      	movs	r2, #1
 8002e58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 f9af 	bl	80031c0 <I2C_WaitOnFlagUntilTimeout>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e0d5      	b.n	8003018 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2222      	movs	r2, #34	; 0x22
 8002e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2240      	movs	r2, #64	; 0x40
 8002e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6a3a      	ldr	r2, [r7, #32]
 8002e86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e94:	88f8      	ldrh	r0, [r7, #6]
 8002e96:	893a      	ldrh	r2, [r7, #8]
 8002e98:	8979      	ldrh	r1, [r7, #10]
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	9301      	str	r3, [sp, #4]
 8002e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 f913 	bl	80030d0 <I2C_RequestMemoryRead>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e0ad      	b.n	8003018 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	2bff      	cmp	r3, #255	; 0xff
 8002ec4:	d90e      	bls.n	8002ee4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	22ff      	movs	r2, #255	; 0xff
 8002eca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	8979      	ldrh	r1, [r7, #10]
 8002ed4:	4b52      	ldr	r3, [pc, #328]	; (8003020 <HAL_I2C_Mem_Read+0x22c>)
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 fb17 	bl	8003510 <I2C_TransferConfig>
 8002ee2:	e00f      	b.n	8002f04 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	8979      	ldrh	r1, [r7, #10]
 8002ef6:	4b4a      	ldr	r3, [pc, #296]	; (8003020 <HAL_I2C_Mem_Read+0x22c>)
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f000 fb06 	bl	8003510 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	2104      	movs	r1, #4
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 f956 	bl	80031c0 <I2C_WaitOnFlagUntilTimeout>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e07c      	b.n	8003018 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	b2d2      	uxtb	r2, r2
 8002f2a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d034      	beq.n	8002fc4 <HAL_I2C_Mem_Read+0x1d0>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d130      	bne.n	8002fc4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f68:	2200      	movs	r2, #0
 8002f6a:	2180      	movs	r1, #128	; 0x80
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f000 f927 	bl	80031c0 <I2C_WaitOnFlagUntilTimeout>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e04d      	b.n	8003018 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	2bff      	cmp	r3, #255	; 0xff
 8002f84:	d90e      	bls.n	8002fa4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	22ff      	movs	r2, #255	; 0xff
 8002f8a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	8979      	ldrh	r1, [r7, #10]
 8002f94:	2300      	movs	r3, #0
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 fab7 	bl	8003510 <I2C_TransferConfig>
 8002fa2:	e00f      	b.n	8002fc4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	8979      	ldrh	r1, [r7, #10]
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 faa6 	bl	8003510 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d19a      	bne.n	8002f04 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 f974 	bl	80032c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e01a      	b.n	8003018 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6859      	ldr	r1, [r3, #4]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <HAL_I2C_Mem_Read+0x230>)
 8002ff6:	400b      	ands	r3, r1
 8002ff8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	e000      	b.n	8003018 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003016:	2302      	movs	r3, #2
  }
}
 8003018:	4618      	mov	r0, r3
 800301a:	3718      	adds	r7, #24
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	80002400 	.word	0x80002400
 8003024:	fe00e800 	.word	0xfe00e800

08003028 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af02      	add	r7, sp, #8
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	4608      	mov	r0, r1
 8003032:	4611      	mov	r1, r2
 8003034:	461a      	mov	r2, r3
 8003036:	4603      	mov	r3, r0
 8003038:	817b      	strh	r3, [r7, #10]
 800303a:	460b      	mov	r3, r1
 800303c:	813b      	strh	r3, [r7, #8]
 800303e:	4613      	mov	r3, r2
 8003040:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003042:	88fb      	ldrh	r3, [r7, #6]
 8003044:	b2da      	uxtb	r2, r3
 8003046:	8979      	ldrh	r1, [r7, #10]
 8003048:	4b20      	ldr	r3, [pc, #128]	; (80030cc <I2C_RequestMemoryWrite+0xa4>)
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 fa5d 	bl	8003510 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003056:	69fa      	ldr	r2, [r7, #28]
 8003058:	69b9      	ldr	r1, [r7, #24]
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 f8f0 	bl	8003240 <I2C_WaitOnTXISFlagUntilTimeout>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e02c      	b.n	80030c4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800306a:	88fb      	ldrh	r3, [r7, #6]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d105      	bne.n	800307c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003070:	893b      	ldrh	r3, [r7, #8]
 8003072:	b2da      	uxtb	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	629a      	str	r2, [r3, #40]	; 0x28
 800307a:	e015      	b.n	80030a8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800307c:	893b      	ldrh	r3, [r7, #8]
 800307e:	0a1b      	lsrs	r3, r3, #8
 8003080:	b29b      	uxth	r3, r3
 8003082:	b2da      	uxtb	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800308a:	69fa      	ldr	r2, [r7, #28]
 800308c:	69b9      	ldr	r1, [r7, #24]
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 f8d6 	bl	8003240 <I2C_WaitOnTXISFlagUntilTimeout>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e012      	b.n	80030c4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800309e:	893b      	ldrh	r3, [r7, #8]
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	2200      	movs	r2, #0
 80030b0:	2180      	movs	r1, #128	; 0x80
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 f884 	bl	80031c0 <I2C_WaitOnFlagUntilTimeout>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	80002000 	.word	0x80002000

080030d0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af02      	add	r7, sp, #8
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	4608      	mov	r0, r1
 80030da:	4611      	mov	r1, r2
 80030dc:	461a      	mov	r2, r3
 80030de:	4603      	mov	r3, r0
 80030e0:	817b      	strh	r3, [r7, #10]
 80030e2:	460b      	mov	r3, r1
 80030e4:	813b      	strh	r3, [r7, #8]
 80030e6:	4613      	mov	r3, r2
 80030e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80030ea:	88fb      	ldrh	r3, [r7, #6]
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	8979      	ldrh	r1, [r7, #10]
 80030f0:	4b20      	ldr	r3, [pc, #128]	; (8003174 <I2C_RequestMemoryRead+0xa4>)
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	2300      	movs	r3, #0
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 fa0a 	bl	8003510 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030fc:	69fa      	ldr	r2, [r7, #28]
 80030fe:	69b9      	ldr	r1, [r7, #24]
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 f89d 	bl	8003240 <I2C_WaitOnTXISFlagUntilTimeout>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e02c      	b.n	800316a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003110:	88fb      	ldrh	r3, [r7, #6]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d105      	bne.n	8003122 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003116:	893b      	ldrh	r3, [r7, #8]
 8003118:	b2da      	uxtb	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	629a      	str	r2, [r3, #40]	; 0x28
 8003120:	e015      	b.n	800314e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003122:	893b      	ldrh	r3, [r7, #8]
 8003124:	0a1b      	lsrs	r3, r3, #8
 8003126:	b29b      	uxth	r3, r3
 8003128:	b2da      	uxtb	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003130:	69fa      	ldr	r2, [r7, #28]
 8003132:	69b9      	ldr	r1, [r7, #24]
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 f883 	bl	8003240 <I2C_WaitOnTXISFlagUntilTimeout>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e012      	b.n	800316a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003144:	893b      	ldrh	r3, [r7, #8]
 8003146:	b2da      	uxtb	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	2200      	movs	r2, #0
 8003156:	2140      	movs	r1, #64	; 0x40
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f000 f831 	bl	80031c0 <I2C_WaitOnFlagUntilTimeout>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e000      	b.n	800316a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	80002000 	.word	0x80002000

08003178 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b02      	cmp	r3, #2
 800318c:	d103      	bne.n	8003196 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2200      	movs	r2, #0
 8003194:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d007      	beq.n	80031b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	699a      	ldr	r2, [r3, #24]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0201 	orr.w	r2, r2, #1
 80031b2:	619a      	str	r2, [r3, #24]
  }
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	603b      	str	r3, [r7, #0]
 80031cc:	4613      	mov	r3, r2
 80031ce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031d0:	e022      	b.n	8003218 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d8:	d01e      	beq.n	8003218 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031da:	f7ff f857 	bl	800228c <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d302      	bcc.n	80031f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d113      	bne.n	8003218 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f4:	f043 0220 	orr.w	r2, r3, #32
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2220      	movs	r2, #32
 8003200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e00f      	b.n	8003238 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699a      	ldr	r2, [r3, #24]
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	4013      	ands	r3, r2
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	429a      	cmp	r2, r3
 8003226:	bf0c      	ite	eq
 8003228:	2301      	moveq	r3, #1
 800322a:	2300      	movne	r3, #0
 800322c:	b2db      	uxtb	r3, r3
 800322e:	461a      	mov	r2, r3
 8003230:	79fb      	ldrb	r3, [r7, #7]
 8003232:	429a      	cmp	r2, r3
 8003234:	d0cd      	beq.n	80031d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800324c:	e02c      	b.n	80032a8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	68b9      	ldr	r1, [r7, #8]
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 f870 	bl	8003338 <I2C_IsErrorOccurred>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e02a      	b.n	80032b8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003268:	d01e      	beq.n	80032a8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800326a:	f7ff f80f 	bl	800228c <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	68ba      	ldr	r2, [r7, #8]
 8003276:	429a      	cmp	r2, r3
 8003278:	d302      	bcc.n	8003280 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d113      	bne.n	80032a8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003284:	f043 0220 	orr.w	r2, r3, #32
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2220      	movs	r2, #32
 8003290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e007      	b.n	80032b8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d1cb      	bne.n	800324e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032cc:	e028      	b.n	8003320 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	68b9      	ldr	r1, [r7, #8]
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 f830 	bl	8003338 <I2C_IsErrorOccurred>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e026      	b.n	8003330 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e2:	f7fe ffd3 	bl	800228c <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d302      	bcc.n	80032f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d113      	bne.n	8003320 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fc:	f043 0220 	orr.w	r2, r3, #32
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2220      	movs	r2, #32
 8003308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e007      	b.n	8003330 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	f003 0320 	and.w	r3, r3, #32
 800332a:	2b20      	cmp	r3, #32
 800332c:	d1cf      	bne.n	80032ce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b08a      	sub	sp, #40	; 0x28
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003344:	2300      	movs	r3, #0
 8003346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	f003 0310 	and.w	r3, r3, #16
 8003360:	2b00      	cmp	r3, #0
 8003362:	d075      	beq.n	8003450 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2210      	movs	r2, #16
 800336a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800336c:	e056      	b.n	800341c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003374:	d052      	beq.n	800341c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003376:	f7fe ff89 	bl	800228c <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	429a      	cmp	r2, r3
 8003384:	d302      	bcc.n	800338c <I2C_IsErrorOccurred+0x54>
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d147      	bne.n	800341c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003396:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800339e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033ae:	d12e      	bne.n	800340e <I2C_IsErrorOccurred+0xd6>
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033b6:	d02a      	beq.n	800340e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80033b8:	7cfb      	ldrb	r3, [r7, #19]
 80033ba:	2b20      	cmp	r3, #32
 80033bc:	d027      	beq.n	800340e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033cc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80033ce:	f7fe ff5d 	bl	800228c <HAL_GetTick>
 80033d2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033d4:	e01b      	b.n	800340e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80033d6:	f7fe ff59 	bl	800228c <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b19      	cmp	r3, #25
 80033e2:	d914      	bls.n	800340e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e8:	f043 0220 	orr.w	r2, r3, #32
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	f003 0320 	and.w	r3, r3, #32
 8003418:	2b20      	cmp	r3, #32
 800341a:	d1dc      	bne.n	80033d6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	f003 0320 	and.w	r3, r3, #32
 8003426:	2b20      	cmp	r3, #32
 8003428:	d003      	beq.n	8003432 <I2C_IsErrorOccurred+0xfa>
 800342a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800342e:	2b00      	cmp	r3, #0
 8003430:	d09d      	beq.n	800336e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003432:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003436:	2b00      	cmp	r3, #0
 8003438:	d103      	bne.n	8003442 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2220      	movs	r2, #32
 8003440:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	f043 0304 	orr.w	r3, r3, #4
 8003448:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00b      	beq.n	800347a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	f043 0301 	orr.w	r3, r3, #1
 8003468:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003472:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00b      	beq.n	800349c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	f043 0308 	orr.w	r3, r3, #8
 800348a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003494:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00b      	beq.n	80034be <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	f043 0302 	orr.w	r3, r3, #2
 80034ac:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80034be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d01c      	beq.n	8003500 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f7ff fe56 	bl	8003178 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6859      	ldr	r1, [r3, #4]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	4b0d      	ldr	r3, [pc, #52]	; (800350c <I2C_IsErrorOccurred+0x1d4>)
 80034d8:	400b      	ands	r3, r1
 80034da:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	431a      	orrs	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2220      	movs	r2, #32
 80034ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003500:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003504:	4618      	mov	r0, r3
 8003506:	3728      	adds	r7, #40	; 0x28
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	fe00e800 	.word	0xfe00e800

08003510 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003510:	b480      	push	{r7}
 8003512:	b087      	sub	sp, #28
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	607b      	str	r3, [r7, #4]
 800351a:	460b      	mov	r3, r1
 800351c:	817b      	strh	r3, [r7, #10]
 800351e:	4613      	mov	r3, r2
 8003520:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003522:	897b      	ldrh	r3, [r7, #10]
 8003524:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003528:	7a7b      	ldrb	r3, [r7, #9]
 800352a:	041b      	lsls	r3, r3, #16
 800352c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003530:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	4313      	orrs	r3, r2
 800353a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800353e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	0d5b      	lsrs	r3, r3, #21
 800354a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800354e:	4b08      	ldr	r3, [pc, #32]	; (8003570 <I2C_TransferConfig+0x60>)
 8003550:	430b      	orrs	r3, r1
 8003552:	43db      	mvns	r3, r3
 8003554:	ea02 0103 	and.w	r1, r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	430a      	orrs	r2, r1
 8003560:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003562:	bf00      	nop
 8003564:	371c      	adds	r7, #28
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	03ff63ff 	.word	0x03ff63ff

08003574 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b20      	cmp	r3, #32
 8003588:	d138      	bne.n	80035fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003590:	2b01      	cmp	r3, #1
 8003592:	d101      	bne.n	8003598 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003594:	2302      	movs	r3, #2
 8003596:	e032      	b.n	80035fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2224      	movs	r2, #36	; 0x24
 80035a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0201 	bic.w	r2, r2, #1
 80035b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6819      	ldr	r1, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f042 0201 	orr.w	r2, r2, #1
 80035e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2220      	movs	r2, #32
 80035ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035f8:	2300      	movs	r3, #0
 80035fa:	e000      	b.n	80035fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80035fc:	2302      	movs	r3, #2
  }
}
 80035fe:	4618      	mov	r0, r3
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800360a:	b480      	push	{r7}
 800360c:	b085      	sub	sp, #20
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
 8003612:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b20      	cmp	r3, #32
 800361e:	d139      	bne.n	8003694 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003626:	2b01      	cmp	r3, #1
 8003628:	d101      	bne.n	800362e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800362a:	2302      	movs	r3, #2
 800362c:	e033      	b.n	8003696 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2224      	movs	r2, #36	; 0x24
 800363a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0201 	bic.w	r2, r2, #1
 800364c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800365c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	021b      	lsls	r3, r3, #8
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	4313      	orrs	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0201 	orr.w	r2, r2, #1
 800367e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2220      	movs	r2, #32
 8003684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003690:	2300      	movs	r3, #0
 8003692:	e000      	b.n	8003696 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003694:	2302      	movs	r3, #2
  }
}
 8003696:	4618      	mov	r0, r3
 8003698:	3714      	adds	r7, #20
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
	...

080036a4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036a8:	4b05      	ldr	r3, [pc, #20]	; (80036c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a04      	ldr	r2, [pc, #16]	; (80036c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b2:	6013      	str	r3, [r2, #0]
}
 80036b4:	bf00      	nop
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	40007000 	.word	0x40007000

080036c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80036c8:	4b04      	ldr	r3, [pc, #16]	; (80036dc <HAL_PWREx_GetVoltageRange+0x18>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	40007000 	.word	0x40007000

080036e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036ee:	d130      	bne.n	8003752 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80036f0:	4b23      	ldr	r3, [pc, #140]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036fc:	d038      	beq.n	8003770 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036fe:	4b20      	ldr	r3, [pc, #128]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003706:	4a1e      	ldr	r2, [pc, #120]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003708:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800370c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800370e:	4b1d      	ldr	r3, [pc, #116]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2232      	movs	r2, #50	; 0x32
 8003714:	fb02 f303 	mul.w	r3, r2, r3
 8003718:	4a1b      	ldr	r2, [pc, #108]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800371a:	fba2 2303 	umull	r2, r3, r2, r3
 800371e:	0c9b      	lsrs	r3, r3, #18
 8003720:	3301      	adds	r3, #1
 8003722:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003724:	e002      	b.n	800372c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	3b01      	subs	r3, #1
 800372a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800372c:	4b14      	ldr	r3, [pc, #80]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003738:	d102      	bne.n	8003740 <HAL_PWREx_ControlVoltageScaling+0x60>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1f2      	bne.n	8003726 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003740:	4b0f      	ldr	r3, [pc, #60]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800374c:	d110      	bne.n	8003770 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e00f      	b.n	8003772 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003752:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800375a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800375e:	d007      	beq.n	8003770 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003760:	4b07      	ldr	r3, [pc, #28]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003768:	4a05      	ldr	r2, [pc, #20]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800376a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800376e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3714      	adds	r7, #20
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	40007000 	.word	0x40007000
 8003784:	20000000 	.word	0x20000000
 8003788:	431bde83 	.word	0x431bde83

0800378c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b088      	sub	sp, #32
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e3ca      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800379e:	4b97      	ldr	r3, [pc, #604]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 030c 	and.w	r3, r3, #12
 80037a6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037a8:	4b94      	ldr	r3, [pc, #592]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f003 0303 	and.w	r3, r3, #3
 80037b0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0310 	and.w	r3, r3, #16
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 80e4 	beq.w	8003988 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d007      	beq.n	80037d6 <HAL_RCC_OscConfig+0x4a>
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	2b0c      	cmp	r3, #12
 80037ca:	f040 808b 	bne.w	80038e4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	f040 8087 	bne.w	80038e4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037d6:	4b89      	ldr	r3, [pc, #548]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d005      	beq.n	80037ee <HAL_RCC_OscConfig+0x62>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e3a2      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1a      	ldr	r2, [r3, #32]
 80037f2:	4b82      	ldr	r3, [pc, #520]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d004      	beq.n	8003808 <HAL_RCC_OscConfig+0x7c>
 80037fe:	4b7f      	ldr	r3, [pc, #508]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003806:	e005      	b.n	8003814 <HAL_RCC_OscConfig+0x88>
 8003808:	4b7c      	ldr	r3, [pc, #496]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 800380a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800380e:	091b      	lsrs	r3, r3, #4
 8003810:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003814:	4293      	cmp	r3, r2
 8003816:	d223      	bcs.n	8003860 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	4618      	mov	r0, r3
 800381e:	f000 fd87 	bl	8004330 <RCC_SetFlashLatencyFromMSIRange>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e383      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800382c:	4b73      	ldr	r3, [pc, #460]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a72      	ldr	r2, [pc, #456]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003832:	f043 0308 	orr.w	r3, r3, #8
 8003836:	6013      	str	r3, [r2, #0]
 8003838:	4b70      	ldr	r3, [pc, #448]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	496d      	ldr	r1, [pc, #436]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003846:	4313      	orrs	r3, r2
 8003848:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800384a:	4b6c      	ldr	r3, [pc, #432]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	021b      	lsls	r3, r3, #8
 8003858:	4968      	ldr	r1, [pc, #416]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 800385a:	4313      	orrs	r3, r2
 800385c:	604b      	str	r3, [r1, #4]
 800385e:	e025      	b.n	80038ac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003860:	4b66      	ldr	r3, [pc, #408]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a65      	ldr	r2, [pc, #404]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003866:	f043 0308 	orr.w	r3, r3, #8
 800386a:	6013      	str	r3, [r2, #0]
 800386c:	4b63      	ldr	r3, [pc, #396]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	4960      	ldr	r1, [pc, #384]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 800387a:	4313      	orrs	r3, r2
 800387c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800387e:	4b5f      	ldr	r3, [pc, #380]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	021b      	lsls	r3, r3, #8
 800388c:	495b      	ldr	r1, [pc, #364]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 800388e:	4313      	orrs	r3, r2
 8003890:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d109      	bne.n	80038ac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	4618      	mov	r0, r3
 800389e:	f000 fd47 	bl	8004330 <RCC_SetFlashLatencyFromMSIRange>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e343      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038ac:	f000 fc4a 	bl	8004144 <HAL_RCC_GetSysClockFreq>
 80038b0:	4602      	mov	r2, r0
 80038b2:	4b52      	ldr	r3, [pc, #328]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	091b      	lsrs	r3, r3, #4
 80038b8:	f003 030f 	and.w	r3, r3, #15
 80038bc:	4950      	ldr	r1, [pc, #320]	; (8003a00 <HAL_RCC_OscConfig+0x274>)
 80038be:	5ccb      	ldrb	r3, [r1, r3]
 80038c0:	f003 031f 	and.w	r3, r3, #31
 80038c4:	fa22 f303 	lsr.w	r3, r2, r3
 80038c8:	4a4e      	ldr	r2, [pc, #312]	; (8003a04 <HAL_RCC_OscConfig+0x278>)
 80038ca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80038cc:	4b4e      	ldr	r3, [pc, #312]	; (8003a08 <HAL_RCC_OscConfig+0x27c>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fd ff63 	bl	800179c <HAL_InitTick>
 80038d6:	4603      	mov	r3, r0
 80038d8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80038da:	7bfb      	ldrb	r3, [r7, #15]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d052      	beq.n	8003986 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80038e0:	7bfb      	ldrb	r3, [r7, #15]
 80038e2:	e327      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d032      	beq.n	8003952 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80038ec:	4b43      	ldr	r3, [pc, #268]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a42      	ldr	r2, [pc, #264]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80038f2:	f043 0301 	orr.w	r3, r3, #1
 80038f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038f8:	f7fe fcc8 	bl	800228c <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003900:	f7fe fcc4 	bl	800228c <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e310      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003912:	4b3a      	ldr	r3, [pc, #232]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0f0      	beq.n	8003900 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800391e:	4b37      	ldr	r3, [pc, #220]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a36      	ldr	r2, [pc, #216]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003924:	f043 0308 	orr.w	r3, r3, #8
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	4b34      	ldr	r3, [pc, #208]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	4931      	ldr	r1, [pc, #196]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003938:	4313      	orrs	r3, r2
 800393a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800393c:	4b2f      	ldr	r3, [pc, #188]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	69db      	ldr	r3, [r3, #28]
 8003948:	021b      	lsls	r3, r3, #8
 800394a:	492c      	ldr	r1, [pc, #176]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 800394c:	4313      	orrs	r3, r2
 800394e:	604b      	str	r3, [r1, #4]
 8003950:	e01a      	b.n	8003988 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003952:	4b2a      	ldr	r3, [pc, #168]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a29      	ldr	r2, [pc, #164]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 8003958:	f023 0301 	bic.w	r3, r3, #1
 800395c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800395e:	f7fe fc95 	bl	800228c <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003964:	e008      	b.n	8003978 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003966:	f7fe fc91 	bl	800228c <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e2dd      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003978:	4b20      	ldr	r3, [pc, #128]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1f0      	bne.n	8003966 <HAL_RCC_OscConfig+0x1da>
 8003984:	e000      	b.n	8003988 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003986:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b00      	cmp	r3, #0
 8003992:	d074      	beq.n	8003a7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	2b08      	cmp	r3, #8
 8003998:	d005      	beq.n	80039a6 <HAL_RCC_OscConfig+0x21a>
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	2b0c      	cmp	r3, #12
 800399e:	d10e      	bne.n	80039be <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	2b03      	cmp	r3, #3
 80039a4:	d10b      	bne.n	80039be <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a6:	4b15      	ldr	r3, [pc, #84]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d064      	beq.n	8003a7c <HAL_RCC_OscConfig+0x2f0>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d160      	bne.n	8003a7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e2ba      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c6:	d106      	bne.n	80039d6 <HAL_RCC_OscConfig+0x24a>
 80039c8:	4b0c      	ldr	r3, [pc, #48]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a0b      	ldr	r2, [pc, #44]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80039ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d2:	6013      	str	r3, [r2, #0]
 80039d4:	e026      	b.n	8003a24 <HAL_RCC_OscConfig+0x298>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039de:	d115      	bne.n	8003a0c <HAL_RCC_OscConfig+0x280>
 80039e0:	4b06      	ldr	r3, [pc, #24]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a05      	ldr	r2, [pc, #20]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80039e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039ea:	6013      	str	r3, [r2, #0]
 80039ec:	4b03      	ldr	r3, [pc, #12]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a02      	ldr	r2, [pc, #8]	; (80039fc <HAL_RCC_OscConfig+0x270>)
 80039f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f6:	6013      	str	r3, [r2, #0]
 80039f8:	e014      	b.n	8003a24 <HAL_RCC_OscConfig+0x298>
 80039fa:	bf00      	nop
 80039fc:	40021000 	.word	0x40021000
 8003a00:	0800b154 	.word	0x0800b154
 8003a04:	20000000 	.word	0x20000000
 8003a08:	20000048 	.word	0x20000048
 8003a0c:	4ba0      	ldr	r3, [pc, #640]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a9f      	ldr	r2, [pc, #636]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a16:	6013      	str	r3, [r2, #0]
 8003a18:	4b9d      	ldr	r3, [pc, #628]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a9c      	ldr	r2, [pc, #624]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d013      	beq.n	8003a54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2c:	f7fe fc2e 	bl	800228c <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a34:	f7fe fc2a 	bl	800228c <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b64      	cmp	r3, #100	; 0x64
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e276      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a46:	4b92      	ldr	r3, [pc, #584]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCC_OscConfig+0x2a8>
 8003a52:	e014      	b.n	8003a7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a54:	f7fe fc1a 	bl	800228c <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a5c:	f7fe fc16 	bl	800228c <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b64      	cmp	r3, #100	; 0x64
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e262      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a6e:	4b88      	ldr	r3, [pc, #544]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1f0      	bne.n	8003a5c <HAL_RCC_OscConfig+0x2d0>
 8003a7a:	e000      	b.n	8003a7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d060      	beq.n	8003b4c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	2b04      	cmp	r3, #4
 8003a8e:	d005      	beq.n	8003a9c <HAL_RCC_OscConfig+0x310>
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	2b0c      	cmp	r3, #12
 8003a94:	d119      	bne.n	8003aca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d116      	bne.n	8003aca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a9c:	4b7c      	ldr	r3, [pc, #496]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d005      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x328>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e23f      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab4:	4b76      	ldr	r3, [pc, #472]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	061b      	lsls	r3, r3, #24
 8003ac2:	4973      	ldr	r1, [pc, #460]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ac8:	e040      	b.n	8003b4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d023      	beq.n	8003b1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ad2:	4b6f      	ldr	r3, [pc, #444]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a6e      	ldr	r2, [pc, #440]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003adc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ade:	f7fe fbd5 	bl	800228c <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ae6:	f7fe fbd1 	bl	800228c <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e21d      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003af8:	4b65      	ldr	r3, [pc, #404]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0f0      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b04:	4b62      	ldr	r3, [pc, #392]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	061b      	lsls	r3, r3, #24
 8003b12:	495f      	ldr	r1, [pc, #380]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	604b      	str	r3, [r1, #4]
 8003b18:	e018      	b.n	8003b4c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b1a:	4b5d      	ldr	r3, [pc, #372]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a5c      	ldr	r2, [pc, #368]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003b20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b26:	f7fe fbb1 	bl	800228c <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b2c:	e008      	b.n	8003b40 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b2e:	f7fe fbad 	bl	800228c <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e1f9      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b40:	4b53      	ldr	r3, [pc, #332]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1f0      	bne.n	8003b2e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0308 	and.w	r3, r3, #8
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d03c      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d01c      	beq.n	8003b9a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b60:	4b4b      	ldr	r3, [pc, #300]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b66:	4a4a      	ldr	r2, [pc, #296]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003b68:	f043 0301 	orr.w	r3, r3, #1
 8003b6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b70:	f7fe fb8c 	bl	800228c <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b78:	f7fe fb88 	bl	800228c <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e1d4      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b8a:	4b41      	ldr	r3, [pc, #260]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0ef      	beq.n	8003b78 <HAL_RCC_OscConfig+0x3ec>
 8003b98:	e01b      	b.n	8003bd2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b9a:	4b3d      	ldr	r3, [pc, #244]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ba0:	4a3b      	ldr	r2, [pc, #236]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003ba2:	f023 0301 	bic.w	r3, r3, #1
 8003ba6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003baa:	f7fe fb6f 	bl	800228c <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bb0:	e008      	b.n	8003bc4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bb2:	f7fe fb6b 	bl	800228c <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e1b7      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bc4:	4b32      	ldr	r3, [pc, #200]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1ef      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0304 	and.w	r3, r3, #4
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 80a6 	beq.w	8003d2c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003be0:	2300      	movs	r3, #0
 8003be2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003be4:	4b2a      	ldr	r3, [pc, #168]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10d      	bne.n	8003c0c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bf0:	4b27      	ldr	r3, [pc, #156]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf4:	4a26      	ldr	r2, [pc, #152]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003bf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bfa:	6593      	str	r3, [r2, #88]	; 0x58
 8003bfc:	4b24      	ldr	r3, [pc, #144]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c04:	60bb      	str	r3, [r7, #8]
 8003c06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c0c:	4b21      	ldr	r3, [pc, #132]	; (8003c94 <HAL_RCC_OscConfig+0x508>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d118      	bne.n	8003c4a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c18:	4b1e      	ldr	r3, [pc, #120]	; (8003c94 <HAL_RCC_OscConfig+0x508>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a1d      	ldr	r2, [pc, #116]	; (8003c94 <HAL_RCC_OscConfig+0x508>)
 8003c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c24:	f7fe fb32 	bl	800228c <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c2c:	f7fe fb2e 	bl	800228c <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e17a      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c3e:	4b15      	ldr	r3, [pc, #84]	; (8003c94 <HAL_RCC_OscConfig+0x508>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0f0      	beq.n	8003c2c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d108      	bne.n	8003c64 <HAL_RCC_OscConfig+0x4d8>
 8003c52:	4b0f      	ldr	r3, [pc, #60]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c58:	4a0d      	ldr	r2, [pc, #52]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003c5a:	f043 0301 	orr.w	r3, r3, #1
 8003c5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c62:	e029      	b.n	8003cb8 <HAL_RCC_OscConfig+0x52c>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	2b05      	cmp	r3, #5
 8003c6a:	d115      	bne.n	8003c98 <HAL_RCC_OscConfig+0x50c>
 8003c6c:	4b08      	ldr	r3, [pc, #32]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c72:	4a07      	ldr	r2, [pc, #28]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003c74:	f043 0304 	orr.w	r3, r3, #4
 8003c78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c7c:	4b04      	ldr	r3, [pc, #16]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c82:	4a03      	ldr	r2, [pc, #12]	; (8003c90 <HAL_RCC_OscConfig+0x504>)
 8003c84:	f043 0301 	orr.w	r3, r3, #1
 8003c88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c8c:	e014      	b.n	8003cb8 <HAL_RCC_OscConfig+0x52c>
 8003c8e:	bf00      	nop
 8003c90:	40021000 	.word	0x40021000
 8003c94:	40007000 	.word	0x40007000
 8003c98:	4b9c      	ldr	r3, [pc, #624]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9e:	4a9b      	ldr	r2, [pc, #620]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003ca0:	f023 0301 	bic.w	r3, r3, #1
 8003ca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ca8:	4b98      	ldr	r3, [pc, #608]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cae:	4a97      	ldr	r2, [pc, #604]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003cb0:	f023 0304 	bic.w	r3, r3, #4
 8003cb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d016      	beq.n	8003cee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc0:	f7fe fae4 	bl	800228c <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cc6:	e00a      	b.n	8003cde <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc8:	f7fe fae0 	bl	800228c <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e12a      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cde:	4b8b      	ldr	r3, [pc, #556]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d0ed      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x53c>
 8003cec:	e015      	b.n	8003d1a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cee:	f7fe facd 	bl	800228c <HAL_GetTick>
 8003cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cf4:	e00a      	b.n	8003d0c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf6:	f7fe fac9 	bl	800228c <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e113      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d0c:	4b7f      	ldr	r3, [pc, #508]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1ed      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d1a:	7ffb      	ldrb	r3, [r7, #31]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d105      	bne.n	8003d2c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d20:	4b7a      	ldr	r3, [pc, #488]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d24:	4a79      	ldr	r2, [pc, #484]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003d26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d2a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 80fe 	beq.w	8003f32 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	f040 80d0 	bne.w	8003ee0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d40:	4b72      	ldr	r3, [pc, #456]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f003 0203 	and.w	r2, r3, #3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d130      	bne.n	8003db6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d127      	bne.n	8003db6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d70:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d11f      	bne.n	8003db6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d80:	2a07      	cmp	r2, #7
 8003d82:	bf14      	ite	ne
 8003d84:	2201      	movne	r2, #1
 8003d86:	2200      	moveq	r2, #0
 8003d88:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d113      	bne.n	8003db6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d98:	085b      	lsrs	r3, r3, #1
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d109      	bne.n	8003db6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dac:	085b      	lsrs	r3, r3, #1
 8003dae:	3b01      	subs	r3, #1
 8003db0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d06e      	beq.n	8003e94 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	2b0c      	cmp	r3, #12
 8003dba:	d069      	beq.n	8003e90 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003dbc:	4b53      	ldr	r3, [pc, #332]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d105      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003dc8:	4b50      	ldr	r3, [pc, #320]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e0ad      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003dd8:	4b4c      	ldr	r3, [pc, #304]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a4b      	ldr	r2, [pc, #300]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003dde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003de2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003de4:	f7fe fa52 	bl	800228c <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dec:	f7fe fa4e 	bl	800228c <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e09a      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dfe:	4b43      	ldr	r3, [pc, #268]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1f0      	bne.n	8003dec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e0a:	4b40      	ldr	r3, [pc, #256]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003e0c:	68da      	ldr	r2, [r3, #12]
 8003e0e:	4b40      	ldr	r3, [pc, #256]	; (8003f10 <HAL_RCC_OscConfig+0x784>)
 8003e10:	4013      	ands	r3, r2
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e1a:	3a01      	subs	r2, #1
 8003e1c:	0112      	lsls	r2, r2, #4
 8003e1e:	4311      	orrs	r1, r2
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e24:	0212      	lsls	r2, r2, #8
 8003e26:	4311      	orrs	r1, r2
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e2c:	0852      	lsrs	r2, r2, #1
 8003e2e:	3a01      	subs	r2, #1
 8003e30:	0552      	lsls	r2, r2, #21
 8003e32:	4311      	orrs	r1, r2
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e38:	0852      	lsrs	r2, r2, #1
 8003e3a:	3a01      	subs	r2, #1
 8003e3c:	0652      	lsls	r2, r2, #25
 8003e3e:	4311      	orrs	r1, r2
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e44:	0912      	lsrs	r2, r2, #4
 8003e46:	0452      	lsls	r2, r2, #17
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	4930      	ldr	r1, [pc, #192]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e50:	4b2e      	ldr	r3, [pc, #184]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a2d      	ldr	r2, [pc, #180]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003e56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e5a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e5c:	4b2b      	ldr	r3, [pc, #172]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	4a2a      	ldr	r2, [pc, #168]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003e62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e66:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e68:	f7fe fa10 	bl	800228c <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e70:	f7fe fa0c 	bl	800228c <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e058      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e82:	4b22      	ldr	r3, [pc, #136]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0f0      	beq.n	8003e70 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e8e:	e050      	b.n	8003f32 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e04f      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e94:	4b1d      	ldr	r3, [pc, #116]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d148      	bne.n	8003f32 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ea0:	4b1a      	ldr	r3, [pc, #104]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a19      	ldr	r2, [pc, #100]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003ea6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eaa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003eac:	4b17      	ldr	r3, [pc, #92]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	4a16      	ldr	r2, [pc, #88]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003eb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eb6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003eb8:	f7fe f9e8 	bl	800228c <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec0:	f7fe f9e4 	bl	800228c <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e030      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ed2:	4b0e      	ldr	r3, [pc, #56]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0f0      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x734>
 8003ede:	e028      	b.n	8003f32 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	2b0c      	cmp	r3, #12
 8003ee4:	d023      	beq.n	8003f2e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee6:	4b09      	ldr	r3, [pc, #36]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a08      	ldr	r2, [pc, #32]	; (8003f0c <HAL_RCC_OscConfig+0x780>)
 8003eec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ef0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef2:	f7fe f9cb 	bl	800228c <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ef8:	e00c      	b.n	8003f14 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003efa:	f7fe f9c7 	bl	800228c <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d905      	bls.n	8003f14 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e013      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f14:	4b09      	ldr	r3, [pc, #36]	; (8003f3c <HAL_RCC_OscConfig+0x7b0>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1ec      	bne.n	8003efa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003f20:	4b06      	ldr	r3, [pc, #24]	; (8003f3c <HAL_RCC_OscConfig+0x7b0>)
 8003f22:	68da      	ldr	r2, [r3, #12]
 8003f24:	4905      	ldr	r1, [pc, #20]	; (8003f3c <HAL_RCC_OscConfig+0x7b0>)
 8003f26:	4b06      	ldr	r3, [pc, #24]	; (8003f40 <HAL_RCC_OscConfig+0x7b4>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	60cb      	str	r3, [r1, #12]
 8003f2c:	e001      	b.n	8003f32 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e000      	b.n	8003f34 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3720      	adds	r7, #32
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	feeefffc 	.word	0xfeeefffc

08003f44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e0e7      	b.n	8004128 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f58:	4b75      	ldr	r3, [pc, #468]	; (8004130 <HAL_RCC_ClockConfig+0x1ec>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d910      	bls.n	8003f88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f66:	4b72      	ldr	r3, [pc, #456]	; (8004130 <HAL_RCC_ClockConfig+0x1ec>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f023 0207 	bic.w	r2, r3, #7
 8003f6e:	4970      	ldr	r1, [pc, #448]	; (8004130 <HAL_RCC_ClockConfig+0x1ec>)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f76:	4b6e      	ldr	r3, [pc, #440]	; (8004130 <HAL_RCC_ClockConfig+0x1ec>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d001      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e0cf      	b.n	8004128 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d010      	beq.n	8003fb6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	4b66      	ldr	r3, [pc, #408]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d908      	bls.n	8003fb6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fa4:	4b63      	ldr	r3, [pc, #396]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	4960      	ldr	r1, [pc, #384]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d04c      	beq.n	800405c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2b03      	cmp	r3, #3
 8003fc8:	d107      	bne.n	8003fda <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fca:	4b5a      	ldr	r3, [pc, #360]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d121      	bne.n	800401a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e0a6      	b.n	8004128 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d107      	bne.n	8003ff2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fe2:	4b54      	ldr	r3, [pc, #336]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d115      	bne.n	800401a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e09a      	b.n	8004128 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d107      	bne.n	800400a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ffa:	4b4e      	ldr	r3, [pc, #312]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d109      	bne.n	800401a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e08e      	b.n	8004128 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800400a:	4b4a      	ldr	r3, [pc, #296]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e086      	b.n	8004128 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800401a:	4b46      	ldr	r3, [pc, #280]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f023 0203 	bic.w	r2, r3, #3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	4943      	ldr	r1, [pc, #268]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 8004028:	4313      	orrs	r3, r2
 800402a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800402c:	f7fe f92e 	bl	800228c <HAL_GetTick>
 8004030:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004032:	e00a      	b.n	800404a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004034:	f7fe f92a 	bl	800228c <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004042:	4293      	cmp	r3, r2
 8004044:	d901      	bls.n	800404a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e06e      	b.n	8004128 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800404a:	4b3a      	ldr	r3, [pc, #232]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 020c 	and.w	r2, r3, #12
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	429a      	cmp	r2, r3
 800405a:	d1eb      	bne.n	8004034 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d010      	beq.n	800408a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	4b31      	ldr	r3, [pc, #196]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004074:	429a      	cmp	r2, r3
 8004076:	d208      	bcs.n	800408a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004078:	4b2e      	ldr	r3, [pc, #184]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	492b      	ldr	r1, [pc, #172]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 8004086:	4313      	orrs	r3, r2
 8004088:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800408a:	4b29      	ldr	r3, [pc, #164]	; (8004130 <HAL_RCC_ClockConfig+0x1ec>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0307 	and.w	r3, r3, #7
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	429a      	cmp	r2, r3
 8004096:	d210      	bcs.n	80040ba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004098:	4b25      	ldr	r3, [pc, #148]	; (8004130 <HAL_RCC_ClockConfig+0x1ec>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f023 0207 	bic.w	r2, r3, #7
 80040a0:	4923      	ldr	r1, [pc, #140]	; (8004130 <HAL_RCC_ClockConfig+0x1ec>)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a8:	4b21      	ldr	r3, [pc, #132]	; (8004130 <HAL_RCC_ClockConfig+0x1ec>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d001      	beq.n	80040ba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e036      	b.n	8004128 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0304 	and.w	r3, r3, #4
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d008      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040c6:	4b1b      	ldr	r3, [pc, #108]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	4918      	ldr	r1, [pc, #96]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0308 	and.w	r3, r3, #8
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d009      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040e4:	4b13      	ldr	r3, [pc, #76]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	4910      	ldr	r1, [pc, #64]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040f8:	f000 f824 	bl	8004144 <HAL_RCC_GetSysClockFreq>
 80040fc:	4602      	mov	r2, r0
 80040fe:	4b0d      	ldr	r3, [pc, #52]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	091b      	lsrs	r3, r3, #4
 8004104:	f003 030f 	and.w	r3, r3, #15
 8004108:	490b      	ldr	r1, [pc, #44]	; (8004138 <HAL_RCC_ClockConfig+0x1f4>)
 800410a:	5ccb      	ldrb	r3, [r1, r3]
 800410c:	f003 031f 	and.w	r3, r3, #31
 8004110:	fa22 f303 	lsr.w	r3, r2, r3
 8004114:	4a09      	ldr	r2, [pc, #36]	; (800413c <HAL_RCC_ClockConfig+0x1f8>)
 8004116:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004118:	4b09      	ldr	r3, [pc, #36]	; (8004140 <HAL_RCC_ClockConfig+0x1fc>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4618      	mov	r0, r3
 800411e:	f7fd fb3d 	bl	800179c <HAL_InitTick>
 8004122:	4603      	mov	r3, r0
 8004124:	72fb      	strb	r3, [r7, #11]

  return status;
 8004126:	7afb      	ldrb	r3, [r7, #11]
}
 8004128:	4618      	mov	r0, r3
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40022000 	.word	0x40022000
 8004134:	40021000 	.word	0x40021000
 8004138:	0800b154 	.word	0x0800b154
 800413c:	20000000 	.word	0x20000000
 8004140:	20000048 	.word	0x20000048

08004144 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004144:	b480      	push	{r7}
 8004146:	b089      	sub	sp, #36	; 0x24
 8004148:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800414a:	2300      	movs	r3, #0
 800414c:	61fb      	str	r3, [r7, #28]
 800414e:	2300      	movs	r3, #0
 8004150:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004152:	4b3e      	ldr	r3, [pc, #248]	; (800424c <HAL_RCC_GetSysClockFreq+0x108>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 030c 	and.w	r3, r3, #12
 800415a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800415c:	4b3b      	ldr	r3, [pc, #236]	; (800424c <HAL_RCC_GetSysClockFreq+0x108>)
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	f003 0303 	and.w	r3, r3, #3
 8004164:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d005      	beq.n	8004178 <HAL_RCC_GetSysClockFreq+0x34>
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	2b0c      	cmp	r3, #12
 8004170:	d121      	bne.n	80041b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d11e      	bne.n	80041b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004178:	4b34      	ldr	r3, [pc, #208]	; (800424c <HAL_RCC_GetSysClockFreq+0x108>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0308 	and.w	r3, r3, #8
 8004180:	2b00      	cmp	r3, #0
 8004182:	d107      	bne.n	8004194 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004184:	4b31      	ldr	r3, [pc, #196]	; (800424c <HAL_RCC_GetSysClockFreq+0x108>)
 8004186:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800418a:	0a1b      	lsrs	r3, r3, #8
 800418c:	f003 030f 	and.w	r3, r3, #15
 8004190:	61fb      	str	r3, [r7, #28]
 8004192:	e005      	b.n	80041a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004194:	4b2d      	ldr	r3, [pc, #180]	; (800424c <HAL_RCC_GetSysClockFreq+0x108>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	091b      	lsrs	r3, r3, #4
 800419a:	f003 030f 	and.w	r3, r3, #15
 800419e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80041a0:	4a2b      	ldr	r2, [pc, #172]	; (8004250 <HAL_RCC_GetSysClockFreq+0x10c>)
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10d      	bne.n	80041cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041b4:	e00a      	b.n	80041cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	2b04      	cmp	r3, #4
 80041ba:	d102      	bne.n	80041c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041bc:	4b25      	ldr	r3, [pc, #148]	; (8004254 <HAL_RCC_GetSysClockFreq+0x110>)
 80041be:	61bb      	str	r3, [r7, #24]
 80041c0:	e004      	b.n	80041cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d101      	bne.n	80041cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041c8:	4b23      	ldr	r3, [pc, #140]	; (8004258 <HAL_RCC_GetSysClockFreq+0x114>)
 80041ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	2b0c      	cmp	r3, #12
 80041d0:	d134      	bne.n	800423c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041d2:	4b1e      	ldr	r3, [pc, #120]	; (800424c <HAL_RCC_GetSysClockFreq+0x108>)
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	f003 0303 	and.w	r3, r3, #3
 80041da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d003      	beq.n	80041ea <HAL_RCC_GetSysClockFreq+0xa6>
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	2b03      	cmp	r3, #3
 80041e6:	d003      	beq.n	80041f0 <HAL_RCC_GetSysClockFreq+0xac>
 80041e8:	e005      	b.n	80041f6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80041ea:	4b1a      	ldr	r3, [pc, #104]	; (8004254 <HAL_RCC_GetSysClockFreq+0x110>)
 80041ec:	617b      	str	r3, [r7, #20]
      break;
 80041ee:	e005      	b.n	80041fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80041f0:	4b19      	ldr	r3, [pc, #100]	; (8004258 <HAL_RCC_GetSysClockFreq+0x114>)
 80041f2:	617b      	str	r3, [r7, #20]
      break;
 80041f4:	e002      	b.n	80041fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	617b      	str	r3, [r7, #20]
      break;
 80041fa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041fc:	4b13      	ldr	r3, [pc, #76]	; (800424c <HAL_RCC_GetSysClockFreq+0x108>)
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	091b      	lsrs	r3, r3, #4
 8004202:	f003 0307 	and.w	r3, r3, #7
 8004206:	3301      	adds	r3, #1
 8004208:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800420a:	4b10      	ldr	r3, [pc, #64]	; (800424c <HAL_RCC_GetSysClockFreq+0x108>)
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	0a1b      	lsrs	r3, r3, #8
 8004210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	fb03 f202 	mul.w	r2, r3, r2
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004220:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004222:	4b0a      	ldr	r3, [pc, #40]	; (800424c <HAL_RCC_GetSysClockFreq+0x108>)
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	0e5b      	lsrs	r3, r3, #25
 8004228:	f003 0303 	and.w	r3, r3, #3
 800422c:	3301      	adds	r3, #1
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	fbb2 f3f3 	udiv	r3, r2, r3
 800423a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800423c:	69bb      	ldr	r3, [r7, #24]
}
 800423e:	4618      	mov	r0, r3
 8004240:	3724      	adds	r7, #36	; 0x24
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	40021000 	.word	0x40021000
 8004250:	0800b16c 	.word	0x0800b16c
 8004254:	00f42400 	.word	0x00f42400
 8004258:	007a1200 	.word	0x007a1200

0800425c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004260:	4b03      	ldr	r3, [pc, #12]	; (8004270 <HAL_RCC_GetHCLKFreq+0x14>)
 8004262:	681b      	ldr	r3, [r3, #0]
}
 8004264:	4618      	mov	r0, r3
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	20000000 	.word	0x20000000

08004274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004278:	f7ff fff0 	bl	800425c <HAL_RCC_GetHCLKFreq>
 800427c:	4602      	mov	r2, r0
 800427e:	4b06      	ldr	r3, [pc, #24]	; (8004298 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	0a1b      	lsrs	r3, r3, #8
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	4904      	ldr	r1, [pc, #16]	; (800429c <HAL_RCC_GetPCLK1Freq+0x28>)
 800428a:	5ccb      	ldrb	r3, [r1, r3]
 800428c:	f003 031f 	and.w	r3, r3, #31
 8004290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004294:	4618      	mov	r0, r3
 8004296:	bd80      	pop	{r7, pc}
 8004298:	40021000 	.word	0x40021000
 800429c:	0800b164 	.word	0x0800b164

080042a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80042a4:	f7ff ffda 	bl	800425c <HAL_RCC_GetHCLKFreq>
 80042a8:	4602      	mov	r2, r0
 80042aa:	4b06      	ldr	r3, [pc, #24]	; (80042c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	0adb      	lsrs	r3, r3, #11
 80042b0:	f003 0307 	and.w	r3, r3, #7
 80042b4:	4904      	ldr	r1, [pc, #16]	; (80042c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80042b6:	5ccb      	ldrb	r3, [r1, r3]
 80042b8:	f003 031f 	and.w	r3, r3, #31
 80042bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40021000 	.word	0x40021000
 80042c8:	0800b164 	.word	0x0800b164

080042cc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	220f      	movs	r2, #15
 80042da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80042dc:	4b12      	ldr	r3, [pc, #72]	; (8004328 <HAL_RCC_GetClockConfig+0x5c>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f003 0203 	and.w	r2, r3, #3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80042e8:	4b0f      	ldr	r3, [pc, #60]	; (8004328 <HAL_RCC_GetClockConfig+0x5c>)
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80042f4:	4b0c      	ldr	r3, [pc, #48]	; (8004328 <HAL_RCC_GetClockConfig+0x5c>)
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004300:	4b09      	ldr	r3, [pc, #36]	; (8004328 <HAL_RCC_GetClockConfig+0x5c>)
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	08db      	lsrs	r3, r3, #3
 8004306:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800430e:	4b07      	ldr	r3, [pc, #28]	; (800432c <HAL_RCC_GetClockConfig+0x60>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0207 	and.w	r2, r3, #7
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	601a      	str	r2, [r3, #0]
}
 800431a:	bf00      	nop
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	40021000 	.word	0x40021000
 800432c:	40022000 	.word	0x40022000

08004330 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004338:	2300      	movs	r3, #0
 800433a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800433c:	4b2a      	ldr	r3, [pc, #168]	; (80043e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800433e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d003      	beq.n	8004350 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004348:	f7ff f9bc 	bl	80036c4 <HAL_PWREx_GetVoltageRange>
 800434c:	6178      	str	r0, [r7, #20]
 800434e:	e014      	b.n	800437a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004350:	4b25      	ldr	r3, [pc, #148]	; (80043e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004354:	4a24      	ldr	r2, [pc, #144]	; (80043e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800435a:	6593      	str	r3, [r2, #88]	; 0x58
 800435c:	4b22      	ldr	r3, [pc, #136]	; (80043e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800435e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004364:	60fb      	str	r3, [r7, #12]
 8004366:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004368:	f7ff f9ac 	bl	80036c4 <HAL_PWREx_GetVoltageRange>
 800436c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800436e:	4b1e      	ldr	r3, [pc, #120]	; (80043e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004372:	4a1d      	ldr	r2, [pc, #116]	; (80043e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004374:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004378:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004380:	d10b      	bne.n	800439a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2b80      	cmp	r3, #128	; 0x80
 8004386:	d919      	bls.n	80043bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2ba0      	cmp	r3, #160	; 0xa0
 800438c:	d902      	bls.n	8004394 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800438e:	2302      	movs	r3, #2
 8004390:	613b      	str	r3, [r7, #16]
 8004392:	e013      	b.n	80043bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004394:	2301      	movs	r3, #1
 8004396:	613b      	str	r3, [r7, #16]
 8004398:	e010      	b.n	80043bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b80      	cmp	r3, #128	; 0x80
 800439e:	d902      	bls.n	80043a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80043a0:	2303      	movs	r3, #3
 80043a2:	613b      	str	r3, [r7, #16]
 80043a4:	e00a      	b.n	80043bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2b80      	cmp	r3, #128	; 0x80
 80043aa:	d102      	bne.n	80043b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80043ac:	2302      	movs	r3, #2
 80043ae:	613b      	str	r3, [r7, #16]
 80043b0:	e004      	b.n	80043bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b70      	cmp	r3, #112	; 0x70
 80043b6:	d101      	bne.n	80043bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043b8:	2301      	movs	r3, #1
 80043ba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80043bc:	4b0b      	ldr	r3, [pc, #44]	; (80043ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f023 0207 	bic.w	r2, r3, #7
 80043c4:	4909      	ldr	r1, [pc, #36]	; (80043ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80043cc:	4b07      	ldr	r3, [pc, #28]	; (80043ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0307 	and.w	r3, r3, #7
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d001      	beq.n	80043de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e000      	b.n	80043e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3718      	adds	r7, #24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	40021000 	.word	0x40021000
 80043ec:	40022000 	.word	0x40022000

080043f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043f8:	2300      	movs	r3, #0
 80043fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043fc:	2300      	movs	r3, #0
 80043fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004408:	2b00      	cmp	r3, #0
 800440a:	d041      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004410:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004414:	d02a      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004416:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800441a:	d824      	bhi.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800441c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004420:	d008      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004422:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004426:	d81e      	bhi.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00a      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800442c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004430:	d010      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004432:	e018      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004434:	4b86      	ldr	r3, [pc, #536]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	4a85      	ldr	r2, [pc, #532]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800443a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800443e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004440:	e015      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	3304      	adds	r3, #4
 8004446:	2100      	movs	r1, #0
 8004448:	4618      	mov	r0, r3
 800444a:	f000 facb 	bl	80049e4 <RCCEx_PLLSAI1_Config>
 800444e:	4603      	mov	r3, r0
 8004450:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004452:	e00c      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3320      	adds	r3, #32
 8004458:	2100      	movs	r1, #0
 800445a:	4618      	mov	r0, r3
 800445c:	f000 fbb6 	bl	8004bcc <RCCEx_PLLSAI2_Config>
 8004460:	4603      	mov	r3, r0
 8004462:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004464:	e003      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	74fb      	strb	r3, [r7, #19]
      break;
 800446a:	e000      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800446c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800446e:	7cfb      	ldrb	r3, [r7, #19]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10b      	bne.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004474:	4b76      	ldr	r3, [pc, #472]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004482:	4973      	ldr	r1, [pc, #460]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004484:	4313      	orrs	r3, r2
 8004486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800448a:	e001      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800448c:	7cfb      	ldrb	r3, [r7, #19]
 800448e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d041      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80044a4:	d02a      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80044a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80044aa:	d824      	bhi.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80044ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044b0:	d008      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80044b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044b6:	d81e      	bhi.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00a      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80044bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044c0:	d010      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80044c2:	e018      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80044c4:	4b62      	ldr	r3, [pc, #392]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	4a61      	ldr	r2, [pc, #388]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80044d0:	e015      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	3304      	adds	r3, #4
 80044d6:	2100      	movs	r1, #0
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 fa83 	bl	80049e4 <RCCEx_PLLSAI1_Config>
 80044de:	4603      	mov	r3, r0
 80044e0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80044e2:	e00c      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	3320      	adds	r3, #32
 80044e8:	2100      	movs	r1, #0
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 fb6e 	bl	8004bcc <RCCEx_PLLSAI2_Config>
 80044f0:	4603      	mov	r3, r0
 80044f2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80044f4:	e003      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	74fb      	strb	r3, [r7, #19]
      break;
 80044fa:	e000      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80044fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044fe:	7cfb      	ldrb	r3, [r7, #19]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10b      	bne.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004504:	4b52      	ldr	r3, [pc, #328]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004512:	494f      	ldr	r1, [pc, #316]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004514:	4313      	orrs	r3, r2
 8004516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800451a:	e001      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800451c:	7cfb      	ldrb	r3, [r7, #19]
 800451e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 80a0 	beq.w	800466e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800452e:	2300      	movs	r3, #0
 8004530:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004532:	4b47      	ldr	r3, [pc, #284]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800453e:	2301      	movs	r3, #1
 8004540:	e000      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004542:	2300      	movs	r3, #0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00d      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004548:	4b41      	ldr	r3, [pc, #260]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800454a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800454c:	4a40      	ldr	r2, [pc, #256]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800454e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004552:	6593      	str	r3, [r2, #88]	; 0x58
 8004554:	4b3e      	ldr	r3, [pc, #248]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800455c:	60bb      	str	r3, [r7, #8]
 800455e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004560:	2301      	movs	r3, #1
 8004562:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004564:	4b3b      	ldr	r3, [pc, #236]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a3a      	ldr	r2, [pc, #232]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800456a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800456e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004570:	f7fd fe8c 	bl	800228c <HAL_GetTick>
 8004574:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004576:	e009      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004578:	f7fd fe88 	bl	800228c <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d902      	bls.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	74fb      	strb	r3, [r7, #19]
        break;
 800458a:	e005      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800458c:	4b31      	ldr	r3, [pc, #196]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004594:	2b00      	cmp	r3, #0
 8004596:	d0ef      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004598:	7cfb      	ldrb	r3, [r7, #19]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d15c      	bne.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800459e:	4b2c      	ldr	r3, [pc, #176]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d01f      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d019      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80045bc:	4b24      	ldr	r3, [pc, #144]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045c8:	4b21      	ldr	r3, [pc, #132]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ce:	4a20      	ldr	r2, [pc, #128]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045d8:	4b1d      	ldr	r3, [pc, #116]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045de:	4a1c      	ldr	r2, [pc, #112]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045e8:	4a19      	ldr	r2, [pc, #100]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d016      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045fa:	f7fd fe47 	bl	800228c <HAL_GetTick>
 80045fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004600:	e00b      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004602:	f7fd fe43 	bl	800228c <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004610:	4293      	cmp	r3, r2
 8004612:	d902      	bls.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	74fb      	strb	r3, [r7, #19]
            break;
 8004618:	e006      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800461a:	4b0d      	ldr	r3, [pc, #52]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800461c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d0ec      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004628:	7cfb      	ldrb	r3, [r7, #19]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d10c      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800462e:	4b08      	ldr	r3, [pc, #32]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004634:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800463e:	4904      	ldr	r1, [pc, #16]	; (8004650 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004640:	4313      	orrs	r3, r2
 8004642:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004646:	e009      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004648:	7cfb      	ldrb	r3, [r7, #19]
 800464a:	74bb      	strb	r3, [r7, #18]
 800464c:	e006      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800464e:	bf00      	nop
 8004650:	40021000 	.word	0x40021000
 8004654:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004658:	7cfb      	ldrb	r3, [r7, #19]
 800465a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800465c:	7c7b      	ldrb	r3, [r7, #17]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d105      	bne.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004662:	4b9e      	ldr	r3, [pc, #632]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004666:	4a9d      	ldr	r2, [pc, #628]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004668:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800466c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800467a:	4b98      	ldr	r3, [pc, #608]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800467c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004680:	f023 0203 	bic.w	r2, r3, #3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004688:	4994      	ldr	r1, [pc, #592]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800468a:	4313      	orrs	r3, r2
 800468c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00a      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800469c:	4b8f      	ldr	r3, [pc, #572]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800469e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a2:	f023 020c 	bic.w	r2, r3, #12
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046aa:	498c      	ldr	r1, [pc, #560]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0304 	and.w	r3, r3, #4
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00a      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046be:	4b87      	ldr	r3, [pc, #540]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046cc:	4983      	ldr	r1, [pc, #524]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0308 	and.w	r3, r3, #8
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00a      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046e0:	4b7e      	ldr	r3, [pc, #504]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ee:	497b      	ldr	r1, [pc, #492]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0310 	and.w	r3, r3, #16
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00a      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004702:	4b76      	ldr	r3, [pc, #472]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004708:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004710:	4972      	ldr	r1, [pc, #456]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004712:	4313      	orrs	r3, r2
 8004714:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0320 	and.w	r3, r3, #32
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00a      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004724:	4b6d      	ldr	r3, [pc, #436]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004732:	496a      	ldr	r1, [pc, #424]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004734:	4313      	orrs	r3, r2
 8004736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00a      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004746:	4b65      	ldr	r3, [pc, #404]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004754:	4961      	ldr	r1, [pc, #388]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004756:	4313      	orrs	r3, r2
 8004758:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00a      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004768:	4b5c      	ldr	r3, [pc, #368]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800476a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004776:	4959      	ldr	r1, [pc, #356]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004778:	4313      	orrs	r3, r2
 800477a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00a      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800478a:	4b54      	ldr	r3, [pc, #336]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800478c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004790:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004798:	4950      	ldr	r1, [pc, #320]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800479a:	4313      	orrs	r3, r2
 800479c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00a      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047ac:	4b4b      	ldr	r3, [pc, #300]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ba:	4948      	ldr	r1, [pc, #288]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00a      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047ce:	4b43      	ldr	r3, [pc, #268]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047dc:	493f      	ldr	r1, [pc, #252]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d028      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047f0:	4b3a      	ldr	r3, [pc, #232]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047fe:	4937      	ldr	r1, [pc, #220]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004800:	4313      	orrs	r3, r2
 8004802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800480a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800480e:	d106      	bne.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004810:	4b32      	ldr	r3, [pc, #200]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	4a31      	ldr	r2, [pc, #196]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004816:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800481a:	60d3      	str	r3, [r2, #12]
 800481c:	e011      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004822:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004826:	d10c      	bne.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	3304      	adds	r3, #4
 800482c:	2101      	movs	r1, #1
 800482e:	4618      	mov	r0, r3
 8004830:	f000 f8d8 	bl	80049e4 <RCCEx_PLLSAI1_Config>
 8004834:	4603      	mov	r3, r0
 8004836:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004838:	7cfb      	ldrb	r3, [r7, #19]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800483e:	7cfb      	ldrb	r3, [r7, #19]
 8004840:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d028      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800484e:	4b23      	ldr	r3, [pc, #140]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004854:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485c:	491f      	ldr	r1, [pc, #124]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800485e:	4313      	orrs	r3, r2
 8004860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004868:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800486c:	d106      	bne.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800486e:	4b1b      	ldr	r3, [pc, #108]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	4a1a      	ldr	r2, [pc, #104]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004874:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004878:	60d3      	str	r3, [r2, #12]
 800487a:	e011      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004880:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004884:	d10c      	bne.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	3304      	adds	r3, #4
 800488a:	2101      	movs	r1, #1
 800488c:	4618      	mov	r0, r3
 800488e:	f000 f8a9 	bl	80049e4 <RCCEx_PLLSAI1_Config>
 8004892:	4603      	mov	r3, r0
 8004894:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004896:	7cfb      	ldrb	r3, [r7, #19]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800489c:	7cfb      	ldrb	r3, [r7, #19]
 800489e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d02b      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048ac:	4b0b      	ldr	r3, [pc, #44]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ba:	4908      	ldr	r1, [pc, #32]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048ca:	d109      	bne.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048cc:	4b03      	ldr	r3, [pc, #12]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	4a02      	ldr	r2, [pc, #8]	; (80048dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048d6:	60d3      	str	r3, [r2, #12]
 80048d8:	e014      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80048da:	bf00      	nop
 80048dc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048e8:	d10c      	bne.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	3304      	adds	r3, #4
 80048ee:	2101      	movs	r1, #1
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 f877 	bl	80049e4 <RCCEx_PLLSAI1_Config>
 80048f6:	4603      	mov	r3, r0
 80048f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048fa:	7cfb      	ldrb	r3, [r7, #19]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004900:	7cfb      	ldrb	r3, [r7, #19]
 8004902:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d02f      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004910:	4b2b      	ldr	r3, [pc, #172]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004916:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800491e:	4928      	ldr	r1, [pc, #160]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004920:	4313      	orrs	r3, r2
 8004922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800492a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800492e:	d10d      	bne.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	3304      	adds	r3, #4
 8004934:	2102      	movs	r1, #2
 8004936:	4618      	mov	r0, r3
 8004938:	f000 f854 	bl	80049e4 <RCCEx_PLLSAI1_Config>
 800493c:	4603      	mov	r3, r0
 800493e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004940:	7cfb      	ldrb	r3, [r7, #19]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d014      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004946:	7cfb      	ldrb	r3, [r7, #19]
 8004948:	74bb      	strb	r3, [r7, #18]
 800494a:	e011      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004950:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004954:	d10c      	bne.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	3320      	adds	r3, #32
 800495a:	2102      	movs	r1, #2
 800495c:	4618      	mov	r0, r3
 800495e:	f000 f935 	bl	8004bcc <RCCEx_PLLSAI2_Config>
 8004962:	4603      	mov	r3, r0
 8004964:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004966:	7cfb      	ldrb	r3, [r7, #19]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800496c:	7cfb      	ldrb	r3, [r7, #19]
 800496e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00a      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800497c:	4b10      	ldr	r3, [pc, #64]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800497e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004982:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800498a:	490d      	ldr	r1, [pc, #52]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800498c:	4313      	orrs	r3, r2
 800498e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00b      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800499e:	4b08      	ldr	r3, [pc, #32]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049ae:	4904      	ldr	r1, [pc, #16]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80049b6:	7cbb      	ldrb	r3, [r7, #18]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3718      	adds	r7, #24
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	40021000 	.word	0x40021000

080049c4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80049c4:	b480      	push	{r7}
 80049c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80049c8:	4b05      	ldr	r3, [pc, #20]	; (80049e0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a04      	ldr	r2, [pc, #16]	; (80049e0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80049ce:	f043 0304 	orr.w	r3, r3, #4
 80049d2:	6013      	str	r3, [r2, #0]
}
 80049d4:	bf00      	nop
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	40021000 	.word	0x40021000

080049e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049ee:	2300      	movs	r3, #0
 80049f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049f2:	4b75      	ldr	r3, [pc, #468]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f003 0303 	and.w	r3, r3, #3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d018      	beq.n	8004a30 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80049fe:	4b72      	ldr	r3, [pc, #456]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f003 0203 	and.w	r2, r3, #3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d10d      	bne.n	8004a2a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
       ||
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d009      	beq.n	8004a2a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004a16:	4b6c      	ldr	r3, [pc, #432]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	091b      	lsrs	r3, r3, #4
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	1c5a      	adds	r2, r3, #1
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
       ||
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d047      	beq.n	8004aba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	73fb      	strb	r3, [r7, #15]
 8004a2e:	e044      	b.n	8004aba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b03      	cmp	r3, #3
 8004a36:	d018      	beq.n	8004a6a <RCCEx_PLLSAI1_Config+0x86>
 8004a38:	2b03      	cmp	r3, #3
 8004a3a:	d825      	bhi.n	8004a88 <RCCEx_PLLSAI1_Config+0xa4>
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d002      	beq.n	8004a46 <RCCEx_PLLSAI1_Config+0x62>
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d009      	beq.n	8004a58 <RCCEx_PLLSAI1_Config+0x74>
 8004a44:	e020      	b.n	8004a88 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a46:	4b60      	ldr	r3, [pc, #384]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d11d      	bne.n	8004a8e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a56:	e01a      	b.n	8004a8e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a58:	4b5b      	ldr	r3, [pc, #364]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d116      	bne.n	8004a92 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a68:	e013      	b.n	8004a92 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a6a:	4b57      	ldr	r3, [pc, #348]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10f      	bne.n	8004a96 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a76:	4b54      	ldr	r3, [pc, #336]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d109      	bne.n	8004a96 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a86:	e006      	b.n	8004a96 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a8c:	e004      	b.n	8004a98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a8e:	bf00      	nop
 8004a90:	e002      	b.n	8004a98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a92:	bf00      	nop
 8004a94:	e000      	b.n	8004a98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a96:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a98:	7bfb      	ldrb	r3, [r7, #15]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10d      	bne.n	8004aba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a9e:	4b4a      	ldr	r3, [pc, #296]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6819      	ldr	r1, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	011b      	lsls	r3, r3, #4
 8004ab2:	430b      	orrs	r3, r1
 8004ab4:	4944      	ldr	r1, [pc, #272]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004aba:	7bfb      	ldrb	r3, [r7, #15]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d17d      	bne.n	8004bbc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ac0:	4b41      	ldr	r3, [pc, #260]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a40      	ldr	r2, [pc, #256]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ac6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004aca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004acc:	f7fd fbde 	bl	800228c <HAL_GetTick>
 8004ad0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ad2:	e009      	b.n	8004ae8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ad4:	f7fd fbda 	bl	800228c <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d902      	bls.n	8004ae8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	73fb      	strb	r3, [r7, #15]
        break;
 8004ae6:	e005      	b.n	8004af4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ae8:	4b37      	ldr	r3, [pc, #220]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1ef      	bne.n	8004ad4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004af4:	7bfb      	ldrb	r3, [r7, #15]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d160      	bne.n	8004bbc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d111      	bne.n	8004b24 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b00:	4b31      	ldr	r3, [pc, #196]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	6892      	ldr	r2, [r2, #8]
 8004b10:	0211      	lsls	r1, r2, #8
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	68d2      	ldr	r2, [r2, #12]
 8004b16:	0912      	lsrs	r2, r2, #4
 8004b18:	0452      	lsls	r2, r2, #17
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	492a      	ldr	r1, [pc, #168]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	610b      	str	r3, [r1, #16]
 8004b22:	e027      	b.n	8004b74 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d112      	bne.n	8004b50 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b2a:	4b27      	ldr	r3, [pc, #156]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004b32:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	6892      	ldr	r2, [r2, #8]
 8004b3a:	0211      	lsls	r1, r2, #8
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6912      	ldr	r2, [r2, #16]
 8004b40:	0852      	lsrs	r2, r2, #1
 8004b42:	3a01      	subs	r2, #1
 8004b44:	0552      	lsls	r2, r2, #21
 8004b46:	430a      	orrs	r2, r1
 8004b48:	491f      	ldr	r1, [pc, #124]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	610b      	str	r3, [r1, #16]
 8004b4e:	e011      	b.n	8004b74 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b50:	4b1d      	ldr	r3, [pc, #116]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b58:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	6892      	ldr	r2, [r2, #8]
 8004b60:	0211      	lsls	r1, r2, #8
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	6952      	ldr	r2, [r2, #20]
 8004b66:	0852      	lsrs	r2, r2, #1
 8004b68:	3a01      	subs	r2, #1
 8004b6a:	0652      	lsls	r2, r2, #25
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	4916      	ldr	r1, [pc, #88]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b74:	4b14      	ldr	r3, [pc, #80]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a13      	ldr	r2, [pc, #76]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b7e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b80:	f7fd fb84 	bl	800228c <HAL_GetTick>
 8004b84:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b86:	e009      	b.n	8004b9c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b88:	f7fd fb80 	bl	800228c <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d902      	bls.n	8004b9c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	73fb      	strb	r3, [r7, #15]
          break;
 8004b9a:	e005      	b.n	8004ba8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b9c:	4b0a      	ldr	r3, [pc, #40]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0ef      	beq.n	8004b88 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004ba8:	7bfb      	ldrb	r3, [r7, #15]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d106      	bne.n	8004bbc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004bae:	4b06      	ldr	r3, [pc, #24]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bb0:	691a      	ldr	r2, [r3, #16]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	4904      	ldr	r1, [pc, #16]	; (8004bc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	40021000 	.word	0x40021000

08004bcc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004bda:	4b6a      	ldr	r3, [pc, #424]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	f003 0303 	and.w	r3, r3, #3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d018      	beq.n	8004c18 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004be6:	4b67      	ldr	r3, [pc, #412]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	f003 0203 	and.w	r2, r3, #3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d10d      	bne.n	8004c12 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
       ||
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d009      	beq.n	8004c12 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004bfe:	4b61      	ldr	r3, [pc, #388]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	091b      	lsrs	r3, r3, #4
 8004c04:	f003 0307 	and.w	r3, r3, #7
 8004c08:	1c5a      	adds	r2, r3, #1
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
       ||
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d047      	beq.n	8004ca2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	73fb      	strb	r3, [r7, #15]
 8004c16:	e044      	b.n	8004ca2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2b03      	cmp	r3, #3
 8004c1e:	d018      	beq.n	8004c52 <RCCEx_PLLSAI2_Config+0x86>
 8004c20:	2b03      	cmp	r3, #3
 8004c22:	d825      	bhi.n	8004c70 <RCCEx_PLLSAI2_Config+0xa4>
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d002      	beq.n	8004c2e <RCCEx_PLLSAI2_Config+0x62>
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d009      	beq.n	8004c40 <RCCEx_PLLSAI2_Config+0x74>
 8004c2c:	e020      	b.n	8004c70 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c2e:	4b55      	ldr	r3, [pc, #340]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d11d      	bne.n	8004c76 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c3e:	e01a      	b.n	8004c76 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c40:	4b50      	ldr	r3, [pc, #320]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d116      	bne.n	8004c7a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c50:	e013      	b.n	8004c7a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c52:	4b4c      	ldr	r3, [pc, #304]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10f      	bne.n	8004c7e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c5e:	4b49      	ldr	r3, [pc, #292]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d109      	bne.n	8004c7e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c6e:	e006      	b.n	8004c7e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	73fb      	strb	r3, [r7, #15]
      break;
 8004c74:	e004      	b.n	8004c80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c76:	bf00      	nop
 8004c78:	e002      	b.n	8004c80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c7a:	bf00      	nop
 8004c7c:	e000      	b.n	8004c80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004c7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c80:	7bfb      	ldrb	r3, [r7, #15]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10d      	bne.n	8004ca2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c86:	4b3f      	ldr	r3, [pc, #252]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6819      	ldr	r1, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	3b01      	subs	r3, #1
 8004c98:	011b      	lsls	r3, r3, #4
 8004c9a:	430b      	orrs	r3, r1
 8004c9c:	4939      	ldr	r1, [pc, #228]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ca2:	7bfb      	ldrb	r3, [r7, #15]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d167      	bne.n	8004d78 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004ca8:	4b36      	ldr	r3, [pc, #216]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a35      	ldr	r2, [pc, #212]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cb4:	f7fd faea 	bl	800228c <HAL_GetTick>
 8004cb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004cba:	e009      	b.n	8004cd0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004cbc:	f7fd fae6 	bl	800228c <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d902      	bls.n	8004cd0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	73fb      	strb	r3, [r7, #15]
        break;
 8004cce:	e005      	b.n	8004cdc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004cd0:	4b2c      	ldr	r3, [pc, #176]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1ef      	bne.n	8004cbc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004cdc:	7bfb      	ldrb	r3, [r7, #15]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d14a      	bne.n	8004d78 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d111      	bne.n	8004d0c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ce8:	4b26      	ldr	r3, [pc, #152]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	6892      	ldr	r2, [r2, #8]
 8004cf8:	0211      	lsls	r1, r2, #8
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	68d2      	ldr	r2, [r2, #12]
 8004cfe:	0912      	lsrs	r2, r2, #4
 8004d00:	0452      	lsls	r2, r2, #17
 8004d02:	430a      	orrs	r2, r1
 8004d04:	491f      	ldr	r1, [pc, #124]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	614b      	str	r3, [r1, #20]
 8004d0a:	e011      	b.n	8004d30 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d0c:	4b1d      	ldr	r3, [pc, #116]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004d14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	6892      	ldr	r2, [r2, #8]
 8004d1c:	0211      	lsls	r1, r2, #8
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	6912      	ldr	r2, [r2, #16]
 8004d22:	0852      	lsrs	r2, r2, #1
 8004d24:	3a01      	subs	r2, #1
 8004d26:	0652      	lsls	r2, r2, #25
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	4916      	ldr	r1, [pc, #88]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004d30:	4b14      	ldr	r3, [pc, #80]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a13      	ldr	r2, [pc, #76]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d3c:	f7fd faa6 	bl	800228c <HAL_GetTick>
 8004d40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d42:	e009      	b.n	8004d58 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d44:	f7fd faa2 	bl	800228c <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d902      	bls.n	8004d58 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	73fb      	strb	r3, [r7, #15]
          break;
 8004d56:	e005      	b.n	8004d64 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d58:	4b0a      	ldr	r3, [pc, #40]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d0ef      	beq.n	8004d44 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004d64:	7bfb      	ldrb	r3, [r7, #15]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d106      	bne.n	8004d78 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004d6a:	4b06      	ldr	r3, [pc, #24]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d6c:	695a      	ldr	r2, [r3, #20]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	4904      	ldr	r1, [pc, #16]	; (8004d84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	40021000 	.word	0x40021000

08004d88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e049      	b.n	8004e2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d106      	bne.n	8004db4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f841 	bl	8004e36 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2202      	movs	r2, #2
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3304      	adds	r3, #4
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	4610      	mov	r0, r2
 8004dc8:	f000 f9f8 	bl	80051bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3708      	adds	r7, #8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b083      	sub	sp, #12
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e3e:	bf00      	nop
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
	...

08004e4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d001      	beq.n	8004e64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e04f      	b.n	8004f04 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2202      	movs	r2, #2
 8004e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68da      	ldr	r2, [r3, #12]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f042 0201 	orr.w	r2, r2, #1
 8004e7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a23      	ldr	r2, [pc, #140]	; (8004f10 <HAL_TIM_Base_Start_IT+0xc4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d01d      	beq.n	8004ec2 <HAL_TIM_Base_Start_IT+0x76>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e8e:	d018      	beq.n	8004ec2 <HAL_TIM_Base_Start_IT+0x76>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a1f      	ldr	r2, [pc, #124]	; (8004f14 <HAL_TIM_Base_Start_IT+0xc8>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d013      	beq.n	8004ec2 <HAL_TIM_Base_Start_IT+0x76>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a1e      	ldr	r2, [pc, #120]	; (8004f18 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d00e      	beq.n	8004ec2 <HAL_TIM_Base_Start_IT+0x76>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a1c      	ldr	r2, [pc, #112]	; (8004f1c <HAL_TIM_Base_Start_IT+0xd0>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d009      	beq.n	8004ec2 <HAL_TIM_Base_Start_IT+0x76>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a1b      	ldr	r2, [pc, #108]	; (8004f20 <HAL_TIM_Base_Start_IT+0xd4>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d004      	beq.n	8004ec2 <HAL_TIM_Base_Start_IT+0x76>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a19      	ldr	r2, [pc, #100]	; (8004f24 <HAL_TIM_Base_Start_IT+0xd8>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d115      	bne.n	8004eee <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	4b17      	ldr	r3, [pc, #92]	; (8004f28 <HAL_TIM_Base_Start_IT+0xdc>)
 8004eca:	4013      	ands	r3, r2
 8004ecc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2b06      	cmp	r3, #6
 8004ed2:	d015      	beq.n	8004f00 <HAL_TIM_Base_Start_IT+0xb4>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eda:	d011      	beq.n	8004f00 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f042 0201 	orr.w	r2, r2, #1
 8004eea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eec:	e008      	b.n	8004f00 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f042 0201 	orr.w	r2, r2, #1
 8004efc:	601a      	str	r2, [r3, #0]
 8004efe:	e000      	b.n	8004f02 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f00:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	40012c00 	.word	0x40012c00
 8004f14:	40000400 	.word	0x40000400
 8004f18:	40000800 	.word	0x40000800
 8004f1c:	40000c00 	.word	0x40000c00
 8004f20:	40013400 	.word	0x40013400
 8004f24:	40014000 	.word	0x40014000
 8004f28:	00010007 	.word	0x00010007

08004f2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d122      	bne.n	8004f88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d11b      	bne.n	8004f88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f06f 0202 	mvn.w	r2, #2
 8004f58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	f003 0303 	and.w	r3, r3, #3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f905 	bl	800517e <HAL_TIM_IC_CaptureCallback>
 8004f74:	e005      	b.n	8004f82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f8f7 	bl	800516a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 f908 	bl	8005192 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	f003 0304 	and.w	r3, r3, #4
 8004f92:	2b04      	cmp	r3, #4
 8004f94:	d122      	bne.n	8004fdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f003 0304 	and.w	r3, r3, #4
 8004fa0:	2b04      	cmp	r3, #4
 8004fa2:	d11b      	bne.n	8004fdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f06f 0204 	mvn.w	r2, #4
 8004fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2202      	movs	r2, #2
 8004fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f8db 	bl	800517e <HAL_TIM_IC_CaptureCallback>
 8004fc8:	e005      	b.n	8004fd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f8cd 	bl	800516a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 f8de 	bl	8005192 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	f003 0308 	and.w	r3, r3, #8
 8004fe6:	2b08      	cmp	r3, #8
 8004fe8:	d122      	bne.n	8005030 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	f003 0308 	and.w	r3, r3, #8
 8004ff4:	2b08      	cmp	r3, #8
 8004ff6:	d11b      	bne.n	8005030 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f06f 0208 	mvn.w	r2, #8
 8005000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2204      	movs	r2, #4
 8005006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	69db      	ldr	r3, [r3, #28]
 800500e:	f003 0303 	and.w	r3, r3, #3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f8b1 	bl	800517e <HAL_TIM_IC_CaptureCallback>
 800501c:	e005      	b.n	800502a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f8a3 	bl	800516a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f8b4 	bl	8005192 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	f003 0310 	and.w	r3, r3, #16
 800503a:	2b10      	cmp	r3, #16
 800503c:	d122      	bne.n	8005084 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	f003 0310 	and.w	r3, r3, #16
 8005048:	2b10      	cmp	r3, #16
 800504a:	d11b      	bne.n	8005084 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f06f 0210 	mvn.w	r2, #16
 8005054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2208      	movs	r2, #8
 800505a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	69db      	ldr	r3, [r3, #28]
 8005062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f887 	bl	800517e <HAL_TIM_IC_CaptureCallback>
 8005070:	e005      	b.n	800507e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f879 	bl	800516a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 f88a 	bl	8005192 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b01      	cmp	r3, #1
 8005090:	d10e      	bne.n	80050b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	2b01      	cmp	r3, #1
 800509e:	d107      	bne.n	80050b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f06f 0201 	mvn.w	r2, #1
 80050a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f7fc fa08 	bl	80014c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ba:	2b80      	cmp	r3, #128	; 0x80
 80050bc:	d10e      	bne.n	80050dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c8:	2b80      	cmp	r3, #128	; 0x80
 80050ca:	d107      	bne.n	80050dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f914 	bl	8005304 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ea:	d10e      	bne.n	800510a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050f6:	2b80      	cmp	r3, #128	; 0x80
 80050f8:	d107      	bne.n	800510a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 f907 	bl	8005318 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005114:	2b40      	cmp	r3, #64	; 0x40
 8005116:	d10e      	bne.n	8005136 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005122:	2b40      	cmp	r3, #64	; 0x40
 8005124:	d107      	bne.n	8005136 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800512e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 f838 	bl	80051a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	f003 0320 	and.w	r3, r3, #32
 8005140:	2b20      	cmp	r3, #32
 8005142:	d10e      	bne.n	8005162 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	f003 0320 	and.w	r3, r3, #32
 800514e:	2b20      	cmp	r3, #32
 8005150:	d107      	bne.n	8005162 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f06f 0220 	mvn.w	r2, #32
 800515a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f8c7 	bl	80052f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005162:	bf00      	nop
 8005164:	3708      	adds	r7, #8
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800516a:	b480      	push	{r7}
 800516c:	b083      	sub	sp, #12
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005172:	bf00      	nop
 8005174:	370c      	adds	r7, #12
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800517e:	b480      	push	{r7}
 8005180:	b083      	sub	sp, #12
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005192:	b480      	push	{r7}
 8005194:	b083      	sub	sp, #12
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800519a:	bf00      	nop
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr

080051a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051a6:	b480      	push	{r7}
 80051a8:	b083      	sub	sp, #12
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051ae:	bf00      	nop
 80051b0:	370c      	adds	r7, #12
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
	...

080051bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a40      	ldr	r2, [pc, #256]	; (80052d0 <TIM_Base_SetConfig+0x114>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d013      	beq.n	80051fc <TIM_Base_SetConfig+0x40>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051da:	d00f      	beq.n	80051fc <TIM_Base_SetConfig+0x40>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a3d      	ldr	r2, [pc, #244]	; (80052d4 <TIM_Base_SetConfig+0x118>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d00b      	beq.n	80051fc <TIM_Base_SetConfig+0x40>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a3c      	ldr	r2, [pc, #240]	; (80052d8 <TIM_Base_SetConfig+0x11c>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d007      	beq.n	80051fc <TIM_Base_SetConfig+0x40>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a3b      	ldr	r2, [pc, #236]	; (80052dc <TIM_Base_SetConfig+0x120>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d003      	beq.n	80051fc <TIM_Base_SetConfig+0x40>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a3a      	ldr	r2, [pc, #232]	; (80052e0 <TIM_Base_SetConfig+0x124>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d108      	bne.n	800520e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005202:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	4313      	orrs	r3, r2
 800520c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a2f      	ldr	r2, [pc, #188]	; (80052d0 <TIM_Base_SetConfig+0x114>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d01f      	beq.n	8005256 <TIM_Base_SetConfig+0x9a>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800521c:	d01b      	beq.n	8005256 <TIM_Base_SetConfig+0x9a>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a2c      	ldr	r2, [pc, #176]	; (80052d4 <TIM_Base_SetConfig+0x118>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d017      	beq.n	8005256 <TIM_Base_SetConfig+0x9a>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a2b      	ldr	r2, [pc, #172]	; (80052d8 <TIM_Base_SetConfig+0x11c>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d013      	beq.n	8005256 <TIM_Base_SetConfig+0x9a>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a2a      	ldr	r2, [pc, #168]	; (80052dc <TIM_Base_SetConfig+0x120>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d00f      	beq.n	8005256 <TIM_Base_SetConfig+0x9a>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a29      	ldr	r2, [pc, #164]	; (80052e0 <TIM_Base_SetConfig+0x124>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d00b      	beq.n	8005256 <TIM_Base_SetConfig+0x9a>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a28      	ldr	r2, [pc, #160]	; (80052e4 <TIM_Base_SetConfig+0x128>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d007      	beq.n	8005256 <TIM_Base_SetConfig+0x9a>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a27      	ldr	r2, [pc, #156]	; (80052e8 <TIM_Base_SetConfig+0x12c>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d003      	beq.n	8005256 <TIM_Base_SetConfig+0x9a>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a26      	ldr	r2, [pc, #152]	; (80052ec <TIM_Base_SetConfig+0x130>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d108      	bne.n	8005268 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800525c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	4313      	orrs	r3, r2
 8005266:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	4313      	orrs	r3, r2
 8005274:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	689a      	ldr	r2, [r3, #8]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a10      	ldr	r2, [pc, #64]	; (80052d0 <TIM_Base_SetConfig+0x114>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d00f      	beq.n	80052b4 <TIM_Base_SetConfig+0xf8>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a12      	ldr	r2, [pc, #72]	; (80052e0 <TIM_Base_SetConfig+0x124>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d00b      	beq.n	80052b4 <TIM_Base_SetConfig+0xf8>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a11      	ldr	r2, [pc, #68]	; (80052e4 <TIM_Base_SetConfig+0x128>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d007      	beq.n	80052b4 <TIM_Base_SetConfig+0xf8>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a10      	ldr	r2, [pc, #64]	; (80052e8 <TIM_Base_SetConfig+0x12c>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d003      	beq.n	80052b4 <TIM_Base_SetConfig+0xf8>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a0f      	ldr	r2, [pc, #60]	; (80052ec <TIM_Base_SetConfig+0x130>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d103      	bne.n	80052bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	691a      	ldr	r2, [r3, #16]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	615a      	str	r2, [r3, #20]
}
 80052c2:	bf00      	nop
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	40012c00 	.word	0x40012c00
 80052d4:	40000400 	.word	0x40000400
 80052d8:	40000800 	.word	0x40000800
 80052dc:	40000c00 	.word	0x40000c00
 80052e0:	40013400 	.word	0x40013400
 80052e4:	40014000 	.word	0x40014000
 80052e8:	40014400 	.word	0x40014400
 80052ec:	40014800 	.word	0x40014800

080052f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e040      	b.n	80053c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005342:	2b00      	cmp	r3, #0
 8005344:	d106      	bne.n	8005354 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7fc f9c6 	bl	80016e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2224      	movs	r2, #36	; 0x24
 8005358:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 0201 	bic.w	r2, r2, #1
 8005368:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 f8c0 	bl	80054f0 <UART_SetConfig>
 8005370:	4603      	mov	r3, r0
 8005372:	2b01      	cmp	r3, #1
 8005374:	d101      	bne.n	800537a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e022      	b.n	80053c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537e:	2b00      	cmp	r3, #0
 8005380:	d002      	beq.n	8005388 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 fb6c 	bl	8005a60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005396:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	689a      	ldr	r2, [r3, #8]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f042 0201 	orr.w	r2, r2, #1
 80053b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 fbf3 	bl	8005ba4 <UART_CheckIdleState>
 80053be:	4603      	mov	r3, r0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3708      	adds	r7, #8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b08a      	sub	sp, #40	; 0x28
 80053cc:	af02      	add	r7, sp, #8
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	603b      	str	r3, [r7, #0]
 80053d4:	4613      	mov	r3, r2
 80053d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053dc:	2b20      	cmp	r3, #32
 80053de:	f040 8082 	bne.w	80054e6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d002      	beq.n	80053ee <HAL_UART_Transmit+0x26>
 80053e8:	88fb      	ldrh	r3, [r7, #6]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e07a      	b.n	80054e8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d101      	bne.n	8005400 <HAL_UART_Transmit+0x38>
 80053fc:	2302      	movs	r3, #2
 80053fe:	e073      	b.n	80054e8 <HAL_UART_Transmit+0x120>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2221      	movs	r2, #33	; 0x21
 8005414:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005416:	f7fc ff39 	bl	800228c <HAL_GetTick>
 800541a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	88fa      	ldrh	r2, [r7, #6]
 8005420:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	88fa      	ldrh	r2, [r7, #6]
 8005428:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005434:	d108      	bne.n	8005448 <HAL_UART_Transmit+0x80>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d104      	bne.n	8005448 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800543e:	2300      	movs	r3, #0
 8005440:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	61bb      	str	r3, [r7, #24]
 8005446:	e003      	b.n	8005450 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800544c:	2300      	movs	r3, #0
 800544e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005458:	e02d      	b.n	80054b6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	9300      	str	r3, [sp, #0]
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	2200      	movs	r2, #0
 8005462:	2180      	movs	r1, #128	; 0x80
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f000 fbe6 	bl	8005c36 <UART_WaitOnFlagUntilTimeout>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d001      	beq.n	8005474 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e039      	b.n	80054e8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10b      	bne.n	8005492 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	881a      	ldrh	r2, [r3, #0]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005486:	b292      	uxth	r2, r2
 8005488:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	3302      	adds	r3, #2
 800548e:	61bb      	str	r3, [r7, #24]
 8005490:	e008      	b.n	80054a4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	781a      	ldrb	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	b292      	uxth	r2, r2
 800549c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	3301      	adds	r3, #1
 80054a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	3b01      	subs	r3, #1
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80054bc:	b29b      	uxth	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1cb      	bne.n	800545a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	9300      	str	r3, [sp, #0]
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	2200      	movs	r2, #0
 80054ca:	2140      	movs	r1, #64	; 0x40
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f000 fbb2 	bl	8005c36 <UART_WaitOnFlagUntilTimeout>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d001      	beq.n	80054dc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e005      	b.n	80054e8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2220      	movs	r2, #32
 80054e0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80054e2:	2300      	movs	r3, #0
 80054e4:	e000      	b.n	80054e8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80054e6:	2302      	movs	r3, #2
  }
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3720      	adds	r7, #32
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054f4:	b08a      	sub	sp, #40	; 0x28
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054fa:	2300      	movs	r3, #0
 80054fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	431a      	orrs	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	431a      	orrs	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	69db      	ldr	r3, [r3, #28]
 8005514:	4313      	orrs	r3, r2
 8005516:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	4ba4      	ldr	r3, [pc, #656]	; (80057b0 <UART_SetConfig+0x2c0>)
 8005520:	4013      	ands	r3, r2
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	6812      	ldr	r2, [r2, #0]
 8005526:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005528:	430b      	orrs	r3, r1
 800552a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	68da      	ldr	r2, [r3, #12]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	430a      	orrs	r2, r1
 8005540:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a99      	ldr	r2, [pc, #612]	; (80057b4 <UART_SetConfig+0x2c4>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d004      	beq.n	800555c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005558:	4313      	orrs	r3, r2
 800555a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800556c:	430a      	orrs	r2, r1
 800556e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a90      	ldr	r2, [pc, #576]	; (80057b8 <UART_SetConfig+0x2c8>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d126      	bne.n	80055c8 <UART_SetConfig+0xd8>
 800557a:	4b90      	ldr	r3, [pc, #576]	; (80057bc <UART_SetConfig+0x2cc>)
 800557c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005580:	f003 0303 	and.w	r3, r3, #3
 8005584:	2b03      	cmp	r3, #3
 8005586:	d81b      	bhi.n	80055c0 <UART_SetConfig+0xd0>
 8005588:	a201      	add	r2, pc, #4	; (adr r2, 8005590 <UART_SetConfig+0xa0>)
 800558a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558e:	bf00      	nop
 8005590:	080055a1 	.word	0x080055a1
 8005594:	080055b1 	.word	0x080055b1
 8005598:	080055a9 	.word	0x080055a9
 800559c:	080055b9 	.word	0x080055b9
 80055a0:	2301      	movs	r3, #1
 80055a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055a6:	e116      	b.n	80057d6 <UART_SetConfig+0x2e6>
 80055a8:	2302      	movs	r3, #2
 80055aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ae:	e112      	b.n	80057d6 <UART_SetConfig+0x2e6>
 80055b0:	2304      	movs	r3, #4
 80055b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055b6:	e10e      	b.n	80057d6 <UART_SetConfig+0x2e6>
 80055b8:	2308      	movs	r3, #8
 80055ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055be:	e10a      	b.n	80057d6 <UART_SetConfig+0x2e6>
 80055c0:	2310      	movs	r3, #16
 80055c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055c6:	e106      	b.n	80057d6 <UART_SetConfig+0x2e6>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a7c      	ldr	r2, [pc, #496]	; (80057c0 <UART_SetConfig+0x2d0>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d138      	bne.n	8005644 <UART_SetConfig+0x154>
 80055d2:	4b7a      	ldr	r3, [pc, #488]	; (80057bc <UART_SetConfig+0x2cc>)
 80055d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d8:	f003 030c 	and.w	r3, r3, #12
 80055dc:	2b0c      	cmp	r3, #12
 80055de:	d82d      	bhi.n	800563c <UART_SetConfig+0x14c>
 80055e0:	a201      	add	r2, pc, #4	; (adr r2, 80055e8 <UART_SetConfig+0xf8>)
 80055e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e6:	bf00      	nop
 80055e8:	0800561d 	.word	0x0800561d
 80055ec:	0800563d 	.word	0x0800563d
 80055f0:	0800563d 	.word	0x0800563d
 80055f4:	0800563d 	.word	0x0800563d
 80055f8:	0800562d 	.word	0x0800562d
 80055fc:	0800563d 	.word	0x0800563d
 8005600:	0800563d 	.word	0x0800563d
 8005604:	0800563d 	.word	0x0800563d
 8005608:	08005625 	.word	0x08005625
 800560c:	0800563d 	.word	0x0800563d
 8005610:	0800563d 	.word	0x0800563d
 8005614:	0800563d 	.word	0x0800563d
 8005618:	08005635 	.word	0x08005635
 800561c:	2300      	movs	r3, #0
 800561e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005622:	e0d8      	b.n	80057d6 <UART_SetConfig+0x2e6>
 8005624:	2302      	movs	r3, #2
 8005626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800562a:	e0d4      	b.n	80057d6 <UART_SetConfig+0x2e6>
 800562c:	2304      	movs	r3, #4
 800562e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005632:	e0d0      	b.n	80057d6 <UART_SetConfig+0x2e6>
 8005634:	2308      	movs	r3, #8
 8005636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800563a:	e0cc      	b.n	80057d6 <UART_SetConfig+0x2e6>
 800563c:	2310      	movs	r3, #16
 800563e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005642:	e0c8      	b.n	80057d6 <UART_SetConfig+0x2e6>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a5e      	ldr	r2, [pc, #376]	; (80057c4 <UART_SetConfig+0x2d4>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d125      	bne.n	800569a <UART_SetConfig+0x1aa>
 800564e:	4b5b      	ldr	r3, [pc, #364]	; (80057bc <UART_SetConfig+0x2cc>)
 8005650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005654:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005658:	2b30      	cmp	r3, #48	; 0x30
 800565a:	d016      	beq.n	800568a <UART_SetConfig+0x19a>
 800565c:	2b30      	cmp	r3, #48	; 0x30
 800565e:	d818      	bhi.n	8005692 <UART_SetConfig+0x1a2>
 8005660:	2b20      	cmp	r3, #32
 8005662:	d00a      	beq.n	800567a <UART_SetConfig+0x18a>
 8005664:	2b20      	cmp	r3, #32
 8005666:	d814      	bhi.n	8005692 <UART_SetConfig+0x1a2>
 8005668:	2b00      	cmp	r3, #0
 800566a:	d002      	beq.n	8005672 <UART_SetConfig+0x182>
 800566c:	2b10      	cmp	r3, #16
 800566e:	d008      	beq.n	8005682 <UART_SetConfig+0x192>
 8005670:	e00f      	b.n	8005692 <UART_SetConfig+0x1a2>
 8005672:	2300      	movs	r3, #0
 8005674:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005678:	e0ad      	b.n	80057d6 <UART_SetConfig+0x2e6>
 800567a:	2302      	movs	r3, #2
 800567c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005680:	e0a9      	b.n	80057d6 <UART_SetConfig+0x2e6>
 8005682:	2304      	movs	r3, #4
 8005684:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005688:	e0a5      	b.n	80057d6 <UART_SetConfig+0x2e6>
 800568a:	2308      	movs	r3, #8
 800568c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005690:	e0a1      	b.n	80057d6 <UART_SetConfig+0x2e6>
 8005692:	2310      	movs	r3, #16
 8005694:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005698:	e09d      	b.n	80057d6 <UART_SetConfig+0x2e6>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a4a      	ldr	r2, [pc, #296]	; (80057c8 <UART_SetConfig+0x2d8>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d125      	bne.n	80056f0 <UART_SetConfig+0x200>
 80056a4:	4b45      	ldr	r3, [pc, #276]	; (80057bc <UART_SetConfig+0x2cc>)
 80056a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80056ae:	2bc0      	cmp	r3, #192	; 0xc0
 80056b0:	d016      	beq.n	80056e0 <UART_SetConfig+0x1f0>
 80056b2:	2bc0      	cmp	r3, #192	; 0xc0
 80056b4:	d818      	bhi.n	80056e8 <UART_SetConfig+0x1f8>
 80056b6:	2b80      	cmp	r3, #128	; 0x80
 80056b8:	d00a      	beq.n	80056d0 <UART_SetConfig+0x1e0>
 80056ba:	2b80      	cmp	r3, #128	; 0x80
 80056bc:	d814      	bhi.n	80056e8 <UART_SetConfig+0x1f8>
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d002      	beq.n	80056c8 <UART_SetConfig+0x1d8>
 80056c2:	2b40      	cmp	r3, #64	; 0x40
 80056c4:	d008      	beq.n	80056d8 <UART_SetConfig+0x1e8>
 80056c6:	e00f      	b.n	80056e8 <UART_SetConfig+0x1f8>
 80056c8:	2300      	movs	r3, #0
 80056ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ce:	e082      	b.n	80057d6 <UART_SetConfig+0x2e6>
 80056d0:	2302      	movs	r3, #2
 80056d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056d6:	e07e      	b.n	80057d6 <UART_SetConfig+0x2e6>
 80056d8:	2304      	movs	r3, #4
 80056da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056de:	e07a      	b.n	80057d6 <UART_SetConfig+0x2e6>
 80056e0:	2308      	movs	r3, #8
 80056e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056e6:	e076      	b.n	80057d6 <UART_SetConfig+0x2e6>
 80056e8:	2310      	movs	r3, #16
 80056ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ee:	e072      	b.n	80057d6 <UART_SetConfig+0x2e6>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a35      	ldr	r2, [pc, #212]	; (80057cc <UART_SetConfig+0x2dc>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d12a      	bne.n	8005750 <UART_SetConfig+0x260>
 80056fa:	4b30      	ldr	r3, [pc, #192]	; (80057bc <UART_SetConfig+0x2cc>)
 80056fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005700:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005704:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005708:	d01a      	beq.n	8005740 <UART_SetConfig+0x250>
 800570a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800570e:	d81b      	bhi.n	8005748 <UART_SetConfig+0x258>
 8005710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005714:	d00c      	beq.n	8005730 <UART_SetConfig+0x240>
 8005716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800571a:	d815      	bhi.n	8005748 <UART_SetConfig+0x258>
 800571c:	2b00      	cmp	r3, #0
 800571e:	d003      	beq.n	8005728 <UART_SetConfig+0x238>
 8005720:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005724:	d008      	beq.n	8005738 <UART_SetConfig+0x248>
 8005726:	e00f      	b.n	8005748 <UART_SetConfig+0x258>
 8005728:	2300      	movs	r3, #0
 800572a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800572e:	e052      	b.n	80057d6 <UART_SetConfig+0x2e6>
 8005730:	2302      	movs	r3, #2
 8005732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005736:	e04e      	b.n	80057d6 <UART_SetConfig+0x2e6>
 8005738:	2304      	movs	r3, #4
 800573a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800573e:	e04a      	b.n	80057d6 <UART_SetConfig+0x2e6>
 8005740:	2308      	movs	r3, #8
 8005742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005746:	e046      	b.n	80057d6 <UART_SetConfig+0x2e6>
 8005748:	2310      	movs	r3, #16
 800574a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800574e:	e042      	b.n	80057d6 <UART_SetConfig+0x2e6>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a17      	ldr	r2, [pc, #92]	; (80057b4 <UART_SetConfig+0x2c4>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d13a      	bne.n	80057d0 <UART_SetConfig+0x2e0>
 800575a:	4b18      	ldr	r3, [pc, #96]	; (80057bc <UART_SetConfig+0x2cc>)
 800575c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005760:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005764:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005768:	d01a      	beq.n	80057a0 <UART_SetConfig+0x2b0>
 800576a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800576e:	d81b      	bhi.n	80057a8 <UART_SetConfig+0x2b8>
 8005770:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005774:	d00c      	beq.n	8005790 <UART_SetConfig+0x2a0>
 8005776:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800577a:	d815      	bhi.n	80057a8 <UART_SetConfig+0x2b8>
 800577c:	2b00      	cmp	r3, #0
 800577e:	d003      	beq.n	8005788 <UART_SetConfig+0x298>
 8005780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005784:	d008      	beq.n	8005798 <UART_SetConfig+0x2a8>
 8005786:	e00f      	b.n	80057a8 <UART_SetConfig+0x2b8>
 8005788:	2300      	movs	r3, #0
 800578a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800578e:	e022      	b.n	80057d6 <UART_SetConfig+0x2e6>
 8005790:	2302      	movs	r3, #2
 8005792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005796:	e01e      	b.n	80057d6 <UART_SetConfig+0x2e6>
 8005798:	2304      	movs	r3, #4
 800579a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800579e:	e01a      	b.n	80057d6 <UART_SetConfig+0x2e6>
 80057a0:	2308      	movs	r3, #8
 80057a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057a6:	e016      	b.n	80057d6 <UART_SetConfig+0x2e6>
 80057a8:	2310      	movs	r3, #16
 80057aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057ae:	e012      	b.n	80057d6 <UART_SetConfig+0x2e6>
 80057b0:	efff69f3 	.word	0xefff69f3
 80057b4:	40008000 	.word	0x40008000
 80057b8:	40013800 	.word	0x40013800
 80057bc:	40021000 	.word	0x40021000
 80057c0:	40004400 	.word	0x40004400
 80057c4:	40004800 	.word	0x40004800
 80057c8:	40004c00 	.word	0x40004c00
 80057cc:	40005000 	.word	0x40005000
 80057d0:	2310      	movs	r3, #16
 80057d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a9f      	ldr	r2, [pc, #636]	; (8005a58 <UART_SetConfig+0x568>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d17a      	bne.n	80058d6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80057e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057e4:	2b08      	cmp	r3, #8
 80057e6:	d824      	bhi.n	8005832 <UART_SetConfig+0x342>
 80057e8:	a201      	add	r2, pc, #4	; (adr r2, 80057f0 <UART_SetConfig+0x300>)
 80057ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ee:	bf00      	nop
 80057f0:	08005815 	.word	0x08005815
 80057f4:	08005833 	.word	0x08005833
 80057f8:	0800581d 	.word	0x0800581d
 80057fc:	08005833 	.word	0x08005833
 8005800:	08005823 	.word	0x08005823
 8005804:	08005833 	.word	0x08005833
 8005808:	08005833 	.word	0x08005833
 800580c:	08005833 	.word	0x08005833
 8005810:	0800582b 	.word	0x0800582b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005814:	f7fe fd2e 	bl	8004274 <HAL_RCC_GetPCLK1Freq>
 8005818:	61f8      	str	r0, [r7, #28]
        break;
 800581a:	e010      	b.n	800583e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800581c:	4b8f      	ldr	r3, [pc, #572]	; (8005a5c <UART_SetConfig+0x56c>)
 800581e:	61fb      	str	r3, [r7, #28]
        break;
 8005820:	e00d      	b.n	800583e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005822:	f7fe fc8f 	bl	8004144 <HAL_RCC_GetSysClockFreq>
 8005826:	61f8      	str	r0, [r7, #28]
        break;
 8005828:	e009      	b.n	800583e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800582a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800582e:	61fb      	str	r3, [r7, #28]
        break;
 8005830:	e005      	b.n	800583e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005832:	2300      	movs	r3, #0
 8005834:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800583c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	2b00      	cmp	r3, #0
 8005842:	f000 80fb 	beq.w	8005a3c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	4613      	mov	r3, r2
 800584c:	005b      	lsls	r3, r3, #1
 800584e:	4413      	add	r3, r2
 8005850:	69fa      	ldr	r2, [r7, #28]
 8005852:	429a      	cmp	r2, r3
 8005854:	d305      	bcc.n	8005862 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800585c:	69fa      	ldr	r2, [r7, #28]
 800585e:	429a      	cmp	r2, r3
 8005860:	d903      	bls.n	800586a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005868:	e0e8      	b.n	8005a3c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	2200      	movs	r2, #0
 800586e:	461c      	mov	r4, r3
 8005870:	4615      	mov	r5, r2
 8005872:	f04f 0200 	mov.w	r2, #0
 8005876:	f04f 0300 	mov.w	r3, #0
 800587a:	022b      	lsls	r3, r5, #8
 800587c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005880:	0222      	lsls	r2, r4, #8
 8005882:	68f9      	ldr	r1, [r7, #12]
 8005884:	6849      	ldr	r1, [r1, #4]
 8005886:	0849      	lsrs	r1, r1, #1
 8005888:	2000      	movs	r0, #0
 800588a:	4688      	mov	r8, r1
 800588c:	4681      	mov	r9, r0
 800588e:	eb12 0a08 	adds.w	sl, r2, r8
 8005892:	eb43 0b09 	adc.w	fp, r3, r9
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	603b      	str	r3, [r7, #0]
 800589e:	607a      	str	r2, [r7, #4]
 80058a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058a4:	4650      	mov	r0, sl
 80058a6:	4659      	mov	r1, fp
 80058a8:	f7fb f97e 	bl	8000ba8 <__aeabi_uldivmod>
 80058ac:	4602      	mov	r2, r0
 80058ae:	460b      	mov	r3, r1
 80058b0:	4613      	mov	r3, r2
 80058b2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058ba:	d308      	bcc.n	80058ce <UART_SetConfig+0x3de>
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058c2:	d204      	bcs.n	80058ce <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	60da      	str	r2, [r3, #12]
 80058cc:	e0b6      	b.n	8005a3c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80058d4:	e0b2      	b.n	8005a3c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	69db      	ldr	r3, [r3, #28]
 80058da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058de:	d15e      	bne.n	800599e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80058e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058e4:	2b08      	cmp	r3, #8
 80058e6:	d828      	bhi.n	800593a <UART_SetConfig+0x44a>
 80058e8:	a201      	add	r2, pc, #4	; (adr r2, 80058f0 <UART_SetConfig+0x400>)
 80058ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ee:	bf00      	nop
 80058f0:	08005915 	.word	0x08005915
 80058f4:	0800591d 	.word	0x0800591d
 80058f8:	08005925 	.word	0x08005925
 80058fc:	0800593b 	.word	0x0800593b
 8005900:	0800592b 	.word	0x0800592b
 8005904:	0800593b 	.word	0x0800593b
 8005908:	0800593b 	.word	0x0800593b
 800590c:	0800593b 	.word	0x0800593b
 8005910:	08005933 	.word	0x08005933
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005914:	f7fe fcae 	bl	8004274 <HAL_RCC_GetPCLK1Freq>
 8005918:	61f8      	str	r0, [r7, #28]
        break;
 800591a:	e014      	b.n	8005946 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800591c:	f7fe fcc0 	bl	80042a0 <HAL_RCC_GetPCLK2Freq>
 8005920:	61f8      	str	r0, [r7, #28]
        break;
 8005922:	e010      	b.n	8005946 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005924:	4b4d      	ldr	r3, [pc, #308]	; (8005a5c <UART_SetConfig+0x56c>)
 8005926:	61fb      	str	r3, [r7, #28]
        break;
 8005928:	e00d      	b.n	8005946 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800592a:	f7fe fc0b 	bl	8004144 <HAL_RCC_GetSysClockFreq>
 800592e:	61f8      	str	r0, [r7, #28]
        break;
 8005930:	e009      	b.n	8005946 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005936:	61fb      	str	r3, [r7, #28]
        break;
 8005938:	e005      	b.n	8005946 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800593a:	2300      	movs	r3, #0
 800593c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005944:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d077      	beq.n	8005a3c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	005a      	lsls	r2, r3, #1
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	085b      	lsrs	r3, r3, #1
 8005956:	441a      	add	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005960:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	2b0f      	cmp	r3, #15
 8005966:	d916      	bls.n	8005996 <UART_SetConfig+0x4a6>
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800596e:	d212      	bcs.n	8005996 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	b29b      	uxth	r3, r3
 8005974:	f023 030f 	bic.w	r3, r3, #15
 8005978:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	085b      	lsrs	r3, r3, #1
 800597e:	b29b      	uxth	r3, r3
 8005980:	f003 0307 	and.w	r3, r3, #7
 8005984:	b29a      	uxth	r2, r3
 8005986:	8afb      	ldrh	r3, [r7, #22]
 8005988:	4313      	orrs	r3, r2
 800598a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	8afa      	ldrh	r2, [r7, #22]
 8005992:	60da      	str	r2, [r3, #12]
 8005994:	e052      	b.n	8005a3c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800599c:	e04e      	b.n	8005a3c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800599e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059a2:	2b08      	cmp	r3, #8
 80059a4:	d827      	bhi.n	80059f6 <UART_SetConfig+0x506>
 80059a6:	a201      	add	r2, pc, #4	; (adr r2, 80059ac <UART_SetConfig+0x4bc>)
 80059a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ac:	080059d1 	.word	0x080059d1
 80059b0:	080059d9 	.word	0x080059d9
 80059b4:	080059e1 	.word	0x080059e1
 80059b8:	080059f7 	.word	0x080059f7
 80059bc:	080059e7 	.word	0x080059e7
 80059c0:	080059f7 	.word	0x080059f7
 80059c4:	080059f7 	.word	0x080059f7
 80059c8:	080059f7 	.word	0x080059f7
 80059cc:	080059ef 	.word	0x080059ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059d0:	f7fe fc50 	bl	8004274 <HAL_RCC_GetPCLK1Freq>
 80059d4:	61f8      	str	r0, [r7, #28]
        break;
 80059d6:	e014      	b.n	8005a02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059d8:	f7fe fc62 	bl	80042a0 <HAL_RCC_GetPCLK2Freq>
 80059dc:	61f8      	str	r0, [r7, #28]
        break;
 80059de:	e010      	b.n	8005a02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059e0:	4b1e      	ldr	r3, [pc, #120]	; (8005a5c <UART_SetConfig+0x56c>)
 80059e2:	61fb      	str	r3, [r7, #28]
        break;
 80059e4:	e00d      	b.n	8005a02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059e6:	f7fe fbad 	bl	8004144 <HAL_RCC_GetSysClockFreq>
 80059ea:	61f8      	str	r0, [r7, #28]
        break;
 80059ec:	e009      	b.n	8005a02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059f2:	61fb      	str	r3, [r7, #28]
        break;
 80059f4:	e005      	b.n	8005a02 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80059f6:	2300      	movs	r3, #0
 80059f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005a00:	bf00      	nop
    }

    if (pclk != 0U)
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d019      	beq.n	8005a3c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	085a      	lsrs	r2, r3, #1
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	441a      	add	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	2b0f      	cmp	r3, #15
 8005a20:	d909      	bls.n	8005a36 <UART_SetConfig+0x546>
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a28:	d205      	bcs.n	8005a36 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	60da      	str	r2, [r3, #12]
 8005a34:	e002      	b.n	8005a3c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005a48:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3728      	adds	r7, #40	; 0x28
 8005a50:	46bd      	mov	sp, r7
 8005a52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a56:	bf00      	nop
 8005a58:	40008000 	.word	0x40008000
 8005a5c:	00f42400 	.word	0x00f42400

08005a60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00a      	beq.n	8005a8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	430a      	orrs	r2, r1
 8005a88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00a      	beq.n	8005aac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab0:	f003 0304 	and.w	r3, r3, #4
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00a      	beq.n	8005ace <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad2:	f003 0308 	and.w	r3, r3, #8
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00a      	beq.n	8005af0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	f003 0310 	and.w	r3, r3, #16
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00a      	beq.n	8005b12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b16:	f003 0320 	and.w	r3, r3, #32
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00a      	beq.n	8005b34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d01a      	beq.n	8005b76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	430a      	orrs	r2, r1
 8005b54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b5e:	d10a      	bne.n	8005b76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00a      	beq.n	8005b98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	430a      	orrs	r2, r1
 8005b96:	605a      	str	r2, [r3, #4]
  }
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	af02      	add	r7, sp, #8
 8005baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bb4:	f7fc fb6a 	bl	800228c <HAL_GetTick>
 8005bb8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0308 	and.w	r3, r3, #8
 8005bc4:	2b08      	cmp	r3, #8
 8005bc6:	d10e      	bne.n	8005be6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bcc:	9300      	str	r3, [sp, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f82d 	bl	8005c36 <UART_WaitOnFlagUntilTimeout>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d001      	beq.n	8005be6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e023      	b.n	8005c2e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0304 	and.w	r3, r3, #4
 8005bf0:	2b04      	cmp	r3, #4
 8005bf2:	d10e      	bne.n	8005c12 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bf8:	9300      	str	r3, [sp, #0]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 f817 	bl	8005c36 <UART_WaitOnFlagUntilTimeout>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d001      	beq.n	8005c12 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e00d      	b.n	8005c2e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2220      	movs	r2, #32
 8005c16:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b09c      	sub	sp, #112	; 0x70
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	60f8      	str	r0, [r7, #12]
 8005c3e:	60b9      	str	r1, [r7, #8]
 8005c40:	603b      	str	r3, [r7, #0]
 8005c42:	4613      	mov	r3, r2
 8005c44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c46:	e0a5      	b.n	8005d94 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c4e:	f000 80a1 	beq.w	8005d94 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c52:	f7fc fb1b 	bl	800228c <HAL_GetTick>
 8005c56:	4602      	mov	r2, r0
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d302      	bcc.n	8005c68 <UART_WaitOnFlagUntilTimeout+0x32>
 8005c62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d13e      	bne.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c70:	e853 3f00 	ldrex	r3, [r3]
 8005c74:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c7c:	667b      	str	r3, [r7, #100]	; 0x64
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	461a      	mov	r2, r3
 8005c84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c88:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005c8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c8e:	e841 2300 	strex	r3, r2, [r1]
 8005c92:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005c94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1e6      	bne.n	8005c68 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	3308      	adds	r3, #8
 8005ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ca4:	e853 3f00 	ldrex	r3, [r3]
 8005ca8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cac:	f023 0301 	bic.w	r3, r3, #1
 8005cb0:	663b      	str	r3, [r7, #96]	; 0x60
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	3308      	adds	r3, #8
 8005cb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005cba:	64ba      	str	r2, [r7, #72]	; 0x48
 8005cbc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005cc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cc2:	e841 2300 	strex	r3, r2, [r1]
 8005cc6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005cc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1e5      	bne.n	8005c9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2220      	movs	r2, #32
 8005cd8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e067      	b.n	8005db6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0304 	and.w	r3, r3, #4
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d04f      	beq.n	8005d94 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	69db      	ldr	r3, [r3, #28]
 8005cfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d02:	d147      	bne.n	8005d94 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d0c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d16:	e853 3f00 	ldrex	r3, [r3]
 8005d1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	461a      	mov	r2, r3
 8005d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8005d2e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d34:	e841 2300 	strex	r3, r2, [r1]
 8005d38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d1e6      	bne.n	8005d0e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	3308      	adds	r3, #8
 8005d46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	e853 3f00 	ldrex	r3, [r3]
 8005d4e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	f023 0301 	bic.w	r3, r3, #1
 8005d56:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	3308      	adds	r3, #8
 8005d5e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005d60:	623a      	str	r2, [r7, #32]
 8005d62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d64:	69f9      	ldr	r1, [r7, #28]
 8005d66:	6a3a      	ldr	r2, [r7, #32]
 8005d68:	e841 2300 	strex	r3, r2, [r1]
 8005d6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1e5      	bne.n	8005d40 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2220      	movs	r2, #32
 8005d78:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2220      	movs	r2, #32
 8005d84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e010      	b.n	8005db6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	69da      	ldr	r2, [r3, #28]
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	bf0c      	ite	eq
 8005da4:	2301      	moveq	r3, #1
 8005da6:	2300      	movne	r3, #0
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	461a      	mov	r2, r3
 8005dac:	79fb      	ldrb	r3, [r7, #7]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	f43f af4a 	beq.w	8005c48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3770      	adds	r7, #112	; 0x70
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	b085      	sub	sp, #20
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005dcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005dd0:	2b84      	cmp	r3, #132	; 0x84
 8005dd2:	d005      	beq.n	8005de0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005dd4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	4413      	add	r3, r2
 8005ddc:	3303      	adds	r3, #3
 8005dde:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005de0:	68fb      	ldr	r3, [r7, #12]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3714      	adds	r7, #20
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005df2:	f001 f8f3 	bl	8006fdc <vTaskStartScheduler>
  
  return osOK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dfe:	b089      	sub	sp, #36	; 0x24
 8005e00:	af04      	add	r7, sp, #16
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d020      	beq.n	8005e50 <osThreadCreate+0x54>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d01c      	beq.n	8005e50 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685c      	ldr	r4, [r3, #4]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681d      	ldr	r5, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	691e      	ldr	r6, [r3, #16]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7ff ffc8 	bl	8005dbe <makeFreeRtosPriority>
 8005e2e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e38:	9202      	str	r2, [sp, #8]
 8005e3a:	9301      	str	r3, [sp, #4]
 8005e3c:	9100      	str	r1, [sp, #0]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	4632      	mov	r2, r6
 8005e42:	4629      	mov	r1, r5
 8005e44:	4620      	mov	r0, r4
 8005e46:	f000 fcd9 	bl	80067fc <xTaskCreateStatic>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	60fb      	str	r3, [r7, #12]
 8005e4e:	e01c      	b.n	8005e8a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685c      	ldr	r4, [r3, #4]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e5c:	b29e      	uxth	r6, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7ff ffaa 	bl	8005dbe <makeFreeRtosPriority>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	f107 030c 	add.w	r3, r7, #12
 8005e70:	9301      	str	r3, [sp, #4]
 8005e72:	9200      	str	r2, [sp, #0]
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	4632      	mov	r2, r6
 8005e78:	4629      	mov	r1, r5
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	f000 fd1b 	bl	80068b6 <xTaskCreate>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d001      	beq.n	8005e8a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005e86:	2300      	movs	r3, #0
 8005e88:	e000      	b.n	8005e8c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f103 0208 	add.w	r2, r3, #8
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8005eac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f103 0208 	add.w	r2, r3, #8
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f103 0208 	add.w	r2, r3, #8
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ee2:	bf00      	nop
 8005ee4:	370c      	adds	r7, #12
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr

08005eee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b085      	sub	sp, #20
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
 8005ef6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	689a      	ldr	r2, [r3, #8]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	683a      	ldr	r2, [r7, #0]
 8005f12:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	683a      	ldr	r2, [r7, #0]
 8005f18:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	1c5a      	adds	r2, r3, #1
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	601a      	str	r2, [r3, #0]
}
 8005f2a:	bf00      	nop
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f36:	b480      	push	{r7}
 8005f38:	b085      	sub	sp, #20
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
 8005f3e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f4c:	d103      	bne.n	8005f56 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	60fb      	str	r3, [r7, #12]
 8005f54:	e00c      	b.n	8005f70 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	3308      	adds	r3, #8
 8005f5a:	60fb      	str	r3, [r7, #12]
 8005f5c:	e002      	b.n	8005f64 <vListInsert+0x2e>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	60fb      	str	r3, [r7, #12]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d2f6      	bcs.n	8005f5e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	683a      	ldr	r2, [r7, #0]
 8005f7e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	1c5a      	adds	r2, r3, #1
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	601a      	str	r2, [r3, #0]
}
 8005f9c:	bf00      	nop
 8005f9e:	3714      	adds	r7, #20
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	6892      	ldr	r2, [r2, #8]
 8005fbe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	6852      	ldr	r2, [r2, #4]
 8005fc8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d103      	bne.n	8005fdc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	689a      	ldr	r2, [r3, #8]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	1e5a      	subs	r2, r3, #1
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3714      	adds	r7, #20
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d10a      	bne.n	8006026 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006014:	f383 8811 	msr	BASEPRI, r3
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006022:	bf00      	nop
 8006024:	e7fe      	b.n	8006024 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006026:	f001 ff4d 	bl	8007ec4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006032:	68f9      	ldr	r1, [r7, #12]
 8006034:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006036:	fb01 f303 	mul.w	r3, r1, r3
 800603a:	441a      	add	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006056:	3b01      	subs	r3, #1
 8006058:	68f9      	ldr	r1, [r7, #12]
 800605a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800605c:	fb01 f303 	mul.w	r3, r1, r3
 8006060:	441a      	add	r2, r3
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	22ff      	movs	r2, #255	; 0xff
 800606a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	22ff      	movs	r2, #255	; 0xff
 8006072:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d114      	bne.n	80060a6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d01a      	beq.n	80060ba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	3310      	adds	r3, #16
 8006088:	4618      	mov	r0, r3
 800608a:	f001 fa09 	bl	80074a0 <xTaskRemoveFromEventList>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d012      	beq.n	80060ba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006094:	4b0c      	ldr	r3, [pc, #48]	; (80060c8 <xQueueGenericReset+0xcc>)
 8006096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800609a:	601a      	str	r2, [r3, #0]
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	f3bf 8f6f 	isb	sy
 80060a4:	e009      	b.n	80060ba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	3310      	adds	r3, #16
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7ff fef2 	bl	8005e94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	3324      	adds	r3, #36	; 0x24
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7ff feed 	bl	8005e94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80060ba:	f001 ff33 	bl	8007f24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80060be:	2301      	movs	r3, #1
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3710      	adds	r7, #16
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	e000ed04 	.word	0xe000ed04

080060cc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b08a      	sub	sp, #40	; 0x28
 80060d0:	af02      	add	r7, sp, #8
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	4613      	mov	r3, r2
 80060d8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10a      	bne.n	80060f6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80060e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	613b      	str	r3, [r7, #16]
}
 80060f2:	bf00      	nop
 80060f4:	e7fe      	b.n	80060f4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	fb02 f303 	mul.w	r3, r2, r3
 80060fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	3348      	adds	r3, #72	; 0x48
 8006104:	4618      	mov	r0, r3
 8006106:	f001 ffff 	bl	8008108 <pvPortMalloc>
 800610a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d011      	beq.n	8006136 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	3348      	adds	r3, #72	; 0x48
 800611a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006124:	79fa      	ldrb	r2, [r7, #7]
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	9300      	str	r3, [sp, #0]
 800612a:	4613      	mov	r3, r2
 800612c:	697a      	ldr	r2, [r7, #20]
 800612e:	68b9      	ldr	r1, [r7, #8]
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f000 f805 	bl	8006140 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006136:	69bb      	ldr	r3, [r7, #24]
	}
 8006138:	4618      	mov	r0, r3
 800613a:	3720      	adds	r7, #32
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
 800614c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d103      	bne.n	800615c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	69ba      	ldr	r2, [r7, #24]
 8006158:	601a      	str	r2, [r3, #0]
 800615a:	e002      	b.n	8006162 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800616e:	2101      	movs	r1, #1
 8006170:	69b8      	ldr	r0, [r7, #24]
 8006172:	f7ff ff43 	bl	8005ffc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006176:	bf00      	nop
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800617e:	b580      	push	{r7, lr}
 8006180:	b082      	sub	sp, #8
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00e      	beq.n	80061aa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800619e:	2300      	movs	r3, #0
 80061a0:	2200      	movs	r2, #0
 80061a2:	2100      	movs	r1, #0
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 f81d 	bl	80061e4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80061aa:	bf00      	nop
 80061ac:	3708      	adds	r7, #8
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b086      	sub	sp, #24
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	4603      	mov	r3, r0
 80061ba:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80061bc:	2301      	movs	r3, #1
 80061be:	617b      	str	r3, [r7, #20]
 80061c0:	2300      	movs	r3, #0
 80061c2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80061c4:	79fb      	ldrb	r3, [r7, #7]
 80061c6:	461a      	mov	r2, r3
 80061c8:	6939      	ldr	r1, [r7, #16]
 80061ca:	6978      	ldr	r0, [r7, #20]
 80061cc:	f7ff ff7e 	bl	80060cc <xQueueGenericCreate>
 80061d0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f7ff ffd3 	bl	800617e <prvInitialiseMutex>

		return xNewQueue;
 80061d8:	68fb      	ldr	r3, [r7, #12]
	}
 80061da:	4618      	mov	r0, r3
 80061dc:	3718      	adds	r7, #24
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
	...

080061e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b08e      	sub	sp, #56	; 0x38
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
 80061f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80061f2:	2300      	movs	r3, #0
 80061f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80061fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10a      	bne.n	8006216 <xQueueGenericSend+0x32>
	__asm volatile
 8006200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006204:	f383 8811 	msr	BASEPRI, r3
 8006208:	f3bf 8f6f 	isb	sy
 800620c:	f3bf 8f4f 	dsb	sy
 8006210:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006212:	bf00      	nop
 8006214:	e7fe      	b.n	8006214 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d103      	bne.n	8006224 <xQueueGenericSend+0x40>
 800621c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006220:	2b00      	cmp	r3, #0
 8006222:	d101      	bne.n	8006228 <xQueueGenericSend+0x44>
 8006224:	2301      	movs	r3, #1
 8006226:	e000      	b.n	800622a <xQueueGenericSend+0x46>
 8006228:	2300      	movs	r3, #0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10a      	bne.n	8006244 <xQueueGenericSend+0x60>
	__asm volatile
 800622e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006232:	f383 8811 	msr	BASEPRI, r3
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006240:	bf00      	nop
 8006242:	e7fe      	b.n	8006242 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	2b02      	cmp	r3, #2
 8006248:	d103      	bne.n	8006252 <xQueueGenericSend+0x6e>
 800624a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800624e:	2b01      	cmp	r3, #1
 8006250:	d101      	bne.n	8006256 <xQueueGenericSend+0x72>
 8006252:	2301      	movs	r3, #1
 8006254:	e000      	b.n	8006258 <xQueueGenericSend+0x74>
 8006256:	2300      	movs	r3, #0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10a      	bne.n	8006272 <xQueueGenericSend+0x8e>
	__asm volatile
 800625c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006260:	f383 8811 	msr	BASEPRI, r3
 8006264:	f3bf 8f6f 	isb	sy
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	623b      	str	r3, [r7, #32]
}
 800626e:	bf00      	nop
 8006270:	e7fe      	b.n	8006270 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006272:	f001 fad5 	bl	8007820 <xTaskGetSchedulerState>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d102      	bne.n	8006282 <xQueueGenericSend+0x9e>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d101      	bne.n	8006286 <xQueueGenericSend+0xa2>
 8006282:	2301      	movs	r3, #1
 8006284:	e000      	b.n	8006288 <xQueueGenericSend+0xa4>
 8006286:	2300      	movs	r3, #0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d10a      	bne.n	80062a2 <xQueueGenericSend+0xbe>
	__asm volatile
 800628c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006290:	f383 8811 	msr	BASEPRI, r3
 8006294:	f3bf 8f6f 	isb	sy
 8006298:	f3bf 8f4f 	dsb	sy
 800629c:	61fb      	str	r3, [r7, #28]
}
 800629e:	bf00      	nop
 80062a0:	e7fe      	b.n	80062a0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80062a2:	f001 fe0f 	bl	8007ec4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80062a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d302      	bcc.n	80062b8 <xQueueGenericSend+0xd4>
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	d129      	bne.n	800630c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	68b9      	ldr	r1, [r7, #8]
 80062bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062be:	f000 f9b3 	bl	8006628 <prvCopyDataToQueue>
 80062c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d010      	beq.n	80062ee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ce:	3324      	adds	r3, #36	; 0x24
 80062d0:	4618      	mov	r0, r3
 80062d2:	f001 f8e5 	bl	80074a0 <xTaskRemoveFromEventList>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d013      	beq.n	8006304 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80062dc:	4b3f      	ldr	r3, [pc, #252]	; (80063dc <xQueueGenericSend+0x1f8>)
 80062de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062e2:	601a      	str	r2, [r3, #0]
 80062e4:	f3bf 8f4f 	dsb	sy
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	e00a      	b.n	8006304 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80062ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d007      	beq.n	8006304 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80062f4:	4b39      	ldr	r3, [pc, #228]	; (80063dc <xQueueGenericSend+0x1f8>)
 80062f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062fa:	601a      	str	r2, [r3, #0]
 80062fc:	f3bf 8f4f 	dsb	sy
 8006300:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006304:	f001 fe0e 	bl	8007f24 <vPortExitCritical>
				return pdPASS;
 8006308:	2301      	movs	r3, #1
 800630a:	e063      	b.n	80063d4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d103      	bne.n	800631a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006312:	f001 fe07 	bl	8007f24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006316:	2300      	movs	r3, #0
 8006318:	e05c      	b.n	80063d4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800631a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800631c:	2b00      	cmp	r3, #0
 800631e:	d106      	bne.n	800632e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006320:	f107 0314 	add.w	r3, r7, #20
 8006324:	4618      	mov	r0, r3
 8006326:	f001 f91d 	bl	8007564 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800632a:	2301      	movs	r3, #1
 800632c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800632e:	f001 fdf9 	bl	8007f24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006332:	f000 febd 	bl	80070b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006336:	f001 fdc5 	bl	8007ec4 <vPortEnterCritical>
 800633a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006340:	b25b      	sxtb	r3, r3
 8006342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006346:	d103      	bne.n	8006350 <xQueueGenericSend+0x16c>
 8006348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634a:	2200      	movs	r2, #0
 800634c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006352:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006356:	b25b      	sxtb	r3, r3
 8006358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800635c:	d103      	bne.n	8006366 <xQueueGenericSend+0x182>
 800635e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006360:	2200      	movs	r2, #0
 8006362:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006366:	f001 fddd 	bl	8007f24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800636a:	1d3a      	adds	r2, r7, #4
 800636c:	f107 0314 	add.w	r3, r7, #20
 8006370:	4611      	mov	r1, r2
 8006372:	4618      	mov	r0, r3
 8006374:	f001 f90c 	bl	8007590 <xTaskCheckForTimeOut>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d124      	bne.n	80063c8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800637e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006380:	f000 fa24 	bl	80067cc <prvIsQueueFull>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d018      	beq.n	80063bc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800638a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638c:	3310      	adds	r3, #16
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	4611      	mov	r1, r2
 8006392:	4618      	mov	r0, r3
 8006394:	f001 f860 	bl	8007458 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006398:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800639a:	f000 f9af 	bl	80066fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800639e:	f000 fe95 	bl	80070cc <xTaskResumeAll>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f47f af7c 	bne.w	80062a2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80063aa:	4b0c      	ldr	r3, [pc, #48]	; (80063dc <xQueueGenericSend+0x1f8>)
 80063ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063b0:	601a      	str	r2, [r3, #0]
 80063b2:	f3bf 8f4f 	dsb	sy
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	e772      	b.n	80062a2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80063bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063be:	f000 f99d 	bl	80066fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063c2:	f000 fe83 	bl	80070cc <xTaskResumeAll>
 80063c6:	e76c      	b.n	80062a2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80063c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063ca:	f000 f997 	bl	80066fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063ce:	f000 fe7d 	bl	80070cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80063d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3738      	adds	r7, #56	; 0x38
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	e000ed04 	.word	0xe000ed04

080063e0 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b08e      	sub	sp, #56	; 0x38
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80063ea:	2300      	movs	r3, #0
 80063ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80063f2:	2300      	movs	r3, #0
 80063f4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80063f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d10a      	bne.n	8006412 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80063fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006400:	f383 8811 	msr	BASEPRI, r3
 8006404:	f3bf 8f6f 	isb	sy
 8006408:	f3bf 8f4f 	dsb	sy
 800640c:	623b      	str	r3, [r7, #32]
}
 800640e:	bf00      	nop
 8006410:	e7fe      	b.n	8006410 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00a      	beq.n	8006430 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800641a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641e:	f383 8811 	msr	BASEPRI, r3
 8006422:	f3bf 8f6f 	isb	sy
 8006426:	f3bf 8f4f 	dsb	sy
 800642a:	61fb      	str	r3, [r7, #28]
}
 800642c:	bf00      	nop
 800642e:	e7fe      	b.n	800642e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006430:	f001 f9f6 	bl	8007820 <xTaskGetSchedulerState>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d102      	bne.n	8006440 <xQueueSemaphoreTake+0x60>
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d101      	bne.n	8006444 <xQueueSemaphoreTake+0x64>
 8006440:	2301      	movs	r3, #1
 8006442:	e000      	b.n	8006446 <xQueueSemaphoreTake+0x66>
 8006444:	2300      	movs	r3, #0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10a      	bne.n	8006460 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800644a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644e:	f383 8811 	msr	BASEPRI, r3
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	61bb      	str	r3, [r7, #24]
}
 800645c:	bf00      	nop
 800645e:	e7fe      	b.n	800645e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006460:	f001 fd30 	bl	8007ec4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006468:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800646a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646c:	2b00      	cmp	r3, #0
 800646e:	d024      	beq.n	80064ba <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006472:	1e5a      	subs	r2, r3, #1
 8006474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006476:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d104      	bne.n	800648a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006480:	f001 fb76 	bl	8007b70 <pvTaskIncrementMutexHeldCount>
 8006484:	4602      	mov	r2, r0
 8006486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006488:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800648a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00f      	beq.n	80064b2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006494:	3310      	adds	r3, #16
 8006496:	4618      	mov	r0, r3
 8006498:	f001 f802 	bl	80074a0 <xTaskRemoveFromEventList>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d007      	beq.n	80064b2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80064a2:	4b54      	ldr	r3, [pc, #336]	; (80065f4 <xQueueSemaphoreTake+0x214>)
 80064a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064a8:	601a      	str	r2, [r3, #0]
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80064b2:	f001 fd37 	bl	8007f24 <vPortExitCritical>
				return pdPASS;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e097      	b.n	80065ea <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d111      	bne.n	80064e4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80064c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00a      	beq.n	80064dc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80064c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ca:	f383 8811 	msr	BASEPRI, r3
 80064ce:	f3bf 8f6f 	isb	sy
 80064d2:	f3bf 8f4f 	dsb	sy
 80064d6:	617b      	str	r3, [r7, #20]
}
 80064d8:	bf00      	nop
 80064da:	e7fe      	b.n	80064da <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80064dc:	f001 fd22 	bl	8007f24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80064e0:	2300      	movs	r3, #0
 80064e2:	e082      	b.n	80065ea <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d106      	bne.n	80064f8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064ea:	f107 030c 	add.w	r3, r7, #12
 80064ee:	4618      	mov	r0, r3
 80064f0:	f001 f838 	bl	8007564 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064f4:	2301      	movs	r3, #1
 80064f6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064f8:	f001 fd14 	bl	8007f24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064fc:	f000 fdd8 	bl	80070b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006500:	f001 fce0 	bl	8007ec4 <vPortEnterCritical>
 8006504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006506:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800650a:	b25b      	sxtb	r3, r3
 800650c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006510:	d103      	bne.n	800651a <xQueueSemaphoreTake+0x13a>
 8006512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006514:	2200      	movs	r2, #0
 8006516:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800651a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006520:	b25b      	sxtb	r3, r3
 8006522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006526:	d103      	bne.n	8006530 <xQueueSemaphoreTake+0x150>
 8006528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652a:	2200      	movs	r2, #0
 800652c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006530:	f001 fcf8 	bl	8007f24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006534:	463a      	mov	r2, r7
 8006536:	f107 030c 	add.w	r3, r7, #12
 800653a:	4611      	mov	r1, r2
 800653c:	4618      	mov	r0, r3
 800653e:	f001 f827 	bl	8007590 <xTaskCheckForTimeOut>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d132      	bne.n	80065ae <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006548:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800654a:	f000 f929 	bl	80067a0 <prvIsQueueEmpty>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d026      	beq.n	80065a2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d109      	bne.n	8006570 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800655c:	f001 fcb2 	bl	8007ec4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	4618      	mov	r0, r3
 8006566:	f001 f979 	bl	800785c <xTaskPriorityInherit>
 800656a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800656c:	f001 fcda 	bl	8007f24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006572:	3324      	adds	r3, #36	; 0x24
 8006574:	683a      	ldr	r2, [r7, #0]
 8006576:	4611      	mov	r1, r2
 8006578:	4618      	mov	r0, r3
 800657a:	f000 ff6d 	bl	8007458 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800657e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006580:	f000 f8bc 	bl	80066fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006584:	f000 fda2 	bl	80070cc <xTaskResumeAll>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	f47f af68 	bne.w	8006460 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006590:	4b18      	ldr	r3, [pc, #96]	; (80065f4 <xQueueSemaphoreTake+0x214>)
 8006592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006596:	601a      	str	r2, [r3, #0]
 8006598:	f3bf 8f4f 	dsb	sy
 800659c:	f3bf 8f6f 	isb	sy
 80065a0:	e75e      	b.n	8006460 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80065a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80065a4:	f000 f8aa 	bl	80066fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065a8:	f000 fd90 	bl	80070cc <xTaskResumeAll>
 80065ac:	e758      	b.n	8006460 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80065ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80065b0:	f000 f8a4 	bl	80066fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065b4:	f000 fd8a 	bl	80070cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80065ba:	f000 f8f1 	bl	80067a0 <prvIsQueueEmpty>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f43f af4d 	beq.w	8006460 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80065c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00d      	beq.n	80065e8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80065cc:	f001 fc7a 	bl	8007ec4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80065d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80065d2:	f000 f811 	bl	80065f8 <prvGetDisinheritPriorityAfterTimeout>
 80065d6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80065d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80065de:	4618      	mov	r0, r3
 80065e0:	f001 fa38 	bl	8007a54 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80065e4:	f001 fc9e 	bl	8007f24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80065e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3738      	adds	r7, #56	; 0x38
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	e000ed04 	.word	0xe000ed04

080065f8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006604:	2b00      	cmp	r3, #0
 8006606:	d006      	beq.n	8006616 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f1c3 0307 	rsb	r3, r3, #7
 8006612:	60fb      	str	r3, [r7, #12]
 8006614:	e001      	b.n	800661a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006616:	2300      	movs	r3, #0
 8006618:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800661a:	68fb      	ldr	r3, [r7, #12]
	}
 800661c:	4618      	mov	r0, r3
 800661e:	3714      	adds	r7, #20
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006634:	2300      	movs	r3, #0
 8006636:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10d      	bne.n	8006662 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d14d      	bne.n	80066ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	4618      	mov	r0, r3
 8006654:	f001 f978 	bl	8007948 <xTaskPriorityDisinherit>
 8006658:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	609a      	str	r2, [r3, #8]
 8006660:	e043      	b.n	80066ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d119      	bne.n	800669c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6858      	ldr	r0, [r3, #4]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006670:	461a      	mov	r2, r3
 8006672:	68b9      	ldr	r1, [r7, #8]
 8006674:	f002 f855 	bl	8008722 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	685a      	ldr	r2, [r3, #4]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006680:	441a      	add	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	685a      	ldr	r2, [r3, #4]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	429a      	cmp	r2, r3
 8006690:	d32b      	bcc.n	80066ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	605a      	str	r2, [r3, #4]
 800669a:	e026      	b.n	80066ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	68d8      	ldr	r0, [r3, #12]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a4:	461a      	mov	r2, r3
 80066a6:	68b9      	ldr	r1, [r7, #8]
 80066a8:	f002 f83b 	bl	8008722 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	68da      	ldr	r2, [r3, #12]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b4:	425b      	negs	r3, r3
 80066b6:	441a      	add	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	68da      	ldr	r2, [r3, #12]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d207      	bcs.n	80066d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	689a      	ldr	r2, [r3, #8]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d0:	425b      	negs	r3, r3
 80066d2:	441a      	add	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d105      	bne.n	80066ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d002      	beq.n	80066ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	3b01      	subs	r3, #1
 80066e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	1c5a      	adds	r2, r3, #1
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80066f2:	697b      	ldr	r3, [r7, #20]
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3718      	adds	r7, #24
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006704:	f001 fbde 	bl	8007ec4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800670e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006710:	e011      	b.n	8006736 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006716:	2b00      	cmp	r3, #0
 8006718:	d012      	beq.n	8006740 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	3324      	adds	r3, #36	; 0x24
 800671e:	4618      	mov	r0, r3
 8006720:	f000 febe 	bl	80074a0 <xTaskRemoveFromEventList>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800672a:	f000 ff93 	bl	8007654 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800672e:	7bfb      	ldrb	r3, [r7, #15]
 8006730:	3b01      	subs	r3, #1
 8006732:	b2db      	uxtb	r3, r3
 8006734:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800673a:	2b00      	cmp	r3, #0
 800673c:	dce9      	bgt.n	8006712 <prvUnlockQueue+0x16>
 800673e:	e000      	b.n	8006742 <prvUnlockQueue+0x46>
					break;
 8006740:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	22ff      	movs	r2, #255	; 0xff
 8006746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800674a:	f001 fbeb 	bl	8007f24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800674e:	f001 fbb9 	bl	8007ec4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006758:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800675a:	e011      	b.n	8006780 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d012      	beq.n	800678a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	3310      	adds	r3, #16
 8006768:	4618      	mov	r0, r3
 800676a:	f000 fe99 	bl	80074a0 <xTaskRemoveFromEventList>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d001      	beq.n	8006778 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006774:	f000 ff6e 	bl	8007654 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006778:	7bbb      	ldrb	r3, [r7, #14]
 800677a:	3b01      	subs	r3, #1
 800677c:	b2db      	uxtb	r3, r3
 800677e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006780:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006784:	2b00      	cmp	r3, #0
 8006786:	dce9      	bgt.n	800675c <prvUnlockQueue+0x60>
 8006788:	e000      	b.n	800678c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800678a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	22ff      	movs	r2, #255	; 0xff
 8006790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006794:	f001 fbc6 	bl	8007f24 <vPortExitCritical>
}
 8006798:	bf00      	nop
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067a8:	f001 fb8c 	bl	8007ec4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d102      	bne.n	80067ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80067b4:	2301      	movs	r3, #1
 80067b6:	60fb      	str	r3, [r7, #12]
 80067b8:	e001      	b.n	80067be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80067ba:	2300      	movs	r3, #0
 80067bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80067be:	f001 fbb1 	bl	8007f24 <vPortExitCritical>

	return xReturn;
 80067c2:	68fb      	ldr	r3, [r7, #12]
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3710      	adds	r7, #16
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067d4:	f001 fb76 	bl	8007ec4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d102      	bne.n	80067ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80067e4:	2301      	movs	r3, #1
 80067e6:	60fb      	str	r3, [r7, #12]
 80067e8:	e001      	b.n	80067ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80067ea:	2300      	movs	r3, #0
 80067ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80067ee:	f001 fb99 	bl	8007f24 <vPortExitCritical>

	return xReturn;
 80067f2:	68fb      	ldr	r3, [r7, #12]
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3710      	adds	r7, #16
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b08e      	sub	sp, #56	; 0x38
 8006800:	af04      	add	r7, sp, #16
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	607a      	str	r2, [r7, #4]
 8006808:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800680a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10a      	bne.n	8006826 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006814:	f383 8811 	msr	BASEPRI, r3
 8006818:	f3bf 8f6f 	isb	sy
 800681c:	f3bf 8f4f 	dsb	sy
 8006820:	623b      	str	r3, [r7, #32]
}
 8006822:	bf00      	nop
 8006824:	e7fe      	b.n	8006824 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006828:	2b00      	cmp	r3, #0
 800682a:	d10a      	bne.n	8006842 <xTaskCreateStatic+0x46>
	__asm volatile
 800682c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006830:	f383 8811 	msr	BASEPRI, r3
 8006834:	f3bf 8f6f 	isb	sy
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	61fb      	str	r3, [r7, #28]
}
 800683e:	bf00      	nop
 8006840:	e7fe      	b.n	8006840 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006842:	23b4      	movs	r3, #180	; 0xb4
 8006844:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	2bb4      	cmp	r3, #180	; 0xb4
 800684a:	d00a      	beq.n	8006862 <xTaskCreateStatic+0x66>
	__asm volatile
 800684c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006850:	f383 8811 	msr	BASEPRI, r3
 8006854:	f3bf 8f6f 	isb	sy
 8006858:	f3bf 8f4f 	dsb	sy
 800685c:	61bb      	str	r3, [r7, #24]
}
 800685e:	bf00      	nop
 8006860:	e7fe      	b.n	8006860 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006862:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006866:	2b00      	cmp	r3, #0
 8006868:	d01e      	beq.n	80068a8 <xTaskCreateStatic+0xac>
 800686a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800686c:	2b00      	cmp	r3, #0
 800686e:	d01b      	beq.n	80068a8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006872:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006876:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006878:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800687a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687c:	2202      	movs	r2, #2
 800687e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006882:	2300      	movs	r3, #0
 8006884:	9303      	str	r3, [sp, #12]
 8006886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006888:	9302      	str	r3, [sp, #8]
 800688a:	f107 0314 	add.w	r3, r7, #20
 800688e:	9301      	str	r3, [sp, #4]
 8006890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006892:	9300      	str	r3, [sp, #0]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	68b9      	ldr	r1, [r7, #8]
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f000 f850 	bl	8006940 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068a2:	f000 f8eb 	bl	8006a7c <prvAddNewTaskToReadyList>
 80068a6:	e001      	b.n	80068ac <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80068a8:	2300      	movs	r3, #0
 80068aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80068ac:	697b      	ldr	r3, [r7, #20]
	}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3728      	adds	r7, #40	; 0x28
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b08c      	sub	sp, #48	; 0x30
 80068ba:	af04      	add	r7, sp, #16
 80068bc:	60f8      	str	r0, [r7, #12]
 80068be:	60b9      	str	r1, [r7, #8]
 80068c0:	603b      	str	r3, [r7, #0]
 80068c2:	4613      	mov	r3, r2
 80068c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80068c6:	88fb      	ldrh	r3, [r7, #6]
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	4618      	mov	r0, r3
 80068cc:	f001 fc1c 	bl	8008108 <pvPortMalloc>
 80068d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00e      	beq.n	80068f6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80068d8:	20b4      	movs	r0, #180	; 0xb4
 80068da:	f001 fc15 	bl	8008108 <pvPortMalloc>
 80068de:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d003      	beq.n	80068ee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	631a      	str	r2, [r3, #48]	; 0x30
 80068ec:	e005      	b.n	80068fa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80068ee:	6978      	ldr	r0, [r7, #20]
 80068f0:	f001 fcd6 	bl	80082a0 <vPortFree>
 80068f4:	e001      	b.n	80068fa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80068f6:	2300      	movs	r3, #0
 80068f8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d017      	beq.n	8006930 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006908:	88fa      	ldrh	r2, [r7, #6]
 800690a:	2300      	movs	r3, #0
 800690c:	9303      	str	r3, [sp, #12]
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	9302      	str	r3, [sp, #8]
 8006912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006914:	9301      	str	r3, [sp, #4]
 8006916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006918:	9300      	str	r3, [sp, #0]
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	68b9      	ldr	r1, [r7, #8]
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f000 f80e 	bl	8006940 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006924:	69f8      	ldr	r0, [r7, #28]
 8006926:	f000 f8a9 	bl	8006a7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800692a:	2301      	movs	r3, #1
 800692c:	61bb      	str	r3, [r7, #24]
 800692e:	e002      	b.n	8006936 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006930:	f04f 33ff 	mov.w	r3, #4294967295
 8006934:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006936:	69bb      	ldr	r3, [r7, #24]
	}
 8006938:	4618      	mov	r0, r3
 800693a:	3720      	adds	r7, #32
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b088      	sub	sp, #32
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]
 800694c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800694e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006958:	3b01      	subs	r3, #1
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	4413      	add	r3, r2
 800695e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	f023 0307 	bic.w	r3, r3, #7
 8006966:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	f003 0307 	and.w	r3, r3, #7
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00a      	beq.n	8006988 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006976:	f383 8811 	msr	BASEPRI, r3
 800697a:	f3bf 8f6f 	isb	sy
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	617b      	str	r3, [r7, #20]
}
 8006984:	bf00      	nop
 8006986:	e7fe      	b.n	8006986 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d01f      	beq.n	80069ce <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800698e:	2300      	movs	r3, #0
 8006990:	61fb      	str	r3, [r7, #28]
 8006992:	e012      	b.n	80069ba <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	4413      	add	r3, r2
 800699a:	7819      	ldrb	r1, [r3, #0]
 800699c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	4413      	add	r3, r2
 80069a2:	3334      	adds	r3, #52	; 0x34
 80069a4:	460a      	mov	r2, r1
 80069a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80069a8:	68ba      	ldr	r2, [r7, #8]
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	4413      	add	r3, r2
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d006      	beq.n	80069c2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	3301      	adds	r3, #1
 80069b8:	61fb      	str	r3, [r7, #28]
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	2b0f      	cmp	r3, #15
 80069be:	d9e9      	bls.n	8006994 <prvInitialiseNewTask+0x54>
 80069c0:	e000      	b.n	80069c4 <prvInitialiseNewTask+0x84>
			{
				break;
 80069c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80069c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069cc:	e003      	b.n	80069d6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80069ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80069d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d8:	2b06      	cmp	r3, #6
 80069da:	d901      	bls.n	80069e0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80069dc:	2306      	movs	r3, #6
 80069de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80069e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80069e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069ea:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80069ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ee:	2200      	movs	r2, #0
 80069f0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80069f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f4:	3304      	adds	r3, #4
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7ff fa6c 	bl	8005ed4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80069fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fe:	3318      	adds	r3, #24
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7ff fa67 	bl	8005ed4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0e:	f1c3 0207 	rsb	r2, r3, #7
 8006a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a1a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2e:	334c      	adds	r3, #76	; 0x4c
 8006a30:	2260      	movs	r2, #96	; 0x60
 8006a32:	2100      	movs	r1, #0
 8006a34:	4618      	mov	r0, r3
 8006a36:	f001 fe82 	bl	800873e <memset>
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3c:	4a0c      	ldr	r2, [pc, #48]	; (8006a70 <prvInitialiseNewTask+0x130>)
 8006a3e:	651a      	str	r2, [r3, #80]	; 0x50
 8006a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a42:	4a0c      	ldr	r2, [pc, #48]	; (8006a74 <prvInitialiseNewTask+0x134>)
 8006a44:	655a      	str	r2, [r3, #84]	; 0x54
 8006a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a48:	4a0b      	ldr	r2, [pc, #44]	; (8006a78 <prvInitialiseNewTask+0x138>)
 8006a4a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a4c:	683a      	ldr	r2, [r7, #0]
 8006a4e:	68f9      	ldr	r1, [r7, #12]
 8006a50:	69b8      	ldr	r0, [r7, #24]
 8006a52:	f001 f907 	bl	8007c64 <pxPortInitialiseStack>
 8006a56:	4602      	mov	r2, r0
 8006a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d002      	beq.n	8006a68 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a66:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a68:	bf00      	nop
 8006a6a:	3720      	adds	r7, #32
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	0800b1bc 	.word	0x0800b1bc
 8006a74:	0800b1dc 	.word	0x0800b1dc
 8006a78:	0800b19c 	.word	0x0800b19c

08006a7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006a84:	f001 fa1e 	bl	8007ec4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006a88:	4b2a      	ldr	r3, [pc, #168]	; (8006b34 <prvAddNewTaskToReadyList+0xb8>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	4a29      	ldr	r2, [pc, #164]	; (8006b34 <prvAddNewTaskToReadyList+0xb8>)
 8006a90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006a92:	4b29      	ldr	r3, [pc, #164]	; (8006b38 <prvAddNewTaskToReadyList+0xbc>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d109      	bne.n	8006aae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006a9a:	4a27      	ldr	r2, [pc, #156]	; (8006b38 <prvAddNewTaskToReadyList+0xbc>)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006aa0:	4b24      	ldr	r3, [pc, #144]	; (8006b34 <prvAddNewTaskToReadyList+0xb8>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d110      	bne.n	8006aca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006aa8:	f000 fdf8 	bl	800769c <prvInitialiseTaskLists>
 8006aac:	e00d      	b.n	8006aca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006aae:	4b23      	ldr	r3, [pc, #140]	; (8006b3c <prvAddNewTaskToReadyList+0xc0>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d109      	bne.n	8006aca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006ab6:	4b20      	ldr	r3, [pc, #128]	; (8006b38 <prvAddNewTaskToReadyList+0xbc>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d802      	bhi.n	8006aca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006ac4:	4a1c      	ldr	r2, [pc, #112]	; (8006b38 <prvAddNewTaskToReadyList+0xbc>)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006aca:	4b1d      	ldr	r3, [pc, #116]	; (8006b40 <prvAddNewTaskToReadyList+0xc4>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	4a1b      	ldr	r2, [pc, #108]	; (8006b40 <prvAddNewTaskToReadyList+0xc4>)
 8006ad2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad8:	2201      	movs	r2, #1
 8006ada:	409a      	lsls	r2, r3
 8006adc:	4b19      	ldr	r3, [pc, #100]	; (8006b44 <prvAddNewTaskToReadyList+0xc8>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	4a18      	ldr	r2, [pc, #96]	; (8006b44 <prvAddNewTaskToReadyList+0xc8>)
 8006ae4:	6013      	str	r3, [r2, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aea:	4613      	mov	r3, r2
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4413      	add	r3, r2
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4a15      	ldr	r2, [pc, #84]	; (8006b48 <prvAddNewTaskToReadyList+0xcc>)
 8006af4:	441a      	add	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	3304      	adds	r3, #4
 8006afa:	4619      	mov	r1, r3
 8006afc:	4610      	mov	r0, r2
 8006afe:	f7ff f9f6 	bl	8005eee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006b02:	f001 fa0f 	bl	8007f24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006b06:	4b0d      	ldr	r3, [pc, #52]	; (8006b3c <prvAddNewTaskToReadyList+0xc0>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00e      	beq.n	8006b2c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006b0e:	4b0a      	ldr	r3, [pc, #40]	; (8006b38 <prvAddNewTaskToReadyList+0xbc>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d207      	bcs.n	8006b2c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006b1c:	4b0b      	ldr	r3, [pc, #44]	; (8006b4c <prvAddNewTaskToReadyList+0xd0>)
 8006b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b22:	601a      	str	r2, [r3, #0]
 8006b24:	f3bf 8f4f 	dsb	sy
 8006b28:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b2c:	bf00      	nop
 8006b2e:	3708      	adds	r7, #8
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	2000079c 	.word	0x2000079c
 8006b38:	2000069c 	.word	0x2000069c
 8006b3c:	200007a8 	.word	0x200007a8
 8006b40:	200007b8 	.word	0x200007b8
 8006b44:	200007a4 	.word	0x200007a4
 8006b48:	200006a0 	.word	0x200006a0
 8006b4c:	e000ed04 	.word	0xe000ed04

08006b50 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b08a      	sub	sp, #40	; 0x28
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d10a      	bne.n	8006b7a <vTaskDelayUntil+0x2a>
	__asm volatile
 8006b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b68:	f383 8811 	msr	BASEPRI, r3
 8006b6c:	f3bf 8f6f 	isb	sy
 8006b70:	f3bf 8f4f 	dsb	sy
 8006b74:	617b      	str	r3, [r7, #20]
}
 8006b76:	bf00      	nop
 8006b78:	e7fe      	b.n	8006b78 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d10a      	bne.n	8006b96 <vTaskDelayUntil+0x46>
	__asm volatile
 8006b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b84:	f383 8811 	msr	BASEPRI, r3
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	613b      	str	r3, [r7, #16]
}
 8006b92:	bf00      	nop
 8006b94:	e7fe      	b.n	8006b94 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8006b96:	4b2a      	ldr	r3, [pc, #168]	; (8006c40 <vTaskDelayUntil+0xf0>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00a      	beq.n	8006bb4 <vTaskDelayUntil+0x64>
	__asm volatile
 8006b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	60fb      	str	r3, [r7, #12]
}
 8006bb0:	bf00      	nop
 8006bb2:	e7fe      	b.n	8006bb2 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8006bb4:	f000 fa7c 	bl	80070b0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006bb8:	4b22      	ldr	r3, [pc, #136]	; (8006c44 <vTaskDelayUntil+0xf4>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	683a      	ldr	r2, [r7, #0]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6a3a      	ldr	r2, [r7, #32]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d20b      	bcs.n	8006bea <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	69fa      	ldr	r2, [r7, #28]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d211      	bcs.n	8006c00 <vTaskDelayUntil+0xb0>
 8006bdc:	69fa      	ldr	r2, [r7, #28]
 8006bde:	6a3b      	ldr	r3, [r7, #32]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d90d      	bls.n	8006c00 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8006be4:	2301      	movs	r3, #1
 8006be6:	627b      	str	r3, [r7, #36]	; 0x24
 8006be8:	e00a      	b.n	8006c00 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	69fa      	ldr	r2, [r7, #28]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d303      	bcc.n	8006bfc <vTaskDelayUntil+0xac>
 8006bf4:	69fa      	ldr	r2, [r7, #28]
 8006bf6:	6a3b      	ldr	r3, [r7, #32]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d901      	bls.n	8006c00 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	69fa      	ldr	r2, [r7, #28]
 8006c04:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d006      	beq.n	8006c1a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006c0c:	69fa      	ldr	r2, [r7, #28]
 8006c0e:	6a3b      	ldr	r3, [r7, #32]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	2100      	movs	r1, #0
 8006c14:	4618      	mov	r0, r3
 8006c16:	f000 ffbf 	bl	8007b98 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006c1a:	f000 fa57 	bl	80070cc <xTaskResumeAll>
 8006c1e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d107      	bne.n	8006c36 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8006c26:	4b08      	ldr	r3, [pc, #32]	; (8006c48 <vTaskDelayUntil+0xf8>)
 8006c28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c2c:	601a      	str	r2, [r3, #0]
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c36:	bf00      	nop
 8006c38:	3728      	adds	r7, #40	; 0x28
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	200007c4 	.word	0x200007c4
 8006c44:	200007a0 	.word	0x200007a0
 8006c48:	e000ed04 	.word	0xe000ed04

08006c4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006c54:	2300      	movs	r3, #0
 8006c56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d017      	beq.n	8006c8e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006c5e:	4b13      	ldr	r3, [pc, #76]	; (8006cac <vTaskDelay+0x60>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00a      	beq.n	8006c7c <vTaskDelay+0x30>
	__asm volatile
 8006c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6a:	f383 8811 	msr	BASEPRI, r3
 8006c6e:	f3bf 8f6f 	isb	sy
 8006c72:	f3bf 8f4f 	dsb	sy
 8006c76:	60bb      	str	r3, [r7, #8]
}
 8006c78:	bf00      	nop
 8006c7a:	e7fe      	b.n	8006c7a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006c7c:	f000 fa18 	bl	80070b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006c80:	2100      	movs	r1, #0
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 ff88 	bl	8007b98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006c88:	f000 fa20 	bl	80070cc <xTaskResumeAll>
 8006c8c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d107      	bne.n	8006ca4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006c94:	4b06      	ldr	r3, [pc, #24]	; (8006cb0 <vTaskDelay+0x64>)
 8006c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c9a:	601a      	str	r2, [r3, #0]
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ca4:	bf00      	nop
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	200007c4 	.word	0x200007c4
 8006cb0:	e000ed04 	.word	0xe000ed04

08006cb4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006cbc:	f001 f902 	bl	8007ec4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d102      	bne.n	8006ccc <vTaskSuspend+0x18>
 8006cc6:	4b3c      	ldr	r3, [pc, #240]	; (8006db8 <vTaskSuspend+0x104>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	e000      	b.n	8006cce <vTaskSuspend+0x1a>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	3304      	adds	r3, #4
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f7ff f967 	bl	8005fa8 <uxListRemove>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d115      	bne.n	8006d0c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ce4:	4935      	ldr	r1, [pc, #212]	; (8006dbc <vTaskSuspend+0x108>)
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	4413      	add	r3, r2
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	440b      	add	r3, r1
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10a      	bne.n	8006d0c <vTaskSuspend+0x58>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8006d00:	43da      	mvns	r2, r3
 8006d02:	4b2f      	ldr	r3, [pc, #188]	; (8006dc0 <vTaskSuspend+0x10c>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4013      	ands	r3, r2
 8006d08:	4a2d      	ldr	r2, [pc, #180]	; (8006dc0 <vTaskSuspend+0x10c>)
 8006d0a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d004      	beq.n	8006d1e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	3318      	adds	r3, #24
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f7ff f945 	bl	8005fa8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	3304      	adds	r3, #4
 8006d22:	4619      	mov	r1, r3
 8006d24:	4827      	ldr	r0, [pc, #156]	; (8006dc4 <vTaskSuspend+0x110>)
 8006d26:	f7ff f8e2 	bl	8005eee <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d103      	bne.n	8006d3e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8006d3e:	f001 f8f1 	bl	8007f24 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8006d42:	4b21      	ldr	r3, [pc, #132]	; (8006dc8 <vTaskSuspend+0x114>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d005      	beq.n	8006d56 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8006d4a:	f001 f8bb 	bl	8007ec4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8006d4e:	f000 fd47 	bl	80077e0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8006d52:	f001 f8e7 	bl	8007f24 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8006d56:	4b18      	ldr	r3, [pc, #96]	; (8006db8 <vTaskSuspend+0x104>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d127      	bne.n	8006db0 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8006d60:	4b19      	ldr	r3, [pc, #100]	; (8006dc8 <vTaskSuspend+0x114>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d017      	beq.n	8006d98 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8006d68:	4b18      	ldr	r3, [pc, #96]	; (8006dcc <vTaskSuspend+0x118>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00a      	beq.n	8006d86 <vTaskSuspend+0xd2>
	__asm volatile
 8006d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d74:	f383 8811 	msr	BASEPRI, r3
 8006d78:	f3bf 8f6f 	isb	sy
 8006d7c:	f3bf 8f4f 	dsb	sy
 8006d80:	60bb      	str	r3, [r7, #8]
}
 8006d82:	bf00      	nop
 8006d84:	e7fe      	b.n	8006d84 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8006d86:	4b12      	ldr	r3, [pc, #72]	; (8006dd0 <vTaskSuspend+0x11c>)
 8006d88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d8c:	601a      	str	r2, [r3, #0]
 8006d8e:	f3bf 8f4f 	dsb	sy
 8006d92:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d96:	e00b      	b.n	8006db0 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8006d98:	4b0a      	ldr	r3, [pc, #40]	; (8006dc4 <vTaskSuspend+0x110>)
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	4b0d      	ldr	r3, [pc, #52]	; (8006dd4 <vTaskSuspend+0x120>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d103      	bne.n	8006dac <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8006da4:	4b04      	ldr	r3, [pc, #16]	; (8006db8 <vTaskSuspend+0x104>)
 8006da6:	2200      	movs	r2, #0
 8006da8:	601a      	str	r2, [r3, #0]
	}
 8006daa:	e001      	b.n	8006db0 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8006dac:	f000 faf2 	bl	8007394 <vTaskSwitchContext>
	}
 8006db0:	bf00      	nop
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	2000069c 	.word	0x2000069c
 8006dbc:	200006a0 	.word	0x200006a0
 8006dc0:	200007a4 	.word	0x200007a4
 8006dc4:	20000788 	.word	0x20000788
 8006dc8:	200007a8 	.word	0x200007a8
 8006dcc:	200007c4 	.word	0x200007c4
 8006dd0:	e000ed04 	.word	0xe000ed04
 8006dd4:	2000079c 	.word	0x2000079c

08006dd8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8006dd8:	b480      	push	{r7}
 8006dda:	b087      	sub	sp, #28
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8006de0:	2300      	movs	r3, #0
 8006de2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d10a      	bne.n	8006e04 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8006dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df2:	f383 8811 	msr	BASEPRI, r3
 8006df6:	f3bf 8f6f 	isb	sy
 8006dfa:	f3bf 8f4f 	dsb	sy
 8006dfe:	60fb      	str	r3, [r7, #12]
}
 8006e00:	bf00      	nop
 8006e02:	e7fe      	b.n	8006e02 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	695b      	ldr	r3, [r3, #20]
 8006e08:	4a0a      	ldr	r2, [pc, #40]	; (8006e34 <prvTaskIsTaskSuspended+0x5c>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d10a      	bne.n	8006e24 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e12:	4a09      	ldr	r2, [pc, #36]	; (8006e38 <prvTaskIsTaskSuspended+0x60>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d005      	beq.n	8006e24 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d101      	bne.n	8006e24 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8006e20:	2301      	movs	r3, #1
 8006e22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e24:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006e26:	4618      	mov	r0, r3
 8006e28:	371c      	adds	r7, #28
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	20000788 	.word	0x20000788
 8006e38:	2000075c 	.word	0x2000075c

08006e3c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d10a      	bne.n	8006e64 <vTaskResume+0x28>
	__asm volatile
 8006e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e52:	f383 8811 	msr	BASEPRI, r3
 8006e56:	f3bf 8f6f 	isb	sy
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	60bb      	str	r3, [r7, #8]
}
 8006e60:	bf00      	nop
 8006e62:	e7fe      	b.n	8006e62 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8006e64:	4b20      	ldr	r3, [pc, #128]	; (8006ee8 <vTaskResume+0xac>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d037      	beq.n	8006ede <vTaskResume+0xa2>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d034      	beq.n	8006ede <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8006e74:	f001 f826 	bl	8007ec4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	f7ff ffad 	bl	8006dd8 <prvTaskIsTaskSuspended>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d02a      	beq.n	8006eda <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	3304      	adds	r3, #4
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7ff f88d 	bl	8005fa8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e92:	2201      	movs	r2, #1
 8006e94:	409a      	lsls	r2, r3
 8006e96:	4b15      	ldr	r3, [pc, #84]	; (8006eec <vTaskResume+0xb0>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	4a13      	ldr	r2, [pc, #76]	; (8006eec <vTaskResume+0xb0>)
 8006e9e:	6013      	str	r3, [r2, #0]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	4413      	add	r3, r2
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	4a10      	ldr	r2, [pc, #64]	; (8006ef0 <vTaskResume+0xb4>)
 8006eae:	441a      	add	r2, r3
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	3304      	adds	r3, #4
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	4610      	mov	r0, r2
 8006eb8:	f7ff f819 	bl	8005eee <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec0:	4b09      	ldr	r3, [pc, #36]	; (8006ee8 <vTaskResume+0xac>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d307      	bcc.n	8006eda <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8006eca:	4b0a      	ldr	r3, [pc, #40]	; (8006ef4 <vTaskResume+0xb8>)
 8006ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ed0:	601a      	str	r2, [r3, #0]
 8006ed2:	f3bf 8f4f 	dsb	sy
 8006ed6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8006eda:	f001 f823 	bl	8007f24 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ede:	bf00      	nop
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	2000069c 	.word	0x2000069c
 8006eec:	200007a4 	.word	0x200007a4
 8006ef0:	200006a0 	.word	0x200006a0
 8006ef4:	e000ed04 	.word	0xe000ed04

08006ef8 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b08a      	sub	sp, #40	; 0x28
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8006f00:	2300      	movs	r3, #0
 8006f02:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d10a      	bne.n	8006f24 <xTaskResumeFromISR+0x2c>
	__asm volatile
 8006f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f12:	f383 8811 	msr	BASEPRI, r3
 8006f16:	f3bf 8f6f 	isb	sy
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	61bb      	str	r3, [r7, #24]
}
 8006f20:	bf00      	nop
 8006f22:	e7fe      	b.n	8006f22 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f24:	f001 f8b0 	bl	8008088 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006f28:	f3ef 8211 	mrs	r2, BASEPRI
 8006f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f30:	f383 8811 	msr	BASEPRI, r3
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	617a      	str	r2, [r7, #20]
 8006f3e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006f40:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f42:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8006f44:	6a38      	ldr	r0, [r7, #32]
 8006f46:	f7ff ff47 	bl	8006dd8 <prvTaskIsTaskSuspended>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d02f      	beq.n	8006fb0 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f50:	4b1d      	ldr	r3, [pc, #116]	; (8006fc8 <xTaskResumeFromISR+0xd0>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d125      	bne.n	8006fa4 <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f58:	6a3b      	ldr	r3, [r7, #32]
 8006f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f5c:	4b1b      	ldr	r3, [pc, #108]	; (8006fcc <xTaskResumeFromISR+0xd4>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d301      	bcc.n	8006f6a <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8006f66:	2301      	movs	r3, #1
 8006f68:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f6a:	6a3b      	ldr	r3, [r7, #32]
 8006f6c:	3304      	adds	r3, #4
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f7ff f81a 	bl	8005fa8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f74:	6a3b      	ldr	r3, [r7, #32]
 8006f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f78:	2201      	movs	r2, #1
 8006f7a:	409a      	lsls	r2, r3
 8006f7c:	4b14      	ldr	r3, [pc, #80]	; (8006fd0 <xTaskResumeFromISR+0xd8>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	4a13      	ldr	r2, [pc, #76]	; (8006fd0 <xTaskResumeFromISR+0xd8>)
 8006f84:	6013      	str	r3, [r2, #0]
 8006f86:	6a3b      	ldr	r3, [r7, #32]
 8006f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4a10      	ldr	r2, [pc, #64]	; (8006fd4 <xTaskResumeFromISR+0xdc>)
 8006f94:	441a      	add	r2, r3
 8006f96:	6a3b      	ldr	r3, [r7, #32]
 8006f98:	3304      	adds	r3, #4
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	4610      	mov	r0, r2
 8006f9e:	f7fe ffa6 	bl	8005eee <vListInsertEnd>
 8006fa2:	e005      	b.n	8006fb0 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006fa4:	6a3b      	ldr	r3, [r7, #32]
 8006fa6:	3318      	adds	r3, #24
 8006fa8:	4619      	mov	r1, r3
 8006faa:	480b      	ldr	r0, [pc, #44]	; (8006fd8 <xTaskResumeFromISR+0xe0>)
 8006fac:	f7fe ff9f 	bl	8005eee <vListInsertEnd>
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006fba:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8006fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3728      	adds	r7, #40	; 0x28
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	200007c4 	.word	0x200007c4
 8006fcc:	2000069c 	.word	0x2000069c
 8006fd0:	200007a4 	.word	0x200007a4
 8006fd4:	200006a0 	.word	0x200006a0
 8006fd8:	2000075c 	.word	0x2000075c

08006fdc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b08a      	sub	sp, #40	; 0x28
 8006fe0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006fea:	463a      	mov	r2, r7
 8006fec:	1d39      	adds	r1, r7, #4
 8006fee:	f107 0308 	add.w	r3, r7, #8
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7f9 ff5a 	bl	8000eac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ff8:	6839      	ldr	r1, [r7, #0]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	9202      	str	r2, [sp, #8]
 8007000:	9301      	str	r3, [sp, #4]
 8007002:	2300      	movs	r3, #0
 8007004:	9300      	str	r3, [sp, #0]
 8007006:	2300      	movs	r3, #0
 8007008:	460a      	mov	r2, r1
 800700a:	4921      	ldr	r1, [pc, #132]	; (8007090 <vTaskStartScheduler+0xb4>)
 800700c:	4821      	ldr	r0, [pc, #132]	; (8007094 <vTaskStartScheduler+0xb8>)
 800700e:	f7ff fbf5 	bl	80067fc <xTaskCreateStatic>
 8007012:	4603      	mov	r3, r0
 8007014:	4a20      	ldr	r2, [pc, #128]	; (8007098 <vTaskStartScheduler+0xbc>)
 8007016:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007018:	4b1f      	ldr	r3, [pc, #124]	; (8007098 <vTaskStartScheduler+0xbc>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d002      	beq.n	8007026 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007020:	2301      	movs	r3, #1
 8007022:	617b      	str	r3, [r7, #20]
 8007024:	e001      	b.n	800702a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007026:	2300      	movs	r3, #0
 8007028:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	2b01      	cmp	r3, #1
 800702e:	d11b      	bne.n	8007068 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007034:	f383 8811 	msr	BASEPRI, r3
 8007038:	f3bf 8f6f 	isb	sy
 800703c:	f3bf 8f4f 	dsb	sy
 8007040:	613b      	str	r3, [r7, #16]
}
 8007042:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007044:	4b15      	ldr	r3, [pc, #84]	; (800709c <vTaskStartScheduler+0xc0>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	334c      	adds	r3, #76	; 0x4c
 800704a:	4a15      	ldr	r2, [pc, #84]	; (80070a0 <vTaskStartScheduler+0xc4>)
 800704c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800704e:	4b15      	ldr	r3, [pc, #84]	; (80070a4 <vTaskStartScheduler+0xc8>)
 8007050:	f04f 32ff 	mov.w	r2, #4294967295
 8007054:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007056:	4b14      	ldr	r3, [pc, #80]	; (80070a8 <vTaskStartScheduler+0xcc>)
 8007058:	2201      	movs	r2, #1
 800705a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800705c:	4b13      	ldr	r3, [pc, #76]	; (80070ac <vTaskStartScheduler+0xd0>)
 800705e:	2200      	movs	r2, #0
 8007060:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007062:	f000 fe8d 	bl	8007d80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007066:	e00e      	b.n	8007086 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800706e:	d10a      	bne.n	8007086 <vTaskStartScheduler+0xaa>
	__asm volatile
 8007070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007074:	f383 8811 	msr	BASEPRI, r3
 8007078:	f3bf 8f6f 	isb	sy
 800707c:	f3bf 8f4f 	dsb	sy
 8007080:	60fb      	str	r3, [r7, #12]
}
 8007082:	bf00      	nop
 8007084:	e7fe      	b.n	8007084 <vTaskStartScheduler+0xa8>
}
 8007086:	bf00      	nop
 8007088:	3718      	adds	r7, #24
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	0800b14c 	.word	0x0800b14c
 8007094:	0800766d 	.word	0x0800766d
 8007098:	200007c0 	.word	0x200007c0
 800709c:	2000069c 	.word	0x2000069c
 80070a0:	20000054 	.word	0x20000054
 80070a4:	200007bc 	.word	0x200007bc
 80070a8:	200007a8 	.word	0x200007a8
 80070ac:	200007a0 	.word	0x200007a0

080070b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80070b0:	b480      	push	{r7}
 80070b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80070b4:	4b04      	ldr	r3, [pc, #16]	; (80070c8 <vTaskSuspendAll+0x18>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	3301      	adds	r3, #1
 80070ba:	4a03      	ldr	r2, [pc, #12]	; (80070c8 <vTaskSuspendAll+0x18>)
 80070bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80070be:	bf00      	nop
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr
 80070c8:	200007c4 	.word	0x200007c4

080070cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80070d2:	2300      	movs	r3, #0
 80070d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80070d6:	2300      	movs	r3, #0
 80070d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80070da:	4b41      	ldr	r3, [pc, #260]	; (80071e0 <xTaskResumeAll+0x114>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d10a      	bne.n	80070f8 <xTaskResumeAll+0x2c>
	__asm volatile
 80070e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e6:	f383 8811 	msr	BASEPRI, r3
 80070ea:	f3bf 8f6f 	isb	sy
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	603b      	str	r3, [r7, #0]
}
 80070f4:	bf00      	nop
 80070f6:	e7fe      	b.n	80070f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80070f8:	f000 fee4 	bl	8007ec4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80070fc:	4b38      	ldr	r3, [pc, #224]	; (80071e0 <xTaskResumeAll+0x114>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	3b01      	subs	r3, #1
 8007102:	4a37      	ldr	r2, [pc, #220]	; (80071e0 <xTaskResumeAll+0x114>)
 8007104:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007106:	4b36      	ldr	r3, [pc, #216]	; (80071e0 <xTaskResumeAll+0x114>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d161      	bne.n	80071d2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800710e:	4b35      	ldr	r3, [pc, #212]	; (80071e4 <xTaskResumeAll+0x118>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d05d      	beq.n	80071d2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007116:	e02e      	b.n	8007176 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007118:	4b33      	ldr	r3, [pc, #204]	; (80071e8 <xTaskResumeAll+0x11c>)
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	3318      	adds	r3, #24
 8007124:	4618      	mov	r0, r3
 8007126:	f7fe ff3f 	bl	8005fa8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	3304      	adds	r3, #4
 800712e:	4618      	mov	r0, r3
 8007130:	f7fe ff3a 	bl	8005fa8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007138:	2201      	movs	r2, #1
 800713a:	409a      	lsls	r2, r3
 800713c:	4b2b      	ldr	r3, [pc, #172]	; (80071ec <xTaskResumeAll+0x120>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4313      	orrs	r3, r2
 8007142:	4a2a      	ldr	r2, [pc, #168]	; (80071ec <xTaskResumeAll+0x120>)
 8007144:	6013      	str	r3, [r2, #0]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800714a:	4613      	mov	r3, r2
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	4413      	add	r3, r2
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	4a27      	ldr	r2, [pc, #156]	; (80071f0 <xTaskResumeAll+0x124>)
 8007154:	441a      	add	r2, r3
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	3304      	adds	r3, #4
 800715a:	4619      	mov	r1, r3
 800715c:	4610      	mov	r0, r2
 800715e:	f7fe fec6 	bl	8005eee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007166:	4b23      	ldr	r3, [pc, #140]	; (80071f4 <xTaskResumeAll+0x128>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716c:	429a      	cmp	r2, r3
 800716e:	d302      	bcc.n	8007176 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007170:	4b21      	ldr	r3, [pc, #132]	; (80071f8 <xTaskResumeAll+0x12c>)
 8007172:	2201      	movs	r2, #1
 8007174:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007176:	4b1c      	ldr	r3, [pc, #112]	; (80071e8 <xTaskResumeAll+0x11c>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1cc      	bne.n	8007118 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d001      	beq.n	8007188 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007184:	f000 fb2c 	bl	80077e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007188:	4b1c      	ldr	r3, [pc, #112]	; (80071fc <xTaskResumeAll+0x130>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d010      	beq.n	80071b6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007194:	f000 f846 	bl	8007224 <xTaskIncrementTick>
 8007198:	4603      	mov	r3, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d002      	beq.n	80071a4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800719e:	4b16      	ldr	r3, [pc, #88]	; (80071f8 <xTaskResumeAll+0x12c>)
 80071a0:	2201      	movs	r2, #1
 80071a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	3b01      	subs	r3, #1
 80071a8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1f1      	bne.n	8007194 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80071b0:	4b12      	ldr	r3, [pc, #72]	; (80071fc <xTaskResumeAll+0x130>)
 80071b2:	2200      	movs	r2, #0
 80071b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80071b6:	4b10      	ldr	r3, [pc, #64]	; (80071f8 <xTaskResumeAll+0x12c>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d009      	beq.n	80071d2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80071be:	2301      	movs	r3, #1
 80071c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80071c2:	4b0f      	ldr	r3, [pc, #60]	; (8007200 <xTaskResumeAll+0x134>)
 80071c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071c8:	601a      	str	r2, [r3, #0]
 80071ca:	f3bf 8f4f 	dsb	sy
 80071ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80071d2:	f000 fea7 	bl	8007f24 <vPortExitCritical>

	return xAlreadyYielded;
 80071d6:	68bb      	ldr	r3, [r7, #8]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3710      	adds	r7, #16
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	200007c4 	.word	0x200007c4
 80071e4:	2000079c 	.word	0x2000079c
 80071e8:	2000075c 	.word	0x2000075c
 80071ec:	200007a4 	.word	0x200007a4
 80071f0:	200006a0 	.word	0x200006a0
 80071f4:	2000069c 	.word	0x2000069c
 80071f8:	200007b0 	.word	0x200007b0
 80071fc:	200007ac 	.word	0x200007ac
 8007200:	e000ed04 	.word	0xe000ed04

08007204 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800720a:	4b05      	ldr	r3, [pc, #20]	; (8007220 <xTaskGetTickCount+0x1c>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007210:	687b      	ldr	r3, [r7, #4]
}
 8007212:	4618      	mov	r0, r3
 8007214:	370c      	adds	r7, #12
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	200007a0 	.word	0x200007a0

08007224 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b086      	sub	sp, #24
 8007228:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800722a:	2300      	movs	r3, #0
 800722c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800722e:	4b4e      	ldr	r3, [pc, #312]	; (8007368 <xTaskIncrementTick+0x144>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	f040 808e 	bne.w	8007354 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007238:	4b4c      	ldr	r3, [pc, #304]	; (800736c <xTaskIncrementTick+0x148>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	3301      	adds	r3, #1
 800723e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007240:	4a4a      	ldr	r2, [pc, #296]	; (800736c <xTaskIncrementTick+0x148>)
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d120      	bne.n	800728e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800724c:	4b48      	ldr	r3, [pc, #288]	; (8007370 <xTaskIncrementTick+0x14c>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00a      	beq.n	800726c <xTaskIncrementTick+0x48>
	__asm volatile
 8007256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	603b      	str	r3, [r7, #0]
}
 8007268:	bf00      	nop
 800726a:	e7fe      	b.n	800726a <xTaskIncrementTick+0x46>
 800726c:	4b40      	ldr	r3, [pc, #256]	; (8007370 <xTaskIncrementTick+0x14c>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	60fb      	str	r3, [r7, #12]
 8007272:	4b40      	ldr	r3, [pc, #256]	; (8007374 <xTaskIncrementTick+0x150>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a3e      	ldr	r2, [pc, #248]	; (8007370 <xTaskIncrementTick+0x14c>)
 8007278:	6013      	str	r3, [r2, #0]
 800727a:	4a3e      	ldr	r2, [pc, #248]	; (8007374 <xTaskIncrementTick+0x150>)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6013      	str	r3, [r2, #0]
 8007280:	4b3d      	ldr	r3, [pc, #244]	; (8007378 <xTaskIncrementTick+0x154>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	3301      	adds	r3, #1
 8007286:	4a3c      	ldr	r2, [pc, #240]	; (8007378 <xTaskIncrementTick+0x154>)
 8007288:	6013      	str	r3, [r2, #0]
 800728a:	f000 faa9 	bl	80077e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800728e:	4b3b      	ldr	r3, [pc, #236]	; (800737c <xTaskIncrementTick+0x158>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	693a      	ldr	r2, [r7, #16]
 8007294:	429a      	cmp	r2, r3
 8007296:	d348      	bcc.n	800732a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007298:	4b35      	ldr	r3, [pc, #212]	; (8007370 <xTaskIncrementTick+0x14c>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d104      	bne.n	80072ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072a2:	4b36      	ldr	r3, [pc, #216]	; (800737c <xTaskIncrementTick+0x158>)
 80072a4:	f04f 32ff 	mov.w	r2, #4294967295
 80072a8:	601a      	str	r2, [r3, #0]
					break;
 80072aa:	e03e      	b.n	800732a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072ac:	4b30      	ldr	r3, [pc, #192]	; (8007370 <xTaskIncrementTick+0x14c>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80072bc:	693a      	ldr	r2, [r7, #16]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d203      	bcs.n	80072cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80072c4:	4a2d      	ldr	r2, [pc, #180]	; (800737c <xTaskIncrementTick+0x158>)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80072ca:	e02e      	b.n	800732a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	3304      	adds	r3, #4
 80072d0:	4618      	mov	r0, r3
 80072d2:	f7fe fe69 	bl	8005fa8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d004      	beq.n	80072e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	3318      	adds	r3, #24
 80072e2:	4618      	mov	r0, r3
 80072e4:	f7fe fe60 	bl	8005fa8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ec:	2201      	movs	r2, #1
 80072ee:	409a      	lsls	r2, r3
 80072f0:	4b23      	ldr	r3, [pc, #140]	; (8007380 <xTaskIncrementTick+0x15c>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	4a22      	ldr	r2, [pc, #136]	; (8007380 <xTaskIncrementTick+0x15c>)
 80072f8:	6013      	str	r3, [r2, #0]
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072fe:	4613      	mov	r3, r2
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	4413      	add	r3, r2
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	4a1f      	ldr	r2, [pc, #124]	; (8007384 <xTaskIncrementTick+0x160>)
 8007308:	441a      	add	r2, r3
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	3304      	adds	r3, #4
 800730e:	4619      	mov	r1, r3
 8007310:	4610      	mov	r0, r2
 8007312:	f7fe fdec 	bl	8005eee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800731a:	4b1b      	ldr	r3, [pc, #108]	; (8007388 <xTaskIncrementTick+0x164>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007320:	429a      	cmp	r2, r3
 8007322:	d3b9      	bcc.n	8007298 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007324:	2301      	movs	r3, #1
 8007326:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007328:	e7b6      	b.n	8007298 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800732a:	4b17      	ldr	r3, [pc, #92]	; (8007388 <xTaskIncrementTick+0x164>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007330:	4914      	ldr	r1, [pc, #80]	; (8007384 <xTaskIncrementTick+0x160>)
 8007332:	4613      	mov	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	4413      	add	r3, r2
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	440b      	add	r3, r1
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2b01      	cmp	r3, #1
 8007340:	d901      	bls.n	8007346 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007342:	2301      	movs	r3, #1
 8007344:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007346:	4b11      	ldr	r3, [pc, #68]	; (800738c <xTaskIncrementTick+0x168>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d007      	beq.n	800735e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800734e:	2301      	movs	r3, #1
 8007350:	617b      	str	r3, [r7, #20]
 8007352:	e004      	b.n	800735e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007354:	4b0e      	ldr	r3, [pc, #56]	; (8007390 <xTaskIncrementTick+0x16c>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	3301      	adds	r3, #1
 800735a:	4a0d      	ldr	r2, [pc, #52]	; (8007390 <xTaskIncrementTick+0x16c>)
 800735c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800735e:	697b      	ldr	r3, [r7, #20]
}
 8007360:	4618      	mov	r0, r3
 8007362:	3718      	adds	r7, #24
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	200007c4 	.word	0x200007c4
 800736c:	200007a0 	.word	0x200007a0
 8007370:	20000754 	.word	0x20000754
 8007374:	20000758 	.word	0x20000758
 8007378:	200007b4 	.word	0x200007b4
 800737c:	200007bc 	.word	0x200007bc
 8007380:	200007a4 	.word	0x200007a4
 8007384:	200006a0 	.word	0x200006a0
 8007388:	2000069c 	.word	0x2000069c
 800738c:	200007b0 	.word	0x200007b0
 8007390:	200007ac 	.word	0x200007ac

08007394 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007394:	b480      	push	{r7}
 8007396:	b087      	sub	sp, #28
 8007398:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800739a:	4b29      	ldr	r3, [pc, #164]	; (8007440 <vTaskSwitchContext+0xac>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d003      	beq.n	80073aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80073a2:	4b28      	ldr	r3, [pc, #160]	; (8007444 <vTaskSwitchContext+0xb0>)
 80073a4:	2201      	movs	r2, #1
 80073a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80073a8:	e044      	b.n	8007434 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80073aa:	4b26      	ldr	r3, [pc, #152]	; (8007444 <vTaskSwitchContext+0xb0>)
 80073ac:	2200      	movs	r2, #0
 80073ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073b0:	4b25      	ldr	r3, [pc, #148]	; (8007448 <vTaskSwitchContext+0xb4>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	fab3 f383 	clz	r3, r3
 80073bc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80073be:	7afb      	ldrb	r3, [r7, #11]
 80073c0:	f1c3 031f 	rsb	r3, r3, #31
 80073c4:	617b      	str	r3, [r7, #20]
 80073c6:	4921      	ldr	r1, [pc, #132]	; (800744c <vTaskSwitchContext+0xb8>)
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	4613      	mov	r3, r2
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	4413      	add	r3, r2
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	440b      	add	r3, r1
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d10a      	bne.n	80073f0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80073da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073de:	f383 8811 	msr	BASEPRI, r3
 80073e2:	f3bf 8f6f 	isb	sy
 80073e6:	f3bf 8f4f 	dsb	sy
 80073ea:	607b      	str	r3, [r7, #4]
}
 80073ec:	bf00      	nop
 80073ee:	e7fe      	b.n	80073ee <vTaskSwitchContext+0x5a>
 80073f0:	697a      	ldr	r2, [r7, #20]
 80073f2:	4613      	mov	r3, r2
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	4413      	add	r3, r2
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	4a14      	ldr	r2, [pc, #80]	; (800744c <vTaskSwitchContext+0xb8>)
 80073fc:	4413      	add	r3, r2
 80073fe:	613b      	str	r3, [r7, #16]
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	685a      	ldr	r2, [r3, #4]
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	605a      	str	r2, [r3, #4]
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	685a      	ldr	r2, [r3, #4]
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	3308      	adds	r3, #8
 8007412:	429a      	cmp	r2, r3
 8007414:	d104      	bne.n	8007420 <vTaskSwitchContext+0x8c>
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	685a      	ldr	r2, [r3, #4]
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	605a      	str	r2, [r3, #4]
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	4a0a      	ldr	r2, [pc, #40]	; (8007450 <vTaskSwitchContext+0xbc>)
 8007428:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800742a:	4b09      	ldr	r3, [pc, #36]	; (8007450 <vTaskSwitchContext+0xbc>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	334c      	adds	r3, #76	; 0x4c
 8007430:	4a08      	ldr	r2, [pc, #32]	; (8007454 <vTaskSwitchContext+0xc0>)
 8007432:	6013      	str	r3, [r2, #0]
}
 8007434:	bf00      	nop
 8007436:	371c      	adds	r7, #28
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr
 8007440:	200007c4 	.word	0x200007c4
 8007444:	200007b0 	.word	0x200007b0
 8007448:	200007a4 	.word	0x200007a4
 800744c:	200006a0 	.word	0x200006a0
 8007450:	2000069c 	.word	0x2000069c
 8007454:	20000054 	.word	0x20000054

08007458 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d10a      	bne.n	800747e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746c:	f383 8811 	msr	BASEPRI, r3
 8007470:	f3bf 8f6f 	isb	sy
 8007474:	f3bf 8f4f 	dsb	sy
 8007478:	60fb      	str	r3, [r7, #12]
}
 800747a:	bf00      	nop
 800747c:	e7fe      	b.n	800747c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800747e:	4b07      	ldr	r3, [pc, #28]	; (800749c <vTaskPlaceOnEventList+0x44>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	3318      	adds	r3, #24
 8007484:	4619      	mov	r1, r3
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f7fe fd55 	bl	8005f36 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800748c:	2101      	movs	r1, #1
 800748e:	6838      	ldr	r0, [r7, #0]
 8007490:	f000 fb82 	bl	8007b98 <prvAddCurrentTaskToDelayedList>
}
 8007494:	bf00      	nop
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}
 800749c:	2000069c 	.word	0x2000069c

080074a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b086      	sub	sp, #24
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d10a      	bne.n	80074cc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80074b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ba:	f383 8811 	msr	BASEPRI, r3
 80074be:	f3bf 8f6f 	isb	sy
 80074c2:	f3bf 8f4f 	dsb	sy
 80074c6:	60fb      	str	r3, [r7, #12]
}
 80074c8:	bf00      	nop
 80074ca:	e7fe      	b.n	80074ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	3318      	adds	r3, #24
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7fe fd69 	bl	8005fa8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074d6:	4b1d      	ldr	r3, [pc, #116]	; (800754c <xTaskRemoveFromEventList+0xac>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d11c      	bne.n	8007518 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	3304      	adds	r3, #4
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7fe fd60 	bl	8005fa8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ec:	2201      	movs	r2, #1
 80074ee:	409a      	lsls	r2, r3
 80074f0:	4b17      	ldr	r3, [pc, #92]	; (8007550 <xTaskRemoveFromEventList+0xb0>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	4a16      	ldr	r2, [pc, #88]	; (8007550 <xTaskRemoveFromEventList+0xb0>)
 80074f8:	6013      	str	r3, [r2, #0]
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074fe:	4613      	mov	r3, r2
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	4413      	add	r3, r2
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	4a13      	ldr	r2, [pc, #76]	; (8007554 <xTaskRemoveFromEventList+0xb4>)
 8007508:	441a      	add	r2, r3
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	3304      	adds	r3, #4
 800750e:	4619      	mov	r1, r3
 8007510:	4610      	mov	r0, r2
 8007512:	f7fe fcec 	bl	8005eee <vListInsertEnd>
 8007516:	e005      	b.n	8007524 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	3318      	adds	r3, #24
 800751c:	4619      	mov	r1, r3
 800751e:	480e      	ldr	r0, [pc, #56]	; (8007558 <xTaskRemoveFromEventList+0xb8>)
 8007520:	f7fe fce5 	bl	8005eee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007528:	4b0c      	ldr	r3, [pc, #48]	; (800755c <xTaskRemoveFromEventList+0xbc>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752e:	429a      	cmp	r2, r3
 8007530:	d905      	bls.n	800753e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007532:	2301      	movs	r3, #1
 8007534:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007536:	4b0a      	ldr	r3, [pc, #40]	; (8007560 <xTaskRemoveFromEventList+0xc0>)
 8007538:	2201      	movs	r2, #1
 800753a:	601a      	str	r2, [r3, #0]
 800753c:	e001      	b.n	8007542 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800753e:	2300      	movs	r3, #0
 8007540:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007542:	697b      	ldr	r3, [r7, #20]
}
 8007544:	4618      	mov	r0, r3
 8007546:	3718      	adds	r7, #24
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	200007c4 	.word	0x200007c4
 8007550:	200007a4 	.word	0x200007a4
 8007554:	200006a0 	.word	0x200006a0
 8007558:	2000075c 	.word	0x2000075c
 800755c:	2000069c 	.word	0x2000069c
 8007560:	200007b0 	.word	0x200007b0

08007564 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800756c:	4b06      	ldr	r3, [pc, #24]	; (8007588 <vTaskInternalSetTimeOutState+0x24>)
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007574:	4b05      	ldr	r3, [pc, #20]	; (800758c <vTaskInternalSetTimeOutState+0x28>)
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	605a      	str	r2, [r3, #4]
}
 800757c:	bf00      	nop
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr
 8007588:	200007b4 	.word	0x200007b4
 800758c:	200007a0 	.word	0x200007a0

08007590 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b088      	sub	sp, #32
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d10a      	bne.n	80075b6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80075a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a4:	f383 8811 	msr	BASEPRI, r3
 80075a8:	f3bf 8f6f 	isb	sy
 80075ac:	f3bf 8f4f 	dsb	sy
 80075b0:	613b      	str	r3, [r7, #16]
}
 80075b2:	bf00      	nop
 80075b4:	e7fe      	b.n	80075b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d10a      	bne.n	80075d2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80075bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c0:	f383 8811 	msr	BASEPRI, r3
 80075c4:	f3bf 8f6f 	isb	sy
 80075c8:	f3bf 8f4f 	dsb	sy
 80075cc:	60fb      	str	r3, [r7, #12]
}
 80075ce:	bf00      	nop
 80075d0:	e7fe      	b.n	80075d0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80075d2:	f000 fc77 	bl	8007ec4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80075d6:	4b1d      	ldr	r3, [pc, #116]	; (800764c <xTaskCheckForTimeOut+0xbc>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	69ba      	ldr	r2, [r7, #24]
 80075e2:	1ad3      	subs	r3, r2, r3
 80075e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ee:	d102      	bne.n	80075f6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80075f0:	2300      	movs	r3, #0
 80075f2:	61fb      	str	r3, [r7, #28]
 80075f4:	e023      	b.n	800763e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	4b15      	ldr	r3, [pc, #84]	; (8007650 <xTaskCheckForTimeOut+0xc0>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d007      	beq.n	8007612 <xTaskCheckForTimeOut+0x82>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	69ba      	ldr	r2, [r7, #24]
 8007608:	429a      	cmp	r2, r3
 800760a:	d302      	bcc.n	8007612 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800760c:	2301      	movs	r3, #1
 800760e:	61fb      	str	r3, [r7, #28]
 8007610:	e015      	b.n	800763e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	429a      	cmp	r2, r3
 800761a:	d20b      	bcs.n	8007634 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	1ad2      	subs	r2, r2, r3
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f7ff ff9b 	bl	8007564 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800762e:	2300      	movs	r3, #0
 8007630:	61fb      	str	r3, [r7, #28]
 8007632:	e004      	b.n	800763e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	2200      	movs	r2, #0
 8007638:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800763a:	2301      	movs	r3, #1
 800763c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800763e:	f000 fc71 	bl	8007f24 <vPortExitCritical>

	return xReturn;
 8007642:	69fb      	ldr	r3, [r7, #28]
}
 8007644:	4618      	mov	r0, r3
 8007646:	3720      	adds	r7, #32
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}
 800764c:	200007a0 	.word	0x200007a0
 8007650:	200007b4 	.word	0x200007b4

08007654 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007654:	b480      	push	{r7}
 8007656:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007658:	4b03      	ldr	r3, [pc, #12]	; (8007668 <vTaskMissedYield+0x14>)
 800765a:	2201      	movs	r2, #1
 800765c:	601a      	str	r2, [r3, #0]
}
 800765e:	bf00      	nop
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr
 8007668:	200007b0 	.word	0x200007b0

0800766c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007674:	f000 f852 	bl	800771c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007678:	4b06      	ldr	r3, [pc, #24]	; (8007694 <prvIdleTask+0x28>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2b01      	cmp	r3, #1
 800767e:	d9f9      	bls.n	8007674 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007680:	4b05      	ldr	r3, [pc, #20]	; (8007698 <prvIdleTask+0x2c>)
 8007682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007686:	601a      	str	r2, [r3, #0]
 8007688:	f3bf 8f4f 	dsb	sy
 800768c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007690:	e7f0      	b.n	8007674 <prvIdleTask+0x8>
 8007692:	bf00      	nop
 8007694:	200006a0 	.word	0x200006a0
 8007698:	e000ed04 	.word	0xe000ed04

0800769c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80076a2:	2300      	movs	r3, #0
 80076a4:	607b      	str	r3, [r7, #4]
 80076a6:	e00c      	b.n	80076c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	4613      	mov	r3, r2
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	4413      	add	r3, r2
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	4a12      	ldr	r2, [pc, #72]	; (80076fc <prvInitialiseTaskLists+0x60>)
 80076b4:	4413      	add	r3, r2
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7fe fbec 	bl	8005e94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	3301      	adds	r3, #1
 80076c0:	607b      	str	r3, [r7, #4]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2b06      	cmp	r3, #6
 80076c6:	d9ef      	bls.n	80076a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80076c8:	480d      	ldr	r0, [pc, #52]	; (8007700 <prvInitialiseTaskLists+0x64>)
 80076ca:	f7fe fbe3 	bl	8005e94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80076ce:	480d      	ldr	r0, [pc, #52]	; (8007704 <prvInitialiseTaskLists+0x68>)
 80076d0:	f7fe fbe0 	bl	8005e94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80076d4:	480c      	ldr	r0, [pc, #48]	; (8007708 <prvInitialiseTaskLists+0x6c>)
 80076d6:	f7fe fbdd 	bl	8005e94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80076da:	480c      	ldr	r0, [pc, #48]	; (800770c <prvInitialiseTaskLists+0x70>)
 80076dc:	f7fe fbda 	bl	8005e94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80076e0:	480b      	ldr	r0, [pc, #44]	; (8007710 <prvInitialiseTaskLists+0x74>)
 80076e2:	f7fe fbd7 	bl	8005e94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80076e6:	4b0b      	ldr	r3, [pc, #44]	; (8007714 <prvInitialiseTaskLists+0x78>)
 80076e8:	4a05      	ldr	r2, [pc, #20]	; (8007700 <prvInitialiseTaskLists+0x64>)
 80076ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80076ec:	4b0a      	ldr	r3, [pc, #40]	; (8007718 <prvInitialiseTaskLists+0x7c>)
 80076ee:	4a05      	ldr	r2, [pc, #20]	; (8007704 <prvInitialiseTaskLists+0x68>)
 80076f0:	601a      	str	r2, [r3, #0]
}
 80076f2:	bf00      	nop
 80076f4:	3708      	adds	r7, #8
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	200006a0 	.word	0x200006a0
 8007700:	2000072c 	.word	0x2000072c
 8007704:	20000740 	.word	0x20000740
 8007708:	2000075c 	.word	0x2000075c
 800770c:	20000770 	.word	0x20000770
 8007710:	20000788 	.word	0x20000788
 8007714:	20000754 	.word	0x20000754
 8007718:	20000758 	.word	0x20000758

0800771c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007722:	e019      	b.n	8007758 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007724:	f000 fbce 	bl	8007ec4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007728:	4b10      	ldr	r3, [pc, #64]	; (800776c <prvCheckTasksWaitingTermination+0x50>)
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	3304      	adds	r3, #4
 8007734:	4618      	mov	r0, r3
 8007736:	f7fe fc37 	bl	8005fa8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800773a:	4b0d      	ldr	r3, [pc, #52]	; (8007770 <prvCheckTasksWaitingTermination+0x54>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	3b01      	subs	r3, #1
 8007740:	4a0b      	ldr	r2, [pc, #44]	; (8007770 <prvCheckTasksWaitingTermination+0x54>)
 8007742:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007744:	4b0b      	ldr	r3, [pc, #44]	; (8007774 <prvCheckTasksWaitingTermination+0x58>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	3b01      	subs	r3, #1
 800774a:	4a0a      	ldr	r2, [pc, #40]	; (8007774 <prvCheckTasksWaitingTermination+0x58>)
 800774c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800774e:	f000 fbe9 	bl	8007f24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f810 	bl	8007778 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007758:	4b06      	ldr	r3, [pc, #24]	; (8007774 <prvCheckTasksWaitingTermination+0x58>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1e1      	bne.n	8007724 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007760:	bf00      	nop
 8007762:	bf00      	nop
 8007764:	3708      	adds	r7, #8
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	20000770 	.word	0x20000770
 8007770:	2000079c 	.word	0x2000079c
 8007774:	20000784 	.word	0x20000784

08007778 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	334c      	adds	r3, #76	; 0x4c
 8007784:	4618      	mov	r0, r3
 8007786:	f001 fd07 	bl	8009198 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007790:	2b00      	cmp	r3, #0
 8007792:	d108      	bne.n	80077a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007798:	4618      	mov	r0, r3
 800779a:	f000 fd81 	bl	80082a0 <vPortFree>
				vPortFree( pxTCB );
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 fd7e 	bl	80082a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80077a4:	e018      	b.n	80077d8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d103      	bne.n	80077b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 fd75 	bl	80082a0 <vPortFree>
	}
 80077b6:	e00f      	b.n	80077d8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d00a      	beq.n	80077d8 <prvDeleteTCB+0x60>
	__asm volatile
 80077c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c6:	f383 8811 	msr	BASEPRI, r3
 80077ca:	f3bf 8f6f 	isb	sy
 80077ce:	f3bf 8f4f 	dsb	sy
 80077d2:	60fb      	str	r3, [r7, #12]
}
 80077d4:	bf00      	nop
 80077d6:	e7fe      	b.n	80077d6 <prvDeleteTCB+0x5e>
	}
 80077d8:	bf00      	nop
 80077da:	3710      	adds	r7, #16
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077e6:	4b0c      	ldr	r3, [pc, #48]	; (8007818 <prvResetNextTaskUnblockTime+0x38>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d104      	bne.n	80077fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80077f0:	4b0a      	ldr	r3, [pc, #40]	; (800781c <prvResetNextTaskUnblockTime+0x3c>)
 80077f2:	f04f 32ff 	mov.w	r2, #4294967295
 80077f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80077f8:	e008      	b.n	800780c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077fa:	4b07      	ldr	r3, [pc, #28]	; (8007818 <prvResetNextTaskUnblockTime+0x38>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	4a04      	ldr	r2, [pc, #16]	; (800781c <prvResetNextTaskUnblockTime+0x3c>)
 800780a:	6013      	str	r3, [r2, #0]
}
 800780c:	bf00      	nop
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr
 8007818:	20000754 	.word	0x20000754
 800781c:	200007bc 	.word	0x200007bc

08007820 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007826:	4b0b      	ldr	r3, [pc, #44]	; (8007854 <xTaskGetSchedulerState+0x34>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d102      	bne.n	8007834 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800782e:	2301      	movs	r3, #1
 8007830:	607b      	str	r3, [r7, #4]
 8007832:	e008      	b.n	8007846 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007834:	4b08      	ldr	r3, [pc, #32]	; (8007858 <xTaskGetSchedulerState+0x38>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d102      	bne.n	8007842 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800783c:	2302      	movs	r3, #2
 800783e:	607b      	str	r3, [r7, #4]
 8007840:	e001      	b.n	8007846 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007842:	2300      	movs	r3, #0
 8007844:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007846:	687b      	ldr	r3, [r7, #4]
	}
 8007848:	4618      	mov	r0, r3
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr
 8007854:	200007a8 	.word	0x200007a8
 8007858:	200007c4 	.word	0x200007c4

0800785c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007868:	2300      	movs	r3, #0
 800786a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d05e      	beq.n	8007930 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007876:	4b31      	ldr	r3, [pc, #196]	; (800793c <xTaskPriorityInherit+0xe0>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800787c:	429a      	cmp	r2, r3
 800787e:	d24e      	bcs.n	800791e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	2b00      	cmp	r3, #0
 8007886:	db06      	blt.n	8007896 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007888:	4b2c      	ldr	r3, [pc, #176]	; (800793c <xTaskPriorityInherit+0xe0>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800788e:	f1c3 0207 	rsb	r2, r3, #7
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	6959      	ldr	r1, [r3, #20]
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800789e:	4613      	mov	r3, r2
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	4413      	add	r3, r2
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	4a26      	ldr	r2, [pc, #152]	; (8007940 <xTaskPriorityInherit+0xe4>)
 80078a8:	4413      	add	r3, r2
 80078aa:	4299      	cmp	r1, r3
 80078ac:	d12f      	bne.n	800790e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	3304      	adds	r3, #4
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7fe fb78 	bl	8005fa8 <uxListRemove>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d10a      	bne.n	80078d4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c2:	2201      	movs	r2, #1
 80078c4:	fa02 f303 	lsl.w	r3, r2, r3
 80078c8:	43da      	mvns	r2, r3
 80078ca:	4b1e      	ldr	r3, [pc, #120]	; (8007944 <xTaskPriorityInherit+0xe8>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4013      	ands	r3, r2
 80078d0:	4a1c      	ldr	r2, [pc, #112]	; (8007944 <xTaskPriorityInherit+0xe8>)
 80078d2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80078d4:	4b19      	ldr	r3, [pc, #100]	; (800793c <xTaskPriorityInherit+0xe0>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e2:	2201      	movs	r2, #1
 80078e4:	409a      	lsls	r2, r3
 80078e6:	4b17      	ldr	r3, [pc, #92]	; (8007944 <xTaskPriorityInherit+0xe8>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	4a15      	ldr	r2, [pc, #84]	; (8007944 <xTaskPriorityInherit+0xe8>)
 80078ee:	6013      	str	r3, [r2, #0]
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078f4:	4613      	mov	r3, r2
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	4413      	add	r3, r2
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	4a10      	ldr	r2, [pc, #64]	; (8007940 <xTaskPriorityInherit+0xe4>)
 80078fe:	441a      	add	r2, r3
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	3304      	adds	r3, #4
 8007904:	4619      	mov	r1, r3
 8007906:	4610      	mov	r0, r2
 8007908:	f7fe faf1 	bl	8005eee <vListInsertEnd>
 800790c:	e004      	b.n	8007918 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800790e:	4b0b      	ldr	r3, [pc, #44]	; (800793c <xTaskPriorityInherit+0xe0>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007918:	2301      	movs	r3, #1
 800791a:	60fb      	str	r3, [r7, #12]
 800791c:	e008      	b.n	8007930 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007922:	4b06      	ldr	r3, [pc, #24]	; (800793c <xTaskPriorityInherit+0xe0>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007928:	429a      	cmp	r2, r3
 800792a:	d201      	bcs.n	8007930 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800792c:	2301      	movs	r3, #1
 800792e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007930:	68fb      	ldr	r3, [r7, #12]
	}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	2000069c 	.word	0x2000069c
 8007940:	200006a0 	.word	0x200006a0
 8007944:	200007a4 	.word	0x200007a4

08007948 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007948:	b580      	push	{r7, lr}
 800794a:	b086      	sub	sp, #24
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007954:	2300      	movs	r3, #0
 8007956:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d06e      	beq.n	8007a3c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800795e:	4b3a      	ldr	r3, [pc, #232]	; (8007a48 <xTaskPriorityDisinherit+0x100>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	693a      	ldr	r2, [r7, #16]
 8007964:	429a      	cmp	r2, r3
 8007966:	d00a      	beq.n	800797e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796c:	f383 8811 	msr	BASEPRI, r3
 8007970:	f3bf 8f6f 	isb	sy
 8007974:	f3bf 8f4f 	dsb	sy
 8007978:	60fb      	str	r3, [r7, #12]
}
 800797a:	bf00      	nop
 800797c:	e7fe      	b.n	800797c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007982:	2b00      	cmp	r3, #0
 8007984:	d10a      	bne.n	800799c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798a:	f383 8811 	msr	BASEPRI, r3
 800798e:	f3bf 8f6f 	isb	sy
 8007992:	f3bf 8f4f 	dsb	sy
 8007996:	60bb      	str	r3, [r7, #8]
}
 8007998:	bf00      	nop
 800799a:	e7fe      	b.n	800799a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079a0:	1e5a      	subs	r2, r3, #1
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d044      	beq.n	8007a3c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d140      	bne.n	8007a3c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	3304      	adds	r3, #4
 80079be:	4618      	mov	r0, r3
 80079c0:	f7fe faf2 	bl	8005fa8 <uxListRemove>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d115      	bne.n	80079f6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ce:	491f      	ldr	r1, [pc, #124]	; (8007a4c <xTaskPriorityDisinherit+0x104>)
 80079d0:	4613      	mov	r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	4413      	add	r3, r2
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	440b      	add	r3, r1
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d10a      	bne.n	80079f6 <xTaskPriorityDisinherit+0xae>
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e4:	2201      	movs	r2, #1
 80079e6:	fa02 f303 	lsl.w	r3, r2, r3
 80079ea:	43da      	mvns	r2, r3
 80079ec:	4b18      	ldr	r3, [pc, #96]	; (8007a50 <xTaskPriorityDisinherit+0x108>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4013      	ands	r3, r2
 80079f2:	4a17      	ldr	r2, [pc, #92]	; (8007a50 <xTaskPriorityDisinherit+0x108>)
 80079f4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a02:	f1c3 0207 	rsb	r2, r3, #7
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a0e:	2201      	movs	r2, #1
 8007a10:	409a      	lsls	r2, r3
 8007a12:	4b0f      	ldr	r3, [pc, #60]	; (8007a50 <xTaskPriorityDisinherit+0x108>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	4a0d      	ldr	r2, [pc, #52]	; (8007a50 <xTaskPriorityDisinherit+0x108>)
 8007a1a:	6013      	str	r3, [r2, #0]
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a20:	4613      	mov	r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	4413      	add	r3, r2
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	4a08      	ldr	r2, [pc, #32]	; (8007a4c <xTaskPriorityDisinherit+0x104>)
 8007a2a:	441a      	add	r2, r3
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	3304      	adds	r3, #4
 8007a30:	4619      	mov	r1, r3
 8007a32:	4610      	mov	r0, r2
 8007a34:	f7fe fa5b 	bl	8005eee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a3c:	697b      	ldr	r3, [r7, #20]
	}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3718      	adds	r7, #24
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	2000069c 	.word	0x2000069c
 8007a4c:	200006a0 	.word	0x200006a0
 8007a50:	200007a4 	.word	0x200007a4

08007a54 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b088      	sub	sp, #32
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007a62:	2301      	movs	r3, #1
 8007a64:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d077      	beq.n	8007b5c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d10a      	bne.n	8007a8a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a78:	f383 8811 	msr	BASEPRI, r3
 8007a7c:	f3bf 8f6f 	isb	sy
 8007a80:	f3bf 8f4f 	dsb	sy
 8007a84:	60fb      	str	r3, [r7, #12]
}
 8007a86:	bf00      	nop
 8007a88:	e7fe      	b.n	8007a88 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a8e:	683a      	ldr	r2, [r7, #0]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d902      	bls.n	8007a9a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	61fb      	str	r3, [r7, #28]
 8007a98:	e002      	b.n	8007aa0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007a9a:	69bb      	ldr	r3, [r7, #24]
 8007a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a9e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa4:	69fa      	ldr	r2, [r7, #28]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d058      	beq.n	8007b5c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aae:	697a      	ldr	r2, [r7, #20]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d153      	bne.n	8007b5c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007ab4:	4b2b      	ldr	r3, [pc, #172]	; (8007b64 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	69ba      	ldr	r2, [r7, #24]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d10a      	bne.n	8007ad4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac2:	f383 8811 	msr	BASEPRI, r3
 8007ac6:	f3bf 8f6f 	isb	sy
 8007aca:	f3bf 8f4f 	dsb	sy
 8007ace:	60bb      	str	r3, [r7, #8]
}
 8007ad0:	bf00      	nop
 8007ad2:	e7fe      	b.n	8007ad2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	69fa      	ldr	r2, [r7, #28]
 8007ade:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	699b      	ldr	r3, [r3, #24]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	db04      	blt.n	8007af2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	f1c3 0207 	rsb	r2, r3, #7
 8007aee:	69bb      	ldr	r3, [r7, #24]
 8007af0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	6959      	ldr	r1, [r3, #20]
 8007af6:	693a      	ldr	r2, [r7, #16]
 8007af8:	4613      	mov	r3, r2
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	4413      	add	r3, r2
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	4a19      	ldr	r2, [pc, #100]	; (8007b68 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007b02:	4413      	add	r3, r2
 8007b04:	4299      	cmp	r1, r3
 8007b06:	d129      	bne.n	8007b5c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	3304      	adds	r3, #4
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7fe fa4b 	bl	8005fa8 <uxListRemove>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d10a      	bne.n	8007b2e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007b18:	69bb      	ldr	r3, [r7, #24]
 8007b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b22:	43da      	mvns	r2, r3
 8007b24:	4b11      	ldr	r3, [pc, #68]	; (8007b6c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4013      	ands	r3, r2
 8007b2a:	4a10      	ldr	r2, [pc, #64]	; (8007b6c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007b2c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b32:	2201      	movs	r2, #1
 8007b34:	409a      	lsls	r2, r3
 8007b36:	4b0d      	ldr	r3, [pc, #52]	; (8007b6c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	4a0b      	ldr	r2, [pc, #44]	; (8007b6c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007b3e:	6013      	str	r3, [r2, #0]
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b44:	4613      	mov	r3, r2
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	4413      	add	r3, r2
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	4a06      	ldr	r2, [pc, #24]	; (8007b68 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007b4e:	441a      	add	r2, r3
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	3304      	adds	r3, #4
 8007b54:	4619      	mov	r1, r3
 8007b56:	4610      	mov	r0, r2
 8007b58:	f7fe f9c9 	bl	8005eee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b5c:	bf00      	nop
 8007b5e:	3720      	adds	r7, #32
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	2000069c 	.word	0x2000069c
 8007b68:	200006a0 	.word	0x200006a0
 8007b6c:	200007a4 	.word	0x200007a4

08007b70 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007b70:	b480      	push	{r7}
 8007b72:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007b74:	4b07      	ldr	r3, [pc, #28]	; (8007b94 <pvTaskIncrementMutexHeldCount+0x24>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d004      	beq.n	8007b86 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007b7c:	4b05      	ldr	r3, [pc, #20]	; (8007b94 <pvTaskIncrementMutexHeldCount+0x24>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b82:	3201      	adds	r2, #1
 8007b84:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007b86:	4b03      	ldr	r3, [pc, #12]	; (8007b94 <pvTaskIncrementMutexHeldCount+0x24>)
 8007b88:	681b      	ldr	r3, [r3, #0]
	}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr
 8007b94:	2000069c 	.word	0x2000069c

08007b98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007ba2:	4b29      	ldr	r3, [pc, #164]	; (8007c48 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ba8:	4b28      	ldr	r3, [pc, #160]	; (8007c4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	3304      	adds	r3, #4
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f7fe f9fa 	bl	8005fa8 <uxListRemove>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d10b      	bne.n	8007bd2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007bba:	4b24      	ldr	r3, [pc, #144]	; (8007c4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc6:	43da      	mvns	r2, r3
 8007bc8:	4b21      	ldr	r3, [pc, #132]	; (8007c50 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4013      	ands	r3, r2
 8007bce:	4a20      	ldr	r2, [pc, #128]	; (8007c50 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007bd0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bd8:	d10a      	bne.n	8007bf0 <prvAddCurrentTaskToDelayedList+0x58>
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d007      	beq.n	8007bf0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007be0:	4b1a      	ldr	r3, [pc, #104]	; (8007c4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	3304      	adds	r3, #4
 8007be6:	4619      	mov	r1, r3
 8007be8:	481a      	ldr	r0, [pc, #104]	; (8007c54 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007bea:	f7fe f980 	bl	8005eee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007bee:	e026      	b.n	8007c3e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4413      	add	r3, r2
 8007bf6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007bf8:	4b14      	ldr	r3, [pc, #80]	; (8007c4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68ba      	ldr	r2, [r7, #8]
 8007bfe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007c00:	68ba      	ldr	r2, [r7, #8]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d209      	bcs.n	8007c1c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c08:	4b13      	ldr	r3, [pc, #76]	; (8007c58 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	4b0f      	ldr	r3, [pc, #60]	; (8007c4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	3304      	adds	r3, #4
 8007c12:	4619      	mov	r1, r3
 8007c14:	4610      	mov	r0, r2
 8007c16:	f7fe f98e 	bl	8005f36 <vListInsert>
}
 8007c1a:	e010      	b.n	8007c3e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c1c:	4b0f      	ldr	r3, [pc, #60]	; (8007c5c <prvAddCurrentTaskToDelayedList+0xc4>)
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	4b0a      	ldr	r3, [pc, #40]	; (8007c4c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	3304      	adds	r3, #4
 8007c26:	4619      	mov	r1, r3
 8007c28:	4610      	mov	r0, r2
 8007c2a:	f7fe f984 	bl	8005f36 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007c2e:	4b0c      	ldr	r3, [pc, #48]	; (8007c60 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d202      	bcs.n	8007c3e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007c38:	4a09      	ldr	r2, [pc, #36]	; (8007c60 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	6013      	str	r3, [r2, #0]
}
 8007c3e:	bf00      	nop
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	200007a0 	.word	0x200007a0
 8007c4c:	2000069c 	.word	0x2000069c
 8007c50:	200007a4 	.word	0x200007a4
 8007c54:	20000788 	.word	0x20000788
 8007c58:	20000758 	.word	0x20000758
 8007c5c:	20000754 	.word	0x20000754
 8007c60:	200007bc 	.word	0x200007bc

08007c64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007c64:	b480      	push	{r7}
 8007c66:	b085      	sub	sp, #20
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	3b04      	subs	r3, #4
 8007c74:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007c7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	3b04      	subs	r3, #4
 8007c82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	f023 0201 	bic.w	r2, r3, #1
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	3b04      	subs	r3, #4
 8007c92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007c94:	4a0c      	ldr	r2, [pc, #48]	; (8007cc8 <pxPortInitialiseStack+0x64>)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	3b14      	subs	r3, #20
 8007c9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	3b04      	subs	r3, #4
 8007caa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f06f 0202 	mvn.w	r2, #2
 8007cb2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	3b20      	subs	r3, #32
 8007cb8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007cba:	68fb      	ldr	r3, [r7, #12]
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3714      	adds	r7, #20
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr
 8007cc8:	08007ccd 	.word	0x08007ccd

08007ccc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007cd6:	4b12      	ldr	r3, [pc, #72]	; (8007d20 <prvTaskExitError+0x54>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cde:	d00a      	beq.n	8007cf6 <prvTaskExitError+0x2a>
	__asm volatile
 8007ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce4:	f383 8811 	msr	BASEPRI, r3
 8007ce8:	f3bf 8f6f 	isb	sy
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	60fb      	str	r3, [r7, #12]
}
 8007cf2:	bf00      	nop
 8007cf4:	e7fe      	b.n	8007cf4 <prvTaskExitError+0x28>
	__asm volatile
 8007cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfa:	f383 8811 	msr	BASEPRI, r3
 8007cfe:	f3bf 8f6f 	isb	sy
 8007d02:	f3bf 8f4f 	dsb	sy
 8007d06:	60bb      	str	r3, [r7, #8]
}
 8007d08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007d0a:	bf00      	nop
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d0fc      	beq.n	8007d0c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007d12:	bf00      	nop
 8007d14:	bf00      	nop
 8007d16:	3714      	adds	r7, #20
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr
 8007d20:	20000050 	.word	0x20000050
	...

08007d30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007d30:	4b07      	ldr	r3, [pc, #28]	; (8007d50 <pxCurrentTCBConst2>)
 8007d32:	6819      	ldr	r1, [r3, #0]
 8007d34:	6808      	ldr	r0, [r1, #0]
 8007d36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d3a:	f380 8809 	msr	PSP, r0
 8007d3e:	f3bf 8f6f 	isb	sy
 8007d42:	f04f 0000 	mov.w	r0, #0
 8007d46:	f380 8811 	msr	BASEPRI, r0
 8007d4a:	4770      	bx	lr
 8007d4c:	f3af 8000 	nop.w

08007d50 <pxCurrentTCBConst2>:
 8007d50:	2000069c 	.word	0x2000069c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007d54:	bf00      	nop
 8007d56:	bf00      	nop

08007d58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007d58:	4808      	ldr	r0, [pc, #32]	; (8007d7c <prvPortStartFirstTask+0x24>)
 8007d5a:	6800      	ldr	r0, [r0, #0]
 8007d5c:	6800      	ldr	r0, [r0, #0]
 8007d5e:	f380 8808 	msr	MSP, r0
 8007d62:	f04f 0000 	mov.w	r0, #0
 8007d66:	f380 8814 	msr	CONTROL, r0
 8007d6a:	b662      	cpsie	i
 8007d6c:	b661      	cpsie	f
 8007d6e:	f3bf 8f4f 	dsb	sy
 8007d72:	f3bf 8f6f 	isb	sy
 8007d76:	df00      	svc	0
 8007d78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007d7a:	bf00      	nop
 8007d7c:	e000ed08 	.word	0xe000ed08

08007d80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b086      	sub	sp, #24
 8007d84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007d86:	4b46      	ldr	r3, [pc, #280]	; (8007ea0 <xPortStartScheduler+0x120>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a46      	ldr	r2, [pc, #280]	; (8007ea4 <xPortStartScheduler+0x124>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d10a      	bne.n	8007da6 <xPortStartScheduler+0x26>
	__asm volatile
 8007d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d94:	f383 8811 	msr	BASEPRI, r3
 8007d98:	f3bf 8f6f 	isb	sy
 8007d9c:	f3bf 8f4f 	dsb	sy
 8007da0:	613b      	str	r3, [r7, #16]
}
 8007da2:	bf00      	nop
 8007da4:	e7fe      	b.n	8007da4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007da6:	4b3e      	ldr	r3, [pc, #248]	; (8007ea0 <xPortStartScheduler+0x120>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a3f      	ldr	r2, [pc, #252]	; (8007ea8 <xPortStartScheduler+0x128>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d10a      	bne.n	8007dc6 <xPortStartScheduler+0x46>
	__asm volatile
 8007db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db4:	f383 8811 	msr	BASEPRI, r3
 8007db8:	f3bf 8f6f 	isb	sy
 8007dbc:	f3bf 8f4f 	dsb	sy
 8007dc0:	60fb      	str	r3, [r7, #12]
}
 8007dc2:	bf00      	nop
 8007dc4:	e7fe      	b.n	8007dc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007dc6:	4b39      	ldr	r3, [pc, #228]	; (8007eac <xPortStartScheduler+0x12c>)
 8007dc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	22ff      	movs	r2, #255	; 0xff
 8007dd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007de0:	78fb      	ldrb	r3, [r7, #3]
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007de8:	b2da      	uxtb	r2, r3
 8007dea:	4b31      	ldr	r3, [pc, #196]	; (8007eb0 <xPortStartScheduler+0x130>)
 8007dec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007dee:	4b31      	ldr	r3, [pc, #196]	; (8007eb4 <xPortStartScheduler+0x134>)
 8007df0:	2207      	movs	r2, #7
 8007df2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007df4:	e009      	b.n	8007e0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007df6:	4b2f      	ldr	r3, [pc, #188]	; (8007eb4 <xPortStartScheduler+0x134>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	3b01      	subs	r3, #1
 8007dfc:	4a2d      	ldr	r2, [pc, #180]	; (8007eb4 <xPortStartScheduler+0x134>)
 8007dfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e00:	78fb      	ldrb	r3, [r7, #3]
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	005b      	lsls	r3, r3, #1
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e0a:	78fb      	ldrb	r3, [r7, #3]
 8007e0c:	b2db      	uxtb	r3, r3
 8007e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e12:	2b80      	cmp	r3, #128	; 0x80
 8007e14:	d0ef      	beq.n	8007df6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007e16:	4b27      	ldr	r3, [pc, #156]	; (8007eb4 <xPortStartScheduler+0x134>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f1c3 0307 	rsb	r3, r3, #7
 8007e1e:	2b04      	cmp	r3, #4
 8007e20:	d00a      	beq.n	8007e38 <xPortStartScheduler+0xb8>
	__asm volatile
 8007e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e26:	f383 8811 	msr	BASEPRI, r3
 8007e2a:	f3bf 8f6f 	isb	sy
 8007e2e:	f3bf 8f4f 	dsb	sy
 8007e32:	60bb      	str	r3, [r7, #8]
}
 8007e34:	bf00      	nop
 8007e36:	e7fe      	b.n	8007e36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007e38:	4b1e      	ldr	r3, [pc, #120]	; (8007eb4 <xPortStartScheduler+0x134>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	021b      	lsls	r3, r3, #8
 8007e3e:	4a1d      	ldr	r2, [pc, #116]	; (8007eb4 <xPortStartScheduler+0x134>)
 8007e40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007e42:	4b1c      	ldr	r3, [pc, #112]	; (8007eb4 <xPortStartScheduler+0x134>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e4a:	4a1a      	ldr	r2, [pc, #104]	; (8007eb4 <xPortStartScheduler+0x134>)
 8007e4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	b2da      	uxtb	r2, r3
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007e56:	4b18      	ldr	r3, [pc, #96]	; (8007eb8 <xPortStartScheduler+0x138>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a17      	ldr	r2, [pc, #92]	; (8007eb8 <xPortStartScheduler+0x138>)
 8007e5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007e60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007e62:	4b15      	ldr	r3, [pc, #84]	; (8007eb8 <xPortStartScheduler+0x138>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a14      	ldr	r2, [pc, #80]	; (8007eb8 <xPortStartScheduler+0x138>)
 8007e68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007e6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007e6e:	f000 f8dd 	bl	800802c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007e72:	4b12      	ldr	r3, [pc, #72]	; (8007ebc <xPortStartScheduler+0x13c>)
 8007e74:	2200      	movs	r2, #0
 8007e76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007e78:	f000 f8fc 	bl	8008074 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007e7c:	4b10      	ldr	r3, [pc, #64]	; (8007ec0 <xPortStartScheduler+0x140>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a0f      	ldr	r2, [pc, #60]	; (8007ec0 <xPortStartScheduler+0x140>)
 8007e82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007e86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007e88:	f7ff ff66 	bl	8007d58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007e8c:	f7ff fa82 	bl	8007394 <vTaskSwitchContext>
	prvTaskExitError();
 8007e90:	f7ff ff1c 	bl	8007ccc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3718      	adds	r7, #24
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	e000ed00 	.word	0xe000ed00
 8007ea4:	410fc271 	.word	0x410fc271
 8007ea8:	410fc270 	.word	0x410fc270
 8007eac:	e000e400 	.word	0xe000e400
 8007eb0:	200007c8 	.word	0x200007c8
 8007eb4:	200007cc 	.word	0x200007cc
 8007eb8:	e000ed20 	.word	0xe000ed20
 8007ebc:	20000050 	.word	0x20000050
 8007ec0:	e000ef34 	.word	0xe000ef34

08007ec4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
	__asm volatile
 8007eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ece:	f383 8811 	msr	BASEPRI, r3
 8007ed2:	f3bf 8f6f 	isb	sy
 8007ed6:	f3bf 8f4f 	dsb	sy
 8007eda:	607b      	str	r3, [r7, #4]
}
 8007edc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007ede:	4b0f      	ldr	r3, [pc, #60]	; (8007f1c <vPortEnterCritical+0x58>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	4a0d      	ldr	r2, [pc, #52]	; (8007f1c <vPortEnterCritical+0x58>)
 8007ee6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007ee8:	4b0c      	ldr	r3, [pc, #48]	; (8007f1c <vPortEnterCritical+0x58>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d10f      	bne.n	8007f10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ef0:	4b0b      	ldr	r3, [pc, #44]	; (8007f20 <vPortEnterCritical+0x5c>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00a      	beq.n	8007f10 <vPortEnterCritical+0x4c>
	__asm volatile
 8007efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007efe:	f383 8811 	msr	BASEPRI, r3
 8007f02:	f3bf 8f6f 	isb	sy
 8007f06:	f3bf 8f4f 	dsb	sy
 8007f0a:	603b      	str	r3, [r7, #0]
}
 8007f0c:	bf00      	nop
 8007f0e:	e7fe      	b.n	8007f0e <vPortEnterCritical+0x4a>
	}
}
 8007f10:	bf00      	nop
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr
 8007f1c:	20000050 	.word	0x20000050
 8007f20:	e000ed04 	.word	0xe000ed04

08007f24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007f2a:	4b12      	ldr	r3, [pc, #72]	; (8007f74 <vPortExitCritical+0x50>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d10a      	bne.n	8007f48 <vPortExitCritical+0x24>
	__asm volatile
 8007f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f36:	f383 8811 	msr	BASEPRI, r3
 8007f3a:	f3bf 8f6f 	isb	sy
 8007f3e:	f3bf 8f4f 	dsb	sy
 8007f42:	607b      	str	r3, [r7, #4]
}
 8007f44:	bf00      	nop
 8007f46:	e7fe      	b.n	8007f46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007f48:	4b0a      	ldr	r3, [pc, #40]	; (8007f74 <vPortExitCritical+0x50>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	4a09      	ldr	r2, [pc, #36]	; (8007f74 <vPortExitCritical+0x50>)
 8007f50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007f52:	4b08      	ldr	r3, [pc, #32]	; (8007f74 <vPortExitCritical+0x50>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d105      	bne.n	8007f66 <vPortExitCritical+0x42>
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	f383 8811 	msr	BASEPRI, r3
}
 8007f64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007f66:	bf00      	nop
 8007f68:	370c      	adds	r7, #12
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	20000050 	.word	0x20000050
	...

08007f80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007f80:	f3ef 8009 	mrs	r0, PSP
 8007f84:	f3bf 8f6f 	isb	sy
 8007f88:	4b15      	ldr	r3, [pc, #84]	; (8007fe0 <pxCurrentTCBConst>)
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	f01e 0f10 	tst.w	lr, #16
 8007f90:	bf08      	it	eq
 8007f92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007f96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f9a:	6010      	str	r0, [r2, #0]
 8007f9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007fa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007fa4:	f380 8811 	msr	BASEPRI, r0
 8007fa8:	f3bf 8f4f 	dsb	sy
 8007fac:	f3bf 8f6f 	isb	sy
 8007fb0:	f7ff f9f0 	bl	8007394 <vTaskSwitchContext>
 8007fb4:	f04f 0000 	mov.w	r0, #0
 8007fb8:	f380 8811 	msr	BASEPRI, r0
 8007fbc:	bc09      	pop	{r0, r3}
 8007fbe:	6819      	ldr	r1, [r3, #0]
 8007fc0:	6808      	ldr	r0, [r1, #0]
 8007fc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc6:	f01e 0f10 	tst.w	lr, #16
 8007fca:	bf08      	it	eq
 8007fcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007fd0:	f380 8809 	msr	PSP, r0
 8007fd4:	f3bf 8f6f 	isb	sy
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop
 8007fdc:	f3af 8000 	nop.w

08007fe0 <pxCurrentTCBConst>:
 8007fe0:	2000069c 	.word	0x2000069c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007fe4:	bf00      	nop
 8007fe6:	bf00      	nop

08007fe8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
	__asm volatile
 8007fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff2:	f383 8811 	msr	BASEPRI, r3
 8007ff6:	f3bf 8f6f 	isb	sy
 8007ffa:	f3bf 8f4f 	dsb	sy
 8007ffe:	607b      	str	r3, [r7, #4]
}
 8008000:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008002:	f7ff f90f 	bl	8007224 <xTaskIncrementTick>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d003      	beq.n	8008014 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800800c:	4b06      	ldr	r3, [pc, #24]	; (8008028 <SysTick_Handler+0x40>)
 800800e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008012:	601a      	str	r2, [r3, #0]
 8008014:	2300      	movs	r3, #0
 8008016:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	f383 8811 	msr	BASEPRI, r3
}
 800801e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008020:	bf00      	nop
 8008022:	3708      	adds	r7, #8
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}
 8008028:	e000ed04 	.word	0xe000ed04

0800802c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800802c:	b480      	push	{r7}
 800802e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008030:	4b0b      	ldr	r3, [pc, #44]	; (8008060 <vPortSetupTimerInterrupt+0x34>)
 8008032:	2200      	movs	r2, #0
 8008034:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008036:	4b0b      	ldr	r3, [pc, #44]	; (8008064 <vPortSetupTimerInterrupt+0x38>)
 8008038:	2200      	movs	r2, #0
 800803a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800803c:	4b0a      	ldr	r3, [pc, #40]	; (8008068 <vPortSetupTimerInterrupt+0x3c>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a0a      	ldr	r2, [pc, #40]	; (800806c <vPortSetupTimerInterrupt+0x40>)
 8008042:	fba2 2303 	umull	r2, r3, r2, r3
 8008046:	099b      	lsrs	r3, r3, #6
 8008048:	4a09      	ldr	r2, [pc, #36]	; (8008070 <vPortSetupTimerInterrupt+0x44>)
 800804a:	3b01      	subs	r3, #1
 800804c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800804e:	4b04      	ldr	r3, [pc, #16]	; (8008060 <vPortSetupTimerInterrupt+0x34>)
 8008050:	2207      	movs	r2, #7
 8008052:	601a      	str	r2, [r3, #0]
}
 8008054:	bf00      	nop
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr
 800805e:	bf00      	nop
 8008060:	e000e010 	.word	0xe000e010
 8008064:	e000e018 	.word	0xe000e018
 8008068:	20000000 	.word	0x20000000
 800806c:	10624dd3 	.word	0x10624dd3
 8008070:	e000e014 	.word	0xe000e014

08008074 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008074:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008084 <vPortEnableVFP+0x10>
 8008078:	6801      	ldr	r1, [r0, #0]
 800807a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800807e:	6001      	str	r1, [r0, #0]
 8008080:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008082:	bf00      	nop
 8008084:	e000ed88 	.word	0xe000ed88

08008088 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008088:	b480      	push	{r7}
 800808a:	b085      	sub	sp, #20
 800808c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800808e:	f3ef 8305 	mrs	r3, IPSR
 8008092:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2b0f      	cmp	r3, #15
 8008098:	d914      	bls.n	80080c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800809a:	4a17      	ldr	r2, [pc, #92]	; (80080f8 <vPortValidateInterruptPriority+0x70>)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	4413      	add	r3, r2
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80080a4:	4b15      	ldr	r3, [pc, #84]	; (80080fc <vPortValidateInterruptPriority+0x74>)
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	7afa      	ldrb	r2, [r7, #11]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d20a      	bcs.n	80080c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80080ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b2:	f383 8811 	msr	BASEPRI, r3
 80080b6:	f3bf 8f6f 	isb	sy
 80080ba:	f3bf 8f4f 	dsb	sy
 80080be:	607b      	str	r3, [r7, #4]
}
 80080c0:	bf00      	nop
 80080c2:	e7fe      	b.n	80080c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80080c4:	4b0e      	ldr	r3, [pc, #56]	; (8008100 <vPortValidateInterruptPriority+0x78>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80080cc:	4b0d      	ldr	r3, [pc, #52]	; (8008104 <vPortValidateInterruptPriority+0x7c>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d90a      	bls.n	80080ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80080d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d8:	f383 8811 	msr	BASEPRI, r3
 80080dc:	f3bf 8f6f 	isb	sy
 80080e0:	f3bf 8f4f 	dsb	sy
 80080e4:	603b      	str	r3, [r7, #0]
}
 80080e6:	bf00      	nop
 80080e8:	e7fe      	b.n	80080e8 <vPortValidateInterruptPriority+0x60>
	}
 80080ea:	bf00      	nop
 80080ec:	3714      	adds	r7, #20
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr
 80080f6:	bf00      	nop
 80080f8:	e000e3f0 	.word	0xe000e3f0
 80080fc:	200007c8 	.word	0x200007c8
 8008100:	e000ed0c 	.word	0xe000ed0c
 8008104:	200007cc 	.word	0x200007cc

08008108 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b08a      	sub	sp, #40	; 0x28
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008110:	2300      	movs	r3, #0
 8008112:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008114:	f7fe ffcc 	bl	80070b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008118:	4b5b      	ldr	r3, [pc, #364]	; (8008288 <pvPortMalloc+0x180>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d101      	bne.n	8008124 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008120:	f000 f920 	bl	8008364 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008124:	4b59      	ldr	r3, [pc, #356]	; (800828c <pvPortMalloc+0x184>)
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4013      	ands	r3, r2
 800812c:	2b00      	cmp	r3, #0
 800812e:	f040 8093 	bne.w	8008258 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d01d      	beq.n	8008174 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008138:	2208      	movs	r2, #8
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4413      	add	r3, r2
 800813e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f003 0307 	and.w	r3, r3, #7
 8008146:	2b00      	cmp	r3, #0
 8008148:	d014      	beq.n	8008174 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f023 0307 	bic.w	r3, r3, #7
 8008150:	3308      	adds	r3, #8
 8008152:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f003 0307 	and.w	r3, r3, #7
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00a      	beq.n	8008174 <pvPortMalloc+0x6c>
	__asm volatile
 800815e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008162:	f383 8811 	msr	BASEPRI, r3
 8008166:	f3bf 8f6f 	isb	sy
 800816a:	f3bf 8f4f 	dsb	sy
 800816e:	617b      	str	r3, [r7, #20]
}
 8008170:	bf00      	nop
 8008172:	e7fe      	b.n	8008172 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d06e      	beq.n	8008258 <pvPortMalloc+0x150>
 800817a:	4b45      	ldr	r3, [pc, #276]	; (8008290 <pvPortMalloc+0x188>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	429a      	cmp	r2, r3
 8008182:	d869      	bhi.n	8008258 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008184:	4b43      	ldr	r3, [pc, #268]	; (8008294 <pvPortMalloc+0x18c>)
 8008186:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008188:	4b42      	ldr	r3, [pc, #264]	; (8008294 <pvPortMalloc+0x18c>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800818e:	e004      	b.n	800819a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008192:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800819a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d903      	bls.n	80081ac <pvPortMalloc+0xa4>
 80081a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d1f1      	bne.n	8008190 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80081ac:	4b36      	ldr	r3, [pc, #216]	; (8008288 <pvPortMalloc+0x180>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d050      	beq.n	8008258 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80081b6:	6a3b      	ldr	r3, [r7, #32]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2208      	movs	r2, #8
 80081bc:	4413      	add	r3, r2
 80081be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80081c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	6a3b      	ldr	r3, [r7, #32]
 80081c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80081c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ca:	685a      	ldr	r2, [r3, #4]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	1ad2      	subs	r2, r2, r3
 80081d0:	2308      	movs	r3, #8
 80081d2:	005b      	lsls	r3, r3, #1
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d91f      	bls.n	8008218 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80081d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4413      	add	r3, r2
 80081de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	f003 0307 	and.w	r3, r3, #7
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d00a      	beq.n	8008200 <pvPortMalloc+0xf8>
	__asm volatile
 80081ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ee:	f383 8811 	msr	BASEPRI, r3
 80081f2:	f3bf 8f6f 	isb	sy
 80081f6:	f3bf 8f4f 	dsb	sy
 80081fa:	613b      	str	r3, [r7, #16]
}
 80081fc:	bf00      	nop
 80081fe:	e7fe      	b.n	80081fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008202:	685a      	ldr	r2, [r3, #4]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	1ad2      	subs	r2, r2, r3
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800820c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008212:	69b8      	ldr	r0, [r7, #24]
 8008214:	f000 f908 	bl	8008428 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008218:	4b1d      	ldr	r3, [pc, #116]	; (8008290 <pvPortMalloc+0x188>)
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	4a1b      	ldr	r2, [pc, #108]	; (8008290 <pvPortMalloc+0x188>)
 8008224:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008226:	4b1a      	ldr	r3, [pc, #104]	; (8008290 <pvPortMalloc+0x188>)
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	4b1b      	ldr	r3, [pc, #108]	; (8008298 <pvPortMalloc+0x190>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	429a      	cmp	r2, r3
 8008230:	d203      	bcs.n	800823a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008232:	4b17      	ldr	r3, [pc, #92]	; (8008290 <pvPortMalloc+0x188>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a18      	ldr	r2, [pc, #96]	; (8008298 <pvPortMalloc+0x190>)
 8008238:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800823a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823c:	685a      	ldr	r2, [r3, #4]
 800823e:	4b13      	ldr	r3, [pc, #76]	; (800828c <pvPortMalloc+0x184>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	431a      	orrs	r2, r3
 8008244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008246:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824a:	2200      	movs	r2, #0
 800824c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800824e:	4b13      	ldr	r3, [pc, #76]	; (800829c <pvPortMalloc+0x194>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	3301      	adds	r3, #1
 8008254:	4a11      	ldr	r2, [pc, #68]	; (800829c <pvPortMalloc+0x194>)
 8008256:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008258:	f7fe ff38 	bl	80070cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	f003 0307 	and.w	r3, r3, #7
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00a      	beq.n	800827c <pvPortMalloc+0x174>
	__asm volatile
 8008266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800826a:	f383 8811 	msr	BASEPRI, r3
 800826e:	f3bf 8f6f 	isb	sy
 8008272:	f3bf 8f4f 	dsb	sy
 8008276:	60fb      	str	r3, [r7, #12]
}
 8008278:	bf00      	nop
 800827a:	e7fe      	b.n	800827a <pvPortMalloc+0x172>
	return pvReturn;
 800827c:	69fb      	ldr	r3, [r7, #28]
}
 800827e:	4618      	mov	r0, r3
 8008280:	3728      	adds	r7, #40	; 0x28
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	20001390 	.word	0x20001390
 800828c:	200013a4 	.word	0x200013a4
 8008290:	20001394 	.word	0x20001394
 8008294:	20001388 	.word	0x20001388
 8008298:	20001398 	.word	0x20001398
 800829c:	2000139c 	.word	0x2000139c

080082a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b086      	sub	sp, #24
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d04d      	beq.n	800834e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80082b2:	2308      	movs	r3, #8
 80082b4:	425b      	negs	r3, r3
 80082b6:	697a      	ldr	r2, [r7, #20]
 80082b8:	4413      	add	r3, r2
 80082ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	685a      	ldr	r2, [r3, #4]
 80082c4:	4b24      	ldr	r3, [pc, #144]	; (8008358 <vPortFree+0xb8>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4013      	ands	r3, r2
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d10a      	bne.n	80082e4 <vPortFree+0x44>
	__asm volatile
 80082ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d2:	f383 8811 	msr	BASEPRI, r3
 80082d6:	f3bf 8f6f 	isb	sy
 80082da:	f3bf 8f4f 	dsb	sy
 80082de:	60fb      	str	r3, [r7, #12]
}
 80082e0:	bf00      	nop
 80082e2:	e7fe      	b.n	80082e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00a      	beq.n	8008302 <vPortFree+0x62>
	__asm volatile
 80082ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f0:	f383 8811 	msr	BASEPRI, r3
 80082f4:	f3bf 8f6f 	isb	sy
 80082f8:	f3bf 8f4f 	dsb	sy
 80082fc:	60bb      	str	r3, [r7, #8]
}
 80082fe:	bf00      	nop
 8008300:	e7fe      	b.n	8008300 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	685a      	ldr	r2, [r3, #4]
 8008306:	4b14      	ldr	r3, [pc, #80]	; (8008358 <vPortFree+0xb8>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4013      	ands	r3, r2
 800830c:	2b00      	cmp	r3, #0
 800830e:	d01e      	beq.n	800834e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d11a      	bne.n	800834e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	685a      	ldr	r2, [r3, #4]
 800831c:	4b0e      	ldr	r3, [pc, #56]	; (8008358 <vPortFree+0xb8>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	43db      	mvns	r3, r3
 8008322:	401a      	ands	r2, r3
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008328:	f7fe fec2 	bl	80070b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	685a      	ldr	r2, [r3, #4]
 8008330:	4b0a      	ldr	r3, [pc, #40]	; (800835c <vPortFree+0xbc>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4413      	add	r3, r2
 8008336:	4a09      	ldr	r2, [pc, #36]	; (800835c <vPortFree+0xbc>)
 8008338:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800833a:	6938      	ldr	r0, [r7, #16]
 800833c:	f000 f874 	bl	8008428 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008340:	4b07      	ldr	r3, [pc, #28]	; (8008360 <vPortFree+0xc0>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	3301      	adds	r3, #1
 8008346:	4a06      	ldr	r2, [pc, #24]	; (8008360 <vPortFree+0xc0>)
 8008348:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800834a:	f7fe febf 	bl	80070cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800834e:	bf00      	nop
 8008350:	3718      	adds	r7, #24
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	200013a4 	.word	0x200013a4
 800835c:	20001394 	.word	0x20001394
 8008360:	200013a0 	.word	0x200013a0

08008364 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008364:	b480      	push	{r7}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800836a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800836e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008370:	4b27      	ldr	r3, [pc, #156]	; (8008410 <prvHeapInit+0xac>)
 8008372:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f003 0307 	and.w	r3, r3, #7
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00c      	beq.n	8008398 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	3307      	adds	r3, #7
 8008382:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f023 0307 	bic.w	r3, r3, #7
 800838a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800838c:	68ba      	ldr	r2, [r7, #8]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	4a1f      	ldr	r2, [pc, #124]	; (8008410 <prvHeapInit+0xac>)
 8008394:	4413      	add	r3, r2
 8008396:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800839c:	4a1d      	ldr	r2, [pc, #116]	; (8008414 <prvHeapInit+0xb0>)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80083a2:	4b1c      	ldr	r3, [pc, #112]	; (8008414 <prvHeapInit+0xb0>)
 80083a4:	2200      	movs	r2, #0
 80083a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	68ba      	ldr	r2, [r7, #8]
 80083ac:	4413      	add	r3, r2
 80083ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80083b0:	2208      	movs	r2, #8
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	1a9b      	subs	r3, r3, r2
 80083b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f023 0307 	bic.w	r3, r3, #7
 80083be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	4a15      	ldr	r2, [pc, #84]	; (8008418 <prvHeapInit+0xb4>)
 80083c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80083c6:	4b14      	ldr	r3, [pc, #80]	; (8008418 <prvHeapInit+0xb4>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2200      	movs	r2, #0
 80083cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80083ce:	4b12      	ldr	r3, [pc, #72]	; (8008418 <prvHeapInit+0xb4>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	2200      	movs	r2, #0
 80083d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	1ad2      	subs	r2, r2, r3
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80083e4:	4b0c      	ldr	r3, [pc, #48]	; (8008418 <prvHeapInit+0xb4>)
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	4a0a      	ldr	r2, [pc, #40]	; (800841c <prvHeapInit+0xb8>)
 80083f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	4a09      	ldr	r2, [pc, #36]	; (8008420 <prvHeapInit+0xbc>)
 80083fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80083fc:	4b09      	ldr	r3, [pc, #36]	; (8008424 <prvHeapInit+0xc0>)
 80083fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008402:	601a      	str	r2, [r3, #0]
}
 8008404:	bf00      	nop
 8008406:	3714      	adds	r7, #20
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr
 8008410:	200007d0 	.word	0x200007d0
 8008414:	20001388 	.word	0x20001388
 8008418:	20001390 	.word	0x20001390
 800841c:	20001398 	.word	0x20001398
 8008420:	20001394 	.word	0x20001394
 8008424:	200013a4 	.word	0x200013a4

08008428 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008428:	b480      	push	{r7}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008430:	4b28      	ldr	r3, [pc, #160]	; (80084d4 <prvInsertBlockIntoFreeList+0xac>)
 8008432:	60fb      	str	r3, [r7, #12]
 8008434:	e002      	b.n	800843c <prvInsertBlockIntoFreeList+0x14>
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	60fb      	str	r3, [r7, #12]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	429a      	cmp	r2, r3
 8008444:	d8f7      	bhi.n	8008436 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	68ba      	ldr	r2, [r7, #8]
 8008450:	4413      	add	r3, r2
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	429a      	cmp	r2, r3
 8008456:	d108      	bne.n	800846a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	685a      	ldr	r2, [r3, #4]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	441a      	add	r2, r3
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	68ba      	ldr	r2, [r7, #8]
 8008474:	441a      	add	r2, r3
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	429a      	cmp	r2, r3
 800847c:	d118      	bne.n	80084b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	4b15      	ldr	r3, [pc, #84]	; (80084d8 <prvInsertBlockIntoFreeList+0xb0>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	429a      	cmp	r2, r3
 8008488:	d00d      	beq.n	80084a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	685a      	ldr	r2, [r3, #4]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	441a      	add	r2, r3
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	601a      	str	r2, [r3, #0]
 80084a4:	e008      	b.n	80084b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80084a6:	4b0c      	ldr	r3, [pc, #48]	; (80084d8 <prvInsertBlockIntoFreeList+0xb0>)
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	601a      	str	r2, [r3, #0]
 80084ae:	e003      	b.n	80084b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80084b8:	68fa      	ldr	r2, [r7, #12]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d002      	beq.n	80084c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084c6:	bf00      	nop
 80084c8:	3714      	adds	r7, #20
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr
 80084d2:	bf00      	nop
 80084d4:	20001388 	.word	0x20001388
 80084d8:	20001390 	.word	0x20001390

080084dc <__errno>:
 80084dc:	4b01      	ldr	r3, [pc, #4]	; (80084e4 <__errno+0x8>)
 80084de:	6818      	ldr	r0, [r3, #0]
 80084e0:	4770      	bx	lr
 80084e2:	bf00      	nop
 80084e4:	20000054 	.word	0x20000054

080084e8 <std>:
 80084e8:	2300      	movs	r3, #0
 80084ea:	b510      	push	{r4, lr}
 80084ec:	4604      	mov	r4, r0
 80084ee:	e9c0 3300 	strd	r3, r3, [r0]
 80084f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084f6:	6083      	str	r3, [r0, #8]
 80084f8:	8181      	strh	r1, [r0, #12]
 80084fa:	6643      	str	r3, [r0, #100]	; 0x64
 80084fc:	81c2      	strh	r2, [r0, #14]
 80084fe:	6183      	str	r3, [r0, #24]
 8008500:	4619      	mov	r1, r3
 8008502:	2208      	movs	r2, #8
 8008504:	305c      	adds	r0, #92	; 0x5c
 8008506:	f000 f91a 	bl	800873e <memset>
 800850a:	4b05      	ldr	r3, [pc, #20]	; (8008520 <std+0x38>)
 800850c:	6263      	str	r3, [r4, #36]	; 0x24
 800850e:	4b05      	ldr	r3, [pc, #20]	; (8008524 <std+0x3c>)
 8008510:	62a3      	str	r3, [r4, #40]	; 0x28
 8008512:	4b05      	ldr	r3, [pc, #20]	; (8008528 <std+0x40>)
 8008514:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008516:	4b05      	ldr	r3, [pc, #20]	; (800852c <std+0x44>)
 8008518:	6224      	str	r4, [r4, #32]
 800851a:	6323      	str	r3, [r4, #48]	; 0x30
 800851c:	bd10      	pop	{r4, pc}
 800851e:	bf00      	nop
 8008520:	08009271 	.word	0x08009271
 8008524:	08009293 	.word	0x08009293
 8008528:	080092cb 	.word	0x080092cb
 800852c:	080092ef 	.word	0x080092ef

08008530 <_cleanup_r>:
 8008530:	4901      	ldr	r1, [pc, #4]	; (8008538 <_cleanup_r+0x8>)
 8008532:	f000 b8af 	b.w	8008694 <_fwalk_reent>
 8008536:	bf00      	nop
 8008538:	0800a2f9 	.word	0x0800a2f9

0800853c <__sfmoreglue>:
 800853c:	b570      	push	{r4, r5, r6, lr}
 800853e:	2268      	movs	r2, #104	; 0x68
 8008540:	1e4d      	subs	r5, r1, #1
 8008542:	4355      	muls	r5, r2
 8008544:	460e      	mov	r6, r1
 8008546:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800854a:	f000 f921 	bl	8008790 <_malloc_r>
 800854e:	4604      	mov	r4, r0
 8008550:	b140      	cbz	r0, 8008564 <__sfmoreglue+0x28>
 8008552:	2100      	movs	r1, #0
 8008554:	e9c0 1600 	strd	r1, r6, [r0]
 8008558:	300c      	adds	r0, #12
 800855a:	60a0      	str	r0, [r4, #8]
 800855c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008560:	f000 f8ed 	bl	800873e <memset>
 8008564:	4620      	mov	r0, r4
 8008566:	bd70      	pop	{r4, r5, r6, pc}

08008568 <__sfp_lock_acquire>:
 8008568:	4801      	ldr	r0, [pc, #4]	; (8008570 <__sfp_lock_acquire+0x8>)
 800856a:	f000 b8d8 	b.w	800871e <__retarget_lock_acquire_recursive>
 800856e:	bf00      	nop
 8008570:	200013a9 	.word	0x200013a9

08008574 <__sfp_lock_release>:
 8008574:	4801      	ldr	r0, [pc, #4]	; (800857c <__sfp_lock_release+0x8>)
 8008576:	f000 b8d3 	b.w	8008720 <__retarget_lock_release_recursive>
 800857a:	bf00      	nop
 800857c:	200013a9 	.word	0x200013a9

08008580 <__sinit_lock_acquire>:
 8008580:	4801      	ldr	r0, [pc, #4]	; (8008588 <__sinit_lock_acquire+0x8>)
 8008582:	f000 b8cc 	b.w	800871e <__retarget_lock_acquire_recursive>
 8008586:	bf00      	nop
 8008588:	200013aa 	.word	0x200013aa

0800858c <__sinit_lock_release>:
 800858c:	4801      	ldr	r0, [pc, #4]	; (8008594 <__sinit_lock_release+0x8>)
 800858e:	f000 b8c7 	b.w	8008720 <__retarget_lock_release_recursive>
 8008592:	bf00      	nop
 8008594:	200013aa 	.word	0x200013aa

08008598 <__sinit>:
 8008598:	b510      	push	{r4, lr}
 800859a:	4604      	mov	r4, r0
 800859c:	f7ff fff0 	bl	8008580 <__sinit_lock_acquire>
 80085a0:	69a3      	ldr	r3, [r4, #24]
 80085a2:	b11b      	cbz	r3, 80085ac <__sinit+0x14>
 80085a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085a8:	f7ff bff0 	b.w	800858c <__sinit_lock_release>
 80085ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80085b0:	6523      	str	r3, [r4, #80]	; 0x50
 80085b2:	4b13      	ldr	r3, [pc, #76]	; (8008600 <__sinit+0x68>)
 80085b4:	4a13      	ldr	r2, [pc, #76]	; (8008604 <__sinit+0x6c>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80085ba:	42a3      	cmp	r3, r4
 80085bc:	bf04      	itt	eq
 80085be:	2301      	moveq	r3, #1
 80085c0:	61a3      	streq	r3, [r4, #24]
 80085c2:	4620      	mov	r0, r4
 80085c4:	f000 f820 	bl	8008608 <__sfp>
 80085c8:	6060      	str	r0, [r4, #4]
 80085ca:	4620      	mov	r0, r4
 80085cc:	f000 f81c 	bl	8008608 <__sfp>
 80085d0:	60a0      	str	r0, [r4, #8]
 80085d2:	4620      	mov	r0, r4
 80085d4:	f000 f818 	bl	8008608 <__sfp>
 80085d8:	2200      	movs	r2, #0
 80085da:	60e0      	str	r0, [r4, #12]
 80085dc:	2104      	movs	r1, #4
 80085de:	6860      	ldr	r0, [r4, #4]
 80085e0:	f7ff ff82 	bl	80084e8 <std>
 80085e4:	68a0      	ldr	r0, [r4, #8]
 80085e6:	2201      	movs	r2, #1
 80085e8:	2109      	movs	r1, #9
 80085ea:	f7ff ff7d 	bl	80084e8 <std>
 80085ee:	68e0      	ldr	r0, [r4, #12]
 80085f0:	2202      	movs	r2, #2
 80085f2:	2112      	movs	r1, #18
 80085f4:	f7ff ff78 	bl	80084e8 <std>
 80085f8:	2301      	movs	r3, #1
 80085fa:	61a3      	str	r3, [r4, #24]
 80085fc:	e7d2      	b.n	80085a4 <__sinit+0xc>
 80085fe:	bf00      	nop
 8008600:	0800b1fc 	.word	0x0800b1fc
 8008604:	08008531 	.word	0x08008531

08008608 <__sfp>:
 8008608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800860a:	4607      	mov	r7, r0
 800860c:	f7ff ffac 	bl	8008568 <__sfp_lock_acquire>
 8008610:	4b1e      	ldr	r3, [pc, #120]	; (800868c <__sfp+0x84>)
 8008612:	681e      	ldr	r6, [r3, #0]
 8008614:	69b3      	ldr	r3, [r6, #24]
 8008616:	b913      	cbnz	r3, 800861e <__sfp+0x16>
 8008618:	4630      	mov	r0, r6
 800861a:	f7ff ffbd 	bl	8008598 <__sinit>
 800861e:	3648      	adds	r6, #72	; 0x48
 8008620:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008624:	3b01      	subs	r3, #1
 8008626:	d503      	bpl.n	8008630 <__sfp+0x28>
 8008628:	6833      	ldr	r3, [r6, #0]
 800862a:	b30b      	cbz	r3, 8008670 <__sfp+0x68>
 800862c:	6836      	ldr	r6, [r6, #0]
 800862e:	e7f7      	b.n	8008620 <__sfp+0x18>
 8008630:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008634:	b9d5      	cbnz	r5, 800866c <__sfp+0x64>
 8008636:	4b16      	ldr	r3, [pc, #88]	; (8008690 <__sfp+0x88>)
 8008638:	60e3      	str	r3, [r4, #12]
 800863a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800863e:	6665      	str	r5, [r4, #100]	; 0x64
 8008640:	f000 f86c 	bl	800871c <__retarget_lock_init_recursive>
 8008644:	f7ff ff96 	bl	8008574 <__sfp_lock_release>
 8008648:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800864c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008650:	6025      	str	r5, [r4, #0]
 8008652:	61a5      	str	r5, [r4, #24]
 8008654:	2208      	movs	r2, #8
 8008656:	4629      	mov	r1, r5
 8008658:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800865c:	f000 f86f 	bl	800873e <memset>
 8008660:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008664:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008668:	4620      	mov	r0, r4
 800866a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800866c:	3468      	adds	r4, #104	; 0x68
 800866e:	e7d9      	b.n	8008624 <__sfp+0x1c>
 8008670:	2104      	movs	r1, #4
 8008672:	4638      	mov	r0, r7
 8008674:	f7ff ff62 	bl	800853c <__sfmoreglue>
 8008678:	4604      	mov	r4, r0
 800867a:	6030      	str	r0, [r6, #0]
 800867c:	2800      	cmp	r0, #0
 800867e:	d1d5      	bne.n	800862c <__sfp+0x24>
 8008680:	f7ff ff78 	bl	8008574 <__sfp_lock_release>
 8008684:	230c      	movs	r3, #12
 8008686:	603b      	str	r3, [r7, #0]
 8008688:	e7ee      	b.n	8008668 <__sfp+0x60>
 800868a:	bf00      	nop
 800868c:	0800b1fc 	.word	0x0800b1fc
 8008690:	ffff0001 	.word	0xffff0001

08008694 <_fwalk_reent>:
 8008694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008698:	4606      	mov	r6, r0
 800869a:	4688      	mov	r8, r1
 800869c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80086a0:	2700      	movs	r7, #0
 80086a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80086a6:	f1b9 0901 	subs.w	r9, r9, #1
 80086aa:	d505      	bpl.n	80086b8 <_fwalk_reent+0x24>
 80086ac:	6824      	ldr	r4, [r4, #0]
 80086ae:	2c00      	cmp	r4, #0
 80086b0:	d1f7      	bne.n	80086a2 <_fwalk_reent+0xe>
 80086b2:	4638      	mov	r0, r7
 80086b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086b8:	89ab      	ldrh	r3, [r5, #12]
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d907      	bls.n	80086ce <_fwalk_reent+0x3a>
 80086be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80086c2:	3301      	adds	r3, #1
 80086c4:	d003      	beq.n	80086ce <_fwalk_reent+0x3a>
 80086c6:	4629      	mov	r1, r5
 80086c8:	4630      	mov	r0, r6
 80086ca:	47c0      	blx	r8
 80086cc:	4307      	orrs	r7, r0
 80086ce:	3568      	adds	r5, #104	; 0x68
 80086d0:	e7e9      	b.n	80086a6 <_fwalk_reent+0x12>
	...

080086d4 <__libc_init_array>:
 80086d4:	b570      	push	{r4, r5, r6, lr}
 80086d6:	4d0d      	ldr	r5, [pc, #52]	; (800870c <__libc_init_array+0x38>)
 80086d8:	4c0d      	ldr	r4, [pc, #52]	; (8008710 <__libc_init_array+0x3c>)
 80086da:	1b64      	subs	r4, r4, r5
 80086dc:	10a4      	asrs	r4, r4, #2
 80086de:	2600      	movs	r6, #0
 80086e0:	42a6      	cmp	r6, r4
 80086e2:	d109      	bne.n	80086f8 <__libc_init_array+0x24>
 80086e4:	4d0b      	ldr	r5, [pc, #44]	; (8008714 <__libc_init_array+0x40>)
 80086e6:	4c0c      	ldr	r4, [pc, #48]	; (8008718 <__libc_init_array+0x44>)
 80086e8:	f002 fcc4 	bl	800b074 <_init>
 80086ec:	1b64      	subs	r4, r4, r5
 80086ee:	10a4      	asrs	r4, r4, #2
 80086f0:	2600      	movs	r6, #0
 80086f2:	42a6      	cmp	r6, r4
 80086f4:	d105      	bne.n	8008702 <__libc_init_array+0x2e>
 80086f6:	bd70      	pop	{r4, r5, r6, pc}
 80086f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80086fc:	4798      	blx	r3
 80086fe:	3601      	adds	r6, #1
 8008700:	e7ee      	b.n	80086e0 <__libc_init_array+0xc>
 8008702:	f855 3b04 	ldr.w	r3, [r5], #4
 8008706:	4798      	blx	r3
 8008708:	3601      	adds	r6, #1
 800870a:	e7f2      	b.n	80086f2 <__libc_init_array+0x1e>
 800870c:	0800b580 	.word	0x0800b580
 8008710:	0800b580 	.word	0x0800b580
 8008714:	0800b580 	.word	0x0800b580
 8008718:	0800b584 	.word	0x0800b584

0800871c <__retarget_lock_init_recursive>:
 800871c:	4770      	bx	lr

0800871e <__retarget_lock_acquire_recursive>:
 800871e:	4770      	bx	lr

08008720 <__retarget_lock_release_recursive>:
 8008720:	4770      	bx	lr

08008722 <memcpy>:
 8008722:	440a      	add	r2, r1
 8008724:	4291      	cmp	r1, r2
 8008726:	f100 33ff 	add.w	r3, r0, #4294967295
 800872a:	d100      	bne.n	800872e <memcpy+0xc>
 800872c:	4770      	bx	lr
 800872e:	b510      	push	{r4, lr}
 8008730:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008734:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008738:	4291      	cmp	r1, r2
 800873a:	d1f9      	bne.n	8008730 <memcpy+0xe>
 800873c:	bd10      	pop	{r4, pc}

0800873e <memset>:
 800873e:	4402      	add	r2, r0
 8008740:	4603      	mov	r3, r0
 8008742:	4293      	cmp	r3, r2
 8008744:	d100      	bne.n	8008748 <memset+0xa>
 8008746:	4770      	bx	lr
 8008748:	f803 1b01 	strb.w	r1, [r3], #1
 800874c:	e7f9      	b.n	8008742 <memset+0x4>
	...

08008750 <sbrk_aligned>:
 8008750:	b570      	push	{r4, r5, r6, lr}
 8008752:	4e0e      	ldr	r6, [pc, #56]	; (800878c <sbrk_aligned+0x3c>)
 8008754:	460c      	mov	r4, r1
 8008756:	6831      	ldr	r1, [r6, #0]
 8008758:	4605      	mov	r5, r0
 800875a:	b911      	cbnz	r1, 8008762 <sbrk_aligned+0x12>
 800875c:	f000 fd78 	bl	8009250 <_sbrk_r>
 8008760:	6030      	str	r0, [r6, #0]
 8008762:	4621      	mov	r1, r4
 8008764:	4628      	mov	r0, r5
 8008766:	f000 fd73 	bl	8009250 <_sbrk_r>
 800876a:	1c43      	adds	r3, r0, #1
 800876c:	d00a      	beq.n	8008784 <sbrk_aligned+0x34>
 800876e:	1cc4      	adds	r4, r0, #3
 8008770:	f024 0403 	bic.w	r4, r4, #3
 8008774:	42a0      	cmp	r0, r4
 8008776:	d007      	beq.n	8008788 <sbrk_aligned+0x38>
 8008778:	1a21      	subs	r1, r4, r0
 800877a:	4628      	mov	r0, r5
 800877c:	f000 fd68 	bl	8009250 <_sbrk_r>
 8008780:	3001      	adds	r0, #1
 8008782:	d101      	bne.n	8008788 <sbrk_aligned+0x38>
 8008784:	f04f 34ff 	mov.w	r4, #4294967295
 8008788:	4620      	mov	r0, r4
 800878a:	bd70      	pop	{r4, r5, r6, pc}
 800878c:	200013b0 	.word	0x200013b0

08008790 <_malloc_r>:
 8008790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008794:	1ccd      	adds	r5, r1, #3
 8008796:	f025 0503 	bic.w	r5, r5, #3
 800879a:	3508      	adds	r5, #8
 800879c:	2d0c      	cmp	r5, #12
 800879e:	bf38      	it	cc
 80087a0:	250c      	movcc	r5, #12
 80087a2:	2d00      	cmp	r5, #0
 80087a4:	4607      	mov	r7, r0
 80087a6:	db01      	blt.n	80087ac <_malloc_r+0x1c>
 80087a8:	42a9      	cmp	r1, r5
 80087aa:	d905      	bls.n	80087b8 <_malloc_r+0x28>
 80087ac:	230c      	movs	r3, #12
 80087ae:	603b      	str	r3, [r7, #0]
 80087b0:	2600      	movs	r6, #0
 80087b2:	4630      	mov	r0, r6
 80087b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087b8:	4e2e      	ldr	r6, [pc, #184]	; (8008874 <_malloc_r+0xe4>)
 80087ba:	f001 fe6f 	bl	800a49c <__malloc_lock>
 80087be:	6833      	ldr	r3, [r6, #0]
 80087c0:	461c      	mov	r4, r3
 80087c2:	bb34      	cbnz	r4, 8008812 <_malloc_r+0x82>
 80087c4:	4629      	mov	r1, r5
 80087c6:	4638      	mov	r0, r7
 80087c8:	f7ff ffc2 	bl	8008750 <sbrk_aligned>
 80087cc:	1c43      	adds	r3, r0, #1
 80087ce:	4604      	mov	r4, r0
 80087d0:	d14d      	bne.n	800886e <_malloc_r+0xde>
 80087d2:	6834      	ldr	r4, [r6, #0]
 80087d4:	4626      	mov	r6, r4
 80087d6:	2e00      	cmp	r6, #0
 80087d8:	d140      	bne.n	800885c <_malloc_r+0xcc>
 80087da:	6823      	ldr	r3, [r4, #0]
 80087dc:	4631      	mov	r1, r6
 80087de:	4638      	mov	r0, r7
 80087e0:	eb04 0803 	add.w	r8, r4, r3
 80087e4:	f000 fd34 	bl	8009250 <_sbrk_r>
 80087e8:	4580      	cmp	r8, r0
 80087ea:	d13a      	bne.n	8008862 <_malloc_r+0xd2>
 80087ec:	6821      	ldr	r1, [r4, #0]
 80087ee:	3503      	adds	r5, #3
 80087f0:	1a6d      	subs	r5, r5, r1
 80087f2:	f025 0503 	bic.w	r5, r5, #3
 80087f6:	3508      	adds	r5, #8
 80087f8:	2d0c      	cmp	r5, #12
 80087fa:	bf38      	it	cc
 80087fc:	250c      	movcc	r5, #12
 80087fe:	4629      	mov	r1, r5
 8008800:	4638      	mov	r0, r7
 8008802:	f7ff ffa5 	bl	8008750 <sbrk_aligned>
 8008806:	3001      	adds	r0, #1
 8008808:	d02b      	beq.n	8008862 <_malloc_r+0xd2>
 800880a:	6823      	ldr	r3, [r4, #0]
 800880c:	442b      	add	r3, r5
 800880e:	6023      	str	r3, [r4, #0]
 8008810:	e00e      	b.n	8008830 <_malloc_r+0xa0>
 8008812:	6822      	ldr	r2, [r4, #0]
 8008814:	1b52      	subs	r2, r2, r5
 8008816:	d41e      	bmi.n	8008856 <_malloc_r+0xc6>
 8008818:	2a0b      	cmp	r2, #11
 800881a:	d916      	bls.n	800884a <_malloc_r+0xba>
 800881c:	1961      	adds	r1, r4, r5
 800881e:	42a3      	cmp	r3, r4
 8008820:	6025      	str	r5, [r4, #0]
 8008822:	bf18      	it	ne
 8008824:	6059      	strne	r1, [r3, #4]
 8008826:	6863      	ldr	r3, [r4, #4]
 8008828:	bf08      	it	eq
 800882a:	6031      	streq	r1, [r6, #0]
 800882c:	5162      	str	r2, [r4, r5]
 800882e:	604b      	str	r3, [r1, #4]
 8008830:	4638      	mov	r0, r7
 8008832:	f104 060b 	add.w	r6, r4, #11
 8008836:	f001 fe37 	bl	800a4a8 <__malloc_unlock>
 800883a:	f026 0607 	bic.w	r6, r6, #7
 800883e:	1d23      	adds	r3, r4, #4
 8008840:	1af2      	subs	r2, r6, r3
 8008842:	d0b6      	beq.n	80087b2 <_malloc_r+0x22>
 8008844:	1b9b      	subs	r3, r3, r6
 8008846:	50a3      	str	r3, [r4, r2]
 8008848:	e7b3      	b.n	80087b2 <_malloc_r+0x22>
 800884a:	6862      	ldr	r2, [r4, #4]
 800884c:	42a3      	cmp	r3, r4
 800884e:	bf0c      	ite	eq
 8008850:	6032      	streq	r2, [r6, #0]
 8008852:	605a      	strne	r2, [r3, #4]
 8008854:	e7ec      	b.n	8008830 <_malloc_r+0xa0>
 8008856:	4623      	mov	r3, r4
 8008858:	6864      	ldr	r4, [r4, #4]
 800885a:	e7b2      	b.n	80087c2 <_malloc_r+0x32>
 800885c:	4634      	mov	r4, r6
 800885e:	6876      	ldr	r6, [r6, #4]
 8008860:	e7b9      	b.n	80087d6 <_malloc_r+0x46>
 8008862:	230c      	movs	r3, #12
 8008864:	603b      	str	r3, [r7, #0]
 8008866:	4638      	mov	r0, r7
 8008868:	f001 fe1e 	bl	800a4a8 <__malloc_unlock>
 800886c:	e7a1      	b.n	80087b2 <_malloc_r+0x22>
 800886e:	6025      	str	r5, [r4, #0]
 8008870:	e7de      	b.n	8008830 <_malloc_r+0xa0>
 8008872:	bf00      	nop
 8008874:	200013ac 	.word	0x200013ac

08008878 <__cvt>:
 8008878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800887c:	ec55 4b10 	vmov	r4, r5, d0
 8008880:	2d00      	cmp	r5, #0
 8008882:	460e      	mov	r6, r1
 8008884:	4619      	mov	r1, r3
 8008886:	462b      	mov	r3, r5
 8008888:	bfbb      	ittet	lt
 800888a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800888e:	461d      	movlt	r5, r3
 8008890:	2300      	movge	r3, #0
 8008892:	232d      	movlt	r3, #45	; 0x2d
 8008894:	700b      	strb	r3, [r1, #0]
 8008896:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008898:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800889c:	4691      	mov	r9, r2
 800889e:	f023 0820 	bic.w	r8, r3, #32
 80088a2:	bfbc      	itt	lt
 80088a4:	4622      	movlt	r2, r4
 80088a6:	4614      	movlt	r4, r2
 80088a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80088ac:	d005      	beq.n	80088ba <__cvt+0x42>
 80088ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80088b2:	d100      	bne.n	80088b6 <__cvt+0x3e>
 80088b4:	3601      	adds	r6, #1
 80088b6:	2102      	movs	r1, #2
 80088b8:	e000      	b.n	80088bc <__cvt+0x44>
 80088ba:	2103      	movs	r1, #3
 80088bc:	ab03      	add	r3, sp, #12
 80088be:	9301      	str	r3, [sp, #4]
 80088c0:	ab02      	add	r3, sp, #8
 80088c2:	9300      	str	r3, [sp, #0]
 80088c4:	ec45 4b10 	vmov	d0, r4, r5
 80088c8:	4653      	mov	r3, sl
 80088ca:	4632      	mov	r2, r6
 80088cc:	f000 fea0 	bl	8009610 <_dtoa_r>
 80088d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80088d4:	4607      	mov	r7, r0
 80088d6:	d102      	bne.n	80088de <__cvt+0x66>
 80088d8:	f019 0f01 	tst.w	r9, #1
 80088dc:	d022      	beq.n	8008924 <__cvt+0xac>
 80088de:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80088e2:	eb07 0906 	add.w	r9, r7, r6
 80088e6:	d110      	bne.n	800890a <__cvt+0x92>
 80088e8:	783b      	ldrb	r3, [r7, #0]
 80088ea:	2b30      	cmp	r3, #48	; 0x30
 80088ec:	d10a      	bne.n	8008904 <__cvt+0x8c>
 80088ee:	2200      	movs	r2, #0
 80088f0:	2300      	movs	r3, #0
 80088f2:	4620      	mov	r0, r4
 80088f4:	4629      	mov	r1, r5
 80088f6:	f7f8 f8e7 	bl	8000ac8 <__aeabi_dcmpeq>
 80088fa:	b918      	cbnz	r0, 8008904 <__cvt+0x8c>
 80088fc:	f1c6 0601 	rsb	r6, r6, #1
 8008900:	f8ca 6000 	str.w	r6, [sl]
 8008904:	f8da 3000 	ldr.w	r3, [sl]
 8008908:	4499      	add	r9, r3
 800890a:	2200      	movs	r2, #0
 800890c:	2300      	movs	r3, #0
 800890e:	4620      	mov	r0, r4
 8008910:	4629      	mov	r1, r5
 8008912:	f7f8 f8d9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008916:	b108      	cbz	r0, 800891c <__cvt+0xa4>
 8008918:	f8cd 900c 	str.w	r9, [sp, #12]
 800891c:	2230      	movs	r2, #48	; 0x30
 800891e:	9b03      	ldr	r3, [sp, #12]
 8008920:	454b      	cmp	r3, r9
 8008922:	d307      	bcc.n	8008934 <__cvt+0xbc>
 8008924:	9b03      	ldr	r3, [sp, #12]
 8008926:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008928:	1bdb      	subs	r3, r3, r7
 800892a:	4638      	mov	r0, r7
 800892c:	6013      	str	r3, [r2, #0]
 800892e:	b004      	add	sp, #16
 8008930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008934:	1c59      	adds	r1, r3, #1
 8008936:	9103      	str	r1, [sp, #12]
 8008938:	701a      	strb	r2, [r3, #0]
 800893a:	e7f0      	b.n	800891e <__cvt+0xa6>

0800893c <__exponent>:
 800893c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800893e:	4603      	mov	r3, r0
 8008940:	2900      	cmp	r1, #0
 8008942:	bfb8      	it	lt
 8008944:	4249      	neglt	r1, r1
 8008946:	f803 2b02 	strb.w	r2, [r3], #2
 800894a:	bfb4      	ite	lt
 800894c:	222d      	movlt	r2, #45	; 0x2d
 800894e:	222b      	movge	r2, #43	; 0x2b
 8008950:	2909      	cmp	r1, #9
 8008952:	7042      	strb	r2, [r0, #1]
 8008954:	dd2a      	ble.n	80089ac <__exponent+0x70>
 8008956:	f10d 0407 	add.w	r4, sp, #7
 800895a:	46a4      	mov	ip, r4
 800895c:	270a      	movs	r7, #10
 800895e:	46a6      	mov	lr, r4
 8008960:	460a      	mov	r2, r1
 8008962:	fb91 f6f7 	sdiv	r6, r1, r7
 8008966:	fb07 1516 	mls	r5, r7, r6, r1
 800896a:	3530      	adds	r5, #48	; 0x30
 800896c:	2a63      	cmp	r2, #99	; 0x63
 800896e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008972:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008976:	4631      	mov	r1, r6
 8008978:	dcf1      	bgt.n	800895e <__exponent+0x22>
 800897a:	3130      	adds	r1, #48	; 0x30
 800897c:	f1ae 0502 	sub.w	r5, lr, #2
 8008980:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008984:	1c44      	adds	r4, r0, #1
 8008986:	4629      	mov	r1, r5
 8008988:	4561      	cmp	r1, ip
 800898a:	d30a      	bcc.n	80089a2 <__exponent+0x66>
 800898c:	f10d 0209 	add.w	r2, sp, #9
 8008990:	eba2 020e 	sub.w	r2, r2, lr
 8008994:	4565      	cmp	r5, ip
 8008996:	bf88      	it	hi
 8008998:	2200      	movhi	r2, #0
 800899a:	4413      	add	r3, r2
 800899c:	1a18      	subs	r0, r3, r0
 800899e:	b003      	add	sp, #12
 80089a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089a6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80089aa:	e7ed      	b.n	8008988 <__exponent+0x4c>
 80089ac:	2330      	movs	r3, #48	; 0x30
 80089ae:	3130      	adds	r1, #48	; 0x30
 80089b0:	7083      	strb	r3, [r0, #2]
 80089b2:	70c1      	strb	r1, [r0, #3]
 80089b4:	1d03      	adds	r3, r0, #4
 80089b6:	e7f1      	b.n	800899c <__exponent+0x60>

080089b8 <_printf_float>:
 80089b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089bc:	ed2d 8b02 	vpush	{d8}
 80089c0:	b08d      	sub	sp, #52	; 0x34
 80089c2:	460c      	mov	r4, r1
 80089c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80089c8:	4616      	mov	r6, r2
 80089ca:	461f      	mov	r7, r3
 80089cc:	4605      	mov	r5, r0
 80089ce:	f001 fce1 	bl	800a394 <_localeconv_r>
 80089d2:	f8d0 a000 	ldr.w	sl, [r0]
 80089d6:	4650      	mov	r0, sl
 80089d8:	f7f7 fbfa 	bl	80001d0 <strlen>
 80089dc:	2300      	movs	r3, #0
 80089de:	930a      	str	r3, [sp, #40]	; 0x28
 80089e0:	6823      	ldr	r3, [r4, #0]
 80089e2:	9305      	str	r3, [sp, #20]
 80089e4:	f8d8 3000 	ldr.w	r3, [r8]
 80089e8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80089ec:	3307      	adds	r3, #7
 80089ee:	f023 0307 	bic.w	r3, r3, #7
 80089f2:	f103 0208 	add.w	r2, r3, #8
 80089f6:	f8c8 2000 	str.w	r2, [r8]
 80089fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008a02:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008a06:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008a0a:	9307      	str	r3, [sp, #28]
 8008a0c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008a10:	ee08 0a10 	vmov	s16, r0
 8008a14:	4b9f      	ldr	r3, [pc, #636]	; (8008c94 <_printf_float+0x2dc>)
 8008a16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a1e:	f7f8 f885 	bl	8000b2c <__aeabi_dcmpun>
 8008a22:	bb88      	cbnz	r0, 8008a88 <_printf_float+0xd0>
 8008a24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a28:	4b9a      	ldr	r3, [pc, #616]	; (8008c94 <_printf_float+0x2dc>)
 8008a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a2e:	f7f8 f85f 	bl	8000af0 <__aeabi_dcmple>
 8008a32:	bb48      	cbnz	r0, 8008a88 <_printf_float+0xd0>
 8008a34:	2200      	movs	r2, #0
 8008a36:	2300      	movs	r3, #0
 8008a38:	4640      	mov	r0, r8
 8008a3a:	4649      	mov	r1, r9
 8008a3c:	f7f8 f84e 	bl	8000adc <__aeabi_dcmplt>
 8008a40:	b110      	cbz	r0, 8008a48 <_printf_float+0x90>
 8008a42:	232d      	movs	r3, #45	; 0x2d
 8008a44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a48:	4b93      	ldr	r3, [pc, #588]	; (8008c98 <_printf_float+0x2e0>)
 8008a4a:	4894      	ldr	r0, [pc, #592]	; (8008c9c <_printf_float+0x2e4>)
 8008a4c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008a50:	bf94      	ite	ls
 8008a52:	4698      	movls	r8, r3
 8008a54:	4680      	movhi	r8, r0
 8008a56:	2303      	movs	r3, #3
 8008a58:	6123      	str	r3, [r4, #16]
 8008a5a:	9b05      	ldr	r3, [sp, #20]
 8008a5c:	f023 0204 	bic.w	r2, r3, #4
 8008a60:	6022      	str	r2, [r4, #0]
 8008a62:	f04f 0900 	mov.w	r9, #0
 8008a66:	9700      	str	r7, [sp, #0]
 8008a68:	4633      	mov	r3, r6
 8008a6a:	aa0b      	add	r2, sp, #44	; 0x2c
 8008a6c:	4621      	mov	r1, r4
 8008a6e:	4628      	mov	r0, r5
 8008a70:	f000 f9d8 	bl	8008e24 <_printf_common>
 8008a74:	3001      	adds	r0, #1
 8008a76:	f040 8090 	bne.w	8008b9a <_printf_float+0x1e2>
 8008a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a7e:	b00d      	add	sp, #52	; 0x34
 8008a80:	ecbd 8b02 	vpop	{d8}
 8008a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a88:	4642      	mov	r2, r8
 8008a8a:	464b      	mov	r3, r9
 8008a8c:	4640      	mov	r0, r8
 8008a8e:	4649      	mov	r1, r9
 8008a90:	f7f8 f84c 	bl	8000b2c <__aeabi_dcmpun>
 8008a94:	b140      	cbz	r0, 8008aa8 <_printf_float+0xf0>
 8008a96:	464b      	mov	r3, r9
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	bfbc      	itt	lt
 8008a9c:	232d      	movlt	r3, #45	; 0x2d
 8008a9e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008aa2:	487f      	ldr	r0, [pc, #508]	; (8008ca0 <_printf_float+0x2e8>)
 8008aa4:	4b7f      	ldr	r3, [pc, #508]	; (8008ca4 <_printf_float+0x2ec>)
 8008aa6:	e7d1      	b.n	8008a4c <_printf_float+0x94>
 8008aa8:	6863      	ldr	r3, [r4, #4]
 8008aaa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008aae:	9206      	str	r2, [sp, #24]
 8008ab0:	1c5a      	adds	r2, r3, #1
 8008ab2:	d13f      	bne.n	8008b34 <_printf_float+0x17c>
 8008ab4:	2306      	movs	r3, #6
 8008ab6:	6063      	str	r3, [r4, #4]
 8008ab8:	9b05      	ldr	r3, [sp, #20]
 8008aba:	6861      	ldr	r1, [r4, #4]
 8008abc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	9303      	str	r3, [sp, #12]
 8008ac4:	ab0a      	add	r3, sp, #40	; 0x28
 8008ac6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008aca:	ab09      	add	r3, sp, #36	; 0x24
 8008acc:	ec49 8b10 	vmov	d0, r8, r9
 8008ad0:	9300      	str	r3, [sp, #0]
 8008ad2:	6022      	str	r2, [r4, #0]
 8008ad4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008ad8:	4628      	mov	r0, r5
 8008ada:	f7ff fecd 	bl	8008878 <__cvt>
 8008ade:	9b06      	ldr	r3, [sp, #24]
 8008ae0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ae2:	2b47      	cmp	r3, #71	; 0x47
 8008ae4:	4680      	mov	r8, r0
 8008ae6:	d108      	bne.n	8008afa <_printf_float+0x142>
 8008ae8:	1cc8      	adds	r0, r1, #3
 8008aea:	db02      	blt.n	8008af2 <_printf_float+0x13a>
 8008aec:	6863      	ldr	r3, [r4, #4]
 8008aee:	4299      	cmp	r1, r3
 8008af0:	dd41      	ble.n	8008b76 <_printf_float+0x1be>
 8008af2:	f1ab 0b02 	sub.w	fp, fp, #2
 8008af6:	fa5f fb8b 	uxtb.w	fp, fp
 8008afa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008afe:	d820      	bhi.n	8008b42 <_printf_float+0x18a>
 8008b00:	3901      	subs	r1, #1
 8008b02:	465a      	mov	r2, fp
 8008b04:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008b08:	9109      	str	r1, [sp, #36]	; 0x24
 8008b0a:	f7ff ff17 	bl	800893c <__exponent>
 8008b0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b10:	1813      	adds	r3, r2, r0
 8008b12:	2a01      	cmp	r2, #1
 8008b14:	4681      	mov	r9, r0
 8008b16:	6123      	str	r3, [r4, #16]
 8008b18:	dc02      	bgt.n	8008b20 <_printf_float+0x168>
 8008b1a:	6822      	ldr	r2, [r4, #0]
 8008b1c:	07d2      	lsls	r2, r2, #31
 8008b1e:	d501      	bpl.n	8008b24 <_printf_float+0x16c>
 8008b20:	3301      	adds	r3, #1
 8008b22:	6123      	str	r3, [r4, #16]
 8008b24:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d09c      	beq.n	8008a66 <_printf_float+0xae>
 8008b2c:	232d      	movs	r3, #45	; 0x2d
 8008b2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b32:	e798      	b.n	8008a66 <_printf_float+0xae>
 8008b34:	9a06      	ldr	r2, [sp, #24]
 8008b36:	2a47      	cmp	r2, #71	; 0x47
 8008b38:	d1be      	bne.n	8008ab8 <_printf_float+0x100>
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d1bc      	bne.n	8008ab8 <_printf_float+0x100>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e7b9      	b.n	8008ab6 <_printf_float+0xfe>
 8008b42:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008b46:	d118      	bne.n	8008b7a <_printf_float+0x1c2>
 8008b48:	2900      	cmp	r1, #0
 8008b4a:	6863      	ldr	r3, [r4, #4]
 8008b4c:	dd0b      	ble.n	8008b66 <_printf_float+0x1ae>
 8008b4e:	6121      	str	r1, [r4, #16]
 8008b50:	b913      	cbnz	r3, 8008b58 <_printf_float+0x1a0>
 8008b52:	6822      	ldr	r2, [r4, #0]
 8008b54:	07d0      	lsls	r0, r2, #31
 8008b56:	d502      	bpl.n	8008b5e <_printf_float+0x1a6>
 8008b58:	3301      	adds	r3, #1
 8008b5a:	440b      	add	r3, r1
 8008b5c:	6123      	str	r3, [r4, #16]
 8008b5e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008b60:	f04f 0900 	mov.w	r9, #0
 8008b64:	e7de      	b.n	8008b24 <_printf_float+0x16c>
 8008b66:	b913      	cbnz	r3, 8008b6e <_printf_float+0x1b6>
 8008b68:	6822      	ldr	r2, [r4, #0]
 8008b6a:	07d2      	lsls	r2, r2, #31
 8008b6c:	d501      	bpl.n	8008b72 <_printf_float+0x1ba>
 8008b6e:	3302      	adds	r3, #2
 8008b70:	e7f4      	b.n	8008b5c <_printf_float+0x1a4>
 8008b72:	2301      	movs	r3, #1
 8008b74:	e7f2      	b.n	8008b5c <_printf_float+0x1a4>
 8008b76:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008b7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b7c:	4299      	cmp	r1, r3
 8008b7e:	db05      	blt.n	8008b8c <_printf_float+0x1d4>
 8008b80:	6823      	ldr	r3, [r4, #0]
 8008b82:	6121      	str	r1, [r4, #16]
 8008b84:	07d8      	lsls	r0, r3, #31
 8008b86:	d5ea      	bpl.n	8008b5e <_printf_float+0x1a6>
 8008b88:	1c4b      	adds	r3, r1, #1
 8008b8a:	e7e7      	b.n	8008b5c <_printf_float+0x1a4>
 8008b8c:	2900      	cmp	r1, #0
 8008b8e:	bfd4      	ite	le
 8008b90:	f1c1 0202 	rsble	r2, r1, #2
 8008b94:	2201      	movgt	r2, #1
 8008b96:	4413      	add	r3, r2
 8008b98:	e7e0      	b.n	8008b5c <_printf_float+0x1a4>
 8008b9a:	6823      	ldr	r3, [r4, #0]
 8008b9c:	055a      	lsls	r2, r3, #21
 8008b9e:	d407      	bmi.n	8008bb0 <_printf_float+0x1f8>
 8008ba0:	6923      	ldr	r3, [r4, #16]
 8008ba2:	4642      	mov	r2, r8
 8008ba4:	4631      	mov	r1, r6
 8008ba6:	4628      	mov	r0, r5
 8008ba8:	47b8      	blx	r7
 8008baa:	3001      	adds	r0, #1
 8008bac:	d12c      	bne.n	8008c08 <_printf_float+0x250>
 8008bae:	e764      	b.n	8008a7a <_printf_float+0xc2>
 8008bb0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008bb4:	f240 80e0 	bls.w	8008d78 <_printf_float+0x3c0>
 8008bb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	f7f7 ff82 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bc4:	2800      	cmp	r0, #0
 8008bc6:	d034      	beq.n	8008c32 <_printf_float+0x27a>
 8008bc8:	4a37      	ldr	r2, [pc, #220]	; (8008ca8 <_printf_float+0x2f0>)
 8008bca:	2301      	movs	r3, #1
 8008bcc:	4631      	mov	r1, r6
 8008bce:	4628      	mov	r0, r5
 8008bd0:	47b8      	blx	r7
 8008bd2:	3001      	adds	r0, #1
 8008bd4:	f43f af51 	beq.w	8008a7a <_printf_float+0xc2>
 8008bd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	db02      	blt.n	8008be6 <_printf_float+0x22e>
 8008be0:	6823      	ldr	r3, [r4, #0]
 8008be2:	07d8      	lsls	r0, r3, #31
 8008be4:	d510      	bpl.n	8008c08 <_printf_float+0x250>
 8008be6:	ee18 3a10 	vmov	r3, s16
 8008bea:	4652      	mov	r2, sl
 8008bec:	4631      	mov	r1, r6
 8008bee:	4628      	mov	r0, r5
 8008bf0:	47b8      	blx	r7
 8008bf2:	3001      	adds	r0, #1
 8008bf4:	f43f af41 	beq.w	8008a7a <_printf_float+0xc2>
 8008bf8:	f04f 0800 	mov.w	r8, #0
 8008bfc:	f104 091a 	add.w	r9, r4, #26
 8008c00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c02:	3b01      	subs	r3, #1
 8008c04:	4543      	cmp	r3, r8
 8008c06:	dc09      	bgt.n	8008c1c <_printf_float+0x264>
 8008c08:	6823      	ldr	r3, [r4, #0]
 8008c0a:	079b      	lsls	r3, r3, #30
 8008c0c:	f100 8105 	bmi.w	8008e1a <_printf_float+0x462>
 8008c10:	68e0      	ldr	r0, [r4, #12]
 8008c12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c14:	4298      	cmp	r0, r3
 8008c16:	bfb8      	it	lt
 8008c18:	4618      	movlt	r0, r3
 8008c1a:	e730      	b.n	8008a7e <_printf_float+0xc6>
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	464a      	mov	r2, r9
 8008c20:	4631      	mov	r1, r6
 8008c22:	4628      	mov	r0, r5
 8008c24:	47b8      	blx	r7
 8008c26:	3001      	adds	r0, #1
 8008c28:	f43f af27 	beq.w	8008a7a <_printf_float+0xc2>
 8008c2c:	f108 0801 	add.w	r8, r8, #1
 8008c30:	e7e6      	b.n	8008c00 <_printf_float+0x248>
 8008c32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	dc39      	bgt.n	8008cac <_printf_float+0x2f4>
 8008c38:	4a1b      	ldr	r2, [pc, #108]	; (8008ca8 <_printf_float+0x2f0>)
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	4631      	mov	r1, r6
 8008c3e:	4628      	mov	r0, r5
 8008c40:	47b8      	blx	r7
 8008c42:	3001      	adds	r0, #1
 8008c44:	f43f af19 	beq.w	8008a7a <_printf_float+0xc2>
 8008c48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	d102      	bne.n	8008c56 <_printf_float+0x29e>
 8008c50:	6823      	ldr	r3, [r4, #0]
 8008c52:	07d9      	lsls	r1, r3, #31
 8008c54:	d5d8      	bpl.n	8008c08 <_printf_float+0x250>
 8008c56:	ee18 3a10 	vmov	r3, s16
 8008c5a:	4652      	mov	r2, sl
 8008c5c:	4631      	mov	r1, r6
 8008c5e:	4628      	mov	r0, r5
 8008c60:	47b8      	blx	r7
 8008c62:	3001      	adds	r0, #1
 8008c64:	f43f af09 	beq.w	8008a7a <_printf_float+0xc2>
 8008c68:	f04f 0900 	mov.w	r9, #0
 8008c6c:	f104 0a1a 	add.w	sl, r4, #26
 8008c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c72:	425b      	negs	r3, r3
 8008c74:	454b      	cmp	r3, r9
 8008c76:	dc01      	bgt.n	8008c7c <_printf_float+0x2c4>
 8008c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c7a:	e792      	b.n	8008ba2 <_printf_float+0x1ea>
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	4652      	mov	r2, sl
 8008c80:	4631      	mov	r1, r6
 8008c82:	4628      	mov	r0, r5
 8008c84:	47b8      	blx	r7
 8008c86:	3001      	adds	r0, #1
 8008c88:	f43f aef7 	beq.w	8008a7a <_printf_float+0xc2>
 8008c8c:	f109 0901 	add.w	r9, r9, #1
 8008c90:	e7ee      	b.n	8008c70 <_printf_float+0x2b8>
 8008c92:	bf00      	nop
 8008c94:	7fefffff 	.word	0x7fefffff
 8008c98:	0800b200 	.word	0x0800b200
 8008c9c:	0800b204 	.word	0x0800b204
 8008ca0:	0800b20c 	.word	0x0800b20c
 8008ca4:	0800b208 	.word	0x0800b208
 8008ca8:	0800b210 	.word	0x0800b210
 8008cac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	bfa8      	it	ge
 8008cb4:	461a      	movge	r2, r3
 8008cb6:	2a00      	cmp	r2, #0
 8008cb8:	4691      	mov	r9, r2
 8008cba:	dc37      	bgt.n	8008d2c <_printf_float+0x374>
 8008cbc:	f04f 0b00 	mov.w	fp, #0
 8008cc0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008cc4:	f104 021a 	add.w	r2, r4, #26
 8008cc8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008cca:	9305      	str	r3, [sp, #20]
 8008ccc:	eba3 0309 	sub.w	r3, r3, r9
 8008cd0:	455b      	cmp	r3, fp
 8008cd2:	dc33      	bgt.n	8008d3c <_printf_float+0x384>
 8008cd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	db3b      	blt.n	8008d54 <_printf_float+0x39c>
 8008cdc:	6823      	ldr	r3, [r4, #0]
 8008cde:	07da      	lsls	r2, r3, #31
 8008ce0:	d438      	bmi.n	8008d54 <_printf_float+0x39c>
 8008ce2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ce4:	9a05      	ldr	r2, [sp, #20]
 8008ce6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ce8:	1a9a      	subs	r2, r3, r2
 8008cea:	eba3 0901 	sub.w	r9, r3, r1
 8008cee:	4591      	cmp	r9, r2
 8008cf0:	bfa8      	it	ge
 8008cf2:	4691      	movge	r9, r2
 8008cf4:	f1b9 0f00 	cmp.w	r9, #0
 8008cf8:	dc35      	bgt.n	8008d66 <_printf_float+0x3ae>
 8008cfa:	f04f 0800 	mov.w	r8, #0
 8008cfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d02:	f104 0a1a 	add.w	sl, r4, #26
 8008d06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d0a:	1a9b      	subs	r3, r3, r2
 8008d0c:	eba3 0309 	sub.w	r3, r3, r9
 8008d10:	4543      	cmp	r3, r8
 8008d12:	f77f af79 	ble.w	8008c08 <_printf_float+0x250>
 8008d16:	2301      	movs	r3, #1
 8008d18:	4652      	mov	r2, sl
 8008d1a:	4631      	mov	r1, r6
 8008d1c:	4628      	mov	r0, r5
 8008d1e:	47b8      	blx	r7
 8008d20:	3001      	adds	r0, #1
 8008d22:	f43f aeaa 	beq.w	8008a7a <_printf_float+0xc2>
 8008d26:	f108 0801 	add.w	r8, r8, #1
 8008d2a:	e7ec      	b.n	8008d06 <_printf_float+0x34e>
 8008d2c:	4613      	mov	r3, r2
 8008d2e:	4631      	mov	r1, r6
 8008d30:	4642      	mov	r2, r8
 8008d32:	4628      	mov	r0, r5
 8008d34:	47b8      	blx	r7
 8008d36:	3001      	adds	r0, #1
 8008d38:	d1c0      	bne.n	8008cbc <_printf_float+0x304>
 8008d3a:	e69e      	b.n	8008a7a <_printf_float+0xc2>
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	4631      	mov	r1, r6
 8008d40:	4628      	mov	r0, r5
 8008d42:	9205      	str	r2, [sp, #20]
 8008d44:	47b8      	blx	r7
 8008d46:	3001      	adds	r0, #1
 8008d48:	f43f ae97 	beq.w	8008a7a <_printf_float+0xc2>
 8008d4c:	9a05      	ldr	r2, [sp, #20]
 8008d4e:	f10b 0b01 	add.w	fp, fp, #1
 8008d52:	e7b9      	b.n	8008cc8 <_printf_float+0x310>
 8008d54:	ee18 3a10 	vmov	r3, s16
 8008d58:	4652      	mov	r2, sl
 8008d5a:	4631      	mov	r1, r6
 8008d5c:	4628      	mov	r0, r5
 8008d5e:	47b8      	blx	r7
 8008d60:	3001      	adds	r0, #1
 8008d62:	d1be      	bne.n	8008ce2 <_printf_float+0x32a>
 8008d64:	e689      	b.n	8008a7a <_printf_float+0xc2>
 8008d66:	9a05      	ldr	r2, [sp, #20]
 8008d68:	464b      	mov	r3, r9
 8008d6a:	4442      	add	r2, r8
 8008d6c:	4631      	mov	r1, r6
 8008d6e:	4628      	mov	r0, r5
 8008d70:	47b8      	blx	r7
 8008d72:	3001      	adds	r0, #1
 8008d74:	d1c1      	bne.n	8008cfa <_printf_float+0x342>
 8008d76:	e680      	b.n	8008a7a <_printf_float+0xc2>
 8008d78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d7a:	2a01      	cmp	r2, #1
 8008d7c:	dc01      	bgt.n	8008d82 <_printf_float+0x3ca>
 8008d7e:	07db      	lsls	r3, r3, #31
 8008d80:	d538      	bpl.n	8008df4 <_printf_float+0x43c>
 8008d82:	2301      	movs	r3, #1
 8008d84:	4642      	mov	r2, r8
 8008d86:	4631      	mov	r1, r6
 8008d88:	4628      	mov	r0, r5
 8008d8a:	47b8      	blx	r7
 8008d8c:	3001      	adds	r0, #1
 8008d8e:	f43f ae74 	beq.w	8008a7a <_printf_float+0xc2>
 8008d92:	ee18 3a10 	vmov	r3, s16
 8008d96:	4652      	mov	r2, sl
 8008d98:	4631      	mov	r1, r6
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	47b8      	blx	r7
 8008d9e:	3001      	adds	r0, #1
 8008da0:	f43f ae6b 	beq.w	8008a7a <_printf_float+0xc2>
 8008da4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008da8:	2200      	movs	r2, #0
 8008daa:	2300      	movs	r3, #0
 8008dac:	f7f7 fe8c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008db0:	b9d8      	cbnz	r0, 8008dea <_printf_float+0x432>
 8008db2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008db4:	f108 0201 	add.w	r2, r8, #1
 8008db8:	3b01      	subs	r3, #1
 8008dba:	4631      	mov	r1, r6
 8008dbc:	4628      	mov	r0, r5
 8008dbe:	47b8      	blx	r7
 8008dc0:	3001      	adds	r0, #1
 8008dc2:	d10e      	bne.n	8008de2 <_printf_float+0x42a>
 8008dc4:	e659      	b.n	8008a7a <_printf_float+0xc2>
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	4652      	mov	r2, sl
 8008dca:	4631      	mov	r1, r6
 8008dcc:	4628      	mov	r0, r5
 8008dce:	47b8      	blx	r7
 8008dd0:	3001      	adds	r0, #1
 8008dd2:	f43f ae52 	beq.w	8008a7a <_printf_float+0xc2>
 8008dd6:	f108 0801 	add.w	r8, r8, #1
 8008dda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ddc:	3b01      	subs	r3, #1
 8008dde:	4543      	cmp	r3, r8
 8008de0:	dcf1      	bgt.n	8008dc6 <_printf_float+0x40e>
 8008de2:	464b      	mov	r3, r9
 8008de4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008de8:	e6dc      	b.n	8008ba4 <_printf_float+0x1ec>
 8008dea:	f04f 0800 	mov.w	r8, #0
 8008dee:	f104 0a1a 	add.w	sl, r4, #26
 8008df2:	e7f2      	b.n	8008dda <_printf_float+0x422>
 8008df4:	2301      	movs	r3, #1
 8008df6:	4642      	mov	r2, r8
 8008df8:	e7df      	b.n	8008dba <_printf_float+0x402>
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	464a      	mov	r2, r9
 8008dfe:	4631      	mov	r1, r6
 8008e00:	4628      	mov	r0, r5
 8008e02:	47b8      	blx	r7
 8008e04:	3001      	adds	r0, #1
 8008e06:	f43f ae38 	beq.w	8008a7a <_printf_float+0xc2>
 8008e0a:	f108 0801 	add.w	r8, r8, #1
 8008e0e:	68e3      	ldr	r3, [r4, #12]
 8008e10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e12:	1a5b      	subs	r3, r3, r1
 8008e14:	4543      	cmp	r3, r8
 8008e16:	dcf0      	bgt.n	8008dfa <_printf_float+0x442>
 8008e18:	e6fa      	b.n	8008c10 <_printf_float+0x258>
 8008e1a:	f04f 0800 	mov.w	r8, #0
 8008e1e:	f104 0919 	add.w	r9, r4, #25
 8008e22:	e7f4      	b.n	8008e0e <_printf_float+0x456>

08008e24 <_printf_common>:
 8008e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e28:	4616      	mov	r6, r2
 8008e2a:	4699      	mov	r9, r3
 8008e2c:	688a      	ldr	r2, [r1, #8]
 8008e2e:	690b      	ldr	r3, [r1, #16]
 8008e30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e34:	4293      	cmp	r3, r2
 8008e36:	bfb8      	it	lt
 8008e38:	4613      	movlt	r3, r2
 8008e3a:	6033      	str	r3, [r6, #0]
 8008e3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e40:	4607      	mov	r7, r0
 8008e42:	460c      	mov	r4, r1
 8008e44:	b10a      	cbz	r2, 8008e4a <_printf_common+0x26>
 8008e46:	3301      	adds	r3, #1
 8008e48:	6033      	str	r3, [r6, #0]
 8008e4a:	6823      	ldr	r3, [r4, #0]
 8008e4c:	0699      	lsls	r1, r3, #26
 8008e4e:	bf42      	ittt	mi
 8008e50:	6833      	ldrmi	r3, [r6, #0]
 8008e52:	3302      	addmi	r3, #2
 8008e54:	6033      	strmi	r3, [r6, #0]
 8008e56:	6825      	ldr	r5, [r4, #0]
 8008e58:	f015 0506 	ands.w	r5, r5, #6
 8008e5c:	d106      	bne.n	8008e6c <_printf_common+0x48>
 8008e5e:	f104 0a19 	add.w	sl, r4, #25
 8008e62:	68e3      	ldr	r3, [r4, #12]
 8008e64:	6832      	ldr	r2, [r6, #0]
 8008e66:	1a9b      	subs	r3, r3, r2
 8008e68:	42ab      	cmp	r3, r5
 8008e6a:	dc26      	bgt.n	8008eba <_printf_common+0x96>
 8008e6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e70:	1e13      	subs	r3, r2, #0
 8008e72:	6822      	ldr	r2, [r4, #0]
 8008e74:	bf18      	it	ne
 8008e76:	2301      	movne	r3, #1
 8008e78:	0692      	lsls	r2, r2, #26
 8008e7a:	d42b      	bmi.n	8008ed4 <_printf_common+0xb0>
 8008e7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e80:	4649      	mov	r1, r9
 8008e82:	4638      	mov	r0, r7
 8008e84:	47c0      	blx	r8
 8008e86:	3001      	adds	r0, #1
 8008e88:	d01e      	beq.n	8008ec8 <_printf_common+0xa4>
 8008e8a:	6823      	ldr	r3, [r4, #0]
 8008e8c:	68e5      	ldr	r5, [r4, #12]
 8008e8e:	6832      	ldr	r2, [r6, #0]
 8008e90:	f003 0306 	and.w	r3, r3, #6
 8008e94:	2b04      	cmp	r3, #4
 8008e96:	bf08      	it	eq
 8008e98:	1aad      	subeq	r5, r5, r2
 8008e9a:	68a3      	ldr	r3, [r4, #8]
 8008e9c:	6922      	ldr	r2, [r4, #16]
 8008e9e:	bf0c      	ite	eq
 8008ea0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ea4:	2500      	movne	r5, #0
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	bfc4      	itt	gt
 8008eaa:	1a9b      	subgt	r3, r3, r2
 8008eac:	18ed      	addgt	r5, r5, r3
 8008eae:	2600      	movs	r6, #0
 8008eb0:	341a      	adds	r4, #26
 8008eb2:	42b5      	cmp	r5, r6
 8008eb4:	d11a      	bne.n	8008eec <_printf_common+0xc8>
 8008eb6:	2000      	movs	r0, #0
 8008eb8:	e008      	b.n	8008ecc <_printf_common+0xa8>
 8008eba:	2301      	movs	r3, #1
 8008ebc:	4652      	mov	r2, sl
 8008ebe:	4649      	mov	r1, r9
 8008ec0:	4638      	mov	r0, r7
 8008ec2:	47c0      	blx	r8
 8008ec4:	3001      	adds	r0, #1
 8008ec6:	d103      	bne.n	8008ed0 <_printf_common+0xac>
 8008ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ed0:	3501      	adds	r5, #1
 8008ed2:	e7c6      	b.n	8008e62 <_printf_common+0x3e>
 8008ed4:	18e1      	adds	r1, r4, r3
 8008ed6:	1c5a      	adds	r2, r3, #1
 8008ed8:	2030      	movs	r0, #48	; 0x30
 8008eda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ede:	4422      	add	r2, r4
 8008ee0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ee4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ee8:	3302      	adds	r3, #2
 8008eea:	e7c7      	b.n	8008e7c <_printf_common+0x58>
 8008eec:	2301      	movs	r3, #1
 8008eee:	4622      	mov	r2, r4
 8008ef0:	4649      	mov	r1, r9
 8008ef2:	4638      	mov	r0, r7
 8008ef4:	47c0      	blx	r8
 8008ef6:	3001      	adds	r0, #1
 8008ef8:	d0e6      	beq.n	8008ec8 <_printf_common+0xa4>
 8008efa:	3601      	adds	r6, #1
 8008efc:	e7d9      	b.n	8008eb2 <_printf_common+0x8e>
	...

08008f00 <_printf_i>:
 8008f00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f04:	7e0f      	ldrb	r7, [r1, #24]
 8008f06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f08:	2f78      	cmp	r7, #120	; 0x78
 8008f0a:	4691      	mov	r9, r2
 8008f0c:	4680      	mov	r8, r0
 8008f0e:	460c      	mov	r4, r1
 8008f10:	469a      	mov	sl, r3
 8008f12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008f16:	d807      	bhi.n	8008f28 <_printf_i+0x28>
 8008f18:	2f62      	cmp	r7, #98	; 0x62
 8008f1a:	d80a      	bhi.n	8008f32 <_printf_i+0x32>
 8008f1c:	2f00      	cmp	r7, #0
 8008f1e:	f000 80d8 	beq.w	80090d2 <_printf_i+0x1d2>
 8008f22:	2f58      	cmp	r7, #88	; 0x58
 8008f24:	f000 80a3 	beq.w	800906e <_printf_i+0x16e>
 8008f28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f30:	e03a      	b.n	8008fa8 <_printf_i+0xa8>
 8008f32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f36:	2b15      	cmp	r3, #21
 8008f38:	d8f6      	bhi.n	8008f28 <_printf_i+0x28>
 8008f3a:	a101      	add	r1, pc, #4	; (adr r1, 8008f40 <_printf_i+0x40>)
 8008f3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f40:	08008f99 	.word	0x08008f99
 8008f44:	08008fad 	.word	0x08008fad
 8008f48:	08008f29 	.word	0x08008f29
 8008f4c:	08008f29 	.word	0x08008f29
 8008f50:	08008f29 	.word	0x08008f29
 8008f54:	08008f29 	.word	0x08008f29
 8008f58:	08008fad 	.word	0x08008fad
 8008f5c:	08008f29 	.word	0x08008f29
 8008f60:	08008f29 	.word	0x08008f29
 8008f64:	08008f29 	.word	0x08008f29
 8008f68:	08008f29 	.word	0x08008f29
 8008f6c:	080090b9 	.word	0x080090b9
 8008f70:	08008fdd 	.word	0x08008fdd
 8008f74:	0800909b 	.word	0x0800909b
 8008f78:	08008f29 	.word	0x08008f29
 8008f7c:	08008f29 	.word	0x08008f29
 8008f80:	080090db 	.word	0x080090db
 8008f84:	08008f29 	.word	0x08008f29
 8008f88:	08008fdd 	.word	0x08008fdd
 8008f8c:	08008f29 	.word	0x08008f29
 8008f90:	08008f29 	.word	0x08008f29
 8008f94:	080090a3 	.word	0x080090a3
 8008f98:	682b      	ldr	r3, [r5, #0]
 8008f9a:	1d1a      	adds	r2, r3, #4
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	602a      	str	r2, [r5, #0]
 8008fa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fa8:	2301      	movs	r3, #1
 8008faa:	e0a3      	b.n	80090f4 <_printf_i+0x1f4>
 8008fac:	6820      	ldr	r0, [r4, #0]
 8008fae:	6829      	ldr	r1, [r5, #0]
 8008fb0:	0606      	lsls	r6, r0, #24
 8008fb2:	f101 0304 	add.w	r3, r1, #4
 8008fb6:	d50a      	bpl.n	8008fce <_printf_i+0xce>
 8008fb8:	680e      	ldr	r6, [r1, #0]
 8008fba:	602b      	str	r3, [r5, #0]
 8008fbc:	2e00      	cmp	r6, #0
 8008fbe:	da03      	bge.n	8008fc8 <_printf_i+0xc8>
 8008fc0:	232d      	movs	r3, #45	; 0x2d
 8008fc2:	4276      	negs	r6, r6
 8008fc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fc8:	485e      	ldr	r0, [pc, #376]	; (8009144 <_printf_i+0x244>)
 8008fca:	230a      	movs	r3, #10
 8008fcc:	e019      	b.n	8009002 <_printf_i+0x102>
 8008fce:	680e      	ldr	r6, [r1, #0]
 8008fd0:	602b      	str	r3, [r5, #0]
 8008fd2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008fd6:	bf18      	it	ne
 8008fd8:	b236      	sxthne	r6, r6
 8008fda:	e7ef      	b.n	8008fbc <_printf_i+0xbc>
 8008fdc:	682b      	ldr	r3, [r5, #0]
 8008fde:	6820      	ldr	r0, [r4, #0]
 8008fe0:	1d19      	adds	r1, r3, #4
 8008fe2:	6029      	str	r1, [r5, #0]
 8008fe4:	0601      	lsls	r1, r0, #24
 8008fe6:	d501      	bpl.n	8008fec <_printf_i+0xec>
 8008fe8:	681e      	ldr	r6, [r3, #0]
 8008fea:	e002      	b.n	8008ff2 <_printf_i+0xf2>
 8008fec:	0646      	lsls	r6, r0, #25
 8008fee:	d5fb      	bpl.n	8008fe8 <_printf_i+0xe8>
 8008ff0:	881e      	ldrh	r6, [r3, #0]
 8008ff2:	4854      	ldr	r0, [pc, #336]	; (8009144 <_printf_i+0x244>)
 8008ff4:	2f6f      	cmp	r7, #111	; 0x6f
 8008ff6:	bf0c      	ite	eq
 8008ff8:	2308      	moveq	r3, #8
 8008ffa:	230a      	movne	r3, #10
 8008ffc:	2100      	movs	r1, #0
 8008ffe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009002:	6865      	ldr	r5, [r4, #4]
 8009004:	60a5      	str	r5, [r4, #8]
 8009006:	2d00      	cmp	r5, #0
 8009008:	bfa2      	ittt	ge
 800900a:	6821      	ldrge	r1, [r4, #0]
 800900c:	f021 0104 	bicge.w	r1, r1, #4
 8009010:	6021      	strge	r1, [r4, #0]
 8009012:	b90e      	cbnz	r6, 8009018 <_printf_i+0x118>
 8009014:	2d00      	cmp	r5, #0
 8009016:	d04d      	beq.n	80090b4 <_printf_i+0x1b4>
 8009018:	4615      	mov	r5, r2
 800901a:	fbb6 f1f3 	udiv	r1, r6, r3
 800901e:	fb03 6711 	mls	r7, r3, r1, r6
 8009022:	5dc7      	ldrb	r7, [r0, r7]
 8009024:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009028:	4637      	mov	r7, r6
 800902a:	42bb      	cmp	r3, r7
 800902c:	460e      	mov	r6, r1
 800902e:	d9f4      	bls.n	800901a <_printf_i+0x11a>
 8009030:	2b08      	cmp	r3, #8
 8009032:	d10b      	bne.n	800904c <_printf_i+0x14c>
 8009034:	6823      	ldr	r3, [r4, #0]
 8009036:	07de      	lsls	r6, r3, #31
 8009038:	d508      	bpl.n	800904c <_printf_i+0x14c>
 800903a:	6923      	ldr	r3, [r4, #16]
 800903c:	6861      	ldr	r1, [r4, #4]
 800903e:	4299      	cmp	r1, r3
 8009040:	bfde      	ittt	le
 8009042:	2330      	movle	r3, #48	; 0x30
 8009044:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009048:	f105 35ff 	addle.w	r5, r5, #4294967295
 800904c:	1b52      	subs	r2, r2, r5
 800904e:	6122      	str	r2, [r4, #16]
 8009050:	f8cd a000 	str.w	sl, [sp]
 8009054:	464b      	mov	r3, r9
 8009056:	aa03      	add	r2, sp, #12
 8009058:	4621      	mov	r1, r4
 800905a:	4640      	mov	r0, r8
 800905c:	f7ff fee2 	bl	8008e24 <_printf_common>
 8009060:	3001      	adds	r0, #1
 8009062:	d14c      	bne.n	80090fe <_printf_i+0x1fe>
 8009064:	f04f 30ff 	mov.w	r0, #4294967295
 8009068:	b004      	add	sp, #16
 800906a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800906e:	4835      	ldr	r0, [pc, #212]	; (8009144 <_printf_i+0x244>)
 8009070:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009074:	6829      	ldr	r1, [r5, #0]
 8009076:	6823      	ldr	r3, [r4, #0]
 8009078:	f851 6b04 	ldr.w	r6, [r1], #4
 800907c:	6029      	str	r1, [r5, #0]
 800907e:	061d      	lsls	r5, r3, #24
 8009080:	d514      	bpl.n	80090ac <_printf_i+0x1ac>
 8009082:	07df      	lsls	r7, r3, #31
 8009084:	bf44      	itt	mi
 8009086:	f043 0320 	orrmi.w	r3, r3, #32
 800908a:	6023      	strmi	r3, [r4, #0]
 800908c:	b91e      	cbnz	r6, 8009096 <_printf_i+0x196>
 800908e:	6823      	ldr	r3, [r4, #0]
 8009090:	f023 0320 	bic.w	r3, r3, #32
 8009094:	6023      	str	r3, [r4, #0]
 8009096:	2310      	movs	r3, #16
 8009098:	e7b0      	b.n	8008ffc <_printf_i+0xfc>
 800909a:	6823      	ldr	r3, [r4, #0]
 800909c:	f043 0320 	orr.w	r3, r3, #32
 80090a0:	6023      	str	r3, [r4, #0]
 80090a2:	2378      	movs	r3, #120	; 0x78
 80090a4:	4828      	ldr	r0, [pc, #160]	; (8009148 <_printf_i+0x248>)
 80090a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80090aa:	e7e3      	b.n	8009074 <_printf_i+0x174>
 80090ac:	0659      	lsls	r1, r3, #25
 80090ae:	bf48      	it	mi
 80090b0:	b2b6      	uxthmi	r6, r6
 80090b2:	e7e6      	b.n	8009082 <_printf_i+0x182>
 80090b4:	4615      	mov	r5, r2
 80090b6:	e7bb      	b.n	8009030 <_printf_i+0x130>
 80090b8:	682b      	ldr	r3, [r5, #0]
 80090ba:	6826      	ldr	r6, [r4, #0]
 80090bc:	6961      	ldr	r1, [r4, #20]
 80090be:	1d18      	adds	r0, r3, #4
 80090c0:	6028      	str	r0, [r5, #0]
 80090c2:	0635      	lsls	r5, r6, #24
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	d501      	bpl.n	80090cc <_printf_i+0x1cc>
 80090c8:	6019      	str	r1, [r3, #0]
 80090ca:	e002      	b.n	80090d2 <_printf_i+0x1d2>
 80090cc:	0670      	lsls	r0, r6, #25
 80090ce:	d5fb      	bpl.n	80090c8 <_printf_i+0x1c8>
 80090d0:	8019      	strh	r1, [r3, #0]
 80090d2:	2300      	movs	r3, #0
 80090d4:	6123      	str	r3, [r4, #16]
 80090d6:	4615      	mov	r5, r2
 80090d8:	e7ba      	b.n	8009050 <_printf_i+0x150>
 80090da:	682b      	ldr	r3, [r5, #0]
 80090dc:	1d1a      	adds	r2, r3, #4
 80090de:	602a      	str	r2, [r5, #0]
 80090e0:	681d      	ldr	r5, [r3, #0]
 80090e2:	6862      	ldr	r2, [r4, #4]
 80090e4:	2100      	movs	r1, #0
 80090e6:	4628      	mov	r0, r5
 80090e8:	f7f7 f87a 	bl	80001e0 <memchr>
 80090ec:	b108      	cbz	r0, 80090f2 <_printf_i+0x1f2>
 80090ee:	1b40      	subs	r0, r0, r5
 80090f0:	6060      	str	r0, [r4, #4]
 80090f2:	6863      	ldr	r3, [r4, #4]
 80090f4:	6123      	str	r3, [r4, #16]
 80090f6:	2300      	movs	r3, #0
 80090f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090fc:	e7a8      	b.n	8009050 <_printf_i+0x150>
 80090fe:	6923      	ldr	r3, [r4, #16]
 8009100:	462a      	mov	r2, r5
 8009102:	4649      	mov	r1, r9
 8009104:	4640      	mov	r0, r8
 8009106:	47d0      	blx	sl
 8009108:	3001      	adds	r0, #1
 800910a:	d0ab      	beq.n	8009064 <_printf_i+0x164>
 800910c:	6823      	ldr	r3, [r4, #0]
 800910e:	079b      	lsls	r3, r3, #30
 8009110:	d413      	bmi.n	800913a <_printf_i+0x23a>
 8009112:	68e0      	ldr	r0, [r4, #12]
 8009114:	9b03      	ldr	r3, [sp, #12]
 8009116:	4298      	cmp	r0, r3
 8009118:	bfb8      	it	lt
 800911a:	4618      	movlt	r0, r3
 800911c:	e7a4      	b.n	8009068 <_printf_i+0x168>
 800911e:	2301      	movs	r3, #1
 8009120:	4632      	mov	r2, r6
 8009122:	4649      	mov	r1, r9
 8009124:	4640      	mov	r0, r8
 8009126:	47d0      	blx	sl
 8009128:	3001      	adds	r0, #1
 800912a:	d09b      	beq.n	8009064 <_printf_i+0x164>
 800912c:	3501      	adds	r5, #1
 800912e:	68e3      	ldr	r3, [r4, #12]
 8009130:	9903      	ldr	r1, [sp, #12]
 8009132:	1a5b      	subs	r3, r3, r1
 8009134:	42ab      	cmp	r3, r5
 8009136:	dcf2      	bgt.n	800911e <_printf_i+0x21e>
 8009138:	e7eb      	b.n	8009112 <_printf_i+0x212>
 800913a:	2500      	movs	r5, #0
 800913c:	f104 0619 	add.w	r6, r4, #25
 8009140:	e7f5      	b.n	800912e <_printf_i+0x22e>
 8009142:	bf00      	nop
 8009144:	0800b212 	.word	0x0800b212
 8009148:	0800b223 	.word	0x0800b223

0800914c <iprintf>:
 800914c:	b40f      	push	{r0, r1, r2, r3}
 800914e:	4b0a      	ldr	r3, [pc, #40]	; (8009178 <iprintf+0x2c>)
 8009150:	b513      	push	{r0, r1, r4, lr}
 8009152:	681c      	ldr	r4, [r3, #0]
 8009154:	b124      	cbz	r4, 8009160 <iprintf+0x14>
 8009156:	69a3      	ldr	r3, [r4, #24]
 8009158:	b913      	cbnz	r3, 8009160 <iprintf+0x14>
 800915a:	4620      	mov	r0, r4
 800915c:	f7ff fa1c 	bl	8008598 <__sinit>
 8009160:	ab05      	add	r3, sp, #20
 8009162:	9a04      	ldr	r2, [sp, #16]
 8009164:	68a1      	ldr	r1, [r4, #8]
 8009166:	9301      	str	r3, [sp, #4]
 8009168:	4620      	mov	r0, r4
 800916a:	f001 fdb3 	bl	800acd4 <_vfiprintf_r>
 800916e:	b002      	add	sp, #8
 8009170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009174:	b004      	add	sp, #16
 8009176:	4770      	bx	lr
 8009178:	20000054 	.word	0x20000054

0800917c <cleanup_glue>:
 800917c:	b538      	push	{r3, r4, r5, lr}
 800917e:	460c      	mov	r4, r1
 8009180:	6809      	ldr	r1, [r1, #0]
 8009182:	4605      	mov	r5, r0
 8009184:	b109      	cbz	r1, 800918a <cleanup_glue+0xe>
 8009186:	f7ff fff9 	bl	800917c <cleanup_glue>
 800918a:	4621      	mov	r1, r4
 800918c:	4628      	mov	r0, r5
 800918e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009192:	f001 bd29 	b.w	800abe8 <_free_r>
	...

08009198 <_reclaim_reent>:
 8009198:	4b2c      	ldr	r3, [pc, #176]	; (800924c <_reclaim_reent+0xb4>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4283      	cmp	r3, r0
 800919e:	b570      	push	{r4, r5, r6, lr}
 80091a0:	4604      	mov	r4, r0
 80091a2:	d051      	beq.n	8009248 <_reclaim_reent+0xb0>
 80091a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80091a6:	b143      	cbz	r3, 80091ba <_reclaim_reent+0x22>
 80091a8:	68db      	ldr	r3, [r3, #12]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d14a      	bne.n	8009244 <_reclaim_reent+0xac>
 80091ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091b0:	6819      	ldr	r1, [r3, #0]
 80091b2:	b111      	cbz	r1, 80091ba <_reclaim_reent+0x22>
 80091b4:	4620      	mov	r0, r4
 80091b6:	f001 fd17 	bl	800abe8 <_free_r>
 80091ba:	6961      	ldr	r1, [r4, #20]
 80091bc:	b111      	cbz	r1, 80091c4 <_reclaim_reent+0x2c>
 80091be:	4620      	mov	r0, r4
 80091c0:	f001 fd12 	bl	800abe8 <_free_r>
 80091c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80091c6:	b111      	cbz	r1, 80091ce <_reclaim_reent+0x36>
 80091c8:	4620      	mov	r0, r4
 80091ca:	f001 fd0d 	bl	800abe8 <_free_r>
 80091ce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80091d0:	b111      	cbz	r1, 80091d8 <_reclaim_reent+0x40>
 80091d2:	4620      	mov	r0, r4
 80091d4:	f001 fd08 	bl	800abe8 <_free_r>
 80091d8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80091da:	b111      	cbz	r1, 80091e2 <_reclaim_reent+0x4a>
 80091dc:	4620      	mov	r0, r4
 80091de:	f001 fd03 	bl	800abe8 <_free_r>
 80091e2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80091e4:	b111      	cbz	r1, 80091ec <_reclaim_reent+0x54>
 80091e6:	4620      	mov	r0, r4
 80091e8:	f001 fcfe 	bl	800abe8 <_free_r>
 80091ec:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80091ee:	b111      	cbz	r1, 80091f6 <_reclaim_reent+0x5e>
 80091f0:	4620      	mov	r0, r4
 80091f2:	f001 fcf9 	bl	800abe8 <_free_r>
 80091f6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80091f8:	b111      	cbz	r1, 8009200 <_reclaim_reent+0x68>
 80091fa:	4620      	mov	r0, r4
 80091fc:	f001 fcf4 	bl	800abe8 <_free_r>
 8009200:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009202:	b111      	cbz	r1, 800920a <_reclaim_reent+0x72>
 8009204:	4620      	mov	r0, r4
 8009206:	f001 fcef 	bl	800abe8 <_free_r>
 800920a:	69a3      	ldr	r3, [r4, #24]
 800920c:	b1e3      	cbz	r3, 8009248 <_reclaim_reent+0xb0>
 800920e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009210:	4620      	mov	r0, r4
 8009212:	4798      	blx	r3
 8009214:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009216:	b1b9      	cbz	r1, 8009248 <_reclaim_reent+0xb0>
 8009218:	4620      	mov	r0, r4
 800921a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800921e:	f7ff bfad 	b.w	800917c <cleanup_glue>
 8009222:	5949      	ldr	r1, [r1, r5]
 8009224:	b941      	cbnz	r1, 8009238 <_reclaim_reent+0xa0>
 8009226:	3504      	adds	r5, #4
 8009228:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800922a:	2d80      	cmp	r5, #128	; 0x80
 800922c:	68d9      	ldr	r1, [r3, #12]
 800922e:	d1f8      	bne.n	8009222 <_reclaim_reent+0x8a>
 8009230:	4620      	mov	r0, r4
 8009232:	f001 fcd9 	bl	800abe8 <_free_r>
 8009236:	e7ba      	b.n	80091ae <_reclaim_reent+0x16>
 8009238:	680e      	ldr	r6, [r1, #0]
 800923a:	4620      	mov	r0, r4
 800923c:	f001 fcd4 	bl	800abe8 <_free_r>
 8009240:	4631      	mov	r1, r6
 8009242:	e7ef      	b.n	8009224 <_reclaim_reent+0x8c>
 8009244:	2500      	movs	r5, #0
 8009246:	e7ef      	b.n	8009228 <_reclaim_reent+0x90>
 8009248:	bd70      	pop	{r4, r5, r6, pc}
 800924a:	bf00      	nop
 800924c:	20000054 	.word	0x20000054

08009250 <_sbrk_r>:
 8009250:	b538      	push	{r3, r4, r5, lr}
 8009252:	4d06      	ldr	r5, [pc, #24]	; (800926c <_sbrk_r+0x1c>)
 8009254:	2300      	movs	r3, #0
 8009256:	4604      	mov	r4, r0
 8009258:	4608      	mov	r0, r1
 800925a:	602b      	str	r3, [r5, #0]
 800925c:	f7f8 fbdc 	bl	8001a18 <_sbrk>
 8009260:	1c43      	adds	r3, r0, #1
 8009262:	d102      	bne.n	800926a <_sbrk_r+0x1a>
 8009264:	682b      	ldr	r3, [r5, #0]
 8009266:	b103      	cbz	r3, 800926a <_sbrk_r+0x1a>
 8009268:	6023      	str	r3, [r4, #0]
 800926a:	bd38      	pop	{r3, r4, r5, pc}
 800926c:	200013b4 	.word	0x200013b4

08009270 <__sread>:
 8009270:	b510      	push	{r4, lr}
 8009272:	460c      	mov	r4, r1
 8009274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009278:	f001 fe5c 	bl	800af34 <_read_r>
 800927c:	2800      	cmp	r0, #0
 800927e:	bfab      	itete	ge
 8009280:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009282:	89a3      	ldrhlt	r3, [r4, #12]
 8009284:	181b      	addge	r3, r3, r0
 8009286:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800928a:	bfac      	ite	ge
 800928c:	6563      	strge	r3, [r4, #84]	; 0x54
 800928e:	81a3      	strhlt	r3, [r4, #12]
 8009290:	bd10      	pop	{r4, pc}

08009292 <__swrite>:
 8009292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009296:	461f      	mov	r7, r3
 8009298:	898b      	ldrh	r3, [r1, #12]
 800929a:	05db      	lsls	r3, r3, #23
 800929c:	4605      	mov	r5, r0
 800929e:	460c      	mov	r4, r1
 80092a0:	4616      	mov	r6, r2
 80092a2:	d505      	bpl.n	80092b0 <__swrite+0x1e>
 80092a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092a8:	2302      	movs	r3, #2
 80092aa:	2200      	movs	r2, #0
 80092ac:	f001 f876 	bl	800a39c <_lseek_r>
 80092b0:	89a3      	ldrh	r3, [r4, #12]
 80092b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092ba:	81a3      	strh	r3, [r4, #12]
 80092bc:	4632      	mov	r2, r6
 80092be:	463b      	mov	r3, r7
 80092c0:	4628      	mov	r0, r5
 80092c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092c6:	f000 b869 	b.w	800939c <_write_r>

080092ca <__sseek>:
 80092ca:	b510      	push	{r4, lr}
 80092cc:	460c      	mov	r4, r1
 80092ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092d2:	f001 f863 	bl	800a39c <_lseek_r>
 80092d6:	1c43      	adds	r3, r0, #1
 80092d8:	89a3      	ldrh	r3, [r4, #12]
 80092da:	bf15      	itete	ne
 80092dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80092de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80092e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80092e6:	81a3      	strheq	r3, [r4, #12]
 80092e8:	bf18      	it	ne
 80092ea:	81a3      	strhne	r3, [r4, #12]
 80092ec:	bd10      	pop	{r4, pc}

080092ee <__sclose>:
 80092ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092f2:	f000 b8f1 	b.w	80094d8 <_close_r>
	...

080092f8 <__swbuf_r>:
 80092f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092fa:	460e      	mov	r6, r1
 80092fc:	4614      	mov	r4, r2
 80092fe:	4605      	mov	r5, r0
 8009300:	b118      	cbz	r0, 800930a <__swbuf_r+0x12>
 8009302:	6983      	ldr	r3, [r0, #24]
 8009304:	b90b      	cbnz	r3, 800930a <__swbuf_r+0x12>
 8009306:	f7ff f947 	bl	8008598 <__sinit>
 800930a:	4b21      	ldr	r3, [pc, #132]	; (8009390 <__swbuf_r+0x98>)
 800930c:	429c      	cmp	r4, r3
 800930e:	d12b      	bne.n	8009368 <__swbuf_r+0x70>
 8009310:	686c      	ldr	r4, [r5, #4]
 8009312:	69a3      	ldr	r3, [r4, #24]
 8009314:	60a3      	str	r3, [r4, #8]
 8009316:	89a3      	ldrh	r3, [r4, #12]
 8009318:	071a      	lsls	r2, r3, #28
 800931a:	d52f      	bpl.n	800937c <__swbuf_r+0x84>
 800931c:	6923      	ldr	r3, [r4, #16]
 800931e:	b36b      	cbz	r3, 800937c <__swbuf_r+0x84>
 8009320:	6923      	ldr	r3, [r4, #16]
 8009322:	6820      	ldr	r0, [r4, #0]
 8009324:	1ac0      	subs	r0, r0, r3
 8009326:	6963      	ldr	r3, [r4, #20]
 8009328:	b2f6      	uxtb	r6, r6
 800932a:	4283      	cmp	r3, r0
 800932c:	4637      	mov	r7, r6
 800932e:	dc04      	bgt.n	800933a <__swbuf_r+0x42>
 8009330:	4621      	mov	r1, r4
 8009332:	4628      	mov	r0, r5
 8009334:	f000 ffe0 	bl	800a2f8 <_fflush_r>
 8009338:	bb30      	cbnz	r0, 8009388 <__swbuf_r+0x90>
 800933a:	68a3      	ldr	r3, [r4, #8]
 800933c:	3b01      	subs	r3, #1
 800933e:	60a3      	str	r3, [r4, #8]
 8009340:	6823      	ldr	r3, [r4, #0]
 8009342:	1c5a      	adds	r2, r3, #1
 8009344:	6022      	str	r2, [r4, #0]
 8009346:	701e      	strb	r6, [r3, #0]
 8009348:	6963      	ldr	r3, [r4, #20]
 800934a:	3001      	adds	r0, #1
 800934c:	4283      	cmp	r3, r0
 800934e:	d004      	beq.n	800935a <__swbuf_r+0x62>
 8009350:	89a3      	ldrh	r3, [r4, #12]
 8009352:	07db      	lsls	r3, r3, #31
 8009354:	d506      	bpl.n	8009364 <__swbuf_r+0x6c>
 8009356:	2e0a      	cmp	r6, #10
 8009358:	d104      	bne.n	8009364 <__swbuf_r+0x6c>
 800935a:	4621      	mov	r1, r4
 800935c:	4628      	mov	r0, r5
 800935e:	f000 ffcb 	bl	800a2f8 <_fflush_r>
 8009362:	b988      	cbnz	r0, 8009388 <__swbuf_r+0x90>
 8009364:	4638      	mov	r0, r7
 8009366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009368:	4b0a      	ldr	r3, [pc, #40]	; (8009394 <__swbuf_r+0x9c>)
 800936a:	429c      	cmp	r4, r3
 800936c:	d101      	bne.n	8009372 <__swbuf_r+0x7a>
 800936e:	68ac      	ldr	r4, [r5, #8]
 8009370:	e7cf      	b.n	8009312 <__swbuf_r+0x1a>
 8009372:	4b09      	ldr	r3, [pc, #36]	; (8009398 <__swbuf_r+0xa0>)
 8009374:	429c      	cmp	r4, r3
 8009376:	bf08      	it	eq
 8009378:	68ec      	ldreq	r4, [r5, #12]
 800937a:	e7ca      	b.n	8009312 <__swbuf_r+0x1a>
 800937c:	4621      	mov	r1, r4
 800937e:	4628      	mov	r0, r5
 8009380:	f000 f81e 	bl	80093c0 <__swsetup_r>
 8009384:	2800      	cmp	r0, #0
 8009386:	d0cb      	beq.n	8009320 <__swbuf_r+0x28>
 8009388:	f04f 37ff 	mov.w	r7, #4294967295
 800938c:	e7ea      	b.n	8009364 <__swbuf_r+0x6c>
 800938e:	bf00      	nop
 8009390:	0800b1bc 	.word	0x0800b1bc
 8009394:	0800b1dc 	.word	0x0800b1dc
 8009398:	0800b19c 	.word	0x0800b19c

0800939c <_write_r>:
 800939c:	b538      	push	{r3, r4, r5, lr}
 800939e:	4d07      	ldr	r5, [pc, #28]	; (80093bc <_write_r+0x20>)
 80093a0:	4604      	mov	r4, r0
 80093a2:	4608      	mov	r0, r1
 80093a4:	4611      	mov	r1, r2
 80093a6:	2200      	movs	r2, #0
 80093a8:	602a      	str	r2, [r5, #0]
 80093aa:	461a      	mov	r2, r3
 80093ac:	f7f8 fae3 	bl	8001976 <_write>
 80093b0:	1c43      	adds	r3, r0, #1
 80093b2:	d102      	bne.n	80093ba <_write_r+0x1e>
 80093b4:	682b      	ldr	r3, [r5, #0]
 80093b6:	b103      	cbz	r3, 80093ba <_write_r+0x1e>
 80093b8:	6023      	str	r3, [r4, #0]
 80093ba:	bd38      	pop	{r3, r4, r5, pc}
 80093bc:	200013b4 	.word	0x200013b4

080093c0 <__swsetup_r>:
 80093c0:	4b32      	ldr	r3, [pc, #200]	; (800948c <__swsetup_r+0xcc>)
 80093c2:	b570      	push	{r4, r5, r6, lr}
 80093c4:	681d      	ldr	r5, [r3, #0]
 80093c6:	4606      	mov	r6, r0
 80093c8:	460c      	mov	r4, r1
 80093ca:	b125      	cbz	r5, 80093d6 <__swsetup_r+0x16>
 80093cc:	69ab      	ldr	r3, [r5, #24]
 80093ce:	b913      	cbnz	r3, 80093d6 <__swsetup_r+0x16>
 80093d0:	4628      	mov	r0, r5
 80093d2:	f7ff f8e1 	bl	8008598 <__sinit>
 80093d6:	4b2e      	ldr	r3, [pc, #184]	; (8009490 <__swsetup_r+0xd0>)
 80093d8:	429c      	cmp	r4, r3
 80093da:	d10f      	bne.n	80093fc <__swsetup_r+0x3c>
 80093dc:	686c      	ldr	r4, [r5, #4]
 80093de:	89a3      	ldrh	r3, [r4, #12]
 80093e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093e4:	0719      	lsls	r1, r3, #28
 80093e6:	d42c      	bmi.n	8009442 <__swsetup_r+0x82>
 80093e8:	06dd      	lsls	r5, r3, #27
 80093ea:	d411      	bmi.n	8009410 <__swsetup_r+0x50>
 80093ec:	2309      	movs	r3, #9
 80093ee:	6033      	str	r3, [r6, #0]
 80093f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80093f4:	81a3      	strh	r3, [r4, #12]
 80093f6:	f04f 30ff 	mov.w	r0, #4294967295
 80093fa:	e03e      	b.n	800947a <__swsetup_r+0xba>
 80093fc:	4b25      	ldr	r3, [pc, #148]	; (8009494 <__swsetup_r+0xd4>)
 80093fe:	429c      	cmp	r4, r3
 8009400:	d101      	bne.n	8009406 <__swsetup_r+0x46>
 8009402:	68ac      	ldr	r4, [r5, #8]
 8009404:	e7eb      	b.n	80093de <__swsetup_r+0x1e>
 8009406:	4b24      	ldr	r3, [pc, #144]	; (8009498 <__swsetup_r+0xd8>)
 8009408:	429c      	cmp	r4, r3
 800940a:	bf08      	it	eq
 800940c:	68ec      	ldreq	r4, [r5, #12]
 800940e:	e7e6      	b.n	80093de <__swsetup_r+0x1e>
 8009410:	0758      	lsls	r0, r3, #29
 8009412:	d512      	bpl.n	800943a <__swsetup_r+0x7a>
 8009414:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009416:	b141      	cbz	r1, 800942a <__swsetup_r+0x6a>
 8009418:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800941c:	4299      	cmp	r1, r3
 800941e:	d002      	beq.n	8009426 <__swsetup_r+0x66>
 8009420:	4630      	mov	r0, r6
 8009422:	f001 fbe1 	bl	800abe8 <_free_r>
 8009426:	2300      	movs	r3, #0
 8009428:	6363      	str	r3, [r4, #52]	; 0x34
 800942a:	89a3      	ldrh	r3, [r4, #12]
 800942c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009430:	81a3      	strh	r3, [r4, #12]
 8009432:	2300      	movs	r3, #0
 8009434:	6063      	str	r3, [r4, #4]
 8009436:	6923      	ldr	r3, [r4, #16]
 8009438:	6023      	str	r3, [r4, #0]
 800943a:	89a3      	ldrh	r3, [r4, #12]
 800943c:	f043 0308 	orr.w	r3, r3, #8
 8009440:	81a3      	strh	r3, [r4, #12]
 8009442:	6923      	ldr	r3, [r4, #16]
 8009444:	b94b      	cbnz	r3, 800945a <__swsetup_r+0x9a>
 8009446:	89a3      	ldrh	r3, [r4, #12]
 8009448:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800944c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009450:	d003      	beq.n	800945a <__swsetup_r+0x9a>
 8009452:	4621      	mov	r1, r4
 8009454:	4630      	mov	r0, r6
 8009456:	f000 ffd9 	bl	800a40c <__smakebuf_r>
 800945a:	89a0      	ldrh	r0, [r4, #12]
 800945c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009460:	f010 0301 	ands.w	r3, r0, #1
 8009464:	d00a      	beq.n	800947c <__swsetup_r+0xbc>
 8009466:	2300      	movs	r3, #0
 8009468:	60a3      	str	r3, [r4, #8]
 800946a:	6963      	ldr	r3, [r4, #20]
 800946c:	425b      	negs	r3, r3
 800946e:	61a3      	str	r3, [r4, #24]
 8009470:	6923      	ldr	r3, [r4, #16]
 8009472:	b943      	cbnz	r3, 8009486 <__swsetup_r+0xc6>
 8009474:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009478:	d1ba      	bne.n	80093f0 <__swsetup_r+0x30>
 800947a:	bd70      	pop	{r4, r5, r6, pc}
 800947c:	0781      	lsls	r1, r0, #30
 800947e:	bf58      	it	pl
 8009480:	6963      	ldrpl	r3, [r4, #20]
 8009482:	60a3      	str	r3, [r4, #8]
 8009484:	e7f4      	b.n	8009470 <__swsetup_r+0xb0>
 8009486:	2000      	movs	r0, #0
 8009488:	e7f7      	b.n	800947a <__swsetup_r+0xba>
 800948a:	bf00      	nop
 800948c:	20000054 	.word	0x20000054
 8009490:	0800b1bc 	.word	0x0800b1bc
 8009494:	0800b1dc 	.word	0x0800b1dc
 8009498:	0800b19c 	.word	0x0800b19c

0800949c <__assert_func>:
 800949c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800949e:	4614      	mov	r4, r2
 80094a0:	461a      	mov	r2, r3
 80094a2:	4b09      	ldr	r3, [pc, #36]	; (80094c8 <__assert_func+0x2c>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4605      	mov	r5, r0
 80094a8:	68d8      	ldr	r0, [r3, #12]
 80094aa:	b14c      	cbz	r4, 80094c0 <__assert_func+0x24>
 80094ac:	4b07      	ldr	r3, [pc, #28]	; (80094cc <__assert_func+0x30>)
 80094ae:	9100      	str	r1, [sp, #0]
 80094b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80094b4:	4906      	ldr	r1, [pc, #24]	; (80094d0 <__assert_func+0x34>)
 80094b6:	462b      	mov	r3, r5
 80094b8:	f000 ff5a 	bl	800a370 <fiprintf>
 80094bc:	f001 fd4c 	bl	800af58 <abort>
 80094c0:	4b04      	ldr	r3, [pc, #16]	; (80094d4 <__assert_func+0x38>)
 80094c2:	461c      	mov	r4, r3
 80094c4:	e7f3      	b.n	80094ae <__assert_func+0x12>
 80094c6:	bf00      	nop
 80094c8:	20000054 	.word	0x20000054
 80094cc:	0800b234 	.word	0x0800b234
 80094d0:	0800b241 	.word	0x0800b241
 80094d4:	0800b26f 	.word	0x0800b26f

080094d8 <_close_r>:
 80094d8:	b538      	push	{r3, r4, r5, lr}
 80094da:	4d06      	ldr	r5, [pc, #24]	; (80094f4 <_close_r+0x1c>)
 80094dc:	2300      	movs	r3, #0
 80094de:	4604      	mov	r4, r0
 80094e0:	4608      	mov	r0, r1
 80094e2:	602b      	str	r3, [r5, #0]
 80094e4:	f7f8 fa63 	bl	80019ae <_close>
 80094e8:	1c43      	adds	r3, r0, #1
 80094ea:	d102      	bne.n	80094f2 <_close_r+0x1a>
 80094ec:	682b      	ldr	r3, [r5, #0]
 80094ee:	b103      	cbz	r3, 80094f2 <_close_r+0x1a>
 80094f0:	6023      	str	r3, [r4, #0]
 80094f2:	bd38      	pop	{r3, r4, r5, pc}
 80094f4:	200013b4 	.word	0x200013b4

080094f8 <quorem>:
 80094f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094fc:	6903      	ldr	r3, [r0, #16]
 80094fe:	690c      	ldr	r4, [r1, #16]
 8009500:	42a3      	cmp	r3, r4
 8009502:	4607      	mov	r7, r0
 8009504:	f2c0 8081 	blt.w	800960a <quorem+0x112>
 8009508:	3c01      	subs	r4, #1
 800950a:	f101 0814 	add.w	r8, r1, #20
 800950e:	f100 0514 	add.w	r5, r0, #20
 8009512:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009516:	9301      	str	r3, [sp, #4]
 8009518:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800951c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009520:	3301      	adds	r3, #1
 8009522:	429a      	cmp	r2, r3
 8009524:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009528:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800952c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009530:	d331      	bcc.n	8009596 <quorem+0x9e>
 8009532:	f04f 0e00 	mov.w	lr, #0
 8009536:	4640      	mov	r0, r8
 8009538:	46ac      	mov	ip, r5
 800953a:	46f2      	mov	sl, lr
 800953c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009540:	b293      	uxth	r3, r2
 8009542:	fb06 e303 	mla	r3, r6, r3, lr
 8009546:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800954a:	b29b      	uxth	r3, r3
 800954c:	ebaa 0303 	sub.w	r3, sl, r3
 8009550:	f8dc a000 	ldr.w	sl, [ip]
 8009554:	0c12      	lsrs	r2, r2, #16
 8009556:	fa13 f38a 	uxtah	r3, r3, sl
 800955a:	fb06 e202 	mla	r2, r6, r2, lr
 800955e:	9300      	str	r3, [sp, #0]
 8009560:	9b00      	ldr	r3, [sp, #0]
 8009562:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009566:	b292      	uxth	r2, r2
 8009568:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800956c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009570:	f8bd 3000 	ldrh.w	r3, [sp]
 8009574:	4581      	cmp	r9, r0
 8009576:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800957a:	f84c 3b04 	str.w	r3, [ip], #4
 800957e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009582:	d2db      	bcs.n	800953c <quorem+0x44>
 8009584:	f855 300b 	ldr.w	r3, [r5, fp]
 8009588:	b92b      	cbnz	r3, 8009596 <quorem+0x9e>
 800958a:	9b01      	ldr	r3, [sp, #4]
 800958c:	3b04      	subs	r3, #4
 800958e:	429d      	cmp	r5, r3
 8009590:	461a      	mov	r2, r3
 8009592:	d32e      	bcc.n	80095f2 <quorem+0xfa>
 8009594:	613c      	str	r4, [r7, #16]
 8009596:	4638      	mov	r0, r7
 8009598:	f001 fa0e 	bl	800a9b8 <__mcmp>
 800959c:	2800      	cmp	r0, #0
 800959e:	db24      	blt.n	80095ea <quorem+0xf2>
 80095a0:	3601      	adds	r6, #1
 80095a2:	4628      	mov	r0, r5
 80095a4:	f04f 0c00 	mov.w	ip, #0
 80095a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80095ac:	f8d0 e000 	ldr.w	lr, [r0]
 80095b0:	b293      	uxth	r3, r2
 80095b2:	ebac 0303 	sub.w	r3, ip, r3
 80095b6:	0c12      	lsrs	r2, r2, #16
 80095b8:	fa13 f38e 	uxtah	r3, r3, lr
 80095bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80095c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095ca:	45c1      	cmp	r9, r8
 80095cc:	f840 3b04 	str.w	r3, [r0], #4
 80095d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80095d4:	d2e8      	bcs.n	80095a8 <quorem+0xb0>
 80095d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80095da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80095de:	b922      	cbnz	r2, 80095ea <quorem+0xf2>
 80095e0:	3b04      	subs	r3, #4
 80095e2:	429d      	cmp	r5, r3
 80095e4:	461a      	mov	r2, r3
 80095e6:	d30a      	bcc.n	80095fe <quorem+0x106>
 80095e8:	613c      	str	r4, [r7, #16]
 80095ea:	4630      	mov	r0, r6
 80095ec:	b003      	add	sp, #12
 80095ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095f2:	6812      	ldr	r2, [r2, #0]
 80095f4:	3b04      	subs	r3, #4
 80095f6:	2a00      	cmp	r2, #0
 80095f8:	d1cc      	bne.n	8009594 <quorem+0x9c>
 80095fa:	3c01      	subs	r4, #1
 80095fc:	e7c7      	b.n	800958e <quorem+0x96>
 80095fe:	6812      	ldr	r2, [r2, #0]
 8009600:	3b04      	subs	r3, #4
 8009602:	2a00      	cmp	r2, #0
 8009604:	d1f0      	bne.n	80095e8 <quorem+0xf0>
 8009606:	3c01      	subs	r4, #1
 8009608:	e7eb      	b.n	80095e2 <quorem+0xea>
 800960a:	2000      	movs	r0, #0
 800960c:	e7ee      	b.n	80095ec <quorem+0xf4>
	...

08009610 <_dtoa_r>:
 8009610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009614:	ed2d 8b04 	vpush	{d8-d9}
 8009618:	ec57 6b10 	vmov	r6, r7, d0
 800961c:	b093      	sub	sp, #76	; 0x4c
 800961e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009620:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009624:	9106      	str	r1, [sp, #24]
 8009626:	ee10 aa10 	vmov	sl, s0
 800962a:	4604      	mov	r4, r0
 800962c:	9209      	str	r2, [sp, #36]	; 0x24
 800962e:	930c      	str	r3, [sp, #48]	; 0x30
 8009630:	46bb      	mov	fp, r7
 8009632:	b975      	cbnz	r5, 8009652 <_dtoa_r+0x42>
 8009634:	2010      	movs	r0, #16
 8009636:	f000 ff29 	bl	800a48c <malloc>
 800963a:	4602      	mov	r2, r0
 800963c:	6260      	str	r0, [r4, #36]	; 0x24
 800963e:	b920      	cbnz	r0, 800964a <_dtoa_r+0x3a>
 8009640:	4ba7      	ldr	r3, [pc, #668]	; (80098e0 <_dtoa_r+0x2d0>)
 8009642:	21ea      	movs	r1, #234	; 0xea
 8009644:	48a7      	ldr	r0, [pc, #668]	; (80098e4 <_dtoa_r+0x2d4>)
 8009646:	f7ff ff29 	bl	800949c <__assert_func>
 800964a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800964e:	6005      	str	r5, [r0, #0]
 8009650:	60c5      	str	r5, [r0, #12]
 8009652:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009654:	6819      	ldr	r1, [r3, #0]
 8009656:	b151      	cbz	r1, 800966e <_dtoa_r+0x5e>
 8009658:	685a      	ldr	r2, [r3, #4]
 800965a:	604a      	str	r2, [r1, #4]
 800965c:	2301      	movs	r3, #1
 800965e:	4093      	lsls	r3, r2
 8009660:	608b      	str	r3, [r1, #8]
 8009662:	4620      	mov	r0, r4
 8009664:	f000 ff66 	bl	800a534 <_Bfree>
 8009668:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800966a:	2200      	movs	r2, #0
 800966c:	601a      	str	r2, [r3, #0]
 800966e:	1e3b      	subs	r3, r7, #0
 8009670:	bfaa      	itet	ge
 8009672:	2300      	movge	r3, #0
 8009674:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009678:	f8c8 3000 	strge.w	r3, [r8]
 800967c:	4b9a      	ldr	r3, [pc, #616]	; (80098e8 <_dtoa_r+0x2d8>)
 800967e:	bfbc      	itt	lt
 8009680:	2201      	movlt	r2, #1
 8009682:	f8c8 2000 	strlt.w	r2, [r8]
 8009686:	ea33 030b 	bics.w	r3, r3, fp
 800968a:	d11b      	bne.n	80096c4 <_dtoa_r+0xb4>
 800968c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800968e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009692:	6013      	str	r3, [r2, #0]
 8009694:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009698:	4333      	orrs	r3, r6
 800969a:	f000 8592 	beq.w	800a1c2 <_dtoa_r+0xbb2>
 800969e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096a0:	b963      	cbnz	r3, 80096bc <_dtoa_r+0xac>
 80096a2:	4b92      	ldr	r3, [pc, #584]	; (80098ec <_dtoa_r+0x2dc>)
 80096a4:	e022      	b.n	80096ec <_dtoa_r+0xdc>
 80096a6:	4b92      	ldr	r3, [pc, #584]	; (80098f0 <_dtoa_r+0x2e0>)
 80096a8:	9301      	str	r3, [sp, #4]
 80096aa:	3308      	adds	r3, #8
 80096ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80096ae:	6013      	str	r3, [r2, #0]
 80096b0:	9801      	ldr	r0, [sp, #4]
 80096b2:	b013      	add	sp, #76	; 0x4c
 80096b4:	ecbd 8b04 	vpop	{d8-d9}
 80096b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096bc:	4b8b      	ldr	r3, [pc, #556]	; (80098ec <_dtoa_r+0x2dc>)
 80096be:	9301      	str	r3, [sp, #4]
 80096c0:	3303      	adds	r3, #3
 80096c2:	e7f3      	b.n	80096ac <_dtoa_r+0x9c>
 80096c4:	2200      	movs	r2, #0
 80096c6:	2300      	movs	r3, #0
 80096c8:	4650      	mov	r0, sl
 80096ca:	4659      	mov	r1, fp
 80096cc:	f7f7 f9fc 	bl	8000ac8 <__aeabi_dcmpeq>
 80096d0:	ec4b ab19 	vmov	d9, sl, fp
 80096d4:	4680      	mov	r8, r0
 80096d6:	b158      	cbz	r0, 80096f0 <_dtoa_r+0xe0>
 80096d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80096da:	2301      	movs	r3, #1
 80096dc:	6013      	str	r3, [r2, #0]
 80096de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	f000 856b 	beq.w	800a1bc <_dtoa_r+0xbac>
 80096e6:	4883      	ldr	r0, [pc, #524]	; (80098f4 <_dtoa_r+0x2e4>)
 80096e8:	6018      	str	r0, [r3, #0]
 80096ea:	1e43      	subs	r3, r0, #1
 80096ec:	9301      	str	r3, [sp, #4]
 80096ee:	e7df      	b.n	80096b0 <_dtoa_r+0xa0>
 80096f0:	ec4b ab10 	vmov	d0, sl, fp
 80096f4:	aa10      	add	r2, sp, #64	; 0x40
 80096f6:	a911      	add	r1, sp, #68	; 0x44
 80096f8:	4620      	mov	r0, r4
 80096fa:	f001 fa03 	bl	800ab04 <__d2b>
 80096fe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009702:	ee08 0a10 	vmov	s16, r0
 8009706:	2d00      	cmp	r5, #0
 8009708:	f000 8084 	beq.w	8009814 <_dtoa_r+0x204>
 800970c:	ee19 3a90 	vmov	r3, s19
 8009710:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009714:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009718:	4656      	mov	r6, sl
 800971a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800971e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009722:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009726:	4b74      	ldr	r3, [pc, #464]	; (80098f8 <_dtoa_r+0x2e8>)
 8009728:	2200      	movs	r2, #0
 800972a:	4630      	mov	r0, r6
 800972c:	4639      	mov	r1, r7
 800972e:	f7f6 fdab 	bl	8000288 <__aeabi_dsub>
 8009732:	a365      	add	r3, pc, #404	; (adr r3, 80098c8 <_dtoa_r+0x2b8>)
 8009734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009738:	f7f6 ff5e 	bl	80005f8 <__aeabi_dmul>
 800973c:	a364      	add	r3, pc, #400	; (adr r3, 80098d0 <_dtoa_r+0x2c0>)
 800973e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009742:	f7f6 fda3 	bl	800028c <__adddf3>
 8009746:	4606      	mov	r6, r0
 8009748:	4628      	mov	r0, r5
 800974a:	460f      	mov	r7, r1
 800974c:	f7f6 feea 	bl	8000524 <__aeabi_i2d>
 8009750:	a361      	add	r3, pc, #388	; (adr r3, 80098d8 <_dtoa_r+0x2c8>)
 8009752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009756:	f7f6 ff4f 	bl	80005f8 <__aeabi_dmul>
 800975a:	4602      	mov	r2, r0
 800975c:	460b      	mov	r3, r1
 800975e:	4630      	mov	r0, r6
 8009760:	4639      	mov	r1, r7
 8009762:	f7f6 fd93 	bl	800028c <__adddf3>
 8009766:	4606      	mov	r6, r0
 8009768:	460f      	mov	r7, r1
 800976a:	f7f7 f9f5 	bl	8000b58 <__aeabi_d2iz>
 800976e:	2200      	movs	r2, #0
 8009770:	9000      	str	r0, [sp, #0]
 8009772:	2300      	movs	r3, #0
 8009774:	4630      	mov	r0, r6
 8009776:	4639      	mov	r1, r7
 8009778:	f7f7 f9b0 	bl	8000adc <__aeabi_dcmplt>
 800977c:	b150      	cbz	r0, 8009794 <_dtoa_r+0x184>
 800977e:	9800      	ldr	r0, [sp, #0]
 8009780:	f7f6 fed0 	bl	8000524 <__aeabi_i2d>
 8009784:	4632      	mov	r2, r6
 8009786:	463b      	mov	r3, r7
 8009788:	f7f7 f99e 	bl	8000ac8 <__aeabi_dcmpeq>
 800978c:	b910      	cbnz	r0, 8009794 <_dtoa_r+0x184>
 800978e:	9b00      	ldr	r3, [sp, #0]
 8009790:	3b01      	subs	r3, #1
 8009792:	9300      	str	r3, [sp, #0]
 8009794:	9b00      	ldr	r3, [sp, #0]
 8009796:	2b16      	cmp	r3, #22
 8009798:	d85a      	bhi.n	8009850 <_dtoa_r+0x240>
 800979a:	9a00      	ldr	r2, [sp, #0]
 800979c:	4b57      	ldr	r3, [pc, #348]	; (80098fc <_dtoa_r+0x2ec>)
 800979e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a6:	ec51 0b19 	vmov	r0, r1, d9
 80097aa:	f7f7 f997 	bl	8000adc <__aeabi_dcmplt>
 80097ae:	2800      	cmp	r0, #0
 80097b0:	d050      	beq.n	8009854 <_dtoa_r+0x244>
 80097b2:	9b00      	ldr	r3, [sp, #0]
 80097b4:	3b01      	subs	r3, #1
 80097b6:	9300      	str	r3, [sp, #0]
 80097b8:	2300      	movs	r3, #0
 80097ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80097bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80097be:	1b5d      	subs	r5, r3, r5
 80097c0:	1e6b      	subs	r3, r5, #1
 80097c2:	9305      	str	r3, [sp, #20]
 80097c4:	bf45      	ittet	mi
 80097c6:	f1c5 0301 	rsbmi	r3, r5, #1
 80097ca:	9304      	strmi	r3, [sp, #16]
 80097cc:	2300      	movpl	r3, #0
 80097ce:	2300      	movmi	r3, #0
 80097d0:	bf4c      	ite	mi
 80097d2:	9305      	strmi	r3, [sp, #20]
 80097d4:	9304      	strpl	r3, [sp, #16]
 80097d6:	9b00      	ldr	r3, [sp, #0]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	db3d      	blt.n	8009858 <_dtoa_r+0x248>
 80097dc:	9b05      	ldr	r3, [sp, #20]
 80097de:	9a00      	ldr	r2, [sp, #0]
 80097e0:	920a      	str	r2, [sp, #40]	; 0x28
 80097e2:	4413      	add	r3, r2
 80097e4:	9305      	str	r3, [sp, #20]
 80097e6:	2300      	movs	r3, #0
 80097e8:	9307      	str	r3, [sp, #28]
 80097ea:	9b06      	ldr	r3, [sp, #24]
 80097ec:	2b09      	cmp	r3, #9
 80097ee:	f200 8089 	bhi.w	8009904 <_dtoa_r+0x2f4>
 80097f2:	2b05      	cmp	r3, #5
 80097f4:	bfc4      	itt	gt
 80097f6:	3b04      	subgt	r3, #4
 80097f8:	9306      	strgt	r3, [sp, #24]
 80097fa:	9b06      	ldr	r3, [sp, #24]
 80097fc:	f1a3 0302 	sub.w	r3, r3, #2
 8009800:	bfcc      	ite	gt
 8009802:	2500      	movgt	r5, #0
 8009804:	2501      	movle	r5, #1
 8009806:	2b03      	cmp	r3, #3
 8009808:	f200 8087 	bhi.w	800991a <_dtoa_r+0x30a>
 800980c:	e8df f003 	tbb	[pc, r3]
 8009810:	59383a2d 	.word	0x59383a2d
 8009814:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009818:	441d      	add	r5, r3
 800981a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800981e:	2b20      	cmp	r3, #32
 8009820:	bfc1      	itttt	gt
 8009822:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009826:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800982a:	fa0b f303 	lslgt.w	r3, fp, r3
 800982e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009832:	bfda      	itte	le
 8009834:	f1c3 0320 	rsble	r3, r3, #32
 8009838:	fa06 f003 	lslle.w	r0, r6, r3
 800983c:	4318      	orrgt	r0, r3
 800983e:	f7f6 fe61 	bl	8000504 <__aeabi_ui2d>
 8009842:	2301      	movs	r3, #1
 8009844:	4606      	mov	r6, r0
 8009846:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800984a:	3d01      	subs	r5, #1
 800984c:	930e      	str	r3, [sp, #56]	; 0x38
 800984e:	e76a      	b.n	8009726 <_dtoa_r+0x116>
 8009850:	2301      	movs	r3, #1
 8009852:	e7b2      	b.n	80097ba <_dtoa_r+0x1aa>
 8009854:	900b      	str	r0, [sp, #44]	; 0x2c
 8009856:	e7b1      	b.n	80097bc <_dtoa_r+0x1ac>
 8009858:	9b04      	ldr	r3, [sp, #16]
 800985a:	9a00      	ldr	r2, [sp, #0]
 800985c:	1a9b      	subs	r3, r3, r2
 800985e:	9304      	str	r3, [sp, #16]
 8009860:	4253      	negs	r3, r2
 8009862:	9307      	str	r3, [sp, #28]
 8009864:	2300      	movs	r3, #0
 8009866:	930a      	str	r3, [sp, #40]	; 0x28
 8009868:	e7bf      	b.n	80097ea <_dtoa_r+0x1da>
 800986a:	2300      	movs	r3, #0
 800986c:	9308      	str	r3, [sp, #32]
 800986e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009870:	2b00      	cmp	r3, #0
 8009872:	dc55      	bgt.n	8009920 <_dtoa_r+0x310>
 8009874:	2301      	movs	r3, #1
 8009876:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800987a:	461a      	mov	r2, r3
 800987c:	9209      	str	r2, [sp, #36]	; 0x24
 800987e:	e00c      	b.n	800989a <_dtoa_r+0x28a>
 8009880:	2301      	movs	r3, #1
 8009882:	e7f3      	b.n	800986c <_dtoa_r+0x25c>
 8009884:	2300      	movs	r3, #0
 8009886:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009888:	9308      	str	r3, [sp, #32]
 800988a:	9b00      	ldr	r3, [sp, #0]
 800988c:	4413      	add	r3, r2
 800988e:	9302      	str	r3, [sp, #8]
 8009890:	3301      	adds	r3, #1
 8009892:	2b01      	cmp	r3, #1
 8009894:	9303      	str	r3, [sp, #12]
 8009896:	bfb8      	it	lt
 8009898:	2301      	movlt	r3, #1
 800989a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800989c:	2200      	movs	r2, #0
 800989e:	6042      	str	r2, [r0, #4]
 80098a0:	2204      	movs	r2, #4
 80098a2:	f102 0614 	add.w	r6, r2, #20
 80098a6:	429e      	cmp	r6, r3
 80098a8:	6841      	ldr	r1, [r0, #4]
 80098aa:	d93d      	bls.n	8009928 <_dtoa_r+0x318>
 80098ac:	4620      	mov	r0, r4
 80098ae:	f000 fe01 	bl	800a4b4 <_Balloc>
 80098b2:	9001      	str	r0, [sp, #4]
 80098b4:	2800      	cmp	r0, #0
 80098b6:	d13b      	bne.n	8009930 <_dtoa_r+0x320>
 80098b8:	4b11      	ldr	r3, [pc, #68]	; (8009900 <_dtoa_r+0x2f0>)
 80098ba:	4602      	mov	r2, r0
 80098bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80098c0:	e6c0      	b.n	8009644 <_dtoa_r+0x34>
 80098c2:	2301      	movs	r3, #1
 80098c4:	e7df      	b.n	8009886 <_dtoa_r+0x276>
 80098c6:	bf00      	nop
 80098c8:	636f4361 	.word	0x636f4361
 80098cc:	3fd287a7 	.word	0x3fd287a7
 80098d0:	8b60c8b3 	.word	0x8b60c8b3
 80098d4:	3fc68a28 	.word	0x3fc68a28
 80098d8:	509f79fb 	.word	0x509f79fb
 80098dc:	3fd34413 	.word	0x3fd34413
 80098e0:	0800b27d 	.word	0x0800b27d
 80098e4:	0800b294 	.word	0x0800b294
 80098e8:	7ff00000 	.word	0x7ff00000
 80098ec:	0800b279 	.word	0x0800b279
 80098f0:	0800b270 	.word	0x0800b270
 80098f4:	0800b211 	.word	0x0800b211
 80098f8:	3ff80000 	.word	0x3ff80000
 80098fc:	0800b388 	.word	0x0800b388
 8009900:	0800b2ef 	.word	0x0800b2ef
 8009904:	2501      	movs	r5, #1
 8009906:	2300      	movs	r3, #0
 8009908:	9306      	str	r3, [sp, #24]
 800990a:	9508      	str	r5, [sp, #32]
 800990c:	f04f 33ff 	mov.w	r3, #4294967295
 8009910:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009914:	2200      	movs	r2, #0
 8009916:	2312      	movs	r3, #18
 8009918:	e7b0      	b.n	800987c <_dtoa_r+0x26c>
 800991a:	2301      	movs	r3, #1
 800991c:	9308      	str	r3, [sp, #32]
 800991e:	e7f5      	b.n	800990c <_dtoa_r+0x2fc>
 8009920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009922:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009926:	e7b8      	b.n	800989a <_dtoa_r+0x28a>
 8009928:	3101      	adds	r1, #1
 800992a:	6041      	str	r1, [r0, #4]
 800992c:	0052      	lsls	r2, r2, #1
 800992e:	e7b8      	b.n	80098a2 <_dtoa_r+0x292>
 8009930:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009932:	9a01      	ldr	r2, [sp, #4]
 8009934:	601a      	str	r2, [r3, #0]
 8009936:	9b03      	ldr	r3, [sp, #12]
 8009938:	2b0e      	cmp	r3, #14
 800993a:	f200 809d 	bhi.w	8009a78 <_dtoa_r+0x468>
 800993e:	2d00      	cmp	r5, #0
 8009940:	f000 809a 	beq.w	8009a78 <_dtoa_r+0x468>
 8009944:	9b00      	ldr	r3, [sp, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	dd32      	ble.n	80099b0 <_dtoa_r+0x3a0>
 800994a:	4ab7      	ldr	r2, [pc, #732]	; (8009c28 <_dtoa_r+0x618>)
 800994c:	f003 030f 	and.w	r3, r3, #15
 8009950:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009954:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009958:	9b00      	ldr	r3, [sp, #0]
 800995a:	05d8      	lsls	r0, r3, #23
 800995c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009960:	d516      	bpl.n	8009990 <_dtoa_r+0x380>
 8009962:	4bb2      	ldr	r3, [pc, #712]	; (8009c2c <_dtoa_r+0x61c>)
 8009964:	ec51 0b19 	vmov	r0, r1, d9
 8009968:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800996c:	f7f6 ff6e 	bl	800084c <__aeabi_ddiv>
 8009970:	f007 070f 	and.w	r7, r7, #15
 8009974:	4682      	mov	sl, r0
 8009976:	468b      	mov	fp, r1
 8009978:	2503      	movs	r5, #3
 800997a:	4eac      	ldr	r6, [pc, #688]	; (8009c2c <_dtoa_r+0x61c>)
 800997c:	b957      	cbnz	r7, 8009994 <_dtoa_r+0x384>
 800997e:	4642      	mov	r2, r8
 8009980:	464b      	mov	r3, r9
 8009982:	4650      	mov	r0, sl
 8009984:	4659      	mov	r1, fp
 8009986:	f7f6 ff61 	bl	800084c <__aeabi_ddiv>
 800998a:	4682      	mov	sl, r0
 800998c:	468b      	mov	fp, r1
 800998e:	e028      	b.n	80099e2 <_dtoa_r+0x3d2>
 8009990:	2502      	movs	r5, #2
 8009992:	e7f2      	b.n	800997a <_dtoa_r+0x36a>
 8009994:	07f9      	lsls	r1, r7, #31
 8009996:	d508      	bpl.n	80099aa <_dtoa_r+0x39a>
 8009998:	4640      	mov	r0, r8
 800999a:	4649      	mov	r1, r9
 800999c:	e9d6 2300 	ldrd	r2, r3, [r6]
 80099a0:	f7f6 fe2a 	bl	80005f8 <__aeabi_dmul>
 80099a4:	3501      	adds	r5, #1
 80099a6:	4680      	mov	r8, r0
 80099a8:	4689      	mov	r9, r1
 80099aa:	107f      	asrs	r7, r7, #1
 80099ac:	3608      	adds	r6, #8
 80099ae:	e7e5      	b.n	800997c <_dtoa_r+0x36c>
 80099b0:	f000 809b 	beq.w	8009aea <_dtoa_r+0x4da>
 80099b4:	9b00      	ldr	r3, [sp, #0]
 80099b6:	4f9d      	ldr	r7, [pc, #628]	; (8009c2c <_dtoa_r+0x61c>)
 80099b8:	425e      	negs	r6, r3
 80099ba:	4b9b      	ldr	r3, [pc, #620]	; (8009c28 <_dtoa_r+0x618>)
 80099bc:	f006 020f 	and.w	r2, r6, #15
 80099c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c8:	ec51 0b19 	vmov	r0, r1, d9
 80099cc:	f7f6 fe14 	bl	80005f8 <__aeabi_dmul>
 80099d0:	1136      	asrs	r6, r6, #4
 80099d2:	4682      	mov	sl, r0
 80099d4:	468b      	mov	fp, r1
 80099d6:	2300      	movs	r3, #0
 80099d8:	2502      	movs	r5, #2
 80099da:	2e00      	cmp	r6, #0
 80099dc:	d17a      	bne.n	8009ad4 <_dtoa_r+0x4c4>
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d1d3      	bne.n	800998a <_dtoa_r+0x37a>
 80099e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	f000 8082 	beq.w	8009aee <_dtoa_r+0x4de>
 80099ea:	4b91      	ldr	r3, [pc, #580]	; (8009c30 <_dtoa_r+0x620>)
 80099ec:	2200      	movs	r2, #0
 80099ee:	4650      	mov	r0, sl
 80099f0:	4659      	mov	r1, fp
 80099f2:	f7f7 f873 	bl	8000adc <__aeabi_dcmplt>
 80099f6:	2800      	cmp	r0, #0
 80099f8:	d079      	beq.n	8009aee <_dtoa_r+0x4de>
 80099fa:	9b03      	ldr	r3, [sp, #12]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d076      	beq.n	8009aee <_dtoa_r+0x4de>
 8009a00:	9b02      	ldr	r3, [sp, #8]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	dd36      	ble.n	8009a74 <_dtoa_r+0x464>
 8009a06:	9b00      	ldr	r3, [sp, #0]
 8009a08:	4650      	mov	r0, sl
 8009a0a:	4659      	mov	r1, fp
 8009a0c:	1e5f      	subs	r7, r3, #1
 8009a0e:	2200      	movs	r2, #0
 8009a10:	4b88      	ldr	r3, [pc, #544]	; (8009c34 <_dtoa_r+0x624>)
 8009a12:	f7f6 fdf1 	bl	80005f8 <__aeabi_dmul>
 8009a16:	9e02      	ldr	r6, [sp, #8]
 8009a18:	4682      	mov	sl, r0
 8009a1a:	468b      	mov	fp, r1
 8009a1c:	3501      	adds	r5, #1
 8009a1e:	4628      	mov	r0, r5
 8009a20:	f7f6 fd80 	bl	8000524 <__aeabi_i2d>
 8009a24:	4652      	mov	r2, sl
 8009a26:	465b      	mov	r3, fp
 8009a28:	f7f6 fde6 	bl	80005f8 <__aeabi_dmul>
 8009a2c:	4b82      	ldr	r3, [pc, #520]	; (8009c38 <_dtoa_r+0x628>)
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f7f6 fc2c 	bl	800028c <__adddf3>
 8009a34:	46d0      	mov	r8, sl
 8009a36:	46d9      	mov	r9, fp
 8009a38:	4682      	mov	sl, r0
 8009a3a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009a3e:	2e00      	cmp	r6, #0
 8009a40:	d158      	bne.n	8009af4 <_dtoa_r+0x4e4>
 8009a42:	4b7e      	ldr	r3, [pc, #504]	; (8009c3c <_dtoa_r+0x62c>)
 8009a44:	2200      	movs	r2, #0
 8009a46:	4640      	mov	r0, r8
 8009a48:	4649      	mov	r1, r9
 8009a4a:	f7f6 fc1d 	bl	8000288 <__aeabi_dsub>
 8009a4e:	4652      	mov	r2, sl
 8009a50:	465b      	mov	r3, fp
 8009a52:	4680      	mov	r8, r0
 8009a54:	4689      	mov	r9, r1
 8009a56:	f7f7 f85f 	bl	8000b18 <__aeabi_dcmpgt>
 8009a5a:	2800      	cmp	r0, #0
 8009a5c:	f040 8295 	bne.w	8009f8a <_dtoa_r+0x97a>
 8009a60:	4652      	mov	r2, sl
 8009a62:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009a66:	4640      	mov	r0, r8
 8009a68:	4649      	mov	r1, r9
 8009a6a:	f7f7 f837 	bl	8000adc <__aeabi_dcmplt>
 8009a6e:	2800      	cmp	r0, #0
 8009a70:	f040 8289 	bne.w	8009f86 <_dtoa_r+0x976>
 8009a74:	ec5b ab19 	vmov	sl, fp, d9
 8009a78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	f2c0 8148 	blt.w	8009d10 <_dtoa_r+0x700>
 8009a80:	9a00      	ldr	r2, [sp, #0]
 8009a82:	2a0e      	cmp	r2, #14
 8009a84:	f300 8144 	bgt.w	8009d10 <_dtoa_r+0x700>
 8009a88:	4b67      	ldr	r3, [pc, #412]	; (8009c28 <_dtoa_r+0x618>)
 8009a8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a8e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	f280 80d5 	bge.w	8009c44 <_dtoa_r+0x634>
 8009a9a:	9b03      	ldr	r3, [sp, #12]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	f300 80d1 	bgt.w	8009c44 <_dtoa_r+0x634>
 8009aa2:	f040 826f 	bne.w	8009f84 <_dtoa_r+0x974>
 8009aa6:	4b65      	ldr	r3, [pc, #404]	; (8009c3c <_dtoa_r+0x62c>)
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	4640      	mov	r0, r8
 8009aac:	4649      	mov	r1, r9
 8009aae:	f7f6 fda3 	bl	80005f8 <__aeabi_dmul>
 8009ab2:	4652      	mov	r2, sl
 8009ab4:	465b      	mov	r3, fp
 8009ab6:	f7f7 f825 	bl	8000b04 <__aeabi_dcmpge>
 8009aba:	9e03      	ldr	r6, [sp, #12]
 8009abc:	4637      	mov	r7, r6
 8009abe:	2800      	cmp	r0, #0
 8009ac0:	f040 8245 	bne.w	8009f4e <_dtoa_r+0x93e>
 8009ac4:	9d01      	ldr	r5, [sp, #4]
 8009ac6:	2331      	movs	r3, #49	; 0x31
 8009ac8:	f805 3b01 	strb.w	r3, [r5], #1
 8009acc:	9b00      	ldr	r3, [sp, #0]
 8009ace:	3301      	adds	r3, #1
 8009ad0:	9300      	str	r3, [sp, #0]
 8009ad2:	e240      	b.n	8009f56 <_dtoa_r+0x946>
 8009ad4:	07f2      	lsls	r2, r6, #31
 8009ad6:	d505      	bpl.n	8009ae4 <_dtoa_r+0x4d4>
 8009ad8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009adc:	f7f6 fd8c 	bl	80005f8 <__aeabi_dmul>
 8009ae0:	3501      	adds	r5, #1
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	1076      	asrs	r6, r6, #1
 8009ae6:	3708      	adds	r7, #8
 8009ae8:	e777      	b.n	80099da <_dtoa_r+0x3ca>
 8009aea:	2502      	movs	r5, #2
 8009aec:	e779      	b.n	80099e2 <_dtoa_r+0x3d2>
 8009aee:	9f00      	ldr	r7, [sp, #0]
 8009af0:	9e03      	ldr	r6, [sp, #12]
 8009af2:	e794      	b.n	8009a1e <_dtoa_r+0x40e>
 8009af4:	9901      	ldr	r1, [sp, #4]
 8009af6:	4b4c      	ldr	r3, [pc, #304]	; (8009c28 <_dtoa_r+0x618>)
 8009af8:	4431      	add	r1, r6
 8009afa:	910d      	str	r1, [sp, #52]	; 0x34
 8009afc:	9908      	ldr	r1, [sp, #32]
 8009afe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009b02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009b06:	2900      	cmp	r1, #0
 8009b08:	d043      	beq.n	8009b92 <_dtoa_r+0x582>
 8009b0a:	494d      	ldr	r1, [pc, #308]	; (8009c40 <_dtoa_r+0x630>)
 8009b0c:	2000      	movs	r0, #0
 8009b0e:	f7f6 fe9d 	bl	800084c <__aeabi_ddiv>
 8009b12:	4652      	mov	r2, sl
 8009b14:	465b      	mov	r3, fp
 8009b16:	f7f6 fbb7 	bl	8000288 <__aeabi_dsub>
 8009b1a:	9d01      	ldr	r5, [sp, #4]
 8009b1c:	4682      	mov	sl, r0
 8009b1e:	468b      	mov	fp, r1
 8009b20:	4649      	mov	r1, r9
 8009b22:	4640      	mov	r0, r8
 8009b24:	f7f7 f818 	bl	8000b58 <__aeabi_d2iz>
 8009b28:	4606      	mov	r6, r0
 8009b2a:	f7f6 fcfb 	bl	8000524 <__aeabi_i2d>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	460b      	mov	r3, r1
 8009b32:	4640      	mov	r0, r8
 8009b34:	4649      	mov	r1, r9
 8009b36:	f7f6 fba7 	bl	8000288 <__aeabi_dsub>
 8009b3a:	3630      	adds	r6, #48	; 0x30
 8009b3c:	f805 6b01 	strb.w	r6, [r5], #1
 8009b40:	4652      	mov	r2, sl
 8009b42:	465b      	mov	r3, fp
 8009b44:	4680      	mov	r8, r0
 8009b46:	4689      	mov	r9, r1
 8009b48:	f7f6 ffc8 	bl	8000adc <__aeabi_dcmplt>
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	d163      	bne.n	8009c18 <_dtoa_r+0x608>
 8009b50:	4642      	mov	r2, r8
 8009b52:	464b      	mov	r3, r9
 8009b54:	4936      	ldr	r1, [pc, #216]	; (8009c30 <_dtoa_r+0x620>)
 8009b56:	2000      	movs	r0, #0
 8009b58:	f7f6 fb96 	bl	8000288 <__aeabi_dsub>
 8009b5c:	4652      	mov	r2, sl
 8009b5e:	465b      	mov	r3, fp
 8009b60:	f7f6 ffbc 	bl	8000adc <__aeabi_dcmplt>
 8009b64:	2800      	cmp	r0, #0
 8009b66:	f040 80b5 	bne.w	8009cd4 <_dtoa_r+0x6c4>
 8009b6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b6c:	429d      	cmp	r5, r3
 8009b6e:	d081      	beq.n	8009a74 <_dtoa_r+0x464>
 8009b70:	4b30      	ldr	r3, [pc, #192]	; (8009c34 <_dtoa_r+0x624>)
 8009b72:	2200      	movs	r2, #0
 8009b74:	4650      	mov	r0, sl
 8009b76:	4659      	mov	r1, fp
 8009b78:	f7f6 fd3e 	bl	80005f8 <__aeabi_dmul>
 8009b7c:	4b2d      	ldr	r3, [pc, #180]	; (8009c34 <_dtoa_r+0x624>)
 8009b7e:	4682      	mov	sl, r0
 8009b80:	468b      	mov	fp, r1
 8009b82:	4640      	mov	r0, r8
 8009b84:	4649      	mov	r1, r9
 8009b86:	2200      	movs	r2, #0
 8009b88:	f7f6 fd36 	bl	80005f8 <__aeabi_dmul>
 8009b8c:	4680      	mov	r8, r0
 8009b8e:	4689      	mov	r9, r1
 8009b90:	e7c6      	b.n	8009b20 <_dtoa_r+0x510>
 8009b92:	4650      	mov	r0, sl
 8009b94:	4659      	mov	r1, fp
 8009b96:	f7f6 fd2f 	bl	80005f8 <__aeabi_dmul>
 8009b9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b9c:	9d01      	ldr	r5, [sp, #4]
 8009b9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ba0:	4682      	mov	sl, r0
 8009ba2:	468b      	mov	fp, r1
 8009ba4:	4649      	mov	r1, r9
 8009ba6:	4640      	mov	r0, r8
 8009ba8:	f7f6 ffd6 	bl	8000b58 <__aeabi_d2iz>
 8009bac:	4606      	mov	r6, r0
 8009bae:	f7f6 fcb9 	bl	8000524 <__aeabi_i2d>
 8009bb2:	3630      	adds	r6, #48	; 0x30
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	4640      	mov	r0, r8
 8009bba:	4649      	mov	r1, r9
 8009bbc:	f7f6 fb64 	bl	8000288 <__aeabi_dsub>
 8009bc0:	f805 6b01 	strb.w	r6, [r5], #1
 8009bc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bc6:	429d      	cmp	r5, r3
 8009bc8:	4680      	mov	r8, r0
 8009bca:	4689      	mov	r9, r1
 8009bcc:	f04f 0200 	mov.w	r2, #0
 8009bd0:	d124      	bne.n	8009c1c <_dtoa_r+0x60c>
 8009bd2:	4b1b      	ldr	r3, [pc, #108]	; (8009c40 <_dtoa_r+0x630>)
 8009bd4:	4650      	mov	r0, sl
 8009bd6:	4659      	mov	r1, fp
 8009bd8:	f7f6 fb58 	bl	800028c <__adddf3>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	460b      	mov	r3, r1
 8009be0:	4640      	mov	r0, r8
 8009be2:	4649      	mov	r1, r9
 8009be4:	f7f6 ff98 	bl	8000b18 <__aeabi_dcmpgt>
 8009be8:	2800      	cmp	r0, #0
 8009bea:	d173      	bne.n	8009cd4 <_dtoa_r+0x6c4>
 8009bec:	4652      	mov	r2, sl
 8009bee:	465b      	mov	r3, fp
 8009bf0:	4913      	ldr	r1, [pc, #76]	; (8009c40 <_dtoa_r+0x630>)
 8009bf2:	2000      	movs	r0, #0
 8009bf4:	f7f6 fb48 	bl	8000288 <__aeabi_dsub>
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	460b      	mov	r3, r1
 8009bfc:	4640      	mov	r0, r8
 8009bfe:	4649      	mov	r1, r9
 8009c00:	f7f6 ff6c 	bl	8000adc <__aeabi_dcmplt>
 8009c04:	2800      	cmp	r0, #0
 8009c06:	f43f af35 	beq.w	8009a74 <_dtoa_r+0x464>
 8009c0a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009c0c:	1e6b      	subs	r3, r5, #1
 8009c0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c10:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009c14:	2b30      	cmp	r3, #48	; 0x30
 8009c16:	d0f8      	beq.n	8009c0a <_dtoa_r+0x5fa>
 8009c18:	9700      	str	r7, [sp, #0]
 8009c1a:	e049      	b.n	8009cb0 <_dtoa_r+0x6a0>
 8009c1c:	4b05      	ldr	r3, [pc, #20]	; (8009c34 <_dtoa_r+0x624>)
 8009c1e:	f7f6 fceb 	bl	80005f8 <__aeabi_dmul>
 8009c22:	4680      	mov	r8, r0
 8009c24:	4689      	mov	r9, r1
 8009c26:	e7bd      	b.n	8009ba4 <_dtoa_r+0x594>
 8009c28:	0800b388 	.word	0x0800b388
 8009c2c:	0800b360 	.word	0x0800b360
 8009c30:	3ff00000 	.word	0x3ff00000
 8009c34:	40240000 	.word	0x40240000
 8009c38:	401c0000 	.word	0x401c0000
 8009c3c:	40140000 	.word	0x40140000
 8009c40:	3fe00000 	.word	0x3fe00000
 8009c44:	9d01      	ldr	r5, [sp, #4]
 8009c46:	4656      	mov	r6, sl
 8009c48:	465f      	mov	r7, fp
 8009c4a:	4642      	mov	r2, r8
 8009c4c:	464b      	mov	r3, r9
 8009c4e:	4630      	mov	r0, r6
 8009c50:	4639      	mov	r1, r7
 8009c52:	f7f6 fdfb 	bl	800084c <__aeabi_ddiv>
 8009c56:	f7f6 ff7f 	bl	8000b58 <__aeabi_d2iz>
 8009c5a:	4682      	mov	sl, r0
 8009c5c:	f7f6 fc62 	bl	8000524 <__aeabi_i2d>
 8009c60:	4642      	mov	r2, r8
 8009c62:	464b      	mov	r3, r9
 8009c64:	f7f6 fcc8 	bl	80005f8 <__aeabi_dmul>
 8009c68:	4602      	mov	r2, r0
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	4630      	mov	r0, r6
 8009c6e:	4639      	mov	r1, r7
 8009c70:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009c74:	f7f6 fb08 	bl	8000288 <__aeabi_dsub>
 8009c78:	f805 6b01 	strb.w	r6, [r5], #1
 8009c7c:	9e01      	ldr	r6, [sp, #4]
 8009c7e:	9f03      	ldr	r7, [sp, #12]
 8009c80:	1bae      	subs	r6, r5, r6
 8009c82:	42b7      	cmp	r7, r6
 8009c84:	4602      	mov	r2, r0
 8009c86:	460b      	mov	r3, r1
 8009c88:	d135      	bne.n	8009cf6 <_dtoa_r+0x6e6>
 8009c8a:	f7f6 faff 	bl	800028c <__adddf3>
 8009c8e:	4642      	mov	r2, r8
 8009c90:	464b      	mov	r3, r9
 8009c92:	4606      	mov	r6, r0
 8009c94:	460f      	mov	r7, r1
 8009c96:	f7f6 ff3f 	bl	8000b18 <__aeabi_dcmpgt>
 8009c9a:	b9d0      	cbnz	r0, 8009cd2 <_dtoa_r+0x6c2>
 8009c9c:	4642      	mov	r2, r8
 8009c9e:	464b      	mov	r3, r9
 8009ca0:	4630      	mov	r0, r6
 8009ca2:	4639      	mov	r1, r7
 8009ca4:	f7f6 ff10 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ca8:	b110      	cbz	r0, 8009cb0 <_dtoa_r+0x6a0>
 8009caa:	f01a 0f01 	tst.w	sl, #1
 8009cae:	d110      	bne.n	8009cd2 <_dtoa_r+0x6c2>
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	ee18 1a10 	vmov	r1, s16
 8009cb6:	f000 fc3d 	bl	800a534 <_Bfree>
 8009cba:	2300      	movs	r3, #0
 8009cbc:	9800      	ldr	r0, [sp, #0]
 8009cbe:	702b      	strb	r3, [r5, #0]
 8009cc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009cc2:	3001      	adds	r0, #1
 8009cc4:	6018      	str	r0, [r3, #0]
 8009cc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	f43f acf1 	beq.w	80096b0 <_dtoa_r+0xa0>
 8009cce:	601d      	str	r5, [r3, #0]
 8009cd0:	e4ee      	b.n	80096b0 <_dtoa_r+0xa0>
 8009cd2:	9f00      	ldr	r7, [sp, #0]
 8009cd4:	462b      	mov	r3, r5
 8009cd6:	461d      	mov	r5, r3
 8009cd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009cdc:	2a39      	cmp	r2, #57	; 0x39
 8009cde:	d106      	bne.n	8009cee <_dtoa_r+0x6de>
 8009ce0:	9a01      	ldr	r2, [sp, #4]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d1f7      	bne.n	8009cd6 <_dtoa_r+0x6c6>
 8009ce6:	9901      	ldr	r1, [sp, #4]
 8009ce8:	2230      	movs	r2, #48	; 0x30
 8009cea:	3701      	adds	r7, #1
 8009cec:	700a      	strb	r2, [r1, #0]
 8009cee:	781a      	ldrb	r2, [r3, #0]
 8009cf0:	3201      	adds	r2, #1
 8009cf2:	701a      	strb	r2, [r3, #0]
 8009cf4:	e790      	b.n	8009c18 <_dtoa_r+0x608>
 8009cf6:	4ba6      	ldr	r3, [pc, #664]	; (8009f90 <_dtoa_r+0x980>)
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	f7f6 fc7d 	bl	80005f8 <__aeabi_dmul>
 8009cfe:	2200      	movs	r2, #0
 8009d00:	2300      	movs	r3, #0
 8009d02:	4606      	mov	r6, r0
 8009d04:	460f      	mov	r7, r1
 8009d06:	f7f6 fedf 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d0a:	2800      	cmp	r0, #0
 8009d0c:	d09d      	beq.n	8009c4a <_dtoa_r+0x63a>
 8009d0e:	e7cf      	b.n	8009cb0 <_dtoa_r+0x6a0>
 8009d10:	9a08      	ldr	r2, [sp, #32]
 8009d12:	2a00      	cmp	r2, #0
 8009d14:	f000 80d7 	beq.w	8009ec6 <_dtoa_r+0x8b6>
 8009d18:	9a06      	ldr	r2, [sp, #24]
 8009d1a:	2a01      	cmp	r2, #1
 8009d1c:	f300 80ba 	bgt.w	8009e94 <_dtoa_r+0x884>
 8009d20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d22:	2a00      	cmp	r2, #0
 8009d24:	f000 80b2 	beq.w	8009e8c <_dtoa_r+0x87c>
 8009d28:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009d2c:	9e07      	ldr	r6, [sp, #28]
 8009d2e:	9d04      	ldr	r5, [sp, #16]
 8009d30:	9a04      	ldr	r2, [sp, #16]
 8009d32:	441a      	add	r2, r3
 8009d34:	9204      	str	r2, [sp, #16]
 8009d36:	9a05      	ldr	r2, [sp, #20]
 8009d38:	2101      	movs	r1, #1
 8009d3a:	441a      	add	r2, r3
 8009d3c:	4620      	mov	r0, r4
 8009d3e:	9205      	str	r2, [sp, #20]
 8009d40:	f000 fcb0 	bl	800a6a4 <__i2b>
 8009d44:	4607      	mov	r7, r0
 8009d46:	2d00      	cmp	r5, #0
 8009d48:	dd0c      	ble.n	8009d64 <_dtoa_r+0x754>
 8009d4a:	9b05      	ldr	r3, [sp, #20]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	dd09      	ble.n	8009d64 <_dtoa_r+0x754>
 8009d50:	42ab      	cmp	r3, r5
 8009d52:	9a04      	ldr	r2, [sp, #16]
 8009d54:	bfa8      	it	ge
 8009d56:	462b      	movge	r3, r5
 8009d58:	1ad2      	subs	r2, r2, r3
 8009d5a:	9204      	str	r2, [sp, #16]
 8009d5c:	9a05      	ldr	r2, [sp, #20]
 8009d5e:	1aed      	subs	r5, r5, r3
 8009d60:	1ad3      	subs	r3, r2, r3
 8009d62:	9305      	str	r3, [sp, #20]
 8009d64:	9b07      	ldr	r3, [sp, #28]
 8009d66:	b31b      	cbz	r3, 8009db0 <_dtoa_r+0x7a0>
 8009d68:	9b08      	ldr	r3, [sp, #32]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	f000 80af 	beq.w	8009ece <_dtoa_r+0x8be>
 8009d70:	2e00      	cmp	r6, #0
 8009d72:	dd13      	ble.n	8009d9c <_dtoa_r+0x78c>
 8009d74:	4639      	mov	r1, r7
 8009d76:	4632      	mov	r2, r6
 8009d78:	4620      	mov	r0, r4
 8009d7a:	f000 fd53 	bl	800a824 <__pow5mult>
 8009d7e:	ee18 2a10 	vmov	r2, s16
 8009d82:	4601      	mov	r1, r0
 8009d84:	4607      	mov	r7, r0
 8009d86:	4620      	mov	r0, r4
 8009d88:	f000 fca2 	bl	800a6d0 <__multiply>
 8009d8c:	ee18 1a10 	vmov	r1, s16
 8009d90:	4680      	mov	r8, r0
 8009d92:	4620      	mov	r0, r4
 8009d94:	f000 fbce 	bl	800a534 <_Bfree>
 8009d98:	ee08 8a10 	vmov	s16, r8
 8009d9c:	9b07      	ldr	r3, [sp, #28]
 8009d9e:	1b9a      	subs	r2, r3, r6
 8009da0:	d006      	beq.n	8009db0 <_dtoa_r+0x7a0>
 8009da2:	ee18 1a10 	vmov	r1, s16
 8009da6:	4620      	mov	r0, r4
 8009da8:	f000 fd3c 	bl	800a824 <__pow5mult>
 8009dac:	ee08 0a10 	vmov	s16, r0
 8009db0:	2101      	movs	r1, #1
 8009db2:	4620      	mov	r0, r4
 8009db4:	f000 fc76 	bl	800a6a4 <__i2b>
 8009db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	4606      	mov	r6, r0
 8009dbe:	f340 8088 	ble.w	8009ed2 <_dtoa_r+0x8c2>
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	4601      	mov	r1, r0
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	f000 fd2c 	bl	800a824 <__pow5mult>
 8009dcc:	9b06      	ldr	r3, [sp, #24]
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	4606      	mov	r6, r0
 8009dd2:	f340 8081 	ble.w	8009ed8 <_dtoa_r+0x8c8>
 8009dd6:	f04f 0800 	mov.w	r8, #0
 8009dda:	6933      	ldr	r3, [r6, #16]
 8009ddc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009de0:	6918      	ldr	r0, [r3, #16]
 8009de2:	f000 fc0f 	bl	800a604 <__hi0bits>
 8009de6:	f1c0 0020 	rsb	r0, r0, #32
 8009dea:	9b05      	ldr	r3, [sp, #20]
 8009dec:	4418      	add	r0, r3
 8009dee:	f010 001f 	ands.w	r0, r0, #31
 8009df2:	f000 8092 	beq.w	8009f1a <_dtoa_r+0x90a>
 8009df6:	f1c0 0320 	rsb	r3, r0, #32
 8009dfa:	2b04      	cmp	r3, #4
 8009dfc:	f340 808a 	ble.w	8009f14 <_dtoa_r+0x904>
 8009e00:	f1c0 001c 	rsb	r0, r0, #28
 8009e04:	9b04      	ldr	r3, [sp, #16]
 8009e06:	4403      	add	r3, r0
 8009e08:	9304      	str	r3, [sp, #16]
 8009e0a:	9b05      	ldr	r3, [sp, #20]
 8009e0c:	4403      	add	r3, r0
 8009e0e:	4405      	add	r5, r0
 8009e10:	9305      	str	r3, [sp, #20]
 8009e12:	9b04      	ldr	r3, [sp, #16]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	dd07      	ble.n	8009e28 <_dtoa_r+0x818>
 8009e18:	ee18 1a10 	vmov	r1, s16
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	4620      	mov	r0, r4
 8009e20:	f000 fd5a 	bl	800a8d8 <__lshift>
 8009e24:	ee08 0a10 	vmov	s16, r0
 8009e28:	9b05      	ldr	r3, [sp, #20]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	dd05      	ble.n	8009e3a <_dtoa_r+0x82a>
 8009e2e:	4631      	mov	r1, r6
 8009e30:	461a      	mov	r2, r3
 8009e32:	4620      	mov	r0, r4
 8009e34:	f000 fd50 	bl	800a8d8 <__lshift>
 8009e38:	4606      	mov	r6, r0
 8009e3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d06e      	beq.n	8009f1e <_dtoa_r+0x90e>
 8009e40:	ee18 0a10 	vmov	r0, s16
 8009e44:	4631      	mov	r1, r6
 8009e46:	f000 fdb7 	bl	800a9b8 <__mcmp>
 8009e4a:	2800      	cmp	r0, #0
 8009e4c:	da67      	bge.n	8009f1e <_dtoa_r+0x90e>
 8009e4e:	9b00      	ldr	r3, [sp, #0]
 8009e50:	3b01      	subs	r3, #1
 8009e52:	ee18 1a10 	vmov	r1, s16
 8009e56:	9300      	str	r3, [sp, #0]
 8009e58:	220a      	movs	r2, #10
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	4620      	mov	r0, r4
 8009e5e:	f000 fb8b 	bl	800a578 <__multadd>
 8009e62:	9b08      	ldr	r3, [sp, #32]
 8009e64:	ee08 0a10 	vmov	s16, r0
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	f000 81b1 	beq.w	800a1d0 <_dtoa_r+0xbc0>
 8009e6e:	2300      	movs	r3, #0
 8009e70:	4639      	mov	r1, r7
 8009e72:	220a      	movs	r2, #10
 8009e74:	4620      	mov	r0, r4
 8009e76:	f000 fb7f 	bl	800a578 <__multadd>
 8009e7a:	9b02      	ldr	r3, [sp, #8]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	4607      	mov	r7, r0
 8009e80:	f300 808e 	bgt.w	8009fa0 <_dtoa_r+0x990>
 8009e84:	9b06      	ldr	r3, [sp, #24]
 8009e86:	2b02      	cmp	r3, #2
 8009e88:	dc51      	bgt.n	8009f2e <_dtoa_r+0x91e>
 8009e8a:	e089      	b.n	8009fa0 <_dtoa_r+0x990>
 8009e8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009e92:	e74b      	b.n	8009d2c <_dtoa_r+0x71c>
 8009e94:	9b03      	ldr	r3, [sp, #12]
 8009e96:	1e5e      	subs	r6, r3, #1
 8009e98:	9b07      	ldr	r3, [sp, #28]
 8009e9a:	42b3      	cmp	r3, r6
 8009e9c:	bfbf      	itttt	lt
 8009e9e:	9b07      	ldrlt	r3, [sp, #28]
 8009ea0:	9607      	strlt	r6, [sp, #28]
 8009ea2:	1af2      	sublt	r2, r6, r3
 8009ea4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009ea6:	bfb6      	itet	lt
 8009ea8:	189b      	addlt	r3, r3, r2
 8009eaa:	1b9e      	subge	r6, r3, r6
 8009eac:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009eae:	9b03      	ldr	r3, [sp, #12]
 8009eb0:	bfb8      	it	lt
 8009eb2:	2600      	movlt	r6, #0
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	bfb7      	itett	lt
 8009eb8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009ebc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009ec0:	1a9d      	sublt	r5, r3, r2
 8009ec2:	2300      	movlt	r3, #0
 8009ec4:	e734      	b.n	8009d30 <_dtoa_r+0x720>
 8009ec6:	9e07      	ldr	r6, [sp, #28]
 8009ec8:	9d04      	ldr	r5, [sp, #16]
 8009eca:	9f08      	ldr	r7, [sp, #32]
 8009ecc:	e73b      	b.n	8009d46 <_dtoa_r+0x736>
 8009ece:	9a07      	ldr	r2, [sp, #28]
 8009ed0:	e767      	b.n	8009da2 <_dtoa_r+0x792>
 8009ed2:	9b06      	ldr	r3, [sp, #24]
 8009ed4:	2b01      	cmp	r3, #1
 8009ed6:	dc18      	bgt.n	8009f0a <_dtoa_r+0x8fa>
 8009ed8:	f1ba 0f00 	cmp.w	sl, #0
 8009edc:	d115      	bne.n	8009f0a <_dtoa_r+0x8fa>
 8009ede:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ee2:	b993      	cbnz	r3, 8009f0a <_dtoa_r+0x8fa>
 8009ee4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009ee8:	0d1b      	lsrs	r3, r3, #20
 8009eea:	051b      	lsls	r3, r3, #20
 8009eec:	b183      	cbz	r3, 8009f10 <_dtoa_r+0x900>
 8009eee:	9b04      	ldr	r3, [sp, #16]
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	9304      	str	r3, [sp, #16]
 8009ef4:	9b05      	ldr	r3, [sp, #20]
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	9305      	str	r3, [sp, #20]
 8009efa:	f04f 0801 	mov.w	r8, #1
 8009efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	f47f af6a 	bne.w	8009dda <_dtoa_r+0x7ca>
 8009f06:	2001      	movs	r0, #1
 8009f08:	e76f      	b.n	8009dea <_dtoa_r+0x7da>
 8009f0a:	f04f 0800 	mov.w	r8, #0
 8009f0e:	e7f6      	b.n	8009efe <_dtoa_r+0x8ee>
 8009f10:	4698      	mov	r8, r3
 8009f12:	e7f4      	b.n	8009efe <_dtoa_r+0x8ee>
 8009f14:	f43f af7d 	beq.w	8009e12 <_dtoa_r+0x802>
 8009f18:	4618      	mov	r0, r3
 8009f1a:	301c      	adds	r0, #28
 8009f1c:	e772      	b.n	8009e04 <_dtoa_r+0x7f4>
 8009f1e:	9b03      	ldr	r3, [sp, #12]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	dc37      	bgt.n	8009f94 <_dtoa_r+0x984>
 8009f24:	9b06      	ldr	r3, [sp, #24]
 8009f26:	2b02      	cmp	r3, #2
 8009f28:	dd34      	ble.n	8009f94 <_dtoa_r+0x984>
 8009f2a:	9b03      	ldr	r3, [sp, #12]
 8009f2c:	9302      	str	r3, [sp, #8]
 8009f2e:	9b02      	ldr	r3, [sp, #8]
 8009f30:	b96b      	cbnz	r3, 8009f4e <_dtoa_r+0x93e>
 8009f32:	4631      	mov	r1, r6
 8009f34:	2205      	movs	r2, #5
 8009f36:	4620      	mov	r0, r4
 8009f38:	f000 fb1e 	bl	800a578 <__multadd>
 8009f3c:	4601      	mov	r1, r0
 8009f3e:	4606      	mov	r6, r0
 8009f40:	ee18 0a10 	vmov	r0, s16
 8009f44:	f000 fd38 	bl	800a9b8 <__mcmp>
 8009f48:	2800      	cmp	r0, #0
 8009f4a:	f73f adbb 	bgt.w	8009ac4 <_dtoa_r+0x4b4>
 8009f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f50:	9d01      	ldr	r5, [sp, #4]
 8009f52:	43db      	mvns	r3, r3
 8009f54:	9300      	str	r3, [sp, #0]
 8009f56:	f04f 0800 	mov.w	r8, #0
 8009f5a:	4631      	mov	r1, r6
 8009f5c:	4620      	mov	r0, r4
 8009f5e:	f000 fae9 	bl	800a534 <_Bfree>
 8009f62:	2f00      	cmp	r7, #0
 8009f64:	f43f aea4 	beq.w	8009cb0 <_dtoa_r+0x6a0>
 8009f68:	f1b8 0f00 	cmp.w	r8, #0
 8009f6c:	d005      	beq.n	8009f7a <_dtoa_r+0x96a>
 8009f6e:	45b8      	cmp	r8, r7
 8009f70:	d003      	beq.n	8009f7a <_dtoa_r+0x96a>
 8009f72:	4641      	mov	r1, r8
 8009f74:	4620      	mov	r0, r4
 8009f76:	f000 fadd 	bl	800a534 <_Bfree>
 8009f7a:	4639      	mov	r1, r7
 8009f7c:	4620      	mov	r0, r4
 8009f7e:	f000 fad9 	bl	800a534 <_Bfree>
 8009f82:	e695      	b.n	8009cb0 <_dtoa_r+0x6a0>
 8009f84:	2600      	movs	r6, #0
 8009f86:	4637      	mov	r7, r6
 8009f88:	e7e1      	b.n	8009f4e <_dtoa_r+0x93e>
 8009f8a:	9700      	str	r7, [sp, #0]
 8009f8c:	4637      	mov	r7, r6
 8009f8e:	e599      	b.n	8009ac4 <_dtoa_r+0x4b4>
 8009f90:	40240000 	.word	0x40240000
 8009f94:	9b08      	ldr	r3, [sp, #32]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	f000 80ca 	beq.w	800a130 <_dtoa_r+0xb20>
 8009f9c:	9b03      	ldr	r3, [sp, #12]
 8009f9e:	9302      	str	r3, [sp, #8]
 8009fa0:	2d00      	cmp	r5, #0
 8009fa2:	dd05      	ble.n	8009fb0 <_dtoa_r+0x9a0>
 8009fa4:	4639      	mov	r1, r7
 8009fa6:	462a      	mov	r2, r5
 8009fa8:	4620      	mov	r0, r4
 8009faa:	f000 fc95 	bl	800a8d8 <__lshift>
 8009fae:	4607      	mov	r7, r0
 8009fb0:	f1b8 0f00 	cmp.w	r8, #0
 8009fb4:	d05b      	beq.n	800a06e <_dtoa_r+0xa5e>
 8009fb6:	6879      	ldr	r1, [r7, #4]
 8009fb8:	4620      	mov	r0, r4
 8009fba:	f000 fa7b 	bl	800a4b4 <_Balloc>
 8009fbe:	4605      	mov	r5, r0
 8009fc0:	b928      	cbnz	r0, 8009fce <_dtoa_r+0x9be>
 8009fc2:	4b87      	ldr	r3, [pc, #540]	; (800a1e0 <_dtoa_r+0xbd0>)
 8009fc4:	4602      	mov	r2, r0
 8009fc6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009fca:	f7ff bb3b 	b.w	8009644 <_dtoa_r+0x34>
 8009fce:	693a      	ldr	r2, [r7, #16]
 8009fd0:	3202      	adds	r2, #2
 8009fd2:	0092      	lsls	r2, r2, #2
 8009fd4:	f107 010c 	add.w	r1, r7, #12
 8009fd8:	300c      	adds	r0, #12
 8009fda:	f7fe fba2 	bl	8008722 <memcpy>
 8009fde:	2201      	movs	r2, #1
 8009fe0:	4629      	mov	r1, r5
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	f000 fc78 	bl	800a8d8 <__lshift>
 8009fe8:	9b01      	ldr	r3, [sp, #4]
 8009fea:	f103 0901 	add.w	r9, r3, #1
 8009fee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	9305      	str	r3, [sp, #20]
 8009ff6:	f00a 0301 	and.w	r3, sl, #1
 8009ffa:	46b8      	mov	r8, r7
 8009ffc:	9304      	str	r3, [sp, #16]
 8009ffe:	4607      	mov	r7, r0
 800a000:	4631      	mov	r1, r6
 800a002:	ee18 0a10 	vmov	r0, s16
 800a006:	f7ff fa77 	bl	80094f8 <quorem>
 800a00a:	4641      	mov	r1, r8
 800a00c:	9002      	str	r0, [sp, #8]
 800a00e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a012:	ee18 0a10 	vmov	r0, s16
 800a016:	f000 fccf 	bl	800a9b8 <__mcmp>
 800a01a:	463a      	mov	r2, r7
 800a01c:	9003      	str	r0, [sp, #12]
 800a01e:	4631      	mov	r1, r6
 800a020:	4620      	mov	r0, r4
 800a022:	f000 fce5 	bl	800a9f0 <__mdiff>
 800a026:	68c2      	ldr	r2, [r0, #12]
 800a028:	f109 3bff 	add.w	fp, r9, #4294967295
 800a02c:	4605      	mov	r5, r0
 800a02e:	bb02      	cbnz	r2, 800a072 <_dtoa_r+0xa62>
 800a030:	4601      	mov	r1, r0
 800a032:	ee18 0a10 	vmov	r0, s16
 800a036:	f000 fcbf 	bl	800a9b8 <__mcmp>
 800a03a:	4602      	mov	r2, r0
 800a03c:	4629      	mov	r1, r5
 800a03e:	4620      	mov	r0, r4
 800a040:	9207      	str	r2, [sp, #28]
 800a042:	f000 fa77 	bl	800a534 <_Bfree>
 800a046:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a04a:	ea43 0102 	orr.w	r1, r3, r2
 800a04e:	9b04      	ldr	r3, [sp, #16]
 800a050:	430b      	orrs	r3, r1
 800a052:	464d      	mov	r5, r9
 800a054:	d10f      	bne.n	800a076 <_dtoa_r+0xa66>
 800a056:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a05a:	d02a      	beq.n	800a0b2 <_dtoa_r+0xaa2>
 800a05c:	9b03      	ldr	r3, [sp, #12]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	dd02      	ble.n	800a068 <_dtoa_r+0xa58>
 800a062:	9b02      	ldr	r3, [sp, #8]
 800a064:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a068:	f88b a000 	strb.w	sl, [fp]
 800a06c:	e775      	b.n	8009f5a <_dtoa_r+0x94a>
 800a06e:	4638      	mov	r0, r7
 800a070:	e7ba      	b.n	8009fe8 <_dtoa_r+0x9d8>
 800a072:	2201      	movs	r2, #1
 800a074:	e7e2      	b.n	800a03c <_dtoa_r+0xa2c>
 800a076:	9b03      	ldr	r3, [sp, #12]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	db04      	blt.n	800a086 <_dtoa_r+0xa76>
 800a07c:	9906      	ldr	r1, [sp, #24]
 800a07e:	430b      	orrs	r3, r1
 800a080:	9904      	ldr	r1, [sp, #16]
 800a082:	430b      	orrs	r3, r1
 800a084:	d122      	bne.n	800a0cc <_dtoa_r+0xabc>
 800a086:	2a00      	cmp	r2, #0
 800a088:	ddee      	ble.n	800a068 <_dtoa_r+0xa58>
 800a08a:	ee18 1a10 	vmov	r1, s16
 800a08e:	2201      	movs	r2, #1
 800a090:	4620      	mov	r0, r4
 800a092:	f000 fc21 	bl	800a8d8 <__lshift>
 800a096:	4631      	mov	r1, r6
 800a098:	ee08 0a10 	vmov	s16, r0
 800a09c:	f000 fc8c 	bl	800a9b8 <__mcmp>
 800a0a0:	2800      	cmp	r0, #0
 800a0a2:	dc03      	bgt.n	800a0ac <_dtoa_r+0xa9c>
 800a0a4:	d1e0      	bne.n	800a068 <_dtoa_r+0xa58>
 800a0a6:	f01a 0f01 	tst.w	sl, #1
 800a0aa:	d0dd      	beq.n	800a068 <_dtoa_r+0xa58>
 800a0ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a0b0:	d1d7      	bne.n	800a062 <_dtoa_r+0xa52>
 800a0b2:	2339      	movs	r3, #57	; 0x39
 800a0b4:	f88b 3000 	strb.w	r3, [fp]
 800a0b8:	462b      	mov	r3, r5
 800a0ba:	461d      	mov	r5, r3
 800a0bc:	3b01      	subs	r3, #1
 800a0be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a0c2:	2a39      	cmp	r2, #57	; 0x39
 800a0c4:	d071      	beq.n	800a1aa <_dtoa_r+0xb9a>
 800a0c6:	3201      	adds	r2, #1
 800a0c8:	701a      	strb	r2, [r3, #0]
 800a0ca:	e746      	b.n	8009f5a <_dtoa_r+0x94a>
 800a0cc:	2a00      	cmp	r2, #0
 800a0ce:	dd07      	ble.n	800a0e0 <_dtoa_r+0xad0>
 800a0d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a0d4:	d0ed      	beq.n	800a0b2 <_dtoa_r+0xaa2>
 800a0d6:	f10a 0301 	add.w	r3, sl, #1
 800a0da:	f88b 3000 	strb.w	r3, [fp]
 800a0de:	e73c      	b.n	8009f5a <_dtoa_r+0x94a>
 800a0e0:	9b05      	ldr	r3, [sp, #20]
 800a0e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a0e6:	4599      	cmp	r9, r3
 800a0e8:	d047      	beq.n	800a17a <_dtoa_r+0xb6a>
 800a0ea:	ee18 1a10 	vmov	r1, s16
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	220a      	movs	r2, #10
 800a0f2:	4620      	mov	r0, r4
 800a0f4:	f000 fa40 	bl	800a578 <__multadd>
 800a0f8:	45b8      	cmp	r8, r7
 800a0fa:	ee08 0a10 	vmov	s16, r0
 800a0fe:	f04f 0300 	mov.w	r3, #0
 800a102:	f04f 020a 	mov.w	r2, #10
 800a106:	4641      	mov	r1, r8
 800a108:	4620      	mov	r0, r4
 800a10a:	d106      	bne.n	800a11a <_dtoa_r+0xb0a>
 800a10c:	f000 fa34 	bl	800a578 <__multadd>
 800a110:	4680      	mov	r8, r0
 800a112:	4607      	mov	r7, r0
 800a114:	f109 0901 	add.w	r9, r9, #1
 800a118:	e772      	b.n	800a000 <_dtoa_r+0x9f0>
 800a11a:	f000 fa2d 	bl	800a578 <__multadd>
 800a11e:	4639      	mov	r1, r7
 800a120:	4680      	mov	r8, r0
 800a122:	2300      	movs	r3, #0
 800a124:	220a      	movs	r2, #10
 800a126:	4620      	mov	r0, r4
 800a128:	f000 fa26 	bl	800a578 <__multadd>
 800a12c:	4607      	mov	r7, r0
 800a12e:	e7f1      	b.n	800a114 <_dtoa_r+0xb04>
 800a130:	9b03      	ldr	r3, [sp, #12]
 800a132:	9302      	str	r3, [sp, #8]
 800a134:	9d01      	ldr	r5, [sp, #4]
 800a136:	ee18 0a10 	vmov	r0, s16
 800a13a:	4631      	mov	r1, r6
 800a13c:	f7ff f9dc 	bl	80094f8 <quorem>
 800a140:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a144:	9b01      	ldr	r3, [sp, #4]
 800a146:	f805 ab01 	strb.w	sl, [r5], #1
 800a14a:	1aea      	subs	r2, r5, r3
 800a14c:	9b02      	ldr	r3, [sp, #8]
 800a14e:	4293      	cmp	r3, r2
 800a150:	dd09      	ble.n	800a166 <_dtoa_r+0xb56>
 800a152:	ee18 1a10 	vmov	r1, s16
 800a156:	2300      	movs	r3, #0
 800a158:	220a      	movs	r2, #10
 800a15a:	4620      	mov	r0, r4
 800a15c:	f000 fa0c 	bl	800a578 <__multadd>
 800a160:	ee08 0a10 	vmov	s16, r0
 800a164:	e7e7      	b.n	800a136 <_dtoa_r+0xb26>
 800a166:	9b02      	ldr	r3, [sp, #8]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	bfc8      	it	gt
 800a16c:	461d      	movgt	r5, r3
 800a16e:	9b01      	ldr	r3, [sp, #4]
 800a170:	bfd8      	it	le
 800a172:	2501      	movle	r5, #1
 800a174:	441d      	add	r5, r3
 800a176:	f04f 0800 	mov.w	r8, #0
 800a17a:	ee18 1a10 	vmov	r1, s16
 800a17e:	2201      	movs	r2, #1
 800a180:	4620      	mov	r0, r4
 800a182:	f000 fba9 	bl	800a8d8 <__lshift>
 800a186:	4631      	mov	r1, r6
 800a188:	ee08 0a10 	vmov	s16, r0
 800a18c:	f000 fc14 	bl	800a9b8 <__mcmp>
 800a190:	2800      	cmp	r0, #0
 800a192:	dc91      	bgt.n	800a0b8 <_dtoa_r+0xaa8>
 800a194:	d102      	bne.n	800a19c <_dtoa_r+0xb8c>
 800a196:	f01a 0f01 	tst.w	sl, #1
 800a19a:	d18d      	bne.n	800a0b8 <_dtoa_r+0xaa8>
 800a19c:	462b      	mov	r3, r5
 800a19e:	461d      	mov	r5, r3
 800a1a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a1a4:	2a30      	cmp	r2, #48	; 0x30
 800a1a6:	d0fa      	beq.n	800a19e <_dtoa_r+0xb8e>
 800a1a8:	e6d7      	b.n	8009f5a <_dtoa_r+0x94a>
 800a1aa:	9a01      	ldr	r2, [sp, #4]
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	d184      	bne.n	800a0ba <_dtoa_r+0xaaa>
 800a1b0:	9b00      	ldr	r3, [sp, #0]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	9300      	str	r3, [sp, #0]
 800a1b6:	2331      	movs	r3, #49	; 0x31
 800a1b8:	7013      	strb	r3, [r2, #0]
 800a1ba:	e6ce      	b.n	8009f5a <_dtoa_r+0x94a>
 800a1bc:	4b09      	ldr	r3, [pc, #36]	; (800a1e4 <_dtoa_r+0xbd4>)
 800a1be:	f7ff ba95 	b.w	80096ec <_dtoa_r+0xdc>
 800a1c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	f47f aa6e 	bne.w	80096a6 <_dtoa_r+0x96>
 800a1ca:	4b07      	ldr	r3, [pc, #28]	; (800a1e8 <_dtoa_r+0xbd8>)
 800a1cc:	f7ff ba8e 	b.w	80096ec <_dtoa_r+0xdc>
 800a1d0:	9b02      	ldr	r3, [sp, #8]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	dcae      	bgt.n	800a134 <_dtoa_r+0xb24>
 800a1d6:	9b06      	ldr	r3, [sp, #24]
 800a1d8:	2b02      	cmp	r3, #2
 800a1da:	f73f aea8 	bgt.w	8009f2e <_dtoa_r+0x91e>
 800a1de:	e7a9      	b.n	800a134 <_dtoa_r+0xb24>
 800a1e0:	0800b2ef 	.word	0x0800b2ef
 800a1e4:	0800b210 	.word	0x0800b210
 800a1e8:	0800b270 	.word	0x0800b270

0800a1ec <__sflush_r>:
 800a1ec:	898a      	ldrh	r2, [r1, #12]
 800a1ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1f2:	4605      	mov	r5, r0
 800a1f4:	0710      	lsls	r0, r2, #28
 800a1f6:	460c      	mov	r4, r1
 800a1f8:	d458      	bmi.n	800a2ac <__sflush_r+0xc0>
 800a1fa:	684b      	ldr	r3, [r1, #4]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	dc05      	bgt.n	800a20c <__sflush_r+0x20>
 800a200:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a202:	2b00      	cmp	r3, #0
 800a204:	dc02      	bgt.n	800a20c <__sflush_r+0x20>
 800a206:	2000      	movs	r0, #0
 800a208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a20c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a20e:	2e00      	cmp	r6, #0
 800a210:	d0f9      	beq.n	800a206 <__sflush_r+0x1a>
 800a212:	2300      	movs	r3, #0
 800a214:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a218:	682f      	ldr	r7, [r5, #0]
 800a21a:	602b      	str	r3, [r5, #0]
 800a21c:	d032      	beq.n	800a284 <__sflush_r+0x98>
 800a21e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a220:	89a3      	ldrh	r3, [r4, #12]
 800a222:	075a      	lsls	r2, r3, #29
 800a224:	d505      	bpl.n	800a232 <__sflush_r+0x46>
 800a226:	6863      	ldr	r3, [r4, #4]
 800a228:	1ac0      	subs	r0, r0, r3
 800a22a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a22c:	b10b      	cbz	r3, 800a232 <__sflush_r+0x46>
 800a22e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a230:	1ac0      	subs	r0, r0, r3
 800a232:	2300      	movs	r3, #0
 800a234:	4602      	mov	r2, r0
 800a236:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a238:	6a21      	ldr	r1, [r4, #32]
 800a23a:	4628      	mov	r0, r5
 800a23c:	47b0      	blx	r6
 800a23e:	1c43      	adds	r3, r0, #1
 800a240:	89a3      	ldrh	r3, [r4, #12]
 800a242:	d106      	bne.n	800a252 <__sflush_r+0x66>
 800a244:	6829      	ldr	r1, [r5, #0]
 800a246:	291d      	cmp	r1, #29
 800a248:	d82c      	bhi.n	800a2a4 <__sflush_r+0xb8>
 800a24a:	4a2a      	ldr	r2, [pc, #168]	; (800a2f4 <__sflush_r+0x108>)
 800a24c:	40ca      	lsrs	r2, r1
 800a24e:	07d6      	lsls	r6, r2, #31
 800a250:	d528      	bpl.n	800a2a4 <__sflush_r+0xb8>
 800a252:	2200      	movs	r2, #0
 800a254:	6062      	str	r2, [r4, #4]
 800a256:	04d9      	lsls	r1, r3, #19
 800a258:	6922      	ldr	r2, [r4, #16]
 800a25a:	6022      	str	r2, [r4, #0]
 800a25c:	d504      	bpl.n	800a268 <__sflush_r+0x7c>
 800a25e:	1c42      	adds	r2, r0, #1
 800a260:	d101      	bne.n	800a266 <__sflush_r+0x7a>
 800a262:	682b      	ldr	r3, [r5, #0]
 800a264:	b903      	cbnz	r3, 800a268 <__sflush_r+0x7c>
 800a266:	6560      	str	r0, [r4, #84]	; 0x54
 800a268:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a26a:	602f      	str	r7, [r5, #0]
 800a26c:	2900      	cmp	r1, #0
 800a26e:	d0ca      	beq.n	800a206 <__sflush_r+0x1a>
 800a270:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a274:	4299      	cmp	r1, r3
 800a276:	d002      	beq.n	800a27e <__sflush_r+0x92>
 800a278:	4628      	mov	r0, r5
 800a27a:	f000 fcb5 	bl	800abe8 <_free_r>
 800a27e:	2000      	movs	r0, #0
 800a280:	6360      	str	r0, [r4, #52]	; 0x34
 800a282:	e7c1      	b.n	800a208 <__sflush_r+0x1c>
 800a284:	6a21      	ldr	r1, [r4, #32]
 800a286:	2301      	movs	r3, #1
 800a288:	4628      	mov	r0, r5
 800a28a:	47b0      	blx	r6
 800a28c:	1c41      	adds	r1, r0, #1
 800a28e:	d1c7      	bne.n	800a220 <__sflush_r+0x34>
 800a290:	682b      	ldr	r3, [r5, #0]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d0c4      	beq.n	800a220 <__sflush_r+0x34>
 800a296:	2b1d      	cmp	r3, #29
 800a298:	d001      	beq.n	800a29e <__sflush_r+0xb2>
 800a29a:	2b16      	cmp	r3, #22
 800a29c:	d101      	bne.n	800a2a2 <__sflush_r+0xb6>
 800a29e:	602f      	str	r7, [r5, #0]
 800a2a0:	e7b1      	b.n	800a206 <__sflush_r+0x1a>
 800a2a2:	89a3      	ldrh	r3, [r4, #12]
 800a2a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2a8:	81a3      	strh	r3, [r4, #12]
 800a2aa:	e7ad      	b.n	800a208 <__sflush_r+0x1c>
 800a2ac:	690f      	ldr	r7, [r1, #16]
 800a2ae:	2f00      	cmp	r7, #0
 800a2b0:	d0a9      	beq.n	800a206 <__sflush_r+0x1a>
 800a2b2:	0793      	lsls	r3, r2, #30
 800a2b4:	680e      	ldr	r6, [r1, #0]
 800a2b6:	bf08      	it	eq
 800a2b8:	694b      	ldreq	r3, [r1, #20]
 800a2ba:	600f      	str	r7, [r1, #0]
 800a2bc:	bf18      	it	ne
 800a2be:	2300      	movne	r3, #0
 800a2c0:	eba6 0807 	sub.w	r8, r6, r7
 800a2c4:	608b      	str	r3, [r1, #8]
 800a2c6:	f1b8 0f00 	cmp.w	r8, #0
 800a2ca:	dd9c      	ble.n	800a206 <__sflush_r+0x1a>
 800a2cc:	6a21      	ldr	r1, [r4, #32]
 800a2ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a2d0:	4643      	mov	r3, r8
 800a2d2:	463a      	mov	r2, r7
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	47b0      	blx	r6
 800a2d8:	2800      	cmp	r0, #0
 800a2da:	dc06      	bgt.n	800a2ea <__sflush_r+0xfe>
 800a2dc:	89a3      	ldrh	r3, [r4, #12]
 800a2de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2e2:	81a3      	strh	r3, [r4, #12]
 800a2e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2e8:	e78e      	b.n	800a208 <__sflush_r+0x1c>
 800a2ea:	4407      	add	r7, r0
 800a2ec:	eba8 0800 	sub.w	r8, r8, r0
 800a2f0:	e7e9      	b.n	800a2c6 <__sflush_r+0xda>
 800a2f2:	bf00      	nop
 800a2f4:	20400001 	.word	0x20400001

0800a2f8 <_fflush_r>:
 800a2f8:	b538      	push	{r3, r4, r5, lr}
 800a2fa:	690b      	ldr	r3, [r1, #16]
 800a2fc:	4605      	mov	r5, r0
 800a2fe:	460c      	mov	r4, r1
 800a300:	b913      	cbnz	r3, 800a308 <_fflush_r+0x10>
 800a302:	2500      	movs	r5, #0
 800a304:	4628      	mov	r0, r5
 800a306:	bd38      	pop	{r3, r4, r5, pc}
 800a308:	b118      	cbz	r0, 800a312 <_fflush_r+0x1a>
 800a30a:	6983      	ldr	r3, [r0, #24]
 800a30c:	b90b      	cbnz	r3, 800a312 <_fflush_r+0x1a>
 800a30e:	f7fe f943 	bl	8008598 <__sinit>
 800a312:	4b14      	ldr	r3, [pc, #80]	; (800a364 <_fflush_r+0x6c>)
 800a314:	429c      	cmp	r4, r3
 800a316:	d11b      	bne.n	800a350 <_fflush_r+0x58>
 800a318:	686c      	ldr	r4, [r5, #4]
 800a31a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d0ef      	beq.n	800a302 <_fflush_r+0xa>
 800a322:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a324:	07d0      	lsls	r0, r2, #31
 800a326:	d404      	bmi.n	800a332 <_fflush_r+0x3a>
 800a328:	0599      	lsls	r1, r3, #22
 800a32a:	d402      	bmi.n	800a332 <_fflush_r+0x3a>
 800a32c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a32e:	f7fe f9f6 	bl	800871e <__retarget_lock_acquire_recursive>
 800a332:	4628      	mov	r0, r5
 800a334:	4621      	mov	r1, r4
 800a336:	f7ff ff59 	bl	800a1ec <__sflush_r>
 800a33a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a33c:	07da      	lsls	r2, r3, #31
 800a33e:	4605      	mov	r5, r0
 800a340:	d4e0      	bmi.n	800a304 <_fflush_r+0xc>
 800a342:	89a3      	ldrh	r3, [r4, #12]
 800a344:	059b      	lsls	r3, r3, #22
 800a346:	d4dd      	bmi.n	800a304 <_fflush_r+0xc>
 800a348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a34a:	f7fe f9e9 	bl	8008720 <__retarget_lock_release_recursive>
 800a34e:	e7d9      	b.n	800a304 <_fflush_r+0xc>
 800a350:	4b05      	ldr	r3, [pc, #20]	; (800a368 <_fflush_r+0x70>)
 800a352:	429c      	cmp	r4, r3
 800a354:	d101      	bne.n	800a35a <_fflush_r+0x62>
 800a356:	68ac      	ldr	r4, [r5, #8]
 800a358:	e7df      	b.n	800a31a <_fflush_r+0x22>
 800a35a:	4b04      	ldr	r3, [pc, #16]	; (800a36c <_fflush_r+0x74>)
 800a35c:	429c      	cmp	r4, r3
 800a35e:	bf08      	it	eq
 800a360:	68ec      	ldreq	r4, [r5, #12]
 800a362:	e7da      	b.n	800a31a <_fflush_r+0x22>
 800a364:	0800b1bc 	.word	0x0800b1bc
 800a368:	0800b1dc 	.word	0x0800b1dc
 800a36c:	0800b19c 	.word	0x0800b19c

0800a370 <fiprintf>:
 800a370:	b40e      	push	{r1, r2, r3}
 800a372:	b503      	push	{r0, r1, lr}
 800a374:	4601      	mov	r1, r0
 800a376:	ab03      	add	r3, sp, #12
 800a378:	4805      	ldr	r0, [pc, #20]	; (800a390 <fiprintf+0x20>)
 800a37a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a37e:	6800      	ldr	r0, [r0, #0]
 800a380:	9301      	str	r3, [sp, #4]
 800a382:	f000 fca7 	bl	800acd4 <_vfiprintf_r>
 800a386:	b002      	add	sp, #8
 800a388:	f85d eb04 	ldr.w	lr, [sp], #4
 800a38c:	b003      	add	sp, #12
 800a38e:	4770      	bx	lr
 800a390:	20000054 	.word	0x20000054

0800a394 <_localeconv_r>:
 800a394:	4800      	ldr	r0, [pc, #0]	; (800a398 <_localeconv_r+0x4>)
 800a396:	4770      	bx	lr
 800a398:	200001a8 	.word	0x200001a8

0800a39c <_lseek_r>:
 800a39c:	b538      	push	{r3, r4, r5, lr}
 800a39e:	4d07      	ldr	r5, [pc, #28]	; (800a3bc <_lseek_r+0x20>)
 800a3a0:	4604      	mov	r4, r0
 800a3a2:	4608      	mov	r0, r1
 800a3a4:	4611      	mov	r1, r2
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	602a      	str	r2, [r5, #0]
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	f7f7 fb26 	bl	80019fc <_lseek>
 800a3b0:	1c43      	adds	r3, r0, #1
 800a3b2:	d102      	bne.n	800a3ba <_lseek_r+0x1e>
 800a3b4:	682b      	ldr	r3, [r5, #0]
 800a3b6:	b103      	cbz	r3, 800a3ba <_lseek_r+0x1e>
 800a3b8:	6023      	str	r3, [r4, #0]
 800a3ba:	bd38      	pop	{r3, r4, r5, pc}
 800a3bc:	200013b4 	.word	0x200013b4

0800a3c0 <__swhatbuf_r>:
 800a3c0:	b570      	push	{r4, r5, r6, lr}
 800a3c2:	460e      	mov	r6, r1
 800a3c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3c8:	2900      	cmp	r1, #0
 800a3ca:	b096      	sub	sp, #88	; 0x58
 800a3cc:	4614      	mov	r4, r2
 800a3ce:	461d      	mov	r5, r3
 800a3d0:	da08      	bge.n	800a3e4 <__swhatbuf_r+0x24>
 800a3d2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	602a      	str	r2, [r5, #0]
 800a3da:	061a      	lsls	r2, r3, #24
 800a3dc:	d410      	bmi.n	800a400 <__swhatbuf_r+0x40>
 800a3de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3e2:	e00e      	b.n	800a402 <__swhatbuf_r+0x42>
 800a3e4:	466a      	mov	r2, sp
 800a3e6:	f000 fdbf 	bl	800af68 <_fstat_r>
 800a3ea:	2800      	cmp	r0, #0
 800a3ec:	dbf1      	blt.n	800a3d2 <__swhatbuf_r+0x12>
 800a3ee:	9a01      	ldr	r2, [sp, #4]
 800a3f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a3f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a3f8:	425a      	negs	r2, r3
 800a3fa:	415a      	adcs	r2, r3
 800a3fc:	602a      	str	r2, [r5, #0]
 800a3fe:	e7ee      	b.n	800a3de <__swhatbuf_r+0x1e>
 800a400:	2340      	movs	r3, #64	; 0x40
 800a402:	2000      	movs	r0, #0
 800a404:	6023      	str	r3, [r4, #0]
 800a406:	b016      	add	sp, #88	; 0x58
 800a408:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a40c <__smakebuf_r>:
 800a40c:	898b      	ldrh	r3, [r1, #12]
 800a40e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a410:	079d      	lsls	r5, r3, #30
 800a412:	4606      	mov	r6, r0
 800a414:	460c      	mov	r4, r1
 800a416:	d507      	bpl.n	800a428 <__smakebuf_r+0x1c>
 800a418:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a41c:	6023      	str	r3, [r4, #0]
 800a41e:	6123      	str	r3, [r4, #16]
 800a420:	2301      	movs	r3, #1
 800a422:	6163      	str	r3, [r4, #20]
 800a424:	b002      	add	sp, #8
 800a426:	bd70      	pop	{r4, r5, r6, pc}
 800a428:	ab01      	add	r3, sp, #4
 800a42a:	466a      	mov	r2, sp
 800a42c:	f7ff ffc8 	bl	800a3c0 <__swhatbuf_r>
 800a430:	9900      	ldr	r1, [sp, #0]
 800a432:	4605      	mov	r5, r0
 800a434:	4630      	mov	r0, r6
 800a436:	f7fe f9ab 	bl	8008790 <_malloc_r>
 800a43a:	b948      	cbnz	r0, 800a450 <__smakebuf_r+0x44>
 800a43c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a440:	059a      	lsls	r2, r3, #22
 800a442:	d4ef      	bmi.n	800a424 <__smakebuf_r+0x18>
 800a444:	f023 0303 	bic.w	r3, r3, #3
 800a448:	f043 0302 	orr.w	r3, r3, #2
 800a44c:	81a3      	strh	r3, [r4, #12]
 800a44e:	e7e3      	b.n	800a418 <__smakebuf_r+0xc>
 800a450:	4b0d      	ldr	r3, [pc, #52]	; (800a488 <__smakebuf_r+0x7c>)
 800a452:	62b3      	str	r3, [r6, #40]	; 0x28
 800a454:	89a3      	ldrh	r3, [r4, #12]
 800a456:	6020      	str	r0, [r4, #0]
 800a458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a45c:	81a3      	strh	r3, [r4, #12]
 800a45e:	9b00      	ldr	r3, [sp, #0]
 800a460:	6163      	str	r3, [r4, #20]
 800a462:	9b01      	ldr	r3, [sp, #4]
 800a464:	6120      	str	r0, [r4, #16]
 800a466:	b15b      	cbz	r3, 800a480 <__smakebuf_r+0x74>
 800a468:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a46c:	4630      	mov	r0, r6
 800a46e:	f000 fd8d 	bl	800af8c <_isatty_r>
 800a472:	b128      	cbz	r0, 800a480 <__smakebuf_r+0x74>
 800a474:	89a3      	ldrh	r3, [r4, #12]
 800a476:	f023 0303 	bic.w	r3, r3, #3
 800a47a:	f043 0301 	orr.w	r3, r3, #1
 800a47e:	81a3      	strh	r3, [r4, #12]
 800a480:	89a0      	ldrh	r0, [r4, #12]
 800a482:	4305      	orrs	r5, r0
 800a484:	81a5      	strh	r5, [r4, #12]
 800a486:	e7cd      	b.n	800a424 <__smakebuf_r+0x18>
 800a488:	08008531 	.word	0x08008531

0800a48c <malloc>:
 800a48c:	4b02      	ldr	r3, [pc, #8]	; (800a498 <malloc+0xc>)
 800a48e:	4601      	mov	r1, r0
 800a490:	6818      	ldr	r0, [r3, #0]
 800a492:	f7fe b97d 	b.w	8008790 <_malloc_r>
 800a496:	bf00      	nop
 800a498:	20000054 	.word	0x20000054

0800a49c <__malloc_lock>:
 800a49c:	4801      	ldr	r0, [pc, #4]	; (800a4a4 <__malloc_lock+0x8>)
 800a49e:	f7fe b93e 	b.w	800871e <__retarget_lock_acquire_recursive>
 800a4a2:	bf00      	nop
 800a4a4:	200013a8 	.word	0x200013a8

0800a4a8 <__malloc_unlock>:
 800a4a8:	4801      	ldr	r0, [pc, #4]	; (800a4b0 <__malloc_unlock+0x8>)
 800a4aa:	f7fe b939 	b.w	8008720 <__retarget_lock_release_recursive>
 800a4ae:	bf00      	nop
 800a4b0:	200013a8 	.word	0x200013a8

0800a4b4 <_Balloc>:
 800a4b4:	b570      	push	{r4, r5, r6, lr}
 800a4b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a4b8:	4604      	mov	r4, r0
 800a4ba:	460d      	mov	r5, r1
 800a4bc:	b976      	cbnz	r6, 800a4dc <_Balloc+0x28>
 800a4be:	2010      	movs	r0, #16
 800a4c0:	f7ff ffe4 	bl	800a48c <malloc>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	6260      	str	r0, [r4, #36]	; 0x24
 800a4c8:	b920      	cbnz	r0, 800a4d4 <_Balloc+0x20>
 800a4ca:	4b18      	ldr	r3, [pc, #96]	; (800a52c <_Balloc+0x78>)
 800a4cc:	4818      	ldr	r0, [pc, #96]	; (800a530 <_Balloc+0x7c>)
 800a4ce:	2166      	movs	r1, #102	; 0x66
 800a4d0:	f7fe ffe4 	bl	800949c <__assert_func>
 800a4d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4d8:	6006      	str	r6, [r0, #0]
 800a4da:	60c6      	str	r6, [r0, #12]
 800a4dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a4de:	68f3      	ldr	r3, [r6, #12]
 800a4e0:	b183      	cbz	r3, 800a504 <_Balloc+0x50>
 800a4e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4e4:	68db      	ldr	r3, [r3, #12]
 800a4e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a4ea:	b9b8      	cbnz	r0, 800a51c <_Balloc+0x68>
 800a4ec:	2101      	movs	r1, #1
 800a4ee:	fa01 f605 	lsl.w	r6, r1, r5
 800a4f2:	1d72      	adds	r2, r6, #5
 800a4f4:	0092      	lsls	r2, r2, #2
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	f000 fb60 	bl	800abbc <_calloc_r>
 800a4fc:	b160      	cbz	r0, 800a518 <_Balloc+0x64>
 800a4fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a502:	e00e      	b.n	800a522 <_Balloc+0x6e>
 800a504:	2221      	movs	r2, #33	; 0x21
 800a506:	2104      	movs	r1, #4
 800a508:	4620      	mov	r0, r4
 800a50a:	f000 fb57 	bl	800abbc <_calloc_r>
 800a50e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a510:	60f0      	str	r0, [r6, #12]
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d1e4      	bne.n	800a4e2 <_Balloc+0x2e>
 800a518:	2000      	movs	r0, #0
 800a51a:	bd70      	pop	{r4, r5, r6, pc}
 800a51c:	6802      	ldr	r2, [r0, #0]
 800a51e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a522:	2300      	movs	r3, #0
 800a524:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a528:	e7f7      	b.n	800a51a <_Balloc+0x66>
 800a52a:	bf00      	nop
 800a52c:	0800b27d 	.word	0x0800b27d
 800a530:	0800b300 	.word	0x0800b300

0800a534 <_Bfree>:
 800a534:	b570      	push	{r4, r5, r6, lr}
 800a536:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a538:	4605      	mov	r5, r0
 800a53a:	460c      	mov	r4, r1
 800a53c:	b976      	cbnz	r6, 800a55c <_Bfree+0x28>
 800a53e:	2010      	movs	r0, #16
 800a540:	f7ff ffa4 	bl	800a48c <malloc>
 800a544:	4602      	mov	r2, r0
 800a546:	6268      	str	r0, [r5, #36]	; 0x24
 800a548:	b920      	cbnz	r0, 800a554 <_Bfree+0x20>
 800a54a:	4b09      	ldr	r3, [pc, #36]	; (800a570 <_Bfree+0x3c>)
 800a54c:	4809      	ldr	r0, [pc, #36]	; (800a574 <_Bfree+0x40>)
 800a54e:	218a      	movs	r1, #138	; 0x8a
 800a550:	f7fe ffa4 	bl	800949c <__assert_func>
 800a554:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a558:	6006      	str	r6, [r0, #0]
 800a55a:	60c6      	str	r6, [r0, #12]
 800a55c:	b13c      	cbz	r4, 800a56e <_Bfree+0x3a>
 800a55e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a560:	6862      	ldr	r2, [r4, #4]
 800a562:	68db      	ldr	r3, [r3, #12]
 800a564:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a568:	6021      	str	r1, [r4, #0]
 800a56a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a56e:	bd70      	pop	{r4, r5, r6, pc}
 800a570:	0800b27d 	.word	0x0800b27d
 800a574:	0800b300 	.word	0x0800b300

0800a578 <__multadd>:
 800a578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a57c:	690d      	ldr	r5, [r1, #16]
 800a57e:	4607      	mov	r7, r0
 800a580:	460c      	mov	r4, r1
 800a582:	461e      	mov	r6, r3
 800a584:	f101 0c14 	add.w	ip, r1, #20
 800a588:	2000      	movs	r0, #0
 800a58a:	f8dc 3000 	ldr.w	r3, [ip]
 800a58e:	b299      	uxth	r1, r3
 800a590:	fb02 6101 	mla	r1, r2, r1, r6
 800a594:	0c1e      	lsrs	r6, r3, #16
 800a596:	0c0b      	lsrs	r3, r1, #16
 800a598:	fb02 3306 	mla	r3, r2, r6, r3
 800a59c:	b289      	uxth	r1, r1
 800a59e:	3001      	adds	r0, #1
 800a5a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a5a4:	4285      	cmp	r5, r0
 800a5a6:	f84c 1b04 	str.w	r1, [ip], #4
 800a5aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a5ae:	dcec      	bgt.n	800a58a <__multadd+0x12>
 800a5b0:	b30e      	cbz	r6, 800a5f6 <__multadd+0x7e>
 800a5b2:	68a3      	ldr	r3, [r4, #8]
 800a5b4:	42ab      	cmp	r3, r5
 800a5b6:	dc19      	bgt.n	800a5ec <__multadd+0x74>
 800a5b8:	6861      	ldr	r1, [r4, #4]
 800a5ba:	4638      	mov	r0, r7
 800a5bc:	3101      	adds	r1, #1
 800a5be:	f7ff ff79 	bl	800a4b4 <_Balloc>
 800a5c2:	4680      	mov	r8, r0
 800a5c4:	b928      	cbnz	r0, 800a5d2 <__multadd+0x5a>
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	4b0c      	ldr	r3, [pc, #48]	; (800a5fc <__multadd+0x84>)
 800a5ca:	480d      	ldr	r0, [pc, #52]	; (800a600 <__multadd+0x88>)
 800a5cc:	21b5      	movs	r1, #181	; 0xb5
 800a5ce:	f7fe ff65 	bl	800949c <__assert_func>
 800a5d2:	6922      	ldr	r2, [r4, #16]
 800a5d4:	3202      	adds	r2, #2
 800a5d6:	f104 010c 	add.w	r1, r4, #12
 800a5da:	0092      	lsls	r2, r2, #2
 800a5dc:	300c      	adds	r0, #12
 800a5de:	f7fe f8a0 	bl	8008722 <memcpy>
 800a5e2:	4621      	mov	r1, r4
 800a5e4:	4638      	mov	r0, r7
 800a5e6:	f7ff ffa5 	bl	800a534 <_Bfree>
 800a5ea:	4644      	mov	r4, r8
 800a5ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a5f0:	3501      	adds	r5, #1
 800a5f2:	615e      	str	r6, [r3, #20]
 800a5f4:	6125      	str	r5, [r4, #16]
 800a5f6:	4620      	mov	r0, r4
 800a5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5fc:	0800b2ef 	.word	0x0800b2ef
 800a600:	0800b300 	.word	0x0800b300

0800a604 <__hi0bits>:
 800a604:	0c03      	lsrs	r3, r0, #16
 800a606:	041b      	lsls	r3, r3, #16
 800a608:	b9d3      	cbnz	r3, 800a640 <__hi0bits+0x3c>
 800a60a:	0400      	lsls	r0, r0, #16
 800a60c:	2310      	movs	r3, #16
 800a60e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a612:	bf04      	itt	eq
 800a614:	0200      	lsleq	r0, r0, #8
 800a616:	3308      	addeq	r3, #8
 800a618:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a61c:	bf04      	itt	eq
 800a61e:	0100      	lsleq	r0, r0, #4
 800a620:	3304      	addeq	r3, #4
 800a622:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a626:	bf04      	itt	eq
 800a628:	0080      	lsleq	r0, r0, #2
 800a62a:	3302      	addeq	r3, #2
 800a62c:	2800      	cmp	r0, #0
 800a62e:	db05      	blt.n	800a63c <__hi0bits+0x38>
 800a630:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a634:	f103 0301 	add.w	r3, r3, #1
 800a638:	bf08      	it	eq
 800a63a:	2320      	moveq	r3, #32
 800a63c:	4618      	mov	r0, r3
 800a63e:	4770      	bx	lr
 800a640:	2300      	movs	r3, #0
 800a642:	e7e4      	b.n	800a60e <__hi0bits+0xa>

0800a644 <__lo0bits>:
 800a644:	6803      	ldr	r3, [r0, #0]
 800a646:	f013 0207 	ands.w	r2, r3, #7
 800a64a:	4601      	mov	r1, r0
 800a64c:	d00b      	beq.n	800a666 <__lo0bits+0x22>
 800a64e:	07da      	lsls	r2, r3, #31
 800a650:	d423      	bmi.n	800a69a <__lo0bits+0x56>
 800a652:	0798      	lsls	r0, r3, #30
 800a654:	bf49      	itett	mi
 800a656:	085b      	lsrmi	r3, r3, #1
 800a658:	089b      	lsrpl	r3, r3, #2
 800a65a:	2001      	movmi	r0, #1
 800a65c:	600b      	strmi	r3, [r1, #0]
 800a65e:	bf5c      	itt	pl
 800a660:	600b      	strpl	r3, [r1, #0]
 800a662:	2002      	movpl	r0, #2
 800a664:	4770      	bx	lr
 800a666:	b298      	uxth	r0, r3
 800a668:	b9a8      	cbnz	r0, 800a696 <__lo0bits+0x52>
 800a66a:	0c1b      	lsrs	r3, r3, #16
 800a66c:	2010      	movs	r0, #16
 800a66e:	b2da      	uxtb	r2, r3
 800a670:	b90a      	cbnz	r2, 800a676 <__lo0bits+0x32>
 800a672:	3008      	adds	r0, #8
 800a674:	0a1b      	lsrs	r3, r3, #8
 800a676:	071a      	lsls	r2, r3, #28
 800a678:	bf04      	itt	eq
 800a67a:	091b      	lsreq	r3, r3, #4
 800a67c:	3004      	addeq	r0, #4
 800a67e:	079a      	lsls	r2, r3, #30
 800a680:	bf04      	itt	eq
 800a682:	089b      	lsreq	r3, r3, #2
 800a684:	3002      	addeq	r0, #2
 800a686:	07da      	lsls	r2, r3, #31
 800a688:	d403      	bmi.n	800a692 <__lo0bits+0x4e>
 800a68a:	085b      	lsrs	r3, r3, #1
 800a68c:	f100 0001 	add.w	r0, r0, #1
 800a690:	d005      	beq.n	800a69e <__lo0bits+0x5a>
 800a692:	600b      	str	r3, [r1, #0]
 800a694:	4770      	bx	lr
 800a696:	4610      	mov	r0, r2
 800a698:	e7e9      	b.n	800a66e <__lo0bits+0x2a>
 800a69a:	2000      	movs	r0, #0
 800a69c:	4770      	bx	lr
 800a69e:	2020      	movs	r0, #32
 800a6a0:	4770      	bx	lr
	...

0800a6a4 <__i2b>:
 800a6a4:	b510      	push	{r4, lr}
 800a6a6:	460c      	mov	r4, r1
 800a6a8:	2101      	movs	r1, #1
 800a6aa:	f7ff ff03 	bl	800a4b4 <_Balloc>
 800a6ae:	4602      	mov	r2, r0
 800a6b0:	b928      	cbnz	r0, 800a6be <__i2b+0x1a>
 800a6b2:	4b05      	ldr	r3, [pc, #20]	; (800a6c8 <__i2b+0x24>)
 800a6b4:	4805      	ldr	r0, [pc, #20]	; (800a6cc <__i2b+0x28>)
 800a6b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a6ba:	f7fe feef 	bl	800949c <__assert_func>
 800a6be:	2301      	movs	r3, #1
 800a6c0:	6144      	str	r4, [r0, #20]
 800a6c2:	6103      	str	r3, [r0, #16]
 800a6c4:	bd10      	pop	{r4, pc}
 800a6c6:	bf00      	nop
 800a6c8:	0800b2ef 	.word	0x0800b2ef
 800a6cc:	0800b300 	.word	0x0800b300

0800a6d0 <__multiply>:
 800a6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6d4:	4691      	mov	r9, r2
 800a6d6:	690a      	ldr	r2, [r1, #16]
 800a6d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	bfb8      	it	lt
 800a6e0:	460b      	movlt	r3, r1
 800a6e2:	460c      	mov	r4, r1
 800a6e4:	bfbc      	itt	lt
 800a6e6:	464c      	movlt	r4, r9
 800a6e8:	4699      	movlt	r9, r3
 800a6ea:	6927      	ldr	r7, [r4, #16]
 800a6ec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a6f0:	68a3      	ldr	r3, [r4, #8]
 800a6f2:	6861      	ldr	r1, [r4, #4]
 800a6f4:	eb07 060a 	add.w	r6, r7, sl
 800a6f8:	42b3      	cmp	r3, r6
 800a6fa:	b085      	sub	sp, #20
 800a6fc:	bfb8      	it	lt
 800a6fe:	3101      	addlt	r1, #1
 800a700:	f7ff fed8 	bl	800a4b4 <_Balloc>
 800a704:	b930      	cbnz	r0, 800a714 <__multiply+0x44>
 800a706:	4602      	mov	r2, r0
 800a708:	4b44      	ldr	r3, [pc, #272]	; (800a81c <__multiply+0x14c>)
 800a70a:	4845      	ldr	r0, [pc, #276]	; (800a820 <__multiply+0x150>)
 800a70c:	f240 115d 	movw	r1, #349	; 0x15d
 800a710:	f7fe fec4 	bl	800949c <__assert_func>
 800a714:	f100 0514 	add.w	r5, r0, #20
 800a718:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a71c:	462b      	mov	r3, r5
 800a71e:	2200      	movs	r2, #0
 800a720:	4543      	cmp	r3, r8
 800a722:	d321      	bcc.n	800a768 <__multiply+0x98>
 800a724:	f104 0314 	add.w	r3, r4, #20
 800a728:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a72c:	f109 0314 	add.w	r3, r9, #20
 800a730:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a734:	9202      	str	r2, [sp, #8]
 800a736:	1b3a      	subs	r2, r7, r4
 800a738:	3a15      	subs	r2, #21
 800a73a:	f022 0203 	bic.w	r2, r2, #3
 800a73e:	3204      	adds	r2, #4
 800a740:	f104 0115 	add.w	r1, r4, #21
 800a744:	428f      	cmp	r7, r1
 800a746:	bf38      	it	cc
 800a748:	2204      	movcc	r2, #4
 800a74a:	9201      	str	r2, [sp, #4]
 800a74c:	9a02      	ldr	r2, [sp, #8]
 800a74e:	9303      	str	r3, [sp, #12]
 800a750:	429a      	cmp	r2, r3
 800a752:	d80c      	bhi.n	800a76e <__multiply+0x9e>
 800a754:	2e00      	cmp	r6, #0
 800a756:	dd03      	ble.n	800a760 <__multiply+0x90>
 800a758:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d05a      	beq.n	800a816 <__multiply+0x146>
 800a760:	6106      	str	r6, [r0, #16]
 800a762:	b005      	add	sp, #20
 800a764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a768:	f843 2b04 	str.w	r2, [r3], #4
 800a76c:	e7d8      	b.n	800a720 <__multiply+0x50>
 800a76e:	f8b3 a000 	ldrh.w	sl, [r3]
 800a772:	f1ba 0f00 	cmp.w	sl, #0
 800a776:	d024      	beq.n	800a7c2 <__multiply+0xf2>
 800a778:	f104 0e14 	add.w	lr, r4, #20
 800a77c:	46a9      	mov	r9, r5
 800a77e:	f04f 0c00 	mov.w	ip, #0
 800a782:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a786:	f8d9 1000 	ldr.w	r1, [r9]
 800a78a:	fa1f fb82 	uxth.w	fp, r2
 800a78e:	b289      	uxth	r1, r1
 800a790:	fb0a 110b 	mla	r1, sl, fp, r1
 800a794:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a798:	f8d9 2000 	ldr.w	r2, [r9]
 800a79c:	4461      	add	r1, ip
 800a79e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a7a2:	fb0a c20b 	mla	r2, sl, fp, ip
 800a7a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a7aa:	b289      	uxth	r1, r1
 800a7ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a7b0:	4577      	cmp	r7, lr
 800a7b2:	f849 1b04 	str.w	r1, [r9], #4
 800a7b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a7ba:	d8e2      	bhi.n	800a782 <__multiply+0xb2>
 800a7bc:	9a01      	ldr	r2, [sp, #4]
 800a7be:	f845 c002 	str.w	ip, [r5, r2]
 800a7c2:	9a03      	ldr	r2, [sp, #12]
 800a7c4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a7c8:	3304      	adds	r3, #4
 800a7ca:	f1b9 0f00 	cmp.w	r9, #0
 800a7ce:	d020      	beq.n	800a812 <__multiply+0x142>
 800a7d0:	6829      	ldr	r1, [r5, #0]
 800a7d2:	f104 0c14 	add.w	ip, r4, #20
 800a7d6:	46ae      	mov	lr, r5
 800a7d8:	f04f 0a00 	mov.w	sl, #0
 800a7dc:	f8bc b000 	ldrh.w	fp, [ip]
 800a7e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a7e4:	fb09 220b 	mla	r2, r9, fp, r2
 800a7e8:	4492      	add	sl, r2
 800a7ea:	b289      	uxth	r1, r1
 800a7ec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a7f0:	f84e 1b04 	str.w	r1, [lr], #4
 800a7f4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a7f8:	f8be 1000 	ldrh.w	r1, [lr]
 800a7fc:	0c12      	lsrs	r2, r2, #16
 800a7fe:	fb09 1102 	mla	r1, r9, r2, r1
 800a802:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a806:	4567      	cmp	r7, ip
 800a808:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a80c:	d8e6      	bhi.n	800a7dc <__multiply+0x10c>
 800a80e:	9a01      	ldr	r2, [sp, #4]
 800a810:	50a9      	str	r1, [r5, r2]
 800a812:	3504      	adds	r5, #4
 800a814:	e79a      	b.n	800a74c <__multiply+0x7c>
 800a816:	3e01      	subs	r6, #1
 800a818:	e79c      	b.n	800a754 <__multiply+0x84>
 800a81a:	bf00      	nop
 800a81c:	0800b2ef 	.word	0x0800b2ef
 800a820:	0800b300 	.word	0x0800b300

0800a824 <__pow5mult>:
 800a824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a828:	4615      	mov	r5, r2
 800a82a:	f012 0203 	ands.w	r2, r2, #3
 800a82e:	4606      	mov	r6, r0
 800a830:	460f      	mov	r7, r1
 800a832:	d007      	beq.n	800a844 <__pow5mult+0x20>
 800a834:	4c25      	ldr	r4, [pc, #148]	; (800a8cc <__pow5mult+0xa8>)
 800a836:	3a01      	subs	r2, #1
 800a838:	2300      	movs	r3, #0
 800a83a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a83e:	f7ff fe9b 	bl	800a578 <__multadd>
 800a842:	4607      	mov	r7, r0
 800a844:	10ad      	asrs	r5, r5, #2
 800a846:	d03d      	beq.n	800a8c4 <__pow5mult+0xa0>
 800a848:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a84a:	b97c      	cbnz	r4, 800a86c <__pow5mult+0x48>
 800a84c:	2010      	movs	r0, #16
 800a84e:	f7ff fe1d 	bl	800a48c <malloc>
 800a852:	4602      	mov	r2, r0
 800a854:	6270      	str	r0, [r6, #36]	; 0x24
 800a856:	b928      	cbnz	r0, 800a864 <__pow5mult+0x40>
 800a858:	4b1d      	ldr	r3, [pc, #116]	; (800a8d0 <__pow5mult+0xac>)
 800a85a:	481e      	ldr	r0, [pc, #120]	; (800a8d4 <__pow5mult+0xb0>)
 800a85c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a860:	f7fe fe1c 	bl	800949c <__assert_func>
 800a864:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a868:	6004      	str	r4, [r0, #0]
 800a86a:	60c4      	str	r4, [r0, #12]
 800a86c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a870:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a874:	b94c      	cbnz	r4, 800a88a <__pow5mult+0x66>
 800a876:	f240 2171 	movw	r1, #625	; 0x271
 800a87a:	4630      	mov	r0, r6
 800a87c:	f7ff ff12 	bl	800a6a4 <__i2b>
 800a880:	2300      	movs	r3, #0
 800a882:	f8c8 0008 	str.w	r0, [r8, #8]
 800a886:	4604      	mov	r4, r0
 800a888:	6003      	str	r3, [r0, #0]
 800a88a:	f04f 0900 	mov.w	r9, #0
 800a88e:	07eb      	lsls	r3, r5, #31
 800a890:	d50a      	bpl.n	800a8a8 <__pow5mult+0x84>
 800a892:	4639      	mov	r1, r7
 800a894:	4622      	mov	r2, r4
 800a896:	4630      	mov	r0, r6
 800a898:	f7ff ff1a 	bl	800a6d0 <__multiply>
 800a89c:	4639      	mov	r1, r7
 800a89e:	4680      	mov	r8, r0
 800a8a0:	4630      	mov	r0, r6
 800a8a2:	f7ff fe47 	bl	800a534 <_Bfree>
 800a8a6:	4647      	mov	r7, r8
 800a8a8:	106d      	asrs	r5, r5, #1
 800a8aa:	d00b      	beq.n	800a8c4 <__pow5mult+0xa0>
 800a8ac:	6820      	ldr	r0, [r4, #0]
 800a8ae:	b938      	cbnz	r0, 800a8c0 <__pow5mult+0x9c>
 800a8b0:	4622      	mov	r2, r4
 800a8b2:	4621      	mov	r1, r4
 800a8b4:	4630      	mov	r0, r6
 800a8b6:	f7ff ff0b 	bl	800a6d0 <__multiply>
 800a8ba:	6020      	str	r0, [r4, #0]
 800a8bc:	f8c0 9000 	str.w	r9, [r0]
 800a8c0:	4604      	mov	r4, r0
 800a8c2:	e7e4      	b.n	800a88e <__pow5mult+0x6a>
 800a8c4:	4638      	mov	r0, r7
 800a8c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8ca:	bf00      	nop
 800a8cc:	0800b450 	.word	0x0800b450
 800a8d0:	0800b27d 	.word	0x0800b27d
 800a8d4:	0800b300 	.word	0x0800b300

0800a8d8 <__lshift>:
 800a8d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8dc:	460c      	mov	r4, r1
 800a8de:	6849      	ldr	r1, [r1, #4]
 800a8e0:	6923      	ldr	r3, [r4, #16]
 800a8e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a8e6:	68a3      	ldr	r3, [r4, #8]
 800a8e8:	4607      	mov	r7, r0
 800a8ea:	4691      	mov	r9, r2
 800a8ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a8f0:	f108 0601 	add.w	r6, r8, #1
 800a8f4:	42b3      	cmp	r3, r6
 800a8f6:	db0b      	blt.n	800a910 <__lshift+0x38>
 800a8f8:	4638      	mov	r0, r7
 800a8fa:	f7ff fddb 	bl	800a4b4 <_Balloc>
 800a8fe:	4605      	mov	r5, r0
 800a900:	b948      	cbnz	r0, 800a916 <__lshift+0x3e>
 800a902:	4602      	mov	r2, r0
 800a904:	4b2a      	ldr	r3, [pc, #168]	; (800a9b0 <__lshift+0xd8>)
 800a906:	482b      	ldr	r0, [pc, #172]	; (800a9b4 <__lshift+0xdc>)
 800a908:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a90c:	f7fe fdc6 	bl	800949c <__assert_func>
 800a910:	3101      	adds	r1, #1
 800a912:	005b      	lsls	r3, r3, #1
 800a914:	e7ee      	b.n	800a8f4 <__lshift+0x1c>
 800a916:	2300      	movs	r3, #0
 800a918:	f100 0114 	add.w	r1, r0, #20
 800a91c:	f100 0210 	add.w	r2, r0, #16
 800a920:	4618      	mov	r0, r3
 800a922:	4553      	cmp	r3, sl
 800a924:	db37      	blt.n	800a996 <__lshift+0xbe>
 800a926:	6920      	ldr	r0, [r4, #16]
 800a928:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a92c:	f104 0314 	add.w	r3, r4, #20
 800a930:	f019 091f 	ands.w	r9, r9, #31
 800a934:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a938:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a93c:	d02f      	beq.n	800a99e <__lshift+0xc6>
 800a93e:	f1c9 0e20 	rsb	lr, r9, #32
 800a942:	468a      	mov	sl, r1
 800a944:	f04f 0c00 	mov.w	ip, #0
 800a948:	681a      	ldr	r2, [r3, #0]
 800a94a:	fa02 f209 	lsl.w	r2, r2, r9
 800a94e:	ea42 020c 	orr.w	r2, r2, ip
 800a952:	f84a 2b04 	str.w	r2, [sl], #4
 800a956:	f853 2b04 	ldr.w	r2, [r3], #4
 800a95a:	4298      	cmp	r0, r3
 800a95c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a960:	d8f2      	bhi.n	800a948 <__lshift+0x70>
 800a962:	1b03      	subs	r3, r0, r4
 800a964:	3b15      	subs	r3, #21
 800a966:	f023 0303 	bic.w	r3, r3, #3
 800a96a:	3304      	adds	r3, #4
 800a96c:	f104 0215 	add.w	r2, r4, #21
 800a970:	4290      	cmp	r0, r2
 800a972:	bf38      	it	cc
 800a974:	2304      	movcc	r3, #4
 800a976:	f841 c003 	str.w	ip, [r1, r3]
 800a97a:	f1bc 0f00 	cmp.w	ip, #0
 800a97e:	d001      	beq.n	800a984 <__lshift+0xac>
 800a980:	f108 0602 	add.w	r6, r8, #2
 800a984:	3e01      	subs	r6, #1
 800a986:	4638      	mov	r0, r7
 800a988:	612e      	str	r6, [r5, #16]
 800a98a:	4621      	mov	r1, r4
 800a98c:	f7ff fdd2 	bl	800a534 <_Bfree>
 800a990:	4628      	mov	r0, r5
 800a992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a996:	f842 0f04 	str.w	r0, [r2, #4]!
 800a99a:	3301      	adds	r3, #1
 800a99c:	e7c1      	b.n	800a922 <__lshift+0x4a>
 800a99e:	3904      	subs	r1, #4
 800a9a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a9a8:	4298      	cmp	r0, r3
 800a9aa:	d8f9      	bhi.n	800a9a0 <__lshift+0xc8>
 800a9ac:	e7ea      	b.n	800a984 <__lshift+0xac>
 800a9ae:	bf00      	nop
 800a9b0:	0800b2ef 	.word	0x0800b2ef
 800a9b4:	0800b300 	.word	0x0800b300

0800a9b8 <__mcmp>:
 800a9b8:	b530      	push	{r4, r5, lr}
 800a9ba:	6902      	ldr	r2, [r0, #16]
 800a9bc:	690c      	ldr	r4, [r1, #16]
 800a9be:	1b12      	subs	r2, r2, r4
 800a9c0:	d10e      	bne.n	800a9e0 <__mcmp+0x28>
 800a9c2:	f100 0314 	add.w	r3, r0, #20
 800a9c6:	3114      	adds	r1, #20
 800a9c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a9cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a9d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a9d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a9d8:	42a5      	cmp	r5, r4
 800a9da:	d003      	beq.n	800a9e4 <__mcmp+0x2c>
 800a9dc:	d305      	bcc.n	800a9ea <__mcmp+0x32>
 800a9de:	2201      	movs	r2, #1
 800a9e0:	4610      	mov	r0, r2
 800a9e2:	bd30      	pop	{r4, r5, pc}
 800a9e4:	4283      	cmp	r3, r0
 800a9e6:	d3f3      	bcc.n	800a9d0 <__mcmp+0x18>
 800a9e8:	e7fa      	b.n	800a9e0 <__mcmp+0x28>
 800a9ea:	f04f 32ff 	mov.w	r2, #4294967295
 800a9ee:	e7f7      	b.n	800a9e0 <__mcmp+0x28>

0800a9f0 <__mdiff>:
 800a9f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9f4:	460c      	mov	r4, r1
 800a9f6:	4606      	mov	r6, r0
 800a9f8:	4611      	mov	r1, r2
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	4690      	mov	r8, r2
 800a9fe:	f7ff ffdb 	bl	800a9b8 <__mcmp>
 800aa02:	1e05      	subs	r5, r0, #0
 800aa04:	d110      	bne.n	800aa28 <__mdiff+0x38>
 800aa06:	4629      	mov	r1, r5
 800aa08:	4630      	mov	r0, r6
 800aa0a:	f7ff fd53 	bl	800a4b4 <_Balloc>
 800aa0e:	b930      	cbnz	r0, 800aa1e <__mdiff+0x2e>
 800aa10:	4b3a      	ldr	r3, [pc, #232]	; (800aafc <__mdiff+0x10c>)
 800aa12:	4602      	mov	r2, r0
 800aa14:	f240 2132 	movw	r1, #562	; 0x232
 800aa18:	4839      	ldr	r0, [pc, #228]	; (800ab00 <__mdiff+0x110>)
 800aa1a:	f7fe fd3f 	bl	800949c <__assert_func>
 800aa1e:	2301      	movs	r3, #1
 800aa20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aa24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa28:	bfa4      	itt	ge
 800aa2a:	4643      	movge	r3, r8
 800aa2c:	46a0      	movge	r8, r4
 800aa2e:	4630      	mov	r0, r6
 800aa30:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800aa34:	bfa6      	itte	ge
 800aa36:	461c      	movge	r4, r3
 800aa38:	2500      	movge	r5, #0
 800aa3a:	2501      	movlt	r5, #1
 800aa3c:	f7ff fd3a 	bl	800a4b4 <_Balloc>
 800aa40:	b920      	cbnz	r0, 800aa4c <__mdiff+0x5c>
 800aa42:	4b2e      	ldr	r3, [pc, #184]	; (800aafc <__mdiff+0x10c>)
 800aa44:	4602      	mov	r2, r0
 800aa46:	f44f 7110 	mov.w	r1, #576	; 0x240
 800aa4a:	e7e5      	b.n	800aa18 <__mdiff+0x28>
 800aa4c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800aa50:	6926      	ldr	r6, [r4, #16]
 800aa52:	60c5      	str	r5, [r0, #12]
 800aa54:	f104 0914 	add.w	r9, r4, #20
 800aa58:	f108 0514 	add.w	r5, r8, #20
 800aa5c:	f100 0e14 	add.w	lr, r0, #20
 800aa60:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800aa64:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800aa68:	f108 0210 	add.w	r2, r8, #16
 800aa6c:	46f2      	mov	sl, lr
 800aa6e:	2100      	movs	r1, #0
 800aa70:	f859 3b04 	ldr.w	r3, [r9], #4
 800aa74:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800aa78:	fa1f f883 	uxth.w	r8, r3
 800aa7c:	fa11 f18b 	uxtah	r1, r1, fp
 800aa80:	0c1b      	lsrs	r3, r3, #16
 800aa82:	eba1 0808 	sub.w	r8, r1, r8
 800aa86:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aa8a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800aa8e:	fa1f f888 	uxth.w	r8, r8
 800aa92:	1419      	asrs	r1, r3, #16
 800aa94:	454e      	cmp	r6, r9
 800aa96:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800aa9a:	f84a 3b04 	str.w	r3, [sl], #4
 800aa9e:	d8e7      	bhi.n	800aa70 <__mdiff+0x80>
 800aaa0:	1b33      	subs	r3, r6, r4
 800aaa2:	3b15      	subs	r3, #21
 800aaa4:	f023 0303 	bic.w	r3, r3, #3
 800aaa8:	3304      	adds	r3, #4
 800aaaa:	3415      	adds	r4, #21
 800aaac:	42a6      	cmp	r6, r4
 800aaae:	bf38      	it	cc
 800aab0:	2304      	movcc	r3, #4
 800aab2:	441d      	add	r5, r3
 800aab4:	4473      	add	r3, lr
 800aab6:	469e      	mov	lr, r3
 800aab8:	462e      	mov	r6, r5
 800aaba:	4566      	cmp	r6, ip
 800aabc:	d30e      	bcc.n	800aadc <__mdiff+0xec>
 800aabe:	f10c 0203 	add.w	r2, ip, #3
 800aac2:	1b52      	subs	r2, r2, r5
 800aac4:	f022 0203 	bic.w	r2, r2, #3
 800aac8:	3d03      	subs	r5, #3
 800aaca:	45ac      	cmp	ip, r5
 800aacc:	bf38      	it	cc
 800aace:	2200      	movcc	r2, #0
 800aad0:	441a      	add	r2, r3
 800aad2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800aad6:	b17b      	cbz	r3, 800aaf8 <__mdiff+0x108>
 800aad8:	6107      	str	r7, [r0, #16]
 800aada:	e7a3      	b.n	800aa24 <__mdiff+0x34>
 800aadc:	f856 8b04 	ldr.w	r8, [r6], #4
 800aae0:	fa11 f288 	uxtah	r2, r1, r8
 800aae4:	1414      	asrs	r4, r2, #16
 800aae6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aaea:	b292      	uxth	r2, r2
 800aaec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800aaf0:	f84e 2b04 	str.w	r2, [lr], #4
 800aaf4:	1421      	asrs	r1, r4, #16
 800aaf6:	e7e0      	b.n	800aaba <__mdiff+0xca>
 800aaf8:	3f01      	subs	r7, #1
 800aafa:	e7ea      	b.n	800aad2 <__mdiff+0xe2>
 800aafc:	0800b2ef 	.word	0x0800b2ef
 800ab00:	0800b300 	.word	0x0800b300

0800ab04 <__d2b>:
 800ab04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ab08:	4689      	mov	r9, r1
 800ab0a:	2101      	movs	r1, #1
 800ab0c:	ec57 6b10 	vmov	r6, r7, d0
 800ab10:	4690      	mov	r8, r2
 800ab12:	f7ff fccf 	bl	800a4b4 <_Balloc>
 800ab16:	4604      	mov	r4, r0
 800ab18:	b930      	cbnz	r0, 800ab28 <__d2b+0x24>
 800ab1a:	4602      	mov	r2, r0
 800ab1c:	4b25      	ldr	r3, [pc, #148]	; (800abb4 <__d2b+0xb0>)
 800ab1e:	4826      	ldr	r0, [pc, #152]	; (800abb8 <__d2b+0xb4>)
 800ab20:	f240 310a 	movw	r1, #778	; 0x30a
 800ab24:	f7fe fcba 	bl	800949c <__assert_func>
 800ab28:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ab2c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ab30:	bb35      	cbnz	r5, 800ab80 <__d2b+0x7c>
 800ab32:	2e00      	cmp	r6, #0
 800ab34:	9301      	str	r3, [sp, #4]
 800ab36:	d028      	beq.n	800ab8a <__d2b+0x86>
 800ab38:	4668      	mov	r0, sp
 800ab3a:	9600      	str	r6, [sp, #0]
 800ab3c:	f7ff fd82 	bl	800a644 <__lo0bits>
 800ab40:	9900      	ldr	r1, [sp, #0]
 800ab42:	b300      	cbz	r0, 800ab86 <__d2b+0x82>
 800ab44:	9a01      	ldr	r2, [sp, #4]
 800ab46:	f1c0 0320 	rsb	r3, r0, #32
 800ab4a:	fa02 f303 	lsl.w	r3, r2, r3
 800ab4e:	430b      	orrs	r3, r1
 800ab50:	40c2      	lsrs	r2, r0
 800ab52:	6163      	str	r3, [r4, #20]
 800ab54:	9201      	str	r2, [sp, #4]
 800ab56:	9b01      	ldr	r3, [sp, #4]
 800ab58:	61a3      	str	r3, [r4, #24]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	bf14      	ite	ne
 800ab5e:	2202      	movne	r2, #2
 800ab60:	2201      	moveq	r2, #1
 800ab62:	6122      	str	r2, [r4, #16]
 800ab64:	b1d5      	cbz	r5, 800ab9c <__d2b+0x98>
 800ab66:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ab6a:	4405      	add	r5, r0
 800ab6c:	f8c9 5000 	str.w	r5, [r9]
 800ab70:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ab74:	f8c8 0000 	str.w	r0, [r8]
 800ab78:	4620      	mov	r0, r4
 800ab7a:	b003      	add	sp, #12
 800ab7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab84:	e7d5      	b.n	800ab32 <__d2b+0x2e>
 800ab86:	6161      	str	r1, [r4, #20]
 800ab88:	e7e5      	b.n	800ab56 <__d2b+0x52>
 800ab8a:	a801      	add	r0, sp, #4
 800ab8c:	f7ff fd5a 	bl	800a644 <__lo0bits>
 800ab90:	9b01      	ldr	r3, [sp, #4]
 800ab92:	6163      	str	r3, [r4, #20]
 800ab94:	2201      	movs	r2, #1
 800ab96:	6122      	str	r2, [r4, #16]
 800ab98:	3020      	adds	r0, #32
 800ab9a:	e7e3      	b.n	800ab64 <__d2b+0x60>
 800ab9c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aba0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aba4:	f8c9 0000 	str.w	r0, [r9]
 800aba8:	6918      	ldr	r0, [r3, #16]
 800abaa:	f7ff fd2b 	bl	800a604 <__hi0bits>
 800abae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800abb2:	e7df      	b.n	800ab74 <__d2b+0x70>
 800abb4:	0800b2ef 	.word	0x0800b2ef
 800abb8:	0800b300 	.word	0x0800b300

0800abbc <_calloc_r>:
 800abbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800abbe:	fba1 2402 	umull	r2, r4, r1, r2
 800abc2:	b94c      	cbnz	r4, 800abd8 <_calloc_r+0x1c>
 800abc4:	4611      	mov	r1, r2
 800abc6:	9201      	str	r2, [sp, #4]
 800abc8:	f7fd fde2 	bl	8008790 <_malloc_r>
 800abcc:	9a01      	ldr	r2, [sp, #4]
 800abce:	4605      	mov	r5, r0
 800abd0:	b930      	cbnz	r0, 800abe0 <_calloc_r+0x24>
 800abd2:	4628      	mov	r0, r5
 800abd4:	b003      	add	sp, #12
 800abd6:	bd30      	pop	{r4, r5, pc}
 800abd8:	220c      	movs	r2, #12
 800abda:	6002      	str	r2, [r0, #0]
 800abdc:	2500      	movs	r5, #0
 800abde:	e7f8      	b.n	800abd2 <_calloc_r+0x16>
 800abe0:	4621      	mov	r1, r4
 800abe2:	f7fd fdac 	bl	800873e <memset>
 800abe6:	e7f4      	b.n	800abd2 <_calloc_r+0x16>

0800abe8 <_free_r>:
 800abe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800abea:	2900      	cmp	r1, #0
 800abec:	d044      	beq.n	800ac78 <_free_r+0x90>
 800abee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abf2:	9001      	str	r0, [sp, #4]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	f1a1 0404 	sub.w	r4, r1, #4
 800abfa:	bfb8      	it	lt
 800abfc:	18e4      	addlt	r4, r4, r3
 800abfe:	f7ff fc4d 	bl	800a49c <__malloc_lock>
 800ac02:	4a1e      	ldr	r2, [pc, #120]	; (800ac7c <_free_r+0x94>)
 800ac04:	9801      	ldr	r0, [sp, #4]
 800ac06:	6813      	ldr	r3, [r2, #0]
 800ac08:	b933      	cbnz	r3, 800ac18 <_free_r+0x30>
 800ac0a:	6063      	str	r3, [r4, #4]
 800ac0c:	6014      	str	r4, [r2, #0]
 800ac0e:	b003      	add	sp, #12
 800ac10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac14:	f7ff bc48 	b.w	800a4a8 <__malloc_unlock>
 800ac18:	42a3      	cmp	r3, r4
 800ac1a:	d908      	bls.n	800ac2e <_free_r+0x46>
 800ac1c:	6825      	ldr	r5, [r4, #0]
 800ac1e:	1961      	adds	r1, r4, r5
 800ac20:	428b      	cmp	r3, r1
 800ac22:	bf01      	itttt	eq
 800ac24:	6819      	ldreq	r1, [r3, #0]
 800ac26:	685b      	ldreq	r3, [r3, #4]
 800ac28:	1949      	addeq	r1, r1, r5
 800ac2a:	6021      	streq	r1, [r4, #0]
 800ac2c:	e7ed      	b.n	800ac0a <_free_r+0x22>
 800ac2e:	461a      	mov	r2, r3
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	b10b      	cbz	r3, 800ac38 <_free_r+0x50>
 800ac34:	42a3      	cmp	r3, r4
 800ac36:	d9fa      	bls.n	800ac2e <_free_r+0x46>
 800ac38:	6811      	ldr	r1, [r2, #0]
 800ac3a:	1855      	adds	r5, r2, r1
 800ac3c:	42a5      	cmp	r5, r4
 800ac3e:	d10b      	bne.n	800ac58 <_free_r+0x70>
 800ac40:	6824      	ldr	r4, [r4, #0]
 800ac42:	4421      	add	r1, r4
 800ac44:	1854      	adds	r4, r2, r1
 800ac46:	42a3      	cmp	r3, r4
 800ac48:	6011      	str	r1, [r2, #0]
 800ac4a:	d1e0      	bne.n	800ac0e <_free_r+0x26>
 800ac4c:	681c      	ldr	r4, [r3, #0]
 800ac4e:	685b      	ldr	r3, [r3, #4]
 800ac50:	6053      	str	r3, [r2, #4]
 800ac52:	4421      	add	r1, r4
 800ac54:	6011      	str	r1, [r2, #0]
 800ac56:	e7da      	b.n	800ac0e <_free_r+0x26>
 800ac58:	d902      	bls.n	800ac60 <_free_r+0x78>
 800ac5a:	230c      	movs	r3, #12
 800ac5c:	6003      	str	r3, [r0, #0]
 800ac5e:	e7d6      	b.n	800ac0e <_free_r+0x26>
 800ac60:	6825      	ldr	r5, [r4, #0]
 800ac62:	1961      	adds	r1, r4, r5
 800ac64:	428b      	cmp	r3, r1
 800ac66:	bf04      	itt	eq
 800ac68:	6819      	ldreq	r1, [r3, #0]
 800ac6a:	685b      	ldreq	r3, [r3, #4]
 800ac6c:	6063      	str	r3, [r4, #4]
 800ac6e:	bf04      	itt	eq
 800ac70:	1949      	addeq	r1, r1, r5
 800ac72:	6021      	streq	r1, [r4, #0]
 800ac74:	6054      	str	r4, [r2, #4]
 800ac76:	e7ca      	b.n	800ac0e <_free_r+0x26>
 800ac78:	b003      	add	sp, #12
 800ac7a:	bd30      	pop	{r4, r5, pc}
 800ac7c:	200013ac 	.word	0x200013ac

0800ac80 <__sfputc_r>:
 800ac80:	6893      	ldr	r3, [r2, #8]
 800ac82:	3b01      	subs	r3, #1
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	b410      	push	{r4}
 800ac88:	6093      	str	r3, [r2, #8]
 800ac8a:	da08      	bge.n	800ac9e <__sfputc_r+0x1e>
 800ac8c:	6994      	ldr	r4, [r2, #24]
 800ac8e:	42a3      	cmp	r3, r4
 800ac90:	db01      	blt.n	800ac96 <__sfputc_r+0x16>
 800ac92:	290a      	cmp	r1, #10
 800ac94:	d103      	bne.n	800ac9e <__sfputc_r+0x1e>
 800ac96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac9a:	f7fe bb2d 	b.w	80092f8 <__swbuf_r>
 800ac9e:	6813      	ldr	r3, [r2, #0]
 800aca0:	1c58      	adds	r0, r3, #1
 800aca2:	6010      	str	r0, [r2, #0]
 800aca4:	7019      	strb	r1, [r3, #0]
 800aca6:	4608      	mov	r0, r1
 800aca8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acac:	4770      	bx	lr

0800acae <__sfputs_r>:
 800acae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acb0:	4606      	mov	r6, r0
 800acb2:	460f      	mov	r7, r1
 800acb4:	4614      	mov	r4, r2
 800acb6:	18d5      	adds	r5, r2, r3
 800acb8:	42ac      	cmp	r4, r5
 800acba:	d101      	bne.n	800acc0 <__sfputs_r+0x12>
 800acbc:	2000      	movs	r0, #0
 800acbe:	e007      	b.n	800acd0 <__sfputs_r+0x22>
 800acc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acc4:	463a      	mov	r2, r7
 800acc6:	4630      	mov	r0, r6
 800acc8:	f7ff ffda 	bl	800ac80 <__sfputc_r>
 800accc:	1c43      	adds	r3, r0, #1
 800acce:	d1f3      	bne.n	800acb8 <__sfputs_r+0xa>
 800acd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800acd4 <_vfiprintf_r>:
 800acd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acd8:	460d      	mov	r5, r1
 800acda:	b09d      	sub	sp, #116	; 0x74
 800acdc:	4614      	mov	r4, r2
 800acde:	4698      	mov	r8, r3
 800ace0:	4606      	mov	r6, r0
 800ace2:	b118      	cbz	r0, 800acec <_vfiprintf_r+0x18>
 800ace4:	6983      	ldr	r3, [r0, #24]
 800ace6:	b90b      	cbnz	r3, 800acec <_vfiprintf_r+0x18>
 800ace8:	f7fd fc56 	bl	8008598 <__sinit>
 800acec:	4b89      	ldr	r3, [pc, #548]	; (800af14 <_vfiprintf_r+0x240>)
 800acee:	429d      	cmp	r5, r3
 800acf0:	d11b      	bne.n	800ad2a <_vfiprintf_r+0x56>
 800acf2:	6875      	ldr	r5, [r6, #4]
 800acf4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acf6:	07d9      	lsls	r1, r3, #31
 800acf8:	d405      	bmi.n	800ad06 <_vfiprintf_r+0x32>
 800acfa:	89ab      	ldrh	r3, [r5, #12]
 800acfc:	059a      	lsls	r2, r3, #22
 800acfe:	d402      	bmi.n	800ad06 <_vfiprintf_r+0x32>
 800ad00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad02:	f7fd fd0c 	bl	800871e <__retarget_lock_acquire_recursive>
 800ad06:	89ab      	ldrh	r3, [r5, #12]
 800ad08:	071b      	lsls	r3, r3, #28
 800ad0a:	d501      	bpl.n	800ad10 <_vfiprintf_r+0x3c>
 800ad0c:	692b      	ldr	r3, [r5, #16]
 800ad0e:	b9eb      	cbnz	r3, 800ad4c <_vfiprintf_r+0x78>
 800ad10:	4629      	mov	r1, r5
 800ad12:	4630      	mov	r0, r6
 800ad14:	f7fe fb54 	bl	80093c0 <__swsetup_r>
 800ad18:	b1c0      	cbz	r0, 800ad4c <_vfiprintf_r+0x78>
 800ad1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad1c:	07dc      	lsls	r4, r3, #31
 800ad1e:	d50e      	bpl.n	800ad3e <_vfiprintf_r+0x6a>
 800ad20:	f04f 30ff 	mov.w	r0, #4294967295
 800ad24:	b01d      	add	sp, #116	; 0x74
 800ad26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad2a:	4b7b      	ldr	r3, [pc, #492]	; (800af18 <_vfiprintf_r+0x244>)
 800ad2c:	429d      	cmp	r5, r3
 800ad2e:	d101      	bne.n	800ad34 <_vfiprintf_r+0x60>
 800ad30:	68b5      	ldr	r5, [r6, #8]
 800ad32:	e7df      	b.n	800acf4 <_vfiprintf_r+0x20>
 800ad34:	4b79      	ldr	r3, [pc, #484]	; (800af1c <_vfiprintf_r+0x248>)
 800ad36:	429d      	cmp	r5, r3
 800ad38:	bf08      	it	eq
 800ad3a:	68f5      	ldreq	r5, [r6, #12]
 800ad3c:	e7da      	b.n	800acf4 <_vfiprintf_r+0x20>
 800ad3e:	89ab      	ldrh	r3, [r5, #12]
 800ad40:	0598      	lsls	r0, r3, #22
 800ad42:	d4ed      	bmi.n	800ad20 <_vfiprintf_r+0x4c>
 800ad44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad46:	f7fd fceb 	bl	8008720 <__retarget_lock_release_recursive>
 800ad4a:	e7e9      	b.n	800ad20 <_vfiprintf_r+0x4c>
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	9309      	str	r3, [sp, #36]	; 0x24
 800ad50:	2320      	movs	r3, #32
 800ad52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad56:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad5a:	2330      	movs	r3, #48	; 0x30
 800ad5c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800af20 <_vfiprintf_r+0x24c>
 800ad60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad64:	f04f 0901 	mov.w	r9, #1
 800ad68:	4623      	mov	r3, r4
 800ad6a:	469a      	mov	sl, r3
 800ad6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad70:	b10a      	cbz	r2, 800ad76 <_vfiprintf_r+0xa2>
 800ad72:	2a25      	cmp	r2, #37	; 0x25
 800ad74:	d1f9      	bne.n	800ad6a <_vfiprintf_r+0x96>
 800ad76:	ebba 0b04 	subs.w	fp, sl, r4
 800ad7a:	d00b      	beq.n	800ad94 <_vfiprintf_r+0xc0>
 800ad7c:	465b      	mov	r3, fp
 800ad7e:	4622      	mov	r2, r4
 800ad80:	4629      	mov	r1, r5
 800ad82:	4630      	mov	r0, r6
 800ad84:	f7ff ff93 	bl	800acae <__sfputs_r>
 800ad88:	3001      	adds	r0, #1
 800ad8a:	f000 80aa 	beq.w	800aee2 <_vfiprintf_r+0x20e>
 800ad8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad90:	445a      	add	r2, fp
 800ad92:	9209      	str	r2, [sp, #36]	; 0x24
 800ad94:	f89a 3000 	ldrb.w	r3, [sl]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	f000 80a2 	beq.w	800aee2 <_vfiprintf_r+0x20e>
 800ad9e:	2300      	movs	r3, #0
 800ada0:	f04f 32ff 	mov.w	r2, #4294967295
 800ada4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ada8:	f10a 0a01 	add.w	sl, sl, #1
 800adac:	9304      	str	r3, [sp, #16]
 800adae:	9307      	str	r3, [sp, #28]
 800adb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800adb4:	931a      	str	r3, [sp, #104]	; 0x68
 800adb6:	4654      	mov	r4, sl
 800adb8:	2205      	movs	r2, #5
 800adba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adbe:	4858      	ldr	r0, [pc, #352]	; (800af20 <_vfiprintf_r+0x24c>)
 800adc0:	f7f5 fa0e 	bl	80001e0 <memchr>
 800adc4:	9a04      	ldr	r2, [sp, #16]
 800adc6:	b9d8      	cbnz	r0, 800ae00 <_vfiprintf_r+0x12c>
 800adc8:	06d1      	lsls	r1, r2, #27
 800adca:	bf44      	itt	mi
 800adcc:	2320      	movmi	r3, #32
 800adce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800add2:	0713      	lsls	r3, r2, #28
 800add4:	bf44      	itt	mi
 800add6:	232b      	movmi	r3, #43	; 0x2b
 800add8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800addc:	f89a 3000 	ldrb.w	r3, [sl]
 800ade0:	2b2a      	cmp	r3, #42	; 0x2a
 800ade2:	d015      	beq.n	800ae10 <_vfiprintf_r+0x13c>
 800ade4:	9a07      	ldr	r2, [sp, #28]
 800ade6:	4654      	mov	r4, sl
 800ade8:	2000      	movs	r0, #0
 800adea:	f04f 0c0a 	mov.w	ip, #10
 800adee:	4621      	mov	r1, r4
 800adf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adf4:	3b30      	subs	r3, #48	; 0x30
 800adf6:	2b09      	cmp	r3, #9
 800adf8:	d94e      	bls.n	800ae98 <_vfiprintf_r+0x1c4>
 800adfa:	b1b0      	cbz	r0, 800ae2a <_vfiprintf_r+0x156>
 800adfc:	9207      	str	r2, [sp, #28]
 800adfe:	e014      	b.n	800ae2a <_vfiprintf_r+0x156>
 800ae00:	eba0 0308 	sub.w	r3, r0, r8
 800ae04:	fa09 f303 	lsl.w	r3, r9, r3
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	9304      	str	r3, [sp, #16]
 800ae0c:	46a2      	mov	sl, r4
 800ae0e:	e7d2      	b.n	800adb6 <_vfiprintf_r+0xe2>
 800ae10:	9b03      	ldr	r3, [sp, #12]
 800ae12:	1d19      	adds	r1, r3, #4
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	9103      	str	r1, [sp, #12]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	bfbb      	ittet	lt
 800ae1c:	425b      	neglt	r3, r3
 800ae1e:	f042 0202 	orrlt.w	r2, r2, #2
 800ae22:	9307      	strge	r3, [sp, #28]
 800ae24:	9307      	strlt	r3, [sp, #28]
 800ae26:	bfb8      	it	lt
 800ae28:	9204      	strlt	r2, [sp, #16]
 800ae2a:	7823      	ldrb	r3, [r4, #0]
 800ae2c:	2b2e      	cmp	r3, #46	; 0x2e
 800ae2e:	d10c      	bne.n	800ae4a <_vfiprintf_r+0x176>
 800ae30:	7863      	ldrb	r3, [r4, #1]
 800ae32:	2b2a      	cmp	r3, #42	; 0x2a
 800ae34:	d135      	bne.n	800aea2 <_vfiprintf_r+0x1ce>
 800ae36:	9b03      	ldr	r3, [sp, #12]
 800ae38:	1d1a      	adds	r2, r3, #4
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	9203      	str	r2, [sp, #12]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	bfb8      	it	lt
 800ae42:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae46:	3402      	adds	r4, #2
 800ae48:	9305      	str	r3, [sp, #20]
 800ae4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800af30 <_vfiprintf_r+0x25c>
 800ae4e:	7821      	ldrb	r1, [r4, #0]
 800ae50:	2203      	movs	r2, #3
 800ae52:	4650      	mov	r0, sl
 800ae54:	f7f5 f9c4 	bl	80001e0 <memchr>
 800ae58:	b140      	cbz	r0, 800ae6c <_vfiprintf_r+0x198>
 800ae5a:	2340      	movs	r3, #64	; 0x40
 800ae5c:	eba0 000a 	sub.w	r0, r0, sl
 800ae60:	fa03 f000 	lsl.w	r0, r3, r0
 800ae64:	9b04      	ldr	r3, [sp, #16]
 800ae66:	4303      	orrs	r3, r0
 800ae68:	3401      	adds	r4, #1
 800ae6a:	9304      	str	r3, [sp, #16]
 800ae6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae70:	482c      	ldr	r0, [pc, #176]	; (800af24 <_vfiprintf_r+0x250>)
 800ae72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae76:	2206      	movs	r2, #6
 800ae78:	f7f5 f9b2 	bl	80001e0 <memchr>
 800ae7c:	2800      	cmp	r0, #0
 800ae7e:	d03f      	beq.n	800af00 <_vfiprintf_r+0x22c>
 800ae80:	4b29      	ldr	r3, [pc, #164]	; (800af28 <_vfiprintf_r+0x254>)
 800ae82:	bb1b      	cbnz	r3, 800aecc <_vfiprintf_r+0x1f8>
 800ae84:	9b03      	ldr	r3, [sp, #12]
 800ae86:	3307      	adds	r3, #7
 800ae88:	f023 0307 	bic.w	r3, r3, #7
 800ae8c:	3308      	adds	r3, #8
 800ae8e:	9303      	str	r3, [sp, #12]
 800ae90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae92:	443b      	add	r3, r7
 800ae94:	9309      	str	r3, [sp, #36]	; 0x24
 800ae96:	e767      	b.n	800ad68 <_vfiprintf_r+0x94>
 800ae98:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae9c:	460c      	mov	r4, r1
 800ae9e:	2001      	movs	r0, #1
 800aea0:	e7a5      	b.n	800adee <_vfiprintf_r+0x11a>
 800aea2:	2300      	movs	r3, #0
 800aea4:	3401      	adds	r4, #1
 800aea6:	9305      	str	r3, [sp, #20]
 800aea8:	4619      	mov	r1, r3
 800aeaa:	f04f 0c0a 	mov.w	ip, #10
 800aeae:	4620      	mov	r0, r4
 800aeb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aeb4:	3a30      	subs	r2, #48	; 0x30
 800aeb6:	2a09      	cmp	r2, #9
 800aeb8:	d903      	bls.n	800aec2 <_vfiprintf_r+0x1ee>
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d0c5      	beq.n	800ae4a <_vfiprintf_r+0x176>
 800aebe:	9105      	str	r1, [sp, #20]
 800aec0:	e7c3      	b.n	800ae4a <_vfiprintf_r+0x176>
 800aec2:	fb0c 2101 	mla	r1, ip, r1, r2
 800aec6:	4604      	mov	r4, r0
 800aec8:	2301      	movs	r3, #1
 800aeca:	e7f0      	b.n	800aeae <_vfiprintf_r+0x1da>
 800aecc:	ab03      	add	r3, sp, #12
 800aece:	9300      	str	r3, [sp, #0]
 800aed0:	462a      	mov	r2, r5
 800aed2:	4b16      	ldr	r3, [pc, #88]	; (800af2c <_vfiprintf_r+0x258>)
 800aed4:	a904      	add	r1, sp, #16
 800aed6:	4630      	mov	r0, r6
 800aed8:	f7fd fd6e 	bl	80089b8 <_printf_float>
 800aedc:	4607      	mov	r7, r0
 800aede:	1c78      	adds	r0, r7, #1
 800aee0:	d1d6      	bne.n	800ae90 <_vfiprintf_r+0x1bc>
 800aee2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aee4:	07d9      	lsls	r1, r3, #31
 800aee6:	d405      	bmi.n	800aef4 <_vfiprintf_r+0x220>
 800aee8:	89ab      	ldrh	r3, [r5, #12]
 800aeea:	059a      	lsls	r2, r3, #22
 800aeec:	d402      	bmi.n	800aef4 <_vfiprintf_r+0x220>
 800aeee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aef0:	f7fd fc16 	bl	8008720 <__retarget_lock_release_recursive>
 800aef4:	89ab      	ldrh	r3, [r5, #12]
 800aef6:	065b      	lsls	r3, r3, #25
 800aef8:	f53f af12 	bmi.w	800ad20 <_vfiprintf_r+0x4c>
 800aefc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aefe:	e711      	b.n	800ad24 <_vfiprintf_r+0x50>
 800af00:	ab03      	add	r3, sp, #12
 800af02:	9300      	str	r3, [sp, #0]
 800af04:	462a      	mov	r2, r5
 800af06:	4b09      	ldr	r3, [pc, #36]	; (800af2c <_vfiprintf_r+0x258>)
 800af08:	a904      	add	r1, sp, #16
 800af0a:	4630      	mov	r0, r6
 800af0c:	f7fd fff8 	bl	8008f00 <_printf_i>
 800af10:	e7e4      	b.n	800aedc <_vfiprintf_r+0x208>
 800af12:	bf00      	nop
 800af14:	0800b1bc 	.word	0x0800b1bc
 800af18:	0800b1dc 	.word	0x0800b1dc
 800af1c:	0800b19c 	.word	0x0800b19c
 800af20:	0800b45c 	.word	0x0800b45c
 800af24:	0800b466 	.word	0x0800b466
 800af28:	080089b9 	.word	0x080089b9
 800af2c:	0800acaf 	.word	0x0800acaf
 800af30:	0800b462 	.word	0x0800b462

0800af34 <_read_r>:
 800af34:	b538      	push	{r3, r4, r5, lr}
 800af36:	4d07      	ldr	r5, [pc, #28]	; (800af54 <_read_r+0x20>)
 800af38:	4604      	mov	r4, r0
 800af3a:	4608      	mov	r0, r1
 800af3c:	4611      	mov	r1, r2
 800af3e:	2200      	movs	r2, #0
 800af40:	602a      	str	r2, [r5, #0]
 800af42:	461a      	mov	r2, r3
 800af44:	f7f6 fcfa 	bl	800193c <_read>
 800af48:	1c43      	adds	r3, r0, #1
 800af4a:	d102      	bne.n	800af52 <_read_r+0x1e>
 800af4c:	682b      	ldr	r3, [r5, #0]
 800af4e:	b103      	cbz	r3, 800af52 <_read_r+0x1e>
 800af50:	6023      	str	r3, [r4, #0]
 800af52:	bd38      	pop	{r3, r4, r5, pc}
 800af54:	200013b4 	.word	0x200013b4

0800af58 <abort>:
 800af58:	b508      	push	{r3, lr}
 800af5a:	2006      	movs	r0, #6
 800af5c:	f000 f860 	bl	800b020 <raise>
 800af60:	2001      	movs	r0, #1
 800af62:	f7f6 fce1 	bl	8001928 <_exit>
	...

0800af68 <_fstat_r>:
 800af68:	b538      	push	{r3, r4, r5, lr}
 800af6a:	4d07      	ldr	r5, [pc, #28]	; (800af88 <_fstat_r+0x20>)
 800af6c:	2300      	movs	r3, #0
 800af6e:	4604      	mov	r4, r0
 800af70:	4608      	mov	r0, r1
 800af72:	4611      	mov	r1, r2
 800af74:	602b      	str	r3, [r5, #0]
 800af76:	f7f6 fd26 	bl	80019c6 <_fstat>
 800af7a:	1c43      	adds	r3, r0, #1
 800af7c:	d102      	bne.n	800af84 <_fstat_r+0x1c>
 800af7e:	682b      	ldr	r3, [r5, #0]
 800af80:	b103      	cbz	r3, 800af84 <_fstat_r+0x1c>
 800af82:	6023      	str	r3, [r4, #0]
 800af84:	bd38      	pop	{r3, r4, r5, pc}
 800af86:	bf00      	nop
 800af88:	200013b4 	.word	0x200013b4

0800af8c <_isatty_r>:
 800af8c:	b538      	push	{r3, r4, r5, lr}
 800af8e:	4d06      	ldr	r5, [pc, #24]	; (800afa8 <_isatty_r+0x1c>)
 800af90:	2300      	movs	r3, #0
 800af92:	4604      	mov	r4, r0
 800af94:	4608      	mov	r0, r1
 800af96:	602b      	str	r3, [r5, #0]
 800af98:	f7f6 fd25 	bl	80019e6 <_isatty>
 800af9c:	1c43      	adds	r3, r0, #1
 800af9e:	d102      	bne.n	800afa6 <_isatty_r+0x1a>
 800afa0:	682b      	ldr	r3, [r5, #0]
 800afa2:	b103      	cbz	r3, 800afa6 <_isatty_r+0x1a>
 800afa4:	6023      	str	r3, [r4, #0]
 800afa6:	bd38      	pop	{r3, r4, r5, pc}
 800afa8:	200013b4 	.word	0x200013b4

0800afac <__ascii_mbtowc>:
 800afac:	b082      	sub	sp, #8
 800afae:	b901      	cbnz	r1, 800afb2 <__ascii_mbtowc+0x6>
 800afb0:	a901      	add	r1, sp, #4
 800afb2:	b142      	cbz	r2, 800afc6 <__ascii_mbtowc+0x1a>
 800afb4:	b14b      	cbz	r3, 800afca <__ascii_mbtowc+0x1e>
 800afb6:	7813      	ldrb	r3, [r2, #0]
 800afb8:	600b      	str	r3, [r1, #0]
 800afba:	7812      	ldrb	r2, [r2, #0]
 800afbc:	1e10      	subs	r0, r2, #0
 800afbe:	bf18      	it	ne
 800afc0:	2001      	movne	r0, #1
 800afc2:	b002      	add	sp, #8
 800afc4:	4770      	bx	lr
 800afc6:	4610      	mov	r0, r2
 800afc8:	e7fb      	b.n	800afc2 <__ascii_mbtowc+0x16>
 800afca:	f06f 0001 	mvn.w	r0, #1
 800afce:	e7f8      	b.n	800afc2 <__ascii_mbtowc+0x16>

0800afd0 <_raise_r>:
 800afd0:	291f      	cmp	r1, #31
 800afd2:	b538      	push	{r3, r4, r5, lr}
 800afd4:	4604      	mov	r4, r0
 800afd6:	460d      	mov	r5, r1
 800afd8:	d904      	bls.n	800afe4 <_raise_r+0x14>
 800afda:	2316      	movs	r3, #22
 800afdc:	6003      	str	r3, [r0, #0]
 800afde:	f04f 30ff 	mov.w	r0, #4294967295
 800afe2:	bd38      	pop	{r3, r4, r5, pc}
 800afe4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800afe6:	b112      	cbz	r2, 800afee <_raise_r+0x1e>
 800afe8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800afec:	b94b      	cbnz	r3, 800b002 <_raise_r+0x32>
 800afee:	4620      	mov	r0, r4
 800aff0:	f000 f830 	bl	800b054 <_getpid_r>
 800aff4:	462a      	mov	r2, r5
 800aff6:	4601      	mov	r1, r0
 800aff8:	4620      	mov	r0, r4
 800affa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800affe:	f000 b817 	b.w	800b030 <_kill_r>
 800b002:	2b01      	cmp	r3, #1
 800b004:	d00a      	beq.n	800b01c <_raise_r+0x4c>
 800b006:	1c59      	adds	r1, r3, #1
 800b008:	d103      	bne.n	800b012 <_raise_r+0x42>
 800b00a:	2316      	movs	r3, #22
 800b00c:	6003      	str	r3, [r0, #0]
 800b00e:	2001      	movs	r0, #1
 800b010:	e7e7      	b.n	800afe2 <_raise_r+0x12>
 800b012:	2400      	movs	r4, #0
 800b014:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b018:	4628      	mov	r0, r5
 800b01a:	4798      	blx	r3
 800b01c:	2000      	movs	r0, #0
 800b01e:	e7e0      	b.n	800afe2 <_raise_r+0x12>

0800b020 <raise>:
 800b020:	4b02      	ldr	r3, [pc, #8]	; (800b02c <raise+0xc>)
 800b022:	4601      	mov	r1, r0
 800b024:	6818      	ldr	r0, [r3, #0]
 800b026:	f7ff bfd3 	b.w	800afd0 <_raise_r>
 800b02a:	bf00      	nop
 800b02c:	20000054 	.word	0x20000054

0800b030 <_kill_r>:
 800b030:	b538      	push	{r3, r4, r5, lr}
 800b032:	4d07      	ldr	r5, [pc, #28]	; (800b050 <_kill_r+0x20>)
 800b034:	2300      	movs	r3, #0
 800b036:	4604      	mov	r4, r0
 800b038:	4608      	mov	r0, r1
 800b03a:	4611      	mov	r1, r2
 800b03c:	602b      	str	r3, [r5, #0]
 800b03e:	f7f6 fc63 	bl	8001908 <_kill>
 800b042:	1c43      	adds	r3, r0, #1
 800b044:	d102      	bne.n	800b04c <_kill_r+0x1c>
 800b046:	682b      	ldr	r3, [r5, #0]
 800b048:	b103      	cbz	r3, 800b04c <_kill_r+0x1c>
 800b04a:	6023      	str	r3, [r4, #0]
 800b04c:	bd38      	pop	{r3, r4, r5, pc}
 800b04e:	bf00      	nop
 800b050:	200013b4 	.word	0x200013b4

0800b054 <_getpid_r>:
 800b054:	f7f6 bc50 	b.w	80018f8 <_getpid>

0800b058 <__ascii_wctomb>:
 800b058:	b149      	cbz	r1, 800b06e <__ascii_wctomb+0x16>
 800b05a:	2aff      	cmp	r2, #255	; 0xff
 800b05c:	bf85      	ittet	hi
 800b05e:	238a      	movhi	r3, #138	; 0x8a
 800b060:	6003      	strhi	r3, [r0, #0]
 800b062:	700a      	strbls	r2, [r1, #0]
 800b064:	f04f 30ff 	movhi.w	r0, #4294967295
 800b068:	bf98      	it	ls
 800b06a:	2001      	movls	r0, #1
 800b06c:	4770      	bx	lr
 800b06e:	4608      	mov	r0, r1
 800b070:	4770      	bx	lr
	...

0800b074 <_init>:
 800b074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b076:	bf00      	nop
 800b078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b07a:	bc08      	pop	{r3}
 800b07c:	469e      	mov	lr, r3
 800b07e:	4770      	bx	lr

0800b080 <_fini>:
 800b080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b082:	bf00      	nop
 800b084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b086:	bc08      	pop	{r3}
 800b088:	469e      	mov	lr, r3
 800b08a:	4770      	bx	lr
