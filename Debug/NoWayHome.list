
NoWayHome.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005614  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  080057a4  080057a4  000157a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058f0  080058f0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080058f0  080058f0  000158f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058f8  080058f8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058f8  080058f8  000158f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058fc  080058fc  000158fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005900  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001128  20000074  08005974  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000119c  08005974  0002119c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b0c6  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000342e  00000000  00000000  0003b16a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a0  00000000  00000000  0003e598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001558  00000000  00000000  0003fc38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000288dc  00000000  00000000  00041190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a9c4  00000000  00000000  00069a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbecc  00000000  00000000  00084430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001802fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006234  00000000  00000000  0018034c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800578c 	.word	0x0800578c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800578c 	.word	0x0800578c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	4a07      	ldr	r2, [pc, #28]	; (8000500 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	4a06      	ldr	r2, [pc, #24]	; (8000504 <vApplicationGetIdleTaskMemory+0x30>)
 80004ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2280      	movs	r2, #128	; 0x80
 80004f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000090 	.word	0x20000090
 8000504:	20000144 	.word	0x20000144

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b5b0      	push	{r4, r5, r7, lr}
 800050a:	b09c      	sub	sp, #112	; 0x70
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fc38 	bl	8000d82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f863 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f925 	bl	8000764 <MX_GPIO_Init>
  MX_I2C2_Init();
 800051a:	f000 f8b5 	bl	8000688 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800051e:	f000 f8f1 	bl	8000704 <MX_USART1_UART_Init>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000522:	4b26      	ldr	r3, [pc, #152]	; (80005bc <main+0xb4>)
 8000524:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000528:	461d      	mov	r5, r3
 800052a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800052c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800052e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000532:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000536:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800053a:	2100      	movs	r1, #0
 800053c:	4618      	mov	r0, r3
 800053e:	f003 fb79 	bl	8003c34 <osThreadCreate>
 8000542:	4603      	mov	r3, r0
 8000544:	4a1e      	ldr	r2, [pc, #120]	; (80005c0 <main+0xb8>)
 8000546:	6013      	str	r3, [r2, #0]

  /* definition and creation of BlinkLed */
  osThreadDef(BlinkLed, StartBlinkLed, osPriorityNormal, 0, 128);
 8000548:	4b1e      	ldr	r3, [pc, #120]	; (80005c4 <main+0xbc>)
 800054a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800054e:	461d      	mov	r5, r3
 8000550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000554:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000558:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BlinkLedHandle = osThreadCreate(osThread(BlinkLed), NULL);
 800055c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f003 fb66 	bl	8003c34 <osThreadCreate>
 8000568:	4603      	mov	r3, r0
 800056a:	4a17      	ldr	r2, [pc, #92]	; (80005c8 <main+0xc0>)
 800056c:	6013      	str	r3, [r2, #0]

  /* definition and creation of RnT_Sensor */
  osThreadDef(RnT_Sensor, Start_RnT_Sensor, osPriorityBelowNormal, 0, 128);
 800056e:	4b17      	ldr	r3, [pc, #92]	; (80005cc <main+0xc4>)
 8000570:	f107 041c 	add.w	r4, r7, #28
 8000574:	461d      	mov	r5, r3
 8000576:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000578:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800057a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800057e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RnT_SensorHandle = osThreadCreate(osThread(RnT_Sensor), NULL);
 8000582:	f107 031c 	add.w	r3, r7, #28
 8000586:	2100      	movs	r1, #0
 8000588:	4618      	mov	r0, r3
 800058a:	f003 fb53 	bl	8003c34 <osThreadCreate>
 800058e:	4603      	mov	r3, r0
 8000590:	4a0f      	ldr	r2, [pc, #60]	; (80005d0 <main+0xc8>)
 8000592:	6013      	str	r3, [r2, #0]

  /* definition and creation of Int_But */
  osThreadDef(Int_But, StartInt_But, osPriorityAboveNormal, 0, 128);
 8000594:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <main+0xcc>)
 8000596:	463c      	mov	r4, r7
 8000598:	461d      	mov	r5, r3
 800059a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800059c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800059e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Int_ButHandle = osThreadCreate(osThread(Int_But), NULL);
 80005a6:	463b      	mov	r3, r7
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f003 fb42 	bl	8003c34 <osThreadCreate>
 80005b0:	4603      	mov	r3, r0
 80005b2:	4a09      	ldr	r2, [pc, #36]	; (80005d8 <main+0xd0>)
 80005b4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005b6:	f003 fb36 	bl	8003c26 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80005ba:	e7fe      	b.n	80005ba <main+0xb2>
 80005bc:	080057d0 	.word	0x080057d0
 80005c0:	2000041c 	.word	0x2000041c
 80005c4:	080057ec 	.word	0x080057ec
 80005c8:	20000420 	.word	0x20000420
 80005cc:	08005808 	.word	0x08005808
 80005d0:	20000424 	.word	0x20000424
 80005d4:	08005824 	.word	0x08005824
 80005d8:	20000428 	.word	0x20000428

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b096      	sub	sp, #88	; 0x58
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	2244      	movs	r2, #68	; 0x44
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f005 f804 	bl	80055f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	463b      	mov	r3, r7
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000602:	f001 f81d 	bl	8001640 <HAL_PWREx_ControlVoltageScaling>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800060c:	f000 f9e6 	bl	80009dc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000610:	f000 fff8 	bl	8001604 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000614:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <SystemClock_Config+0xa8>)
 8000616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800061a:	4a1a      	ldr	r2, [pc, #104]	; (8000684 <SystemClock_Config+0xa8>)
 800061c:	f023 0318 	bic.w	r3, r3, #24
 8000620:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000624:	2314      	movs	r3, #20
 8000626:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000628:	2301      	movs	r3, #1
 800062a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800062c:	2301      	movs	r3, #1
 800062e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000634:	2360      	movs	r3, #96	; 0x60
 8000636:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000638:	2300      	movs	r3, #0
 800063a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	4618      	mov	r0, r3
 8000642:	f001 f853 	bl	80016ec <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800064c:	f000 f9c6 	bl	80009dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000650:	230f      	movs	r3, #15
 8000652:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000664:	463b      	mov	r3, r7
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f001 fc1b 	bl	8001ea4 <HAL_RCC_ClockConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000674:	f000 f9b2 	bl	80009dc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000678:	f002 f954 	bl	8002924 <HAL_RCCEx_EnableMSIPLLMode>
}
 800067c:	bf00      	nop
 800067e:	3758      	adds	r7, #88	; 0x58
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40021000 	.word	0x40021000

08000688 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800068c:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <MX_I2C2_Init+0x74>)
 800068e:	4a1c      	ldr	r2, [pc, #112]	; (8000700 <MX_I2C2_Init+0x78>)
 8000690:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000692:	4b1a      	ldr	r3, [pc, #104]	; (80006fc <MX_I2C2_Init+0x74>)
 8000694:	f640 6214 	movw	r2, #3604	; 0xe14
 8000698:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800069a:	4b18      	ldr	r3, [pc, #96]	; (80006fc <MX_I2C2_Init+0x74>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a0:	4b16      	ldr	r3, [pc, #88]	; (80006fc <MX_I2C2_Init+0x74>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a6:	4b15      	ldr	r3, [pc, #84]	; (80006fc <MX_I2C2_Init+0x74>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006ac:	4b13      	ldr	r3, [pc, #76]	; (80006fc <MX_I2C2_Init+0x74>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006b2:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_I2C2_Init+0x74>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b8:	4b10      	ldr	r3, [pc, #64]	; (80006fc <MX_I2C2_Init+0x74>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_I2C2_Init+0x74>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006c4:	480d      	ldr	r0, [pc, #52]	; (80006fc <MX_I2C2_Init+0x74>)
 80006c6:	f000 fe76 	bl	80013b6 <HAL_I2C_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80006d0:	f000 f984 	bl	80009dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006d4:	2100      	movs	r1, #0
 80006d6:	4809      	ldr	r0, [pc, #36]	; (80006fc <MX_I2C2_Init+0x74>)
 80006d8:	f000 fefc 	bl	80014d4 <HAL_I2CEx_ConfigAnalogFilter>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80006e2:	f000 f97b 	bl	80009dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006e6:	2100      	movs	r1, #0
 80006e8:	4804      	ldr	r0, [pc, #16]	; (80006fc <MX_I2C2_Init+0x74>)
 80006ea:	f000 ff3e 	bl	800156a <HAL_I2CEx_ConfigDigitalFilter>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80006f4:	f000 f972 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000344 	.word	0x20000344
 8000700:	40005800 	.word	0x40005800

08000704 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000708:	4b14      	ldr	r3, [pc, #80]	; (800075c <MX_USART1_UART_Init+0x58>)
 800070a:	4a15      	ldr	r2, [pc, #84]	; (8000760 <MX_USART1_UART_Init+0x5c>)
 800070c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800070e:	4b13      	ldr	r3, [pc, #76]	; (800075c <MX_USART1_UART_Init+0x58>)
 8000710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000714:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_USART1_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_USART1_UART_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_USART1_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_USART1_UART_Init+0x58>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <MX_USART1_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_USART1_UART_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <MX_USART1_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_USART1_UART_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_USART1_UART_Init+0x58>)
 8000748:	f002 fda0 	bl	800328c <HAL_UART_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000752:	f000 f943 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000398 	.word	0x20000398
 8000760:	40013800 	.word	0x40013800

08000764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	; 0x28
 8000768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	4b2f      	ldr	r3, [pc, #188]	; (8000838 <MX_GPIO_Init+0xd4>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	4a2e      	ldr	r2, [pc, #184]	; (8000838 <MX_GPIO_Init+0xd4>)
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000786:	4b2c      	ldr	r3, [pc, #176]	; (8000838 <MX_GPIO_Init+0xd4>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	f003 0304 	and.w	r3, r3, #4
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000792:	4b29      	ldr	r3, [pc, #164]	; (8000838 <MX_GPIO_Init+0xd4>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	4a28      	ldr	r2, [pc, #160]	; (8000838 <MX_GPIO_Init+0xd4>)
 8000798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800079c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079e:	4b26      	ldr	r3, [pc, #152]	; (8000838 <MX_GPIO_Init+0xd4>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	4b23      	ldr	r3, [pc, #140]	; (8000838 <MX_GPIO_Init+0xd4>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	4a22      	ldr	r2, [pc, #136]	; (8000838 <MX_GPIO_Init+0xd4>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b6:	4b20      	ldr	r3, [pc, #128]	; (8000838 <MX_GPIO_Init+0xd4>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <MX_GPIO_Init+0xd4>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	4a1c      	ldr	r2, [pc, #112]	; (8000838 <MX_GPIO_Init+0xd4>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_GPIO_Init+0xd4>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007e0:	4816      	ldr	r0, [pc, #88]	; (800083c <MX_GPIO_Init+0xd8>)
 80007e2:	f000 fd93 	bl	800130c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	4619      	mov	r1, r3
 80007fc:	4810      	ldr	r0, [pc, #64]	; (8000840 <MX_GPIO_Init+0xdc>)
 80007fe:	f000 fbdb 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000802:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000808:	2301      	movs	r3, #1
 800080a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	2300      	movs	r3, #0
 8000812:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4619      	mov	r1, r3
 800081a:	4808      	ldr	r0, [pc, #32]	; (800083c <MX_GPIO_Init+0xd8>)
 800081c:	f000 fbcc 	bl	8000fb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000820:	2200      	movs	r2, #0
 8000822:	2105      	movs	r1, #5
 8000824:	2028      	movs	r0, #40	; 0x28
 8000826:	f000 fb9d 	bl	8000f64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800082a:	2028      	movs	r0, #40	; 0x28
 800082c:	f000 fbb6 	bl	8000f9c <HAL_NVIC_EnableIRQ>

}
 8000830:	bf00      	nop
 8000832:	3728      	adds	r7, #40	; 0x28
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40021000 	.word	0x40021000
 800083c:	48000400 	.word	0x48000400
 8000840:	48000800 	.word	0x48000800

08000844 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	const portTickType freq_button_sleep = 1000;
 800084c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000850:	60fb      	str	r3, [r7, #12]
	portTickType lastRun;
	/* Infinite loop */
	for(;;)
	{
		lastRun = xTaskGetTickCount();
 8000852:	f004 f807 	bl	8004864 <xTaskGetTickCount>
 8000856:	4603      	mov	r3, r0
 8000858:	60bb      	str	r3, [r7, #8]

		if(button_press > 0)
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <StartDefaultTask+0x38>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	2b00      	cmp	r3, #0
 8000860:	ddf7      	ble.n	8000852 <StartDefaultTask+0xe>
		{
			vTaskDelayUntil(&lastRun, freq_button_sleep);
 8000862:	f107 0308 	add.w	r3, r7, #8
 8000866:	68f9      	ldr	r1, [r7, #12]
 8000868:	4618      	mov	r0, r3
 800086a:	f003 fca1 	bl	80041b0 <vTaskDelayUntil>
			vTaskResume(Int_ButHandle);
 800086e:	4b04      	ldr	r3, [pc, #16]	; (8000880 <StartDefaultTask+0x3c>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4618      	mov	r0, r3
 8000874:	f003 fe12 	bl	800449c <vTaskResume>
		lastRun = xTaskGetTickCount();
 8000878:	e7eb      	b.n	8000852 <StartDefaultTask+0xe>
 800087a:	bf00      	nop
 800087c:	20000434 	.word	0x20000434
 8000880:	20000428 	.word	0x20000428

08000884 <StartBlinkLed>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlinkLed */
void StartBlinkLed(void const * argument)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkLed */
	portTickType lastRun;
	const portTickType frequency_battle = 500;
 800088c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000890:	617b      	str	r3, [r7, #20]
	const portTickType frequency_warning = 166;
 8000892:	23a6      	movs	r3, #166	; 0xa6
 8000894:	613b      	str	r3, [r7, #16]
	lastRun = xTaskGetTickCount();
 8000896:	f003 ffe5 	bl	8004864 <xTaskGetTickCount>
 800089a:	4603      	mov	r3, r0
 800089c:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{
		if(mode == 1 && state == 0)
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <StartBlinkLed+0x70>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d10f      	bne.n	80008c6 <StartBlinkLed+0x42>
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <StartBlinkLed+0x74>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d10b      	bne.n	80008c6 <StartBlinkLed+0x42>
		{
			HAL_GPIO_TogglePin(GPIOB, LED_Pin);
 80008ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008b2:	4812      	ldr	r0, [pc, #72]	; (80008fc <StartBlinkLed+0x78>)
 80008b4:	f000 fd42 	bl	800133c <HAL_GPIO_TogglePin>
			vTaskDelayUntil(&lastRun,frequency_battle);
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	6979      	ldr	r1, [r7, #20]
 80008be:	4618      	mov	r0, r3
 80008c0:	f003 fc76 	bl	80041b0 <vTaskDelayUntil>
 80008c4:	e015      	b.n	80008f2 <StartBlinkLed+0x6e>
		}
		else if(state == 1)
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <StartBlinkLed+0x74>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d10b      	bne.n	80008e6 <StartBlinkLed+0x62>
		{
			HAL_GPIO_TogglePin(GPIOB, LED_Pin);
 80008ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008d2:	480a      	ldr	r0, [pc, #40]	; (80008fc <StartBlinkLed+0x78>)
 80008d4:	f000 fd32 	bl	800133c <HAL_GPIO_TogglePin>
			vTaskDelayUntil(&lastRun,frequency_warning);
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	6939      	ldr	r1, [r7, #16]
 80008de:	4618      	mov	r0, r3
 80008e0:	f003 fc66 	bl	80041b0 <vTaskDelayUntil>
 80008e4:	e7db      	b.n	800089e <StartBlinkLed+0x1a>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_SET);
 80008e6:	2201      	movs	r2, #1
 80008e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008ec:	4803      	ldr	r0, [pc, #12]	; (80008fc <StartBlinkLed+0x78>)
 80008ee:	f000 fd0d 	bl	800130c <HAL_GPIO_WritePin>
		if(mode == 1 && state == 0)
 80008f2:	e7d4      	b.n	800089e <StartBlinkLed+0x1a>
 80008f4:	2000042c 	.word	0x2000042c
 80008f8:	20000430 	.word	0x20000430
 80008fc:	48000400 	.word	0x48000400

08000900 <Start_RnT_Sensor>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_RnT_Sensor */
void Start_RnT_Sensor(void const * argument)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_RnT_Sensor */
	/* Infinite loop */
	for(;;)
	{

		osDelay(1);
 8000908:	2001      	movs	r0, #1
 800090a:	f003 f9df 	bl	8003ccc <osDelay>
 800090e:	e7fb      	b.n	8000908 <Start_RnT_Sensor+0x8>

08000910 <StartInt_But>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartInt_But */
void StartInt_But(void const * argument)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartInt_But */
	portTickType lastRun;
	lastRun = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{
		vTaskSuspend(NULL);
 800091c:	2000      	movs	r0, #0
 800091e:	f003 fcf9 	bl	8004314 <vTaskSuspend>
		if((xTaskGetTickCount() - lastRun) > 1000)
 8000922:	f003 ff9f 	bl	8004864 <xTaskGetTickCount>
 8000926:	4602      	mov	r2, r0
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	1ad3      	subs	r3, r2, r3
 800092c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000930:	d933      	bls.n	800099a <StartInt_But+0x8a>
		{
			if(button_press == 0)
 8000932:	4b1d      	ldr	r3, [pc, #116]	; (80009a8 <StartInt_But+0x98>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d10b      	bne.n	8000952 <StartInt_But+0x42>
			{
				button_press = 1;
 800093a:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <StartInt_But+0x98>)
 800093c:	2201      	movs	r2, #1
 800093e:	601a      	str	r2, [r3, #0]
				lastRun = xTaskGetTickCount();
 8000940:	f003 ff90 	bl	8004864 <xTaskGetTickCount>
 8000944:	60f8      	str	r0, [r7, #12]
				vTaskResume(defaultTaskHandle);
 8000946:	4b19      	ldr	r3, [pc, #100]	; (80009ac <StartInt_But+0x9c>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4618      	mov	r0, r3
 800094c:	f003 fda6 	bl	800449c <vTaskResume>
 8000950:	e7e4      	b.n	800091c <StartInt_But+0xc>
			}
			else if(button_press == 1)
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <StartInt_But+0x98>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2b01      	cmp	r3, #1
 8000958:	d10d      	bne.n	8000976 <StartInt_But+0x66>
			{
				state = !state;
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <StartInt_But+0xa0>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	bf0c      	ite	eq
 8000962:	2301      	moveq	r3, #1
 8000964:	2300      	movne	r3, #0
 8000966:	b2db      	uxtb	r3, r3
 8000968:	461a      	mov	r2, r3
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <StartInt_But+0xa0>)
 800096c:	601a      	str	r2, [r3, #0]
				button_press = 0;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <StartInt_But+0x98>)
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	e7d2      	b.n	800091c <StartInt_But+0xc>
			}
			else if(button_press == 2)
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <StartInt_But+0x98>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b02      	cmp	r3, #2
 800097c:	d1ce      	bne.n	800091c <StartInt_But+0xc>
			{
				mode = !mode;
 800097e:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <StartInt_But+0xa4>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	2b00      	cmp	r3, #0
 8000984:	bf0c      	ite	eq
 8000986:	2301      	moveq	r3, #1
 8000988:	2300      	movne	r3, #0
 800098a:	b2db      	uxtb	r3, r3
 800098c:	461a      	mov	r2, r3
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <StartInt_But+0xa4>)
 8000990:	601a      	str	r2, [r3, #0]
				button_press = 0;
 8000992:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <StartInt_But+0x98>)
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	e7c0      	b.n	800091c <StartInt_But+0xc>
			}
		}
		else
		{
			button_press += 1;
 800099a:	4b03      	ldr	r3, [pc, #12]	; (80009a8 <StartInt_But+0x98>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	3301      	adds	r3, #1
 80009a0:	4a01      	ldr	r2, [pc, #4]	; (80009a8 <StartInt_But+0x98>)
 80009a2:	6013      	str	r3, [r2, #0]
		vTaskSuspend(NULL);
 80009a4:	e7ba      	b.n	800091c <StartInt_But+0xc>
 80009a6:	bf00      	nop
 80009a8:	20000434 	.word	0x20000434
 80009ac:	2000041c 	.word	0x2000041c
 80009b0:	20000430 	.word	0x20000430
 80009b4:	2000042c 	.word	0x2000042c

080009b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a04      	ldr	r2, [pc, #16]	; (80009d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d101      	bne.n	80009ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009ca:	f000 f9f3 	bl	8000db4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40012c00 	.word	0x40012c00

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80009e4:	e7fe      	b.n	80009e4 <Error_Handler+0x8>
	...

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <HAL_MspInit+0x4c>)
 80009f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009f2:	4a10      	ldr	r2, [pc, #64]	; (8000a34 <HAL_MspInit+0x4c>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6613      	str	r3, [r2, #96]	; 0x60
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <HAL_MspInit+0x4c>)
 80009fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a0a:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a10:	6593      	str	r3, [r2, #88]	; 0x58
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <HAL_MspInit+0x4c>)
 8000a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	210f      	movs	r1, #15
 8000a22:	f06f 0001 	mvn.w	r0, #1
 8000a26:	f000 fa9d 	bl	8000f64 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40021000 	.word	0x40021000

08000a38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b0ac      	sub	sp, #176	; 0xb0
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2288      	movs	r2, #136	; 0x88
 8000a56:	2100      	movs	r1, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f004 fdcd 	bl	80055f8 <memset>
  if(hi2c->Instance==I2C2)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a21      	ldr	r2, [pc, #132]	; (8000ae8 <HAL_I2C_MspInit+0xb0>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d13b      	bne.n	8000ae0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000a68:	2380      	movs	r3, #128	; 0x80
 8000a6a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4618      	mov	r0, r3
 8000a76:	f001 fc6b 	bl	8002350 <HAL_RCCEx_PeriphCLKConfig>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000a80:	f7ff ffac 	bl	80009dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a84:	4b19      	ldr	r3, [pc, #100]	; (8000aec <HAL_I2C_MspInit+0xb4>)
 8000a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a88:	4a18      	ldr	r2, [pc, #96]	; (8000aec <HAL_I2C_MspInit+0xb4>)
 8000a8a:	f043 0302 	orr.w	r3, r3, #2
 8000a8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a90:	4b16      	ldr	r3, [pc, #88]	; (8000aec <HAL_I2C_MspInit+0xb4>)
 8000a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a94:	f003 0302 	and.w	r3, r3, #2
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a9c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000aa0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aa4:	2312      	movs	r3, #18
 8000aa6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ab6:	2304      	movs	r3, #4
 8000ab8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000abc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	480b      	ldr	r0, [pc, #44]	; (8000af0 <HAL_I2C_MspInit+0xb8>)
 8000ac4:	f000 fa78 	bl	8000fb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ac8:	4b08      	ldr	r3, [pc, #32]	; (8000aec <HAL_I2C_MspInit+0xb4>)
 8000aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000acc:	4a07      	ldr	r2, [pc, #28]	; (8000aec <HAL_I2C_MspInit+0xb4>)
 8000ace:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ad2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ad4:	4b05      	ldr	r3, [pc, #20]	; (8000aec <HAL_I2C_MspInit+0xb4>)
 8000ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ae0:	bf00      	nop
 8000ae2:	37b0      	adds	r7, #176	; 0xb0
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40005800 	.word	0x40005800
 8000aec:	40021000 	.word	0x40021000
 8000af0:	48000400 	.word	0x48000400

08000af4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b0ac      	sub	sp, #176	; 0xb0
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2288      	movs	r2, #136	; 0x88
 8000b12:	2100      	movs	r1, #0
 8000b14:	4618      	mov	r0, r3
 8000b16:	f004 fd6f 	bl	80055f8 <memset>
  if(huart->Instance==USART1)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a22      	ldr	r2, [pc, #136]	; (8000ba8 <HAL_UART_MspInit+0xb4>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d13c      	bne.n	8000b9e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b24:	2301      	movs	r3, #1
 8000b26:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	4618      	mov	r0, r3
 8000b32:	f001 fc0d 	bl	8002350 <HAL_RCCEx_PeriphCLKConfig>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b3c:	f7ff ff4e 	bl	80009dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b40:	4b1a      	ldr	r3, [pc, #104]	; (8000bac <HAL_UART_MspInit+0xb8>)
 8000b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b44:	4a19      	ldr	r2, [pc, #100]	; (8000bac <HAL_UART_MspInit+0xb8>)
 8000b46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b4a:	6613      	str	r3, [r2, #96]	; 0x60
 8000b4c:	4b17      	ldr	r3, [pc, #92]	; (8000bac <HAL_UART_MspInit+0xb8>)
 8000b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b58:	4b14      	ldr	r3, [pc, #80]	; (8000bac <HAL_UART_MspInit+0xb8>)
 8000b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5c:	4a13      	ldr	r2, [pc, #76]	; (8000bac <HAL_UART_MspInit+0xb8>)
 8000b5e:	f043 0301 	orr.w	r3, r3, #1
 8000b62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <HAL_UART_MspInit+0xb8>)
 8000b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b68:	f003 0301 	and.w	r3, r3, #1
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b70:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b84:	2303      	movs	r3, #3
 8000b86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b8a:	2307      	movs	r3, #7
 8000b8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b90:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b94:	4619      	mov	r1, r3
 8000b96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9a:	f000 fa0d 	bl	8000fb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b9e:	bf00      	nop
 8000ba0:	37b0      	adds	r7, #176	; 0xb0
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40013800 	.word	0x40013800
 8000bac:	40021000 	.word	0x40021000

08000bb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08c      	sub	sp, #48	; 0x30
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000bbe:	4b2e      	ldr	r3, [pc, #184]	; (8000c78 <HAL_InitTick+0xc8>)
 8000bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bc2:	4a2d      	ldr	r2, [pc, #180]	; (8000c78 <HAL_InitTick+0xc8>)
 8000bc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bc8:	6613      	str	r3, [r2, #96]	; 0x60
 8000bca:	4b2b      	ldr	r3, [pc, #172]	; (8000c78 <HAL_InitTick+0xc8>)
 8000bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bd6:	f107 020c 	add.w	r2, r7, #12
 8000bda:	f107 0310 	add.w	r3, r7, #16
 8000bde:	4611      	mov	r1, r2
 8000be0:	4618      	mov	r0, r3
 8000be2:	f001 fb23 	bl	800222c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000be6:	f001 fb0b 	bl	8002200 <HAL_RCC_GetPCLK2Freq>
 8000bea:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bee:	4a23      	ldr	r2, [pc, #140]	; (8000c7c <HAL_InitTick+0xcc>)
 8000bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf4:	0c9b      	lsrs	r3, r3, #18
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000bfa:	4b21      	ldr	r3, [pc, #132]	; (8000c80 <HAL_InitTick+0xd0>)
 8000bfc:	4a21      	ldr	r2, [pc, #132]	; (8000c84 <HAL_InitTick+0xd4>)
 8000bfe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c00:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <HAL_InitTick+0xd0>)
 8000c02:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c06:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c08:	4a1d      	ldr	r2, [pc, #116]	; (8000c80 <HAL_InitTick+0xd0>)
 8000c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c0e:	4b1c      	ldr	r3, [pc, #112]	; (8000c80 <HAL_InitTick+0xd0>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <HAL_InitTick+0xd0>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c1a:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <HAL_InitTick+0xd0>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000c20:	4817      	ldr	r0, [pc, #92]	; (8000c80 <HAL_InitTick+0xd0>)
 8000c22:	f002 f861 	bl	8002ce8 <HAL_TIM_Base_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000c2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d11b      	bne.n	8000c6c <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000c34:	4812      	ldr	r0, [pc, #72]	; (8000c80 <HAL_InitTick+0xd0>)
 8000c36:	f002 f8b9 	bl	8002dac <HAL_TIM_Base_Start_IT>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000c40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d111      	bne.n	8000c6c <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c48:	2019      	movs	r0, #25
 8000c4a:	f000 f9a7 	bl	8000f9c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b0f      	cmp	r3, #15
 8000c52:	d808      	bhi.n	8000c66 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000c54:	2200      	movs	r2, #0
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	2019      	movs	r0, #25
 8000c5a:	f000 f983 	bl	8000f64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c5e:	4a0a      	ldr	r2, [pc, #40]	; (8000c88 <HAL_InitTick+0xd8>)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6013      	str	r3, [r2, #0]
 8000c64:	e002      	b.n	8000c6c <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3730      	adds	r7, #48	; 0x30
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	431bde83 	.word	0x431bde83
 8000c80:	20000438 	.word	0x20000438
 8000c84:	40012c00 	.word	0x40012c00
 8000c88:	20000004 	.word	0x20000004

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cbc:	4802      	ldr	r0, [pc, #8]	; (8000cc8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000cbe:	f002 f8e5 	bl	8002e8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20000438 	.word	0x20000438

08000ccc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000cd2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cd6:	f000 fb4b 	bl	8001370 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  BaseType_t checkIfYieldRequired;
  checkIfYieldRequired = xTaskResumeFromISR(Int_ButHandle);
 8000cda:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <EXTI15_10_IRQHandler+0x38>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f003 fc3a 	bl	8004558 <xTaskResumeFromISR>
 8000ce4:	6078      	str	r0, [r7, #4]
  portYIELD_FROM_ISR(checkIfYieldRequired);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d007      	beq.n	8000cfc <EXTI15_10_IRQHandler+0x30>
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <EXTI15_10_IRQHandler+0x3c>)
 8000cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	f3bf 8f4f 	dsb	sy
 8000cf8:	f3bf 8f6f 	isb	sy

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000428 	.word	0x20000428
 8000d08:	e000ed04 	.word	0xe000ed04

08000d0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <SystemInit+0x20>)
 8000d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d16:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <SystemInit+0x20>)
 8000d18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d34:	f7ff ffea 	bl	8000d0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d38:	480c      	ldr	r0, [pc, #48]	; (8000d6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d3a:	490d      	ldr	r1, [pc, #52]	; (8000d70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d3c:	4a0d      	ldr	r2, [pc, #52]	; (8000d74 <LoopForever+0xe>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d40:	e002      	b.n	8000d48 <LoopCopyDataInit>

08000d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d46:	3304      	adds	r3, #4

08000d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d4c:	d3f9      	bcc.n	8000d42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d50:	4c0a      	ldr	r4, [pc, #40]	; (8000d7c <LoopForever+0x16>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d54:	e001      	b.n	8000d5a <LoopFillZerobss>

08000d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d58:	3204      	adds	r2, #4

08000d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d5c:	d3fb      	bcc.n	8000d56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d5e:	f004 fc25 	bl	80055ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d62:	f7ff fbd1 	bl	8000508 <main>

08000d66 <LoopForever>:

LoopForever:
    b LoopForever
 8000d66:	e7fe      	b.n	8000d66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d68:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d70:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d74:	08005900 	.word	0x08005900
  ldr r2, =_sbss
 8000d78:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d7c:	2000119c 	.word	0x2000119c

08000d80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d80:	e7fe      	b.n	8000d80 <ADC1_2_IRQHandler>

08000d82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d8c:	2003      	movs	r0, #3
 8000d8e:	f000 f8de 	bl	8000f4e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d92:	200f      	movs	r0, #15
 8000d94:	f7ff ff0c 	bl	8000bb0 <HAL_InitTick>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d002      	beq.n	8000da4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	71fb      	strb	r3, [r7, #7]
 8000da2:	e001      	b.n	8000da8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000da4:	f7ff fe20 	bl	80009e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000da8:	79fb      	ldrb	r3, [r7, #7]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_IncTick+0x20>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_IncTick+0x24>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <HAL_IncTick+0x24>)
 8000dc6:	6013      	str	r3, [r2, #0]
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	20000008 	.word	0x20000008
 8000dd8:	20000484 	.word	0x20000484

08000ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return uwTick;
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <HAL_GetTick+0x14>)
 8000de2:	681b      	ldr	r3, [r3, #0]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	20000484 	.word	0x20000484

08000df4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <__NVIC_SetPriorityGrouping+0x44>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e0a:	68ba      	ldr	r2, [r7, #8]
 8000e0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e10:	4013      	ands	r3, r2
 8000e12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e26:	4a04      	ldr	r2, [pc, #16]	; (8000e38 <__NVIC_SetPriorityGrouping+0x44>)
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	60d3      	str	r3, [r2, #12]
}
 8000e2c:	bf00      	nop
 8000e2e:	3714      	adds	r7, #20
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e40:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <__NVIC_GetPriorityGrouping+0x18>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	0a1b      	lsrs	r3, r3, #8
 8000e46:	f003 0307 	and.w	r3, r3, #7
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	db0b      	blt.n	8000e82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	f003 021f 	and.w	r2, r3, #31
 8000e70:	4907      	ldr	r1, [pc, #28]	; (8000e90 <__NVIC_EnableIRQ+0x38>)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	095b      	lsrs	r3, r3, #5
 8000e78:	2001      	movs	r0, #1
 8000e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	e000e100 	.word	0xe000e100

08000e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	6039      	str	r1, [r7, #0]
 8000e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	db0a      	blt.n	8000ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	490c      	ldr	r1, [pc, #48]	; (8000ee0 <__NVIC_SetPriority+0x4c>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	0112      	lsls	r2, r2, #4
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	440b      	add	r3, r1
 8000eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ebc:	e00a      	b.n	8000ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4908      	ldr	r1, [pc, #32]	; (8000ee4 <__NVIC_SetPriority+0x50>)
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	f003 030f 	and.w	r3, r3, #15
 8000eca:	3b04      	subs	r3, #4
 8000ecc:	0112      	lsls	r2, r2, #4
 8000ece:	b2d2      	uxtb	r2, r2
 8000ed0:	440b      	add	r3, r1
 8000ed2:	761a      	strb	r2, [r3, #24]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000e100 	.word	0xe000e100
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b089      	sub	sp, #36	; 0x24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f1c3 0307 	rsb	r3, r3, #7
 8000f02:	2b04      	cmp	r3, #4
 8000f04:	bf28      	it	cs
 8000f06:	2304      	movcs	r3, #4
 8000f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	2b06      	cmp	r3, #6
 8000f10:	d902      	bls.n	8000f18 <NVIC_EncodePriority+0x30>
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3b03      	subs	r3, #3
 8000f16:	e000      	b.n	8000f1a <NVIC_EncodePriority+0x32>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43da      	mvns	r2, r3
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f30:	f04f 31ff 	mov.w	r1, #4294967295
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3a:	43d9      	mvns	r1, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	4313      	orrs	r3, r2
         );
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3724      	adds	r7, #36	; 0x24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff ff4c 	bl	8000df4 <__NVIC_SetPriorityGrouping>
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
 8000f70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f76:	f7ff ff61 	bl	8000e3c <__NVIC_GetPriorityGrouping>
 8000f7a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	68b9      	ldr	r1, [r7, #8]
 8000f80:	6978      	ldr	r0, [r7, #20]
 8000f82:	f7ff ffb1 	bl	8000ee8 <NVIC_EncodePriority>
 8000f86:	4602      	mov	r2, r0
 8000f88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff ff80 	bl	8000e94 <__NVIC_SetPriority>
}
 8000f94:	bf00      	nop
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff ff54 	bl	8000e58 <__NVIC_EnableIRQ>
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b087      	sub	sp, #28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc6:	e17f      	b.n	80012c8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	2101      	movs	r1, #1
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	f000 8171 	beq.w	80012c2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d005      	beq.n	8000ff8 <HAL_GPIO_Init+0x40>
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 0303 	and.w	r3, r3, #3
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d130      	bne.n	800105a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	2203      	movs	r2, #3
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	68da      	ldr	r2, [r3, #12]
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4313      	orrs	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800102e:	2201      	movs	r2, #1
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	091b      	lsrs	r3, r3, #4
 8001044:	f003 0201 	and.w	r2, r3, #1
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f003 0303 	and.w	r3, r3, #3
 8001062:	2b03      	cmp	r3, #3
 8001064:	d118      	bne.n	8001098 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800106c:	2201      	movs	r2, #1
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	08db      	lsrs	r3, r3, #3
 8001082:	f003 0201 	and.w	r2, r3, #1
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4313      	orrs	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	2b03      	cmp	r3, #3
 80010a2:	d017      	beq.n	80010d4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	2203      	movs	r2, #3
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4013      	ands	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	689a      	ldr	r2, [r3, #8]
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0303 	and.w	r3, r3, #3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d123      	bne.n	8001128 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	08da      	lsrs	r2, r3, #3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3208      	adds	r2, #8
 80010e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	220f      	movs	r2, #15
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4013      	ands	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	691a      	ldr	r2, [r3, #16]
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4313      	orrs	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	08da      	lsrs	r2, r3, #3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3208      	adds	r2, #8
 8001122:	6939      	ldr	r1, [r7, #16]
 8001124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	2203      	movs	r2, #3
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0203 	and.w	r2, r3, #3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4313      	orrs	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001164:	2b00      	cmp	r3, #0
 8001166:	f000 80ac 	beq.w	80012c2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116a:	4b5f      	ldr	r3, [pc, #380]	; (80012e8 <HAL_GPIO_Init+0x330>)
 800116c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800116e:	4a5e      	ldr	r2, [pc, #376]	; (80012e8 <HAL_GPIO_Init+0x330>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6613      	str	r3, [r2, #96]	; 0x60
 8001176:	4b5c      	ldr	r3, [pc, #368]	; (80012e8 <HAL_GPIO_Init+0x330>)
 8001178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001182:	4a5a      	ldr	r2, [pc, #360]	; (80012ec <HAL_GPIO_Init+0x334>)
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	089b      	lsrs	r3, r3, #2
 8001188:	3302      	adds	r3, #2
 800118a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	f003 0303 	and.w	r3, r3, #3
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	220f      	movs	r2, #15
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4013      	ands	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011ac:	d025      	beq.n	80011fa <HAL_GPIO_Init+0x242>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a4f      	ldr	r2, [pc, #316]	; (80012f0 <HAL_GPIO_Init+0x338>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d01f      	beq.n	80011f6 <HAL_GPIO_Init+0x23e>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a4e      	ldr	r2, [pc, #312]	; (80012f4 <HAL_GPIO_Init+0x33c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d019      	beq.n	80011f2 <HAL_GPIO_Init+0x23a>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a4d      	ldr	r2, [pc, #308]	; (80012f8 <HAL_GPIO_Init+0x340>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d013      	beq.n	80011ee <HAL_GPIO_Init+0x236>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a4c      	ldr	r2, [pc, #304]	; (80012fc <HAL_GPIO_Init+0x344>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d00d      	beq.n	80011ea <HAL_GPIO_Init+0x232>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a4b      	ldr	r2, [pc, #300]	; (8001300 <HAL_GPIO_Init+0x348>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d007      	beq.n	80011e6 <HAL_GPIO_Init+0x22e>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a4a      	ldr	r2, [pc, #296]	; (8001304 <HAL_GPIO_Init+0x34c>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d101      	bne.n	80011e2 <HAL_GPIO_Init+0x22a>
 80011de:	2306      	movs	r3, #6
 80011e0:	e00c      	b.n	80011fc <HAL_GPIO_Init+0x244>
 80011e2:	2307      	movs	r3, #7
 80011e4:	e00a      	b.n	80011fc <HAL_GPIO_Init+0x244>
 80011e6:	2305      	movs	r3, #5
 80011e8:	e008      	b.n	80011fc <HAL_GPIO_Init+0x244>
 80011ea:	2304      	movs	r3, #4
 80011ec:	e006      	b.n	80011fc <HAL_GPIO_Init+0x244>
 80011ee:	2303      	movs	r3, #3
 80011f0:	e004      	b.n	80011fc <HAL_GPIO_Init+0x244>
 80011f2:	2302      	movs	r3, #2
 80011f4:	e002      	b.n	80011fc <HAL_GPIO_Init+0x244>
 80011f6:	2301      	movs	r3, #1
 80011f8:	e000      	b.n	80011fc <HAL_GPIO_Init+0x244>
 80011fa:	2300      	movs	r3, #0
 80011fc:	697a      	ldr	r2, [r7, #20]
 80011fe:	f002 0203 	and.w	r2, r2, #3
 8001202:	0092      	lsls	r2, r2, #2
 8001204:	4093      	lsls	r3, r2
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	4313      	orrs	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800120c:	4937      	ldr	r1, [pc, #220]	; (80012ec <HAL_GPIO_Init+0x334>)
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	089b      	lsrs	r3, r3, #2
 8001212:	3302      	adds	r3, #2
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800121a:	4b3b      	ldr	r3, [pc, #236]	; (8001308 <HAL_GPIO_Init+0x350>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	43db      	mvns	r3, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4313      	orrs	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800123e:	4a32      	ldr	r2, [pc, #200]	; (8001308 <HAL_GPIO_Init+0x350>)
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001244:	4b30      	ldr	r3, [pc, #192]	; (8001308 <HAL_GPIO_Init+0x350>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	43db      	mvns	r3, r3
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4013      	ands	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d003      	beq.n	8001268 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	4313      	orrs	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001268:	4a27      	ldr	r2, [pc, #156]	; (8001308 <HAL_GPIO_Init+0x350>)
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800126e:	4b26      	ldr	r3, [pc, #152]	; (8001308 <HAL_GPIO_Init+0x350>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	43db      	mvns	r3, r3
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	4013      	ands	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d003      	beq.n	8001292 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4313      	orrs	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001292:	4a1d      	ldr	r2, [pc, #116]	; (8001308 <HAL_GPIO_Init+0x350>)
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001298:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <HAL_GPIO_Init+0x350>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	43db      	mvns	r3, r3
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4013      	ands	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d003      	beq.n	80012bc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012bc:	4a12      	ldr	r2, [pc, #72]	; (8001308 <HAL_GPIO_Init+0x350>)
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	3301      	adds	r3, #1
 80012c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	fa22 f303 	lsr.w	r3, r2, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f47f ae78 	bne.w	8000fc8 <HAL_GPIO_Init+0x10>
  }
}
 80012d8:	bf00      	nop
 80012da:	bf00      	nop
 80012dc:	371c      	adds	r7, #28
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40010000 	.word	0x40010000
 80012f0:	48000400 	.word	0x48000400
 80012f4:	48000800 	.word	0x48000800
 80012f8:	48000c00 	.word	0x48000c00
 80012fc:	48001000 	.word	0x48001000
 8001300:	48001400 	.word	0x48001400
 8001304:	48001800 	.word	0x48001800
 8001308:	40010400 	.word	0x40010400

0800130c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
 8001318:	4613      	mov	r3, r2
 800131a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800131c:	787b      	ldrb	r3, [r7, #1]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001322:	887a      	ldrh	r2, [r7, #2]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001328:	e002      	b.n	8001330 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800132a:	887a      	ldrh	r2, [r7, #2]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	695b      	ldr	r3, [r3, #20]
 800134c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800134e:	887a      	ldrh	r2, [r7, #2]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4013      	ands	r3, r2
 8001354:	041a      	lsls	r2, r3, #16
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	43d9      	mvns	r1, r3
 800135a:	887b      	ldrh	r3, [r7, #2]
 800135c:	400b      	ands	r3, r1
 800135e:	431a      	orrs	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	619a      	str	r2, [r3, #24]
}
 8001364:	bf00      	nop
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800137c:	695a      	ldr	r2, [r3, #20]
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	4013      	ands	r3, r2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d006      	beq.n	8001394 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001386:	4a05      	ldr	r2, [pc, #20]	; (800139c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800138c:	88fb      	ldrh	r3, [r7, #6]
 800138e:	4618      	mov	r0, r3
 8001390:	f000 f806 	bl	80013a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40010400 	.word	0x40010400

080013a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d101      	bne.n	80013c8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e081      	b.n	80014cc <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d106      	bne.n	80013e2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff fb2b 	bl	8000a38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2224      	movs	r2, #36	; 0x24
 80013e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 0201 	bic.w	r2, r2, #1
 80013f8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001406:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001416:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d107      	bne.n	8001430 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	e006      	b.n	800143e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689a      	ldr	r2, [r3, #8]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800143c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	2b02      	cmp	r3, #2
 8001444:	d104      	bne.n	8001450 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800144e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	6812      	ldr	r2, [r2, #0]
 800145a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800145e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001462:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	68da      	ldr	r2, [r3, #12]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001472:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	691a      	ldr	r2, [r3, #16]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	430a      	orrs	r2, r1
 800148c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69d9      	ldr	r1, [r3, #28]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a1a      	ldr	r2, [r3, #32]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	430a      	orrs	r2, r1
 800149c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f042 0201 	orr.w	r2, r2, #1
 80014ac:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2220      	movs	r2, #32
 80014b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b20      	cmp	r3, #32
 80014e8:	d138      	bne.n	800155c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d101      	bne.n	80014f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80014f4:	2302      	movs	r3, #2
 80014f6:	e032      	b.n	800155e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2201      	movs	r2, #1
 80014fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2224      	movs	r2, #36	; 0x24
 8001504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 0201 	bic.w	r2, r2, #1
 8001516:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001526:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6819      	ldr	r1, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	430a      	orrs	r2, r1
 8001536:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f042 0201 	orr.w	r2, r2, #1
 8001546:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2220      	movs	r2, #32
 800154c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001558:	2300      	movs	r3, #0
 800155a:	e000      	b.n	800155e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800155c:	2302      	movs	r3, #2
  }
}
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800156a:	b480      	push	{r7}
 800156c:	b085      	sub	sp, #20
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2b20      	cmp	r3, #32
 800157e:	d139      	bne.n	80015f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001586:	2b01      	cmp	r3, #1
 8001588:	d101      	bne.n	800158e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800158a:	2302      	movs	r3, #2
 800158c:	e033      	b.n	80015f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2224      	movs	r2, #36	; 0x24
 800159a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 0201 	bic.w	r2, r2, #1
 80015ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80015bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	021b      	lsls	r3, r3, #8
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f042 0201 	orr.w	r2, r2, #1
 80015de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2220      	movs	r2, #32
 80015e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80015f0:	2300      	movs	r3, #0
 80015f2:	e000      	b.n	80015f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80015f4:	2302      	movs	r3, #2
  }
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001608:	4b05      	ldr	r3, [pc, #20]	; (8001620 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a04      	ldr	r2, [pc, #16]	; (8001620 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800160e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001612:	6013      	str	r3, [r2, #0]
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	40007000 	.word	0x40007000

08001624 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001628:	4b04      	ldr	r3, [pc, #16]	; (800163c <HAL_PWREx_GetVoltageRange+0x18>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001630:	4618      	mov	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	40007000 	.word	0x40007000

08001640 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800164e:	d130      	bne.n	80016b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001650:	4b23      	ldr	r3, [pc, #140]	; (80016e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800165c:	d038      	beq.n	80016d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800165e:	4b20      	ldr	r3, [pc, #128]	; (80016e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001666:	4a1e      	ldr	r2, [pc, #120]	; (80016e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001668:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800166c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800166e:	4b1d      	ldr	r3, [pc, #116]	; (80016e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2232      	movs	r2, #50	; 0x32
 8001674:	fb02 f303 	mul.w	r3, r2, r3
 8001678:	4a1b      	ldr	r2, [pc, #108]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800167a:	fba2 2303 	umull	r2, r3, r2, r3
 800167e:	0c9b      	lsrs	r3, r3, #18
 8001680:	3301      	adds	r3, #1
 8001682:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001684:	e002      	b.n	800168c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	3b01      	subs	r3, #1
 800168a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800168c:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001698:	d102      	bne.n	80016a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1f2      	bne.n	8001686 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016a0:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016a2:	695b      	ldr	r3, [r3, #20]
 80016a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ac:	d110      	bne.n	80016d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e00f      	b.n	80016d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016b2:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016be:	d007      	beq.n	80016d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016c0:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016c8:	4a05      	ldr	r2, [pc, #20]	; (80016e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	40007000 	.word	0x40007000
 80016e4:	20000000 	.word	0x20000000
 80016e8:	431bde83 	.word	0x431bde83

080016ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e3ca      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016fe:	4b97      	ldr	r3, [pc, #604]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 030c 	and.w	r3, r3, #12
 8001706:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001708:	4b94      	ldr	r3, [pc, #592]	; (800195c <HAL_RCC_OscConfig+0x270>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0310 	and.w	r3, r3, #16
 800171a:	2b00      	cmp	r3, #0
 800171c:	f000 80e4 	beq.w	80018e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d007      	beq.n	8001736 <HAL_RCC_OscConfig+0x4a>
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	2b0c      	cmp	r3, #12
 800172a:	f040 808b 	bne.w	8001844 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	2b01      	cmp	r3, #1
 8001732:	f040 8087 	bne.w	8001844 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001736:	4b89      	ldr	r3, [pc, #548]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d005      	beq.n	800174e <HAL_RCC_OscConfig+0x62>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e3a2      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a1a      	ldr	r2, [r3, #32]
 8001752:	4b82      	ldr	r3, [pc, #520]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	2b00      	cmp	r3, #0
 800175c:	d004      	beq.n	8001768 <HAL_RCC_OscConfig+0x7c>
 800175e:	4b7f      	ldr	r3, [pc, #508]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001766:	e005      	b.n	8001774 <HAL_RCC_OscConfig+0x88>
 8001768:	4b7c      	ldr	r3, [pc, #496]	; (800195c <HAL_RCC_OscConfig+0x270>)
 800176a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800176e:	091b      	lsrs	r3, r3, #4
 8001770:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001774:	4293      	cmp	r3, r2
 8001776:	d223      	bcs.n	80017c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	4618      	mov	r0, r3
 800177e:	f000 fd87 	bl	8002290 <RCC_SetFlashLatencyFromMSIRange>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e383      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800178c:	4b73      	ldr	r3, [pc, #460]	; (800195c <HAL_RCC_OscConfig+0x270>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a72      	ldr	r2, [pc, #456]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001792:	f043 0308 	orr.w	r3, r3, #8
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	4b70      	ldr	r3, [pc, #448]	; (800195c <HAL_RCC_OscConfig+0x270>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	496d      	ldr	r1, [pc, #436]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017aa:	4b6c      	ldr	r3, [pc, #432]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	021b      	lsls	r3, r3, #8
 80017b8:	4968      	ldr	r1, [pc, #416]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	604b      	str	r3, [r1, #4]
 80017be:	e025      	b.n	800180c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017c0:	4b66      	ldr	r3, [pc, #408]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a65      	ldr	r2, [pc, #404]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80017c6:	f043 0308 	orr.w	r3, r3, #8
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	4b63      	ldr	r3, [pc, #396]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	4960      	ldr	r1, [pc, #384]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017de:	4b5f      	ldr	r3, [pc, #380]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	021b      	lsls	r3, r3, #8
 80017ec:	495b      	ldr	r1, [pc, #364]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d109      	bne.n	800180c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f000 fd47 	bl	8002290 <RCC_SetFlashLatencyFromMSIRange>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e343      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800180c:	f000 fc4a 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 8001810:	4602      	mov	r2, r0
 8001812:	4b52      	ldr	r3, [pc, #328]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	091b      	lsrs	r3, r3, #4
 8001818:	f003 030f 	and.w	r3, r3, #15
 800181c:	4950      	ldr	r1, [pc, #320]	; (8001960 <HAL_RCC_OscConfig+0x274>)
 800181e:	5ccb      	ldrb	r3, [r1, r3]
 8001820:	f003 031f 	and.w	r3, r3, #31
 8001824:	fa22 f303 	lsr.w	r3, r2, r3
 8001828:	4a4e      	ldr	r2, [pc, #312]	; (8001964 <HAL_RCC_OscConfig+0x278>)
 800182a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800182c:	4b4e      	ldr	r3, [pc, #312]	; (8001968 <HAL_RCC_OscConfig+0x27c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff f9bd 	bl	8000bb0 <HAL_InitTick>
 8001836:	4603      	mov	r3, r0
 8001838:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800183a:	7bfb      	ldrb	r3, [r7, #15]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d052      	beq.n	80018e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001840:	7bfb      	ldrb	r3, [r7, #15]
 8001842:	e327      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d032      	beq.n	80018b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800184c:	4b43      	ldr	r3, [pc, #268]	; (800195c <HAL_RCC_OscConfig+0x270>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a42      	ldr	r2, [pc, #264]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001858:	f7ff fac0 	bl	8000ddc <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001860:	f7ff fabc 	bl	8000ddc <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e310      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001872:	4b3a      	ldr	r3, [pc, #232]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f0      	beq.n	8001860 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800187e:	4b37      	ldr	r3, [pc, #220]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a36      	ldr	r2, [pc, #216]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001884:	f043 0308 	orr.w	r3, r3, #8
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	4b34      	ldr	r3, [pc, #208]	; (800195c <HAL_RCC_OscConfig+0x270>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a1b      	ldr	r3, [r3, #32]
 8001896:	4931      	ldr	r1, [pc, #196]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001898:	4313      	orrs	r3, r2
 800189a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800189c:	4b2f      	ldr	r3, [pc, #188]	; (800195c <HAL_RCC_OscConfig+0x270>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	69db      	ldr	r3, [r3, #28]
 80018a8:	021b      	lsls	r3, r3, #8
 80018aa:	492c      	ldr	r1, [pc, #176]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	604b      	str	r3, [r1, #4]
 80018b0:	e01a      	b.n	80018e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018b2:	4b2a      	ldr	r3, [pc, #168]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a29      	ldr	r2, [pc, #164]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80018b8:	f023 0301 	bic.w	r3, r3, #1
 80018bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018be:	f7ff fa8d 	bl	8000ddc <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018c6:	f7ff fa89 	bl	8000ddc <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e2dd      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018d8:	4b20      	ldr	r3, [pc, #128]	; (800195c <HAL_RCC_OscConfig+0x270>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1f0      	bne.n	80018c6 <HAL_RCC_OscConfig+0x1da>
 80018e4:	e000      	b.n	80018e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d074      	beq.n	80019de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	2b08      	cmp	r3, #8
 80018f8:	d005      	beq.n	8001906 <HAL_RCC_OscConfig+0x21a>
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	2b0c      	cmp	r3, #12
 80018fe:	d10e      	bne.n	800191e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	2b03      	cmp	r3, #3
 8001904:	d10b      	bne.n	800191e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d064      	beq.n	80019dc <HAL_RCC_OscConfig+0x2f0>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d160      	bne.n	80019dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e2ba      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001926:	d106      	bne.n	8001936 <HAL_RCC_OscConfig+0x24a>
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <HAL_RCC_OscConfig+0x270>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a0b      	ldr	r2, [pc, #44]	; (800195c <HAL_RCC_OscConfig+0x270>)
 800192e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	e026      	b.n	8001984 <HAL_RCC_OscConfig+0x298>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800193e:	d115      	bne.n	800196c <HAL_RCC_OscConfig+0x280>
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a05      	ldr	r2, [pc, #20]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001946:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800194a:	6013      	str	r3, [r2, #0]
 800194c:	4b03      	ldr	r3, [pc, #12]	; (800195c <HAL_RCC_OscConfig+0x270>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a02      	ldr	r2, [pc, #8]	; (800195c <HAL_RCC_OscConfig+0x270>)
 8001952:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001956:	6013      	str	r3, [r2, #0]
 8001958:	e014      	b.n	8001984 <HAL_RCC_OscConfig+0x298>
 800195a:	bf00      	nop
 800195c:	40021000 	.word	0x40021000
 8001960:	08005848 	.word	0x08005848
 8001964:	20000000 	.word	0x20000000
 8001968:	20000004 	.word	0x20000004
 800196c:	4ba0      	ldr	r3, [pc, #640]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a9f      	ldr	r2, [pc, #636]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001976:	6013      	str	r3, [r2, #0]
 8001978:	4b9d      	ldr	r3, [pc, #628]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a9c      	ldr	r2, [pc, #624]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 800197e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001982:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d013      	beq.n	80019b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198c:	f7ff fa26 	bl	8000ddc <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001994:	f7ff fa22 	bl	8000ddc <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b64      	cmp	r3, #100	; 0x64
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e276      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019a6:	4b92      	ldr	r3, [pc, #584]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0f0      	beq.n	8001994 <HAL_RCC_OscConfig+0x2a8>
 80019b2:	e014      	b.n	80019de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b4:	f7ff fa12 	bl	8000ddc <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019bc:	f7ff fa0e 	bl	8000ddc <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b64      	cmp	r3, #100	; 0x64
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e262      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019ce:	4b88      	ldr	r3, [pc, #544]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f0      	bne.n	80019bc <HAL_RCC_OscConfig+0x2d0>
 80019da:	e000      	b.n	80019de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d060      	beq.n	8001aac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	2b04      	cmp	r3, #4
 80019ee:	d005      	beq.n	80019fc <HAL_RCC_OscConfig+0x310>
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	2b0c      	cmp	r3, #12
 80019f4:	d119      	bne.n	8001a2a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d116      	bne.n	8001a2a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019fc:	4b7c      	ldr	r3, [pc, #496]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d005      	beq.n	8001a14 <HAL_RCC_OscConfig+0x328>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e23f      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a14:	4b76      	ldr	r3, [pc, #472]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	061b      	lsls	r3, r3, #24
 8001a22:	4973      	ldr	r1, [pc, #460]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a28:	e040      	b.n	8001aac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d023      	beq.n	8001a7a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a32:	4b6f      	ldr	r3, [pc, #444]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a6e      	ldr	r2, [pc, #440]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3e:	f7ff f9cd 	bl	8000ddc <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a46:	f7ff f9c9 	bl	8000ddc <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e21d      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a58:	4b65      	ldr	r3, [pc, #404]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0f0      	beq.n	8001a46 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a64:	4b62      	ldr	r3, [pc, #392]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	061b      	lsls	r3, r3, #24
 8001a72:	495f      	ldr	r1, [pc, #380]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	604b      	str	r3, [r1, #4]
 8001a78:	e018      	b.n	8001aac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a7a:	4b5d      	ldr	r3, [pc, #372]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a5c      	ldr	r2, [pc, #368]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001a80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a86:	f7ff f9a9 	bl	8000ddc <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a8e:	f7ff f9a5 	bl	8000ddc <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e1f9      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001aa0:	4b53      	ldr	r3, [pc, #332]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1f0      	bne.n	8001a8e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0308 	and.w	r3, r3, #8
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d03c      	beq.n	8001b32 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	695b      	ldr	r3, [r3, #20]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d01c      	beq.n	8001afa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ac0:	4b4b      	ldr	r3, [pc, #300]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ac6:	4a4a      	ldr	r2, [pc, #296]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad0:	f7ff f984 	bl	8000ddc <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad8:	f7ff f980 	bl	8000ddc <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e1d4      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001aea:	4b41      	ldr	r3, [pc, #260]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0ef      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x3ec>
 8001af8:	e01b      	b.n	8001b32 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001afa:	4b3d      	ldr	r3, [pc, #244]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001afc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b00:	4a3b      	ldr	r2, [pc, #236]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001b02:	f023 0301 	bic.w	r3, r3, #1
 8001b06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0a:	f7ff f967 	bl	8000ddc <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b12:	f7ff f963 	bl	8000ddc <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e1b7      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b24:	4b32      	ldr	r3, [pc, #200]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1ef      	bne.n	8001b12 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0304 	and.w	r3, r3, #4
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 80a6 	beq.w	8001c8c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b40:	2300      	movs	r3, #0
 8001b42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b44:	4b2a      	ldr	r3, [pc, #168]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d10d      	bne.n	8001b6c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b50:	4b27      	ldr	r3, [pc, #156]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b54:	4a26      	ldr	r2, [pc, #152]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b5a:	6593      	str	r3, [r2, #88]	; 0x58
 8001b5c:	4b24      	ldr	r3, [pc, #144]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b6c:	4b21      	ldr	r3, [pc, #132]	; (8001bf4 <HAL_RCC_OscConfig+0x508>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d118      	bne.n	8001baa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b78:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <HAL_RCC_OscConfig+0x508>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a1d      	ldr	r2, [pc, #116]	; (8001bf4 <HAL_RCC_OscConfig+0x508>)
 8001b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b84:	f7ff f92a 	bl	8000ddc <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b8c:	f7ff f926 	bl	8000ddc <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e17a      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <HAL_RCC_OscConfig+0x508>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0f0      	beq.n	8001b8c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d108      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x4d8>
 8001bb2:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb8:	4a0d      	ldr	r2, [pc, #52]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001bba:	f043 0301 	orr.w	r3, r3, #1
 8001bbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bc2:	e029      	b.n	8001c18 <HAL_RCC_OscConfig+0x52c>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	2b05      	cmp	r3, #5
 8001bca:	d115      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x50c>
 8001bcc:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd2:	4a07      	ldr	r2, [pc, #28]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001bd4:	f043 0304 	orr.w	r3, r3, #4
 8001bd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be2:	4a03      	ldr	r2, [pc, #12]	; (8001bf0 <HAL_RCC_OscConfig+0x504>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bec:	e014      	b.n	8001c18 <HAL_RCC_OscConfig+0x52c>
 8001bee:	bf00      	nop
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40007000 	.word	0x40007000
 8001bf8:	4b9c      	ldr	r3, [pc, #624]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bfe:	4a9b      	ldr	r2, [pc, #620]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001c00:	f023 0301 	bic.w	r3, r3, #1
 8001c04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c08:	4b98      	ldr	r3, [pc, #608]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c0e:	4a97      	ldr	r2, [pc, #604]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001c10:	f023 0304 	bic.w	r3, r3, #4
 8001c14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d016      	beq.n	8001c4e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c20:	f7ff f8dc 	bl	8000ddc <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c26:	e00a      	b.n	8001c3e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c28:	f7ff f8d8 	bl	8000ddc <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e12a      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c3e:	4b8b      	ldr	r3, [pc, #556]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0ed      	beq.n	8001c28 <HAL_RCC_OscConfig+0x53c>
 8001c4c:	e015      	b.n	8001c7a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c4e:	f7ff f8c5 	bl	8000ddc <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c54:	e00a      	b.n	8001c6c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c56:	f7ff f8c1 	bl	8000ddc <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e113      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c6c:	4b7f      	ldr	r3, [pc, #508]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1ed      	bne.n	8001c56 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c7a:	7ffb      	ldrb	r3, [r7, #31]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d105      	bne.n	8001c8c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c80:	4b7a      	ldr	r3, [pc, #488]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c84:	4a79      	ldr	r2, [pc, #484]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001c86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c8a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 80fe 	beq.w	8001e92 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	f040 80d0 	bne.w	8001e40 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ca0:	4b72      	ldr	r3, [pc, #456]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	f003 0203 	and.w	r2, r3, #3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d130      	bne.n	8001d16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d127      	bne.n	8001d16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d11f      	bne.n	8001d16 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ce0:	2a07      	cmp	r2, #7
 8001ce2:	bf14      	ite	ne
 8001ce4:	2201      	movne	r2, #1
 8001ce6:	2200      	moveq	r2, #0
 8001ce8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d113      	bne.n	8001d16 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf8:	085b      	lsrs	r3, r3, #1
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d109      	bne.n	8001d16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0c:	085b      	lsrs	r3, r3, #1
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d06e      	beq.n	8001df4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	2b0c      	cmp	r3, #12
 8001d1a:	d069      	beq.n	8001df0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d1c:	4b53      	ldr	r3, [pc, #332]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d105      	bne.n	8001d34 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d28:	4b50      	ldr	r3, [pc, #320]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e0ad      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d38:	4b4c      	ldr	r3, [pc, #304]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a4b      	ldr	r2, [pc, #300]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001d3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d42:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d44:	f7ff f84a 	bl	8000ddc <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d4c:	f7ff f846 	bl	8000ddc <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e09a      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d5e:	4b43      	ldr	r3, [pc, #268]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d6a:	4b40      	ldr	r3, [pc, #256]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001d6c:	68da      	ldr	r2, [r3, #12]
 8001d6e:	4b40      	ldr	r3, [pc, #256]	; (8001e70 <HAL_RCC_OscConfig+0x784>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d7a:	3a01      	subs	r2, #1
 8001d7c:	0112      	lsls	r2, r2, #4
 8001d7e:	4311      	orrs	r1, r2
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d84:	0212      	lsls	r2, r2, #8
 8001d86:	4311      	orrs	r1, r2
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d8c:	0852      	lsrs	r2, r2, #1
 8001d8e:	3a01      	subs	r2, #1
 8001d90:	0552      	lsls	r2, r2, #21
 8001d92:	4311      	orrs	r1, r2
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d98:	0852      	lsrs	r2, r2, #1
 8001d9a:	3a01      	subs	r2, #1
 8001d9c:	0652      	lsls	r2, r2, #25
 8001d9e:	4311      	orrs	r1, r2
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001da4:	0912      	lsrs	r2, r2, #4
 8001da6:	0452      	lsls	r2, r2, #17
 8001da8:	430a      	orrs	r2, r1
 8001daa:	4930      	ldr	r1, [pc, #192]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001db0:	4b2e      	ldr	r3, [pc, #184]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a2d      	ldr	r2, [pc, #180]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001db6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dbc:	4b2b      	ldr	r3, [pc, #172]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	4a2a      	ldr	r2, [pc, #168]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001dc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dc6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dc8:	f7ff f808 	bl	8000ddc <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd0:	f7ff f804 	bl	8000ddc <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e058      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001de2:	4b22      	ldr	r3, [pc, #136]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0f0      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dee:	e050      	b.n	8001e92 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e04f      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001df4:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d148      	bne.n	8001e92 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e00:	4b1a      	ldr	r3, [pc, #104]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a19      	ldr	r2, [pc, #100]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001e06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e0c:	4b17      	ldr	r3, [pc, #92]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	4a16      	ldr	r2, [pc, #88]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001e12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e18:	f7fe ffe0 	bl	8000ddc <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e20:	f7fe ffdc 	bl	8000ddc <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e030      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e32:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d0f0      	beq.n	8001e20 <HAL_RCC_OscConfig+0x734>
 8001e3e:	e028      	b.n	8001e92 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	2b0c      	cmp	r3, #12
 8001e44:	d023      	beq.n	8001e8e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e46:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a08      	ldr	r2, [pc, #32]	; (8001e6c <HAL_RCC_OscConfig+0x780>)
 8001e4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e52:	f7fe ffc3 	bl	8000ddc <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e58:	e00c      	b.n	8001e74 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e5a:	f7fe ffbf 	bl	8000ddc <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d905      	bls.n	8001e74 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e013      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e74:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <HAL_RCC_OscConfig+0x7b0>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1ec      	bne.n	8001e5a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <HAL_RCC_OscConfig+0x7b0>)
 8001e82:	68da      	ldr	r2, [r3, #12]
 8001e84:	4905      	ldr	r1, [pc, #20]	; (8001e9c <HAL_RCC_OscConfig+0x7b0>)
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_RCC_OscConfig+0x7b4>)
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60cb      	str	r3, [r1, #12]
 8001e8c:	e001      	b.n	8001e92 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3720      	adds	r7, #32
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	feeefffc 	.word	0xfeeefffc

08001ea4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e0e7      	b.n	8002088 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb8:	4b75      	ldr	r3, [pc, #468]	; (8002090 <HAL_RCC_ClockConfig+0x1ec>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d910      	bls.n	8001ee8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec6:	4b72      	ldr	r3, [pc, #456]	; (8002090 <HAL_RCC_ClockConfig+0x1ec>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f023 0207 	bic.w	r2, r3, #7
 8001ece:	4970      	ldr	r1, [pc, #448]	; (8002090 <HAL_RCC_ClockConfig+0x1ec>)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed6:	4b6e      	ldr	r3, [pc, #440]	; (8002090 <HAL_RCC_ClockConfig+0x1ec>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d001      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e0cf      	b.n	8002088 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d010      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	4b66      	ldr	r3, [pc, #408]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d908      	bls.n	8001f16 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f04:	4b63      	ldr	r3, [pc, #396]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	4960      	ldr	r1, [pc, #384]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d04c      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b03      	cmp	r3, #3
 8001f28:	d107      	bne.n	8001f3a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f2a:	4b5a      	ldr	r3, [pc, #360]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d121      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e0a6      	b.n	8002088 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d107      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f42:	4b54      	ldr	r3, [pc, #336]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d115      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e09a      	b.n	8002088 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d107      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f5a:	4b4e      	ldr	r3, [pc, #312]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d109      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e08e      	b.n	8002088 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f6a:	4b4a      	ldr	r3, [pc, #296]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e086      	b.n	8002088 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f7a:	4b46      	ldr	r3, [pc, #280]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f023 0203 	bic.w	r2, r3, #3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	4943      	ldr	r1, [pc, #268]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f8c:	f7fe ff26 	bl	8000ddc <HAL_GetTick>
 8001f90:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f92:	e00a      	b.n	8001faa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f94:	f7fe ff22 	bl	8000ddc <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e06e      	b.n	8002088 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001faa:	4b3a      	ldr	r3, [pc, #232]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 020c 	and.w	r2, r3, #12
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d1eb      	bne.n	8001f94 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d010      	beq.n	8001fea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	4b31      	ldr	r3, [pc, #196]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d208      	bcs.n	8001fea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd8:	4b2e      	ldr	r3, [pc, #184]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	492b      	ldr	r1, [pc, #172]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fea:	4b29      	ldr	r3, [pc, #164]	; (8002090 <HAL_RCC_ClockConfig+0x1ec>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d210      	bcs.n	800201a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff8:	4b25      	ldr	r3, [pc, #148]	; (8002090 <HAL_RCC_ClockConfig+0x1ec>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f023 0207 	bic.w	r2, r3, #7
 8002000:	4923      	ldr	r1, [pc, #140]	; (8002090 <HAL_RCC_ClockConfig+0x1ec>)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	4313      	orrs	r3, r2
 8002006:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002008:	4b21      	ldr	r3, [pc, #132]	; (8002090 <HAL_RCC_ClockConfig+0x1ec>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	429a      	cmp	r2, r3
 8002014:	d001      	beq.n	800201a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e036      	b.n	8002088 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	2b00      	cmp	r3, #0
 8002024:	d008      	beq.n	8002038 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002026:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	4918      	ldr	r1, [pc, #96]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8002034:	4313      	orrs	r3, r2
 8002036:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0308 	and.w	r3, r3, #8
 8002040:	2b00      	cmp	r3, #0
 8002042:	d009      	beq.n	8002058 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002044:	4b13      	ldr	r3, [pc, #76]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4910      	ldr	r1, [pc, #64]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8002054:	4313      	orrs	r3, r2
 8002056:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002058:	f000 f824 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 800205c:	4602      	mov	r2, r0
 800205e:	4b0d      	ldr	r3, [pc, #52]	; (8002094 <HAL_RCC_ClockConfig+0x1f0>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	091b      	lsrs	r3, r3, #4
 8002064:	f003 030f 	and.w	r3, r3, #15
 8002068:	490b      	ldr	r1, [pc, #44]	; (8002098 <HAL_RCC_ClockConfig+0x1f4>)
 800206a:	5ccb      	ldrb	r3, [r1, r3]
 800206c:	f003 031f 	and.w	r3, r3, #31
 8002070:	fa22 f303 	lsr.w	r3, r2, r3
 8002074:	4a09      	ldr	r2, [pc, #36]	; (800209c <HAL_RCC_ClockConfig+0x1f8>)
 8002076:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002078:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <HAL_RCC_ClockConfig+0x1fc>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe fd97 	bl	8000bb0 <HAL_InitTick>
 8002082:	4603      	mov	r3, r0
 8002084:	72fb      	strb	r3, [r7, #11]

  return status;
 8002086:	7afb      	ldrb	r3, [r7, #11]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40022000 	.word	0x40022000
 8002094:	40021000 	.word	0x40021000
 8002098:	08005848 	.word	0x08005848
 800209c:	20000000 	.word	0x20000000
 80020a0:	20000004 	.word	0x20000004

080020a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b089      	sub	sp, #36	; 0x24
 80020a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
 80020ae:	2300      	movs	r3, #0
 80020b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020b2:	4b3e      	ldr	r3, [pc, #248]	; (80021ac <HAL_RCC_GetSysClockFreq+0x108>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 030c 	and.w	r3, r3, #12
 80020ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020bc:	4b3b      	ldr	r3, [pc, #236]	; (80021ac <HAL_RCC_GetSysClockFreq+0x108>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f003 0303 	and.w	r3, r3, #3
 80020c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <HAL_RCC_GetSysClockFreq+0x34>
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	2b0c      	cmp	r3, #12
 80020d0:	d121      	bne.n	8002116 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d11e      	bne.n	8002116 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020d8:	4b34      	ldr	r3, [pc, #208]	; (80021ac <HAL_RCC_GetSysClockFreq+0x108>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0308 	and.w	r3, r3, #8
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d107      	bne.n	80020f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020e4:	4b31      	ldr	r3, [pc, #196]	; (80021ac <HAL_RCC_GetSysClockFreq+0x108>)
 80020e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ea:	0a1b      	lsrs	r3, r3, #8
 80020ec:	f003 030f 	and.w	r3, r3, #15
 80020f0:	61fb      	str	r3, [r7, #28]
 80020f2:	e005      	b.n	8002100 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020f4:	4b2d      	ldr	r3, [pc, #180]	; (80021ac <HAL_RCC_GetSysClockFreq+0x108>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	091b      	lsrs	r3, r3, #4
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002100:	4a2b      	ldr	r2, [pc, #172]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002108:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10d      	bne.n	800212c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002114:	e00a      	b.n	800212c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	2b04      	cmp	r3, #4
 800211a:	d102      	bne.n	8002122 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800211c:	4b25      	ldr	r3, [pc, #148]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800211e:	61bb      	str	r3, [r7, #24]
 8002120:	e004      	b.n	800212c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	2b08      	cmp	r3, #8
 8002126:	d101      	bne.n	800212c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002128:	4b23      	ldr	r3, [pc, #140]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800212a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	2b0c      	cmp	r3, #12
 8002130:	d134      	bne.n	800219c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002132:	4b1e      	ldr	r3, [pc, #120]	; (80021ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2b02      	cmp	r3, #2
 8002140:	d003      	beq.n	800214a <HAL_RCC_GetSysClockFreq+0xa6>
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	2b03      	cmp	r3, #3
 8002146:	d003      	beq.n	8002150 <HAL_RCC_GetSysClockFreq+0xac>
 8002148:	e005      	b.n	8002156 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800214a:	4b1a      	ldr	r3, [pc, #104]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800214c:	617b      	str	r3, [r7, #20]
      break;
 800214e:	e005      	b.n	800215c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002150:	4b19      	ldr	r3, [pc, #100]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002152:	617b      	str	r3, [r7, #20]
      break;
 8002154:	e002      	b.n	800215c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	617b      	str	r3, [r7, #20]
      break;
 800215a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800215c:	4b13      	ldr	r3, [pc, #76]	; (80021ac <HAL_RCC_GetSysClockFreq+0x108>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	091b      	lsrs	r3, r3, #4
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	3301      	adds	r3, #1
 8002168:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800216a:	4b10      	ldr	r3, [pc, #64]	; (80021ac <HAL_RCC_GetSysClockFreq+0x108>)
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	0a1b      	lsrs	r3, r3, #8
 8002170:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	fb03 f202 	mul.w	r2, r3, r2
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002180:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002182:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <HAL_RCC_GetSysClockFreq+0x108>)
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	0e5b      	lsrs	r3, r3, #25
 8002188:	f003 0303 	and.w	r3, r3, #3
 800218c:	3301      	adds	r3, #1
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	fbb2 f3f3 	udiv	r3, r2, r3
 800219a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800219c:	69bb      	ldr	r3, [r7, #24]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3724      	adds	r7, #36	; 0x24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40021000 	.word	0x40021000
 80021b0:	08005860 	.word	0x08005860
 80021b4:	00f42400 	.word	0x00f42400
 80021b8:	007a1200 	.word	0x007a1200

080021bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021c0:	4b03      	ldr	r3, [pc, #12]	; (80021d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80021c2:	681b      	ldr	r3, [r3, #0]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	20000000 	.word	0x20000000

080021d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021d8:	f7ff fff0 	bl	80021bc <HAL_RCC_GetHCLKFreq>
 80021dc:	4602      	mov	r2, r0
 80021de:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	0a1b      	lsrs	r3, r3, #8
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	4904      	ldr	r1, [pc, #16]	; (80021fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80021ea:	5ccb      	ldrb	r3, [r1, r3]
 80021ec:	f003 031f 	and.w	r3, r3, #31
 80021f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40021000 	.word	0x40021000
 80021fc:	08005858 	.word	0x08005858

08002200 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002204:	f7ff ffda 	bl	80021bc <HAL_RCC_GetHCLKFreq>
 8002208:	4602      	mov	r2, r0
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_RCC_GetPCLK2Freq+0x24>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	0adb      	lsrs	r3, r3, #11
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	4904      	ldr	r1, [pc, #16]	; (8002228 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002216:	5ccb      	ldrb	r3, [r1, r3]
 8002218:	f003 031f 	and.w	r3, r3, #31
 800221c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002220:	4618      	mov	r0, r3
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40021000 	.word	0x40021000
 8002228:	08005858 	.word	0x08005858

0800222c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	220f      	movs	r2, #15
 800223a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800223c:	4b12      	ldr	r3, [pc, #72]	; (8002288 <HAL_RCC_GetClockConfig+0x5c>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 0203 	and.w	r2, r3, #3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002248:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <HAL_RCC_GetClockConfig+0x5c>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002254:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <HAL_RCC_GetClockConfig+0x5c>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002260:	4b09      	ldr	r3, [pc, #36]	; (8002288 <HAL_RCC_GetClockConfig+0x5c>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	08db      	lsrs	r3, r3, #3
 8002266:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800226e:	4b07      	ldr	r3, [pc, #28]	; (800228c <HAL_RCC_GetClockConfig+0x60>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0207 	and.w	r2, r3, #7
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	601a      	str	r2, [r3, #0]
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	40021000 	.word	0x40021000
 800228c:	40022000 	.word	0x40022000

08002290 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800229c:	4b2a      	ldr	r3, [pc, #168]	; (8002348 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800229e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022a8:	f7ff f9bc 	bl	8001624 <HAL_PWREx_GetVoltageRange>
 80022ac:	6178      	str	r0, [r7, #20]
 80022ae:	e014      	b.n	80022da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022b0:	4b25      	ldr	r3, [pc, #148]	; (8002348 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b4:	4a24      	ldr	r2, [pc, #144]	; (8002348 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ba:	6593      	str	r3, [r2, #88]	; 0x58
 80022bc:	4b22      	ldr	r3, [pc, #136]	; (8002348 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022c8:	f7ff f9ac 	bl	8001624 <HAL_PWREx_GetVoltageRange>
 80022cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022ce:	4b1e      	ldr	r3, [pc, #120]	; (8002348 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d2:	4a1d      	ldr	r2, [pc, #116]	; (8002348 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022e0:	d10b      	bne.n	80022fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b80      	cmp	r3, #128	; 0x80
 80022e6:	d919      	bls.n	800231c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2ba0      	cmp	r3, #160	; 0xa0
 80022ec:	d902      	bls.n	80022f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022ee:	2302      	movs	r3, #2
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	e013      	b.n	800231c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022f4:	2301      	movs	r3, #1
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	e010      	b.n	800231c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b80      	cmp	r3, #128	; 0x80
 80022fe:	d902      	bls.n	8002306 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002300:	2303      	movs	r3, #3
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	e00a      	b.n	800231c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b80      	cmp	r3, #128	; 0x80
 800230a:	d102      	bne.n	8002312 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800230c:	2302      	movs	r3, #2
 800230e:	613b      	str	r3, [r7, #16]
 8002310:	e004      	b.n	800231c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b70      	cmp	r3, #112	; 0x70
 8002316:	d101      	bne.n	800231c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002318:	2301      	movs	r3, #1
 800231a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800231c:	4b0b      	ldr	r3, [pc, #44]	; (800234c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f023 0207 	bic.w	r2, r3, #7
 8002324:	4909      	ldr	r1, [pc, #36]	; (800234c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800232c:	4b07      	ldr	r3, [pc, #28]	; (800234c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	429a      	cmp	r2, r3
 8002338:	d001      	beq.n	800233e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40021000 	.word	0x40021000
 800234c:	40022000 	.word	0x40022000

08002350 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002358:	2300      	movs	r3, #0
 800235a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800235c:	2300      	movs	r3, #0
 800235e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002368:	2b00      	cmp	r3, #0
 800236a:	d041      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002370:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002374:	d02a      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002376:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800237a:	d824      	bhi.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800237c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002380:	d008      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002382:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002386:	d81e      	bhi.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00a      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800238c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002390:	d010      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002392:	e018      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002394:	4b86      	ldr	r3, [pc, #536]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	4a85      	ldr	r2, [pc, #532]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800239e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023a0:	e015      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3304      	adds	r3, #4
 80023a6:	2100      	movs	r1, #0
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 facb 	bl	8002944 <RCCEx_PLLSAI1_Config>
 80023ae:	4603      	mov	r3, r0
 80023b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023b2:	e00c      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3320      	adds	r3, #32
 80023b8:	2100      	movs	r1, #0
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 fbb6 	bl	8002b2c <RCCEx_PLLSAI2_Config>
 80023c0:	4603      	mov	r3, r0
 80023c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023c4:	e003      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	74fb      	strb	r3, [r7, #19]
      break;
 80023ca:	e000      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80023cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023ce:	7cfb      	ldrb	r3, [r7, #19]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10b      	bne.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023d4:	4b76      	ldr	r3, [pc, #472]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023e2:	4973      	ldr	r1, [pc, #460]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023ea:	e001      	b.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023ec:	7cfb      	ldrb	r3, [r7, #19]
 80023ee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d041      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002400:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002404:	d02a      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002406:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800240a:	d824      	bhi.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800240c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002410:	d008      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002412:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002416:	d81e      	bhi.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00a      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800241c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002420:	d010      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002422:	e018      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002424:	4b62      	ldr	r3, [pc, #392]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	4a61      	ldr	r2, [pc, #388]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800242a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800242e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002430:	e015      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3304      	adds	r3, #4
 8002436:	2100      	movs	r1, #0
 8002438:	4618      	mov	r0, r3
 800243a:	f000 fa83 	bl	8002944 <RCCEx_PLLSAI1_Config>
 800243e:	4603      	mov	r3, r0
 8002440:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002442:	e00c      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3320      	adds	r3, #32
 8002448:	2100      	movs	r1, #0
 800244a:	4618      	mov	r0, r3
 800244c:	f000 fb6e 	bl	8002b2c <RCCEx_PLLSAI2_Config>
 8002450:	4603      	mov	r3, r0
 8002452:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002454:	e003      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	74fb      	strb	r3, [r7, #19]
      break;
 800245a:	e000      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800245c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800245e:	7cfb      	ldrb	r3, [r7, #19]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10b      	bne.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002464:	4b52      	ldr	r3, [pc, #328]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002472:	494f      	ldr	r1, [pc, #316]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002474:	4313      	orrs	r3, r2
 8002476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800247a:	e001      	b.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800247c:	7cfb      	ldrb	r3, [r7, #19]
 800247e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 80a0 	beq.w	80025ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800248e:	2300      	movs	r3, #0
 8002490:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002492:	4b47      	ldr	r3, [pc, #284]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80024a2:	2300      	movs	r3, #0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00d      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a8:	4b41      	ldr	r3, [pc, #260]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ac:	4a40      	ldr	r2, [pc, #256]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b2:	6593      	str	r3, [r2, #88]	; 0x58
 80024b4:	4b3e      	ldr	r3, [pc, #248]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024bc:	60bb      	str	r3, [r7, #8]
 80024be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024c0:	2301      	movs	r3, #1
 80024c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024c4:	4b3b      	ldr	r3, [pc, #236]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a3a      	ldr	r2, [pc, #232]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024d0:	f7fe fc84 	bl	8000ddc <HAL_GetTick>
 80024d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024d6:	e009      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d8:	f7fe fc80 	bl	8000ddc <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d902      	bls.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	74fb      	strb	r3, [r7, #19]
        break;
 80024ea:	e005      	b.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024ec:	4b31      	ldr	r3, [pc, #196]	; (80025b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0ef      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80024f8:	7cfb      	ldrb	r3, [r7, #19]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d15c      	bne.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024fe:	4b2c      	ldr	r3, [pc, #176]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002504:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002508:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d01f      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	429a      	cmp	r2, r3
 800251a:	d019      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800251c:	4b24      	ldr	r3, [pc, #144]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800251e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002526:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002528:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800252a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252e:	4a20      	ldr	r2, [pc, #128]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002538:	4b1d      	ldr	r3, [pc, #116]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253e:	4a1c      	ldr	r2, [pc, #112]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002548:	4a19      	ldr	r2, [pc, #100]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d016      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255a:	f7fe fc3f 	bl	8000ddc <HAL_GetTick>
 800255e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002560:	e00b      	b.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002562:	f7fe fc3b 	bl	8000ddc <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002570:	4293      	cmp	r3, r2
 8002572:	d902      	bls.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	74fb      	strb	r3, [r7, #19]
            break;
 8002578:	e006      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800257a:	4b0d      	ldr	r3, [pc, #52]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800257c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0ec      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002588:	7cfb      	ldrb	r3, [r7, #19]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10c      	bne.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800258e:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002594:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800259e:	4904      	ldr	r1, [pc, #16]	; (80025b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80025a6:	e009      	b.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025a8:	7cfb      	ldrb	r3, [r7, #19]
 80025aa:	74bb      	strb	r3, [r7, #18]
 80025ac:	e006      	b.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80025ae:	bf00      	nop
 80025b0:	40021000 	.word	0x40021000
 80025b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025b8:	7cfb      	ldrb	r3, [r7, #19]
 80025ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025bc:	7c7b      	ldrb	r3, [r7, #17]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d105      	bne.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c2:	4b9e      	ldr	r3, [pc, #632]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c6:	4a9d      	ldr	r2, [pc, #628]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025da:	4b98      	ldr	r3, [pc, #608]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e0:	f023 0203 	bic.w	r2, r3, #3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e8:	4994      	ldr	r1, [pc, #592]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025fc:	4b8f      	ldr	r3, [pc, #572]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f023 020c 	bic.w	r2, r3, #12
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800260a:	498c      	ldr	r1, [pc, #560]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0304 	and.w	r3, r3, #4
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800261e:	4b87      	ldr	r3, [pc, #540]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002624:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	4983      	ldr	r1, [pc, #524]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0308 	and.w	r3, r3, #8
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002640:	4b7e      	ldr	r3, [pc, #504]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002646:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	497b      	ldr	r1, [pc, #492]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0310 	and.w	r3, r3, #16
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002662:	4b76      	ldr	r3, [pc, #472]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002668:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002670:	4972      	ldr	r1, [pc, #456]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0320 	and.w	r3, r3, #32
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00a      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002684:	4b6d      	ldr	r3, [pc, #436]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002692:	496a      	ldr	r1, [pc, #424]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00a      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026a6:	4b65      	ldr	r3, [pc, #404]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b4:	4961      	ldr	r1, [pc, #388]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00a      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026c8:	4b5c      	ldr	r3, [pc, #368]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d6:	4959      	ldr	r1, [pc, #356]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00a      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026ea:	4b54      	ldr	r3, [pc, #336]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f8:	4950      	ldr	r1, [pc, #320]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00a      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800270c:	4b4b      	ldr	r3, [pc, #300]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002712:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271a:	4948      	ldr	r1, [pc, #288]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800271c:	4313      	orrs	r3, r2
 800271e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00a      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800272e:	4b43      	ldr	r3, [pc, #268]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002734:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273c:	493f      	ldr	r1, [pc, #252]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273e:	4313      	orrs	r3, r2
 8002740:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d028      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002750:	4b3a      	ldr	r3, [pc, #232]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002756:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800275e:	4937      	ldr	r1, [pc, #220]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002760:	4313      	orrs	r3, r2
 8002762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800276a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800276e:	d106      	bne.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002770:	4b32      	ldr	r3, [pc, #200]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	4a31      	ldr	r2, [pc, #196]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002776:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800277a:	60d3      	str	r3, [r2, #12]
 800277c:	e011      	b.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002782:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002786:	d10c      	bne.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3304      	adds	r3, #4
 800278c:	2101      	movs	r1, #1
 800278e:	4618      	mov	r0, r3
 8002790:	f000 f8d8 	bl	8002944 <RCCEx_PLLSAI1_Config>
 8002794:	4603      	mov	r3, r0
 8002796:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002798:	7cfb      	ldrb	r3, [r7, #19]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800279e:	7cfb      	ldrb	r3, [r7, #19]
 80027a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d028      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027ae:	4b23      	ldr	r3, [pc, #140]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027bc:	491f      	ldr	r1, [pc, #124]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027cc:	d106      	bne.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027ce:	4b1b      	ldr	r3, [pc, #108]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	4a1a      	ldr	r2, [pc, #104]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027d8:	60d3      	str	r3, [r2, #12]
 80027da:	e011      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027e4:	d10c      	bne.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3304      	adds	r3, #4
 80027ea:	2101      	movs	r1, #1
 80027ec:	4618      	mov	r0, r3
 80027ee:	f000 f8a9 	bl	8002944 <RCCEx_PLLSAI1_Config>
 80027f2:	4603      	mov	r3, r0
 80027f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027f6:	7cfb      	ldrb	r3, [r7, #19]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80027fc:	7cfb      	ldrb	r3, [r7, #19]
 80027fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d02b      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800280c:	4b0b      	ldr	r3, [pc, #44]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800280e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002812:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800281a:	4908      	ldr	r1, [pc, #32]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281c:	4313      	orrs	r3, r2
 800281e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002826:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800282a:	d109      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800282c:	4b03      	ldr	r3, [pc, #12]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	4a02      	ldr	r2, [pc, #8]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002832:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002836:	60d3      	str	r3, [r2, #12]
 8002838:	e014      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800283a:	bf00      	nop
 800283c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002844:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002848:	d10c      	bne.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3304      	adds	r3, #4
 800284e:	2101      	movs	r1, #1
 8002850:	4618      	mov	r0, r3
 8002852:	f000 f877 	bl	8002944 <RCCEx_PLLSAI1_Config>
 8002856:	4603      	mov	r3, r0
 8002858:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800285a:	7cfb      	ldrb	r3, [r7, #19]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002860:	7cfb      	ldrb	r3, [r7, #19]
 8002862:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d02f      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002870:	4b2b      	ldr	r3, [pc, #172]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002876:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800287e:	4928      	ldr	r1, [pc, #160]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002880:	4313      	orrs	r3, r2
 8002882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800288a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800288e:	d10d      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3304      	adds	r3, #4
 8002894:	2102      	movs	r1, #2
 8002896:	4618      	mov	r0, r3
 8002898:	f000 f854 	bl	8002944 <RCCEx_PLLSAI1_Config>
 800289c:	4603      	mov	r3, r0
 800289e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028a0:	7cfb      	ldrb	r3, [r7, #19]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d014      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028a6:	7cfb      	ldrb	r3, [r7, #19]
 80028a8:	74bb      	strb	r3, [r7, #18]
 80028aa:	e011      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028b4:	d10c      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3320      	adds	r3, #32
 80028ba:	2102      	movs	r1, #2
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 f935 	bl	8002b2c <RCCEx_PLLSAI2_Config>
 80028c2:	4603      	mov	r3, r0
 80028c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028c6:	7cfb      	ldrb	r3, [r7, #19]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028cc:	7cfb      	ldrb	r3, [r7, #19]
 80028ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00a      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80028dc:	4b10      	ldr	r3, [pc, #64]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028ea:	490d      	ldr	r1, [pc, #52]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00b      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80028fe:	4b08      	ldr	r3, [pc, #32]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002904:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800290e:	4904      	ldr	r1, [pc, #16]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002910:	4313      	orrs	r3, r2
 8002912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002916:	7cbb      	ldrb	r3, [r7, #18]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40021000 	.word	0x40021000

08002924 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002928:	4b05      	ldr	r3, [pc, #20]	; (8002940 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a04      	ldr	r2, [pc, #16]	; (8002940 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800292e:	f043 0304 	orr.w	r3, r3, #4
 8002932:	6013      	str	r3, [r2, #0]
}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	40021000 	.word	0x40021000

08002944 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800294e:	2300      	movs	r3, #0
 8002950:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002952:	4b75      	ldr	r3, [pc, #468]	; (8002b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d018      	beq.n	8002990 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800295e:	4b72      	ldr	r3, [pc, #456]	; (8002b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f003 0203 	and.w	r2, r3, #3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	429a      	cmp	r2, r3
 800296c:	d10d      	bne.n	800298a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
       ||
 8002972:	2b00      	cmp	r3, #0
 8002974:	d009      	beq.n	800298a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002976:	4b6c      	ldr	r3, [pc, #432]	; (8002b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	091b      	lsrs	r3, r3, #4
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	1c5a      	adds	r2, r3, #1
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
       ||
 8002986:	429a      	cmp	r2, r3
 8002988:	d047      	beq.n	8002a1a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	73fb      	strb	r3, [r7, #15]
 800298e:	e044      	b.n	8002a1a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b03      	cmp	r3, #3
 8002996:	d018      	beq.n	80029ca <RCCEx_PLLSAI1_Config+0x86>
 8002998:	2b03      	cmp	r3, #3
 800299a:	d825      	bhi.n	80029e8 <RCCEx_PLLSAI1_Config+0xa4>
 800299c:	2b01      	cmp	r3, #1
 800299e:	d002      	beq.n	80029a6 <RCCEx_PLLSAI1_Config+0x62>
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d009      	beq.n	80029b8 <RCCEx_PLLSAI1_Config+0x74>
 80029a4:	e020      	b.n	80029e8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029a6:	4b60      	ldr	r3, [pc, #384]	; (8002b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d11d      	bne.n	80029ee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029b6:	e01a      	b.n	80029ee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029b8:	4b5b      	ldr	r3, [pc, #364]	; (8002b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d116      	bne.n	80029f2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029c8:	e013      	b.n	80029f2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029ca:	4b57      	ldr	r3, [pc, #348]	; (8002b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10f      	bne.n	80029f6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029d6:	4b54      	ldr	r3, [pc, #336]	; (8002b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d109      	bne.n	80029f6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029e6:	e006      	b.n	80029f6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	73fb      	strb	r3, [r7, #15]
      break;
 80029ec:	e004      	b.n	80029f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029ee:	bf00      	nop
 80029f0:	e002      	b.n	80029f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029f2:	bf00      	nop
 80029f4:	e000      	b.n	80029f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80029f8:	7bfb      	ldrb	r3, [r7, #15]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10d      	bne.n	8002a1a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029fe:	4b4a      	ldr	r3, [pc, #296]	; (8002b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6819      	ldr	r1, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	430b      	orrs	r3, r1
 8002a14:	4944      	ldr	r1, [pc, #272]	; (8002b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d17d      	bne.n	8002b1c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a20:	4b41      	ldr	r3, [pc, #260]	; (8002b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a40      	ldr	r2, [pc, #256]	; (8002b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a2c:	f7fe f9d6 	bl	8000ddc <HAL_GetTick>
 8002a30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a32:	e009      	b.n	8002a48 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a34:	f7fe f9d2 	bl	8000ddc <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d902      	bls.n	8002a48 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	73fb      	strb	r3, [r7, #15]
        break;
 8002a46:	e005      	b.n	8002a54 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a48:	4b37      	ldr	r3, [pc, #220]	; (8002b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1ef      	bne.n	8002a34 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d160      	bne.n	8002b1c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d111      	bne.n	8002a84 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a60:	4b31      	ldr	r3, [pc, #196]	; (8002b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6892      	ldr	r2, [r2, #8]
 8002a70:	0211      	lsls	r1, r2, #8
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	68d2      	ldr	r2, [r2, #12]
 8002a76:	0912      	lsrs	r2, r2, #4
 8002a78:	0452      	lsls	r2, r2, #17
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	492a      	ldr	r1, [pc, #168]	; (8002b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	610b      	str	r3, [r1, #16]
 8002a82:	e027      	b.n	8002ad4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d112      	bne.n	8002ab0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a8a:	4b27      	ldr	r3, [pc, #156]	; (8002b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002a92:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	6892      	ldr	r2, [r2, #8]
 8002a9a:	0211      	lsls	r1, r2, #8
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6912      	ldr	r2, [r2, #16]
 8002aa0:	0852      	lsrs	r2, r2, #1
 8002aa2:	3a01      	subs	r2, #1
 8002aa4:	0552      	lsls	r2, r2, #21
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	491f      	ldr	r1, [pc, #124]	; (8002b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	610b      	str	r3, [r1, #16]
 8002aae:	e011      	b.n	8002ad4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ab0:	4b1d      	ldr	r3, [pc, #116]	; (8002b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ab8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6892      	ldr	r2, [r2, #8]
 8002ac0:	0211      	lsls	r1, r2, #8
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	6952      	ldr	r2, [r2, #20]
 8002ac6:	0852      	lsrs	r2, r2, #1
 8002ac8:	3a01      	subs	r2, #1
 8002aca:	0652      	lsls	r2, r2, #25
 8002acc:	430a      	orrs	r2, r1
 8002ace:	4916      	ldr	r1, [pc, #88]	; (8002b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ad4:	4b14      	ldr	r3, [pc, #80]	; (8002b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a13      	ldr	r2, [pc, #76]	; (8002b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ada:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ade:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae0:	f7fe f97c 	bl	8000ddc <HAL_GetTick>
 8002ae4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ae6:	e009      	b.n	8002afc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ae8:	f7fe f978 	bl	8000ddc <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d902      	bls.n	8002afc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	73fb      	strb	r3, [r7, #15]
          break;
 8002afa:	e005      	b.n	8002b08 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002afc:	4b0a      	ldr	r3, [pc, #40]	; (8002b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0ef      	beq.n	8002ae8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002b08:	7bfb      	ldrb	r3, [r7, #15]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d106      	bne.n	8002b1c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b0e:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b10:	691a      	ldr	r2, [r3, #16]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	4904      	ldr	r1, [pc, #16]	; (8002b28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40021000 	.word	0x40021000

08002b2c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b3a:	4b6a      	ldr	r3, [pc, #424]	; (8002ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d018      	beq.n	8002b78 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b46:	4b67      	ldr	r3, [pc, #412]	; (8002ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	f003 0203 	and.w	r2, r3, #3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d10d      	bne.n	8002b72 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
       ||
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d009      	beq.n	8002b72 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b5e:	4b61      	ldr	r3, [pc, #388]	; (8002ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	091b      	lsrs	r3, r3, #4
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	1c5a      	adds	r2, r3, #1
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
       ||
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d047      	beq.n	8002c02 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	73fb      	strb	r3, [r7, #15]
 8002b76:	e044      	b.n	8002c02 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b03      	cmp	r3, #3
 8002b7e:	d018      	beq.n	8002bb2 <RCCEx_PLLSAI2_Config+0x86>
 8002b80:	2b03      	cmp	r3, #3
 8002b82:	d825      	bhi.n	8002bd0 <RCCEx_PLLSAI2_Config+0xa4>
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d002      	beq.n	8002b8e <RCCEx_PLLSAI2_Config+0x62>
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d009      	beq.n	8002ba0 <RCCEx_PLLSAI2_Config+0x74>
 8002b8c:	e020      	b.n	8002bd0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b8e:	4b55      	ldr	r3, [pc, #340]	; (8002ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d11d      	bne.n	8002bd6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b9e:	e01a      	b.n	8002bd6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ba0:	4b50      	ldr	r3, [pc, #320]	; (8002ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d116      	bne.n	8002bda <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bb0:	e013      	b.n	8002bda <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bb2:	4b4c      	ldr	r3, [pc, #304]	; (8002ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d10f      	bne.n	8002bde <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bbe:	4b49      	ldr	r3, [pc, #292]	; (8002ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d109      	bne.n	8002bde <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bce:	e006      	b.n	8002bde <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8002bd4:	e004      	b.n	8002be0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bd6:	bf00      	nop
 8002bd8:	e002      	b.n	8002be0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bda:	bf00      	nop
 8002bdc:	e000      	b.n	8002be0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bde:	bf00      	nop
    }

    if(status == HAL_OK)
 8002be0:	7bfb      	ldrb	r3, [r7, #15]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10d      	bne.n	8002c02 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002be6:	4b3f      	ldr	r3, [pc, #252]	; (8002ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6819      	ldr	r1, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	011b      	lsls	r3, r3, #4
 8002bfa:	430b      	orrs	r3, r1
 8002bfc:	4939      	ldr	r1, [pc, #228]	; (8002ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c02:	7bfb      	ldrb	r3, [r7, #15]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d167      	bne.n	8002cd8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c08:	4b36      	ldr	r3, [pc, #216]	; (8002ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a35      	ldr	r2, [pc, #212]	; (8002ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c14:	f7fe f8e2 	bl	8000ddc <HAL_GetTick>
 8002c18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c1a:	e009      	b.n	8002c30 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c1c:	f7fe f8de 	bl	8000ddc <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d902      	bls.n	8002c30 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	73fb      	strb	r3, [r7, #15]
        break;
 8002c2e:	e005      	b.n	8002c3c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c30:	4b2c      	ldr	r3, [pc, #176]	; (8002ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1ef      	bne.n	8002c1c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d14a      	bne.n	8002cd8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d111      	bne.n	8002c6c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c48:	4b26      	ldr	r3, [pc, #152]	; (8002ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6892      	ldr	r2, [r2, #8]
 8002c58:	0211      	lsls	r1, r2, #8
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	68d2      	ldr	r2, [r2, #12]
 8002c5e:	0912      	lsrs	r2, r2, #4
 8002c60:	0452      	lsls	r2, r2, #17
 8002c62:	430a      	orrs	r2, r1
 8002c64:	491f      	ldr	r1, [pc, #124]	; (8002ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	614b      	str	r3, [r1, #20]
 8002c6a:	e011      	b.n	8002c90 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c6c:	4b1d      	ldr	r3, [pc, #116]	; (8002ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c74:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6892      	ldr	r2, [r2, #8]
 8002c7c:	0211      	lsls	r1, r2, #8
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6912      	ldr	r2, [r2, #16]
 8002c82:	0852      	lsrs	r2, r2, #1
 8002c84:	3a01      	subs	r2, #1
 8002c86:	0652      	lsls	r2, r2, #25
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	4916      	ldr	r1, [pc, #88]	; (8002ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c90:	4b14      	ldr	r3, [pc, #80]	; (8002ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a13      	ldr	r2, [pc, #76]	; (8002ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c9c:	f7fe f89e 	bl	8000ddc <HAL_GetTick>
 8002ca0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ca2:	e009      	b.n	8002cb8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ca4:	f7fe f89a 	bl	8000ddc <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d902      	bls.n	8002cb8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	73fb      	strb	r3, [r7, #15]
          break;
 8002cb6:	e005      	b.n	8002cc4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002cb8:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0ef      	beq.n	8002ca4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d106      	bne.n	8002cd8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002cca:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ccc:	695a      	ldr	r2, [r3, #20]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	4904      	ldr	r1, [pc, #16]	; (8002ce4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40021000 	.word	0x40021000

08002ce8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e049      	b.n	8002d8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d106      	bne.n	8002d14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f841 	bl	8002d96 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3304      	adds	r3, #4
 8002d24:	4619      	mov	r1, r3
 8002d26:	4610      	mov	r0, r2
 8002d28:	f000 f9f8 	bl	800311c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
	...

08002dac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d001      	beq.n	8002dc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e04f      	b.n	8002e64 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 0201 	orr.w	r2, r2, #1
 8002dda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a23      	ldr	r2, [pc, #140]	; (8002e70 <HAL_TIM_Base_Start_IT+0xc4>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d01d      	beq.n	8002e22 <HAL_TIM_Base_Start_IT+0x76>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dee:	d018      	beq.n	8002e22 <HAL_TIM_Base_Start_IT+0x76>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a1f      	ldr	r2, [pc, #124]	; (8002e74 <HAL_TIM_Base_Start_IT+0xc8>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d013      	beq.n	8002e22 <HAL_TIM_Base_Start_IT+0x76>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a1e      	ldr	r2, [pc, #120]	; (8002e78 <HAL_TIM_Base_Start_IT+0xcc>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d00e      	beq.n	8002e22 <HAL_TIM_Base_Start_IT+0x76>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a1c      	ldr	r2, [pc, #112]	; (8002e7c <HAL_TIM_Base_Start_IT+0xd0>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d009      	beq.n	8002e22 <HAL_TIM_Base_Start_IT+0x76>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a1b      	ldr	r2, [pc, #108]	; (8002e80 <HAL_TIM_Base_Start_IT+0xd4>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d004      	beq.n	8002e22 <HAL_TIM_Base_Start_IT+0x76>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a19      	ldr	r2, [pc, #100]	; (8002e84 <HAL_TIM_Base_Start_IT+0xd8>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d115      	bne.n	8002e4e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	4b17      	ldr	r3, [pc, #92]	; (8002e88 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2b06      	cmp	r3, #6
 8002e32:	d015      	beq.n	8002e60 <HAL_TIM_Base_Start_IT+0xb4>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e3a:	d011      	beq.n	8002e60 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0201 	orr.w	r2, r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e4c:	e008      	b.n	8002e60 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f042 0201 	orr.w	r2, r2, #1
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	e000      	b.n	8002e62 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e60:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	40012c00 	.word	0x40012c00
 8002e74:	40000400 	.word	0x40000400
 8002e78:	40000800 	.word	0x40000800
 8002e7c:	40000c00 	.word	0x40000c00
 8002e80:	40013400 	.word	0x40013400
 8002e84:	40014000 	.word	0x40014000
 8002e88:	00010007 	.word	0x00010007

08002e8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d122      	bne.n	8002ee8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d11b      	bne.n	8002ee8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f06f 0202 	mvn.w	r2, #2
 8002eb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f905 	bl	80030de <HAL_TIM_IC_CaptureCallback>
 8002ed4:	e005      	b.n	8002ee2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f8f7 	bl	80030ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 f908 	bl	80030f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	f003 0304 	and.w	r3, r3, #4
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d122      	bne.n	8002f3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d11b      	bne.n	8002f3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f06f 0204 	mvn.w	r2, #4
 8002f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2202      	movs	r2, #2
 8002f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f8db 	bl	80030de <HAL_TIM_IC_CaptureCallback>
 8002f28:	e005      	b.n	8002f36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f8cd 	bl	80030ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 f8de 	bl	80030f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	d122      	bne.n	8002f90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f003 0308 	and.w	r3, r3, #8
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	d11b      	bne.n	8002f90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f06f 0208 	mvn.w	r2, #8
 8002f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2204      	movs	r2, #4
 8002f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	f003 0303 	and.w	r3, r3, #3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f8b1 	bl	80030de <HAL_TIM_IC_CaptureCallback>
 8002f7c:	e005      	b.n	8002f8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f8a3 	bl	80030ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 f8b4 	bl	80030f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	f003 0310 	and.w	r3, r3, #16
 8002f9a:	2b10      	cmp	r3, #16
 8002f9c:	d122      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f003 0310 	and.w	r3, r3, #16
 8002fa8:	2b10      	cmp	r3, #16
 8002faa:	d11b      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f06f 0210 	mvn.w	r2, #16
 8002fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2208      	movs	r2, #8
 8002fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f887 	bl	80030de <HAL_TIM_IC_CaptureCallback>
 8002fd0:	e005      	b.n	8002fde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f879 	bl	80030ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 f88a 	bl	80030f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d10e      	bne.n	8003010 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d107      	bne.n	8003010 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f06f 0201 	mvn.w	r2, #1
 8003008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7fd fcd4 	bl	80009b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800301a:	2b80      	cmp	r3, #128	; 0x80
 800301c:	d10e      	bne.n	800303c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003028:	2b80      	cmp	r3, #128	; 0x80
 800302a:	d107      	bne.n	800303c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f914 	bl	8003264 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003046:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800304a:	d10e      	bne.n	800306a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003056:	2b80      	cmp	r3, #128	; 0x80
 8003058:	d107      	bne.n	800306a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f907 	bl	8003278 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003074:	2b40      	cmp	r3, #64	; 0x40
 8003076:	d10e      	bne.n	8003096 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003082:	2b40      	cmp	r3, #64	; 0x40
 8003084:	d107      	bne.n	8003096 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800308e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 f838 	bl	8003106 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	f003 0320 	and.w	r3, r3, #32
 80030a0:	2b20      	cmp	r3, #32
 80030a2:	d10e      	bne.n	80030c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	f003 0320 	and.w	r3, r3, #32
 80030ae:	2b20      	cmp	r3, #32
 80030b0:	d107      	bne.n	80030c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f06f 0220 	mvn.w	r2, #32
 80030ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f8c7 	bl	8003250 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030c2:	bf00      	nop
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b083      	sub	sp, #12
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030d2:	bf00      	nop
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030de:	b480      	push	{r7}
 80030e0:	b083      	sub	sp, #12
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b083      	sub	sp, #12
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
	...

0800311c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a40      	ldr	r2, [pc, #256]	; (8003230 <TIM_Base_SetConfig+0x114>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d013      	beq.n	800315c <TIM_Base_SetConfig+0x40>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800313a:	d00f      	beq.n	800315c <TIM_Base_SetConfig+0x40>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a3d      	ldr	r2, [pc, #244]	; (8003234 <TIM_Base_SetConfig+0x118>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d00b      	beq.n	800315c <TIM_Base_SetConfig+0x40>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a3c      	ldr	r2, [pc, #240]	; (8003238 <TIM_Base_SetConfig+0x11c>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d007      	beq.n	800315c <TIM_Base_SetConfig+0x40>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a3b      	ldr	r2, [pc, #236]	; (800323c <TIM_Base_SetConfig+0x120>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d003      	beq.n	800315c <TIM_Base_SetConfig+0x40>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a3a      	ldr	r2, [pc, #232]	; (8003240 <TIM_Base_SetConfig+0x124>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d108      	bne.n	800316e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	4313      	orrs	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a2f      	ldr	r2, [pc, #188]	; (8003230 <TIM_Base_SetConfig+0x114>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d01f      	beq.n	80031b6 <TIM_Base_SetConfig+0x9a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800317c:	d01b      	beq.n	80031b6 <TIM_Base_SetConfig+0x9a>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a2c      	ldr	r2, [pc, #176]	; (8003234 <TIM_Base_SetConfig+0x118>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d017      	beq.n	80031b6 <TIM_Base_SetConfig+0x9a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a2b      	ldr	r2, [pc, #172]	; (8003238 <TIM_Base_SetConfig+0x11c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d013      	beq.n	80031b6 <TIM_Base_SetConfig+0x9a>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a2a      	ldr	r2, [pc, #168]	; (800323c <TIM_Base_SetConfig+0x120>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d00f      	beq.n	80031b6 <TIM_Base_SetConfig+0x9a>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a29      	ldr	r2, [pc, #164]	; (8003240 <TIM_Base_SetConfig+0x124>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d00b      	beq.n	80031b6 <TIM_Base_SetConfig+0x9a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a28      	ldr	r2, [pc, #160]	; (8003244 <TIM_Base_SetConfig+0x128>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d007      	beq.n	80031b6 <TIM_Base_SetConfig+0x9a>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a27      	ldr	r2, [pc, #156]	; (8003248 <TIM_Base_SetConfig+0x12c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d003      	beq.n	80031b6 <TIM_Base_SetConfig+0x9a>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a26      	ldr	r2, [pc, #152]	; (800324c <TIM_Base_SetConfig+0x130>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d108      	bne.n	80031c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a10      	ldr	r2, [pc, #64]	; (8003230 <TIM_Base_SetConfig+0x114>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d00f      	beq.n	8003214 <TIM_Base_SetConfig+0xf8>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a12      	ldr	r2, [pc, #72]	; (8003240 <TIM_Base_SetConfig+0x124>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d00b      	beq.n	8003214 <TIM_Base_SetConfig+0xf8>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a11      	ldr	r2, [pc, #68]	; (8003244 <TIM_Base_SetConfig+0x128>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d007      	beq.n	8003214 <TIM_Base_SetConfig+0xf8>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a10      	ldr	r2, [pc, #64]	; (8003248 <TIM_Base_SetConfig+0x12c>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d003      	beq.n	8003214 <TIM_Base_SetConfig+0xf8>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a0f      	ldr	r2, [pc, #60]	; (800324c <TIM_Base_SetConfig+0x130>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d103      	bne.n	800321c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	691a      	ldr	r2, [r3, #16]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	615a      	str	r2, [r3, #20]
}
 8003222:	bf00      	nop
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	40012c00 	.word	0x40012c00
 8003234:	40000400 	.word	0x40000400
 8003238:	40000800 	.word	0x40000800
 800323c:	40000c00 	.word	0x40000c00
 8003240:	40013400 	.word	0x40013400
 8003244:	40014000 	.word	0x40014000
 8003248:	40014400 	.word	0x40014400
 800324c:	40014800 	.word	0x40014800

08003250 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e040      	b.n	8003320 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d106      	bne.n	80032b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7fd fc20 	bl	8000af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2224      	movs	r2, #36	; 0x24
 80032b8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 0201 	bic.w	r2, r2, #1
 80032c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f82c 	bl	8003328 <UART_SetConfig>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d101      	bne.n	80032da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e022      	b.n	8003320 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d002      	beq.n	80032e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 fad8 	bl	8003898 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003306:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0201 	orr.w	r2, r2, #1
 8003316:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 fb5f 	bl	80039dc <UART_CheckIdleState>
 800331e:	4603      	mov	r3, r0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800332c:	b08a      	sub	sp, #40	; 0x28
 800332e:	af00      	add	r7, sp, #0
 8003330:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	431a      	orrs	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	431a      	orrs	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	69db      	ldr	r3, [r3, #28]
 800334c:	4313      	orrs	r3, r2
 800334e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	4ba4      	ldr	r3, [pc, #656]	; (80035e8 <UART_SetConfig+0x2c0>)
 8003358:	4013      	ands	r3, r2
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	6812      	ldr	r2, [r2, #0]
 800335e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003360:	430b      	orrs	r3, r1
 8003362:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a99      	ldr	r2, [pc, #612]	; (80035ec <UART_SetConfig+0x2c4>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d004      	beq.n	8003394 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003390:	4313      	orrs	r3, r2
 8003392:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a4:	430a      	orrs	r2, r1
 80033a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a90      	ldr	r2, [pc, #576]	; (80035f0 <UART_SetConfig+0x2c8>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d126      	bne.n	8003400 <UART_SetConfig+0xd8>
 80033b2:	4b90      	ldr	r3, [pc, #576]	; (80035f4 <UART_SetConfig+0x2cc>)
 80033b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b8:	f003 0303 	and.w	r3, r3, #3
 80033bc:	2b03      	cmp	r3, #3
 80033be:	d81b      	bhi.n	80033f8 <UART_SetConfig+0xd0>
 80033c0:	a201      	add	r2, pc, #4	; (adr r2, 80033c8 <UART_SetConfig+0xa0>)
 80033c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c6:	bf00      	nop
 80033c8:	080033d9 	.word	0x080033d9
 80033cc:	080033e9 	.word	0x080033e9
 80033d0:	080033e1 	.word	0x080033e1
 80033d4:	080033f1 	.word	0x080033f1
 80033d8:	2301      	movs	r3, #1
 80033da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033de:	e116      	b.n	800360e <UART_SetConfig+0x2e6>
 80033e0:	2302      	movs	r3, #2
 80033e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033e6:	e112      	b.n	800360e <UART_SetConfig+0x2e6>
 80033e8:	2304      	movs	r3, #4
 80033ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ee:	e10e      	b.n	800360e <UART_SetConfig+0x2e6>
 80033f0:	2308      	movs	r3, #8
 80033f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033f6:	e10a      	b.n	800360e <UART_SetConfig+0x2e6>
 80033f8:	2310      	movs	r3, #16
 80033fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033fe:	e106      	b.n	800360e <UART_SetConfig+0x2e6>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a7c      	ldr	r2, [pc, #496]	; (80035f8 <UART_SetConfig+0x2d0>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d138      	bne.n	800347c <UART_SetConfig+0x154>
 800340a:	4b7a      	ldr	r3, [pc, #488]	; (80035f4 <UART_SetConfig+0x2cc>)
 800340c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003410:	f003 030c 	and.w	r3, r3, #12
 8003414:	2b0c      	cmp	r3, #12
 8003416:	d82d      	bhi.n	8003474 <UART_SetConfig+0x14c>
 8003418:	a201      	add	r2, pc, #4	; (adr r2, 8003420 <UART_SetConfig+0xf8>)
 800341a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341e:	bf00      	nop
 8003420:	08003455 	.word	0x08003455
 8003424:	08003475 	.word	0x08003475
 8003428:	08003475 	.word	0x08003475
 800342c:	08003475 	.word	0x08003475
 8003430:	08003465 	.word	0x08003465
 8003434:	08003475 	.word	0x08003475
 8003438:	08003475 	.word	0x08003475
 800343c:	08003475 	.word	0x08003475
 8003440:	0800345d 	.word	0x0800345d
 8003444:	08003475 	.word	0x08003475
 8003448:	08003475 	.word	0x08003475
 800344c:	08003475 	.word	0x08003475
 8003450:	0800346d 	.word	0x0800346d
 8003454:	2300      	movs	r3, #0
 8003456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800345a:	e0d8      	b.n	800360e <UART_SetConfig+0x2e6>
 800345c:	2302      	movs	r3, #2
 800345e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003462:	e0d4      	b.n	800360e <UART_SetConfig+0x2e6>
 8003464:	2304      	movs	r3, #4
 8003466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800346a:	e0d0      	b.n	800360e <UART_SetConfig+0x2e6>
 800346c:	2308      	movs	r3, #8
 800346e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003472:	e0cc      	b.n	800360e <UART_SetConfig+0x2e6>
 8003474:	2310      	movs	r3, #16
 8003476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800347a:	e0c8      	b.n	800360e <UART_SetConfig+0x2e6>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a5e      	ldr	r2, [pc, #376]	; (80035fc <UART_SetConfig+0x2d4>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d125      	bne.n	80034d2 <UART_SetConfig+0x1aa>
 8003486:	4b5b      	ldr	r3, [pc, #364]	; (80035f4 <UART_SetConfig+0x2cc>)
 8003488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003490:	2b30      	cmp	r3, #48	; 0x30
 8003492:	d016      	beq.n	80034c2 <UART_SetConfig+0x19a>
 8003494:	2b30      	cmp	r3, #48	; 0x30
 8003496:	d818      	bhi.n	80034ca <UART_SetConfig+0x1a2>
 8003498:	2b20      	cmp	r3, #32
 800349a:	d00a      	beq.n	80034b2 <UART_SetConfig+0x18a>
 800349c:	2b20      	cmp	r3, #32
 800349e:	d814      	bhi.n	80034ca <UART_SetConfig+0x1a2>
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d002      	beq.n	80034aa <UART_SetConfig+0x182>
 80034a4:	2b10      	cmp	r3, #16
 80034a6:	d008      	beq.n	80034ba <UART_SetConfig+0x192>
 80034a8:	e00f      	b.n	80034ca <UART_SetConfig+0x1a2>
 80034aa:	2300      	movs	r3, #0
 80034ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034b0:	e0ad      	b.n	800360e <UART_SetConfig+0x2e6>
 80034b2:	2302      	movs	r3, #2
 80034b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034b8:	e0a9      	b.n	800360e <UART_SetConfig+0x2e6>
 80034ba:	2304      	movs	r3, #4
 80034bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034c0:	e0a5      	b.n	800360e <UART_SetConfig+0x2e6>
 80034c2:	2308      	movs	r3, #8
 80034c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034c8:	e0a1      	b.n	800360e <UART_SetConfig+0x2e6>
 80034ca:	2310      	movs	r3, #16
 80034cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034d0:	e09d      	b.n	800360e <UART_SetConfig+0x2e6>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a4a      	ldr	r2, [pc, #296]	; (8003600 <UART_SetConfig+0x2d8>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d125      	bne.n	8003528 <UART_SetConfig+0x200>
 80034dc:	4b45      	ldr	r3, [pc, #276]	; (80035f4 <UART_SetConfig+0x2cc>)
 80034de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80034e6:	2bc0      	cmp	r3, #192	; 0xc0
 80034e8:	d016      	beq.n	8003518 <UART_SetConfig+0x1f0>
 80034ea:	2bc0      	cmp	r3, #192	; 0xc0
 80034ec:	d818      	bhi.n	8003520 <UART_SetConfig+0x1f8>
 80034ee:	2b80      	cmp	r3, #128	; 0x80
 80034f0:	d00a      	beq.n	8003508 <UART_SetConfig+0x1e0>
 80034f2:	2b80      	cmp	r3, #128	; 0x80
 80034f4:	d814      	bhi.n	8003520 <UART_SetConfig+0x1f8>
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d002      	beq.n	8003500 <UART_SetConfig+0x1d8>
 80034fa:	2b40      	cmp	r3, #64	; 0x40
 80034fc:	d008      	beq.n	8003510 <UART_SetConfig+0x1e8>
 80034fe:	e00f      	b.n	8003520 <UART_SetConfig+0x1f8>
 8003500:	2300      	movs	r3, #0
 8003502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003506:	e082      	b.n	800360e <UART_SetConfig+0x2e6>
 8003508:	2302      	movs	r3, #2
 800350a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800350e:	e07e      	b.n	800360e <UART_SetConfig+0x2e6>
 8003510:	2304      	movs	r3, #4
 8003512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003516:	e07a      	b.n	800360e <UART_SetConfig+0x2e6>
 8003518:	2308      	movs	r3, #8
 800351a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800351e:	e076      	b.n	800360e <UART_SetConfig+0x2e6>
 8003520:	2310      	movs	r3, #16
 8003522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003526:	e072      	b.n	800360e <UART_SetConfig+0x2e6>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a35      	ldr	r2, [pc, #212]	; (8003604 <UART_SetConfig+0x2dc>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d12a      	bne.n	8003588 <UART_SetConfig+0x260>
 8003532:	4b30      	ldr	r3, [pc, #192]	; (80035f4 <UART_SetConfig+0x2cc>)
 8003534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003538:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800353c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003540:	d01a      	beq.n	8003578 <UART_SetConfig+0x250>
 8003542:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003546:	d81b      	bhi.n	8003580 <UART_SetConfig+0x258>
 8003548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800354c:	d00c      	beq.n	8003568 <UART_SetConfig+0x240>
 800354e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003552:	d815      	bhi.n	8003580 <UART_SetConfig+0x258>
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <UART_SetConfig+0x238>
 8003558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800355c:	d008      	beq.n	8003570 <UART_SetConfig+0x248>
 800355e:	e00f      	b.n	8003580 <UART_SetConfig+0x258>
 8003560:	2300      	movs	r3, #0
 8003562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003566:	e052      	b.n	800360e <UART_SetConfig+0x2e6>
 8003568:	2302      	movs	r3, #2
 800356a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800356e:	e04e      	b.n	800360e <UART_SetConfig+0x2e6>
 8003570:	2304      	movs	r3, #4
 8003572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003576:	e04a      	b.n	800360e <UART_SetConfig+0x2e6>
 8003578:	2308      	movs	r3, #8
 800357a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800357e:	e046      	b.n	800360e <UART_SetConfig+0x2e6>
 8003580:	2310      	movs	r3, #16
 8003582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003586:	e042      	b.n	800360e <UART_SetConfig+0x2e6>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a17      	ldr	r2, [pc, #92]	; (80035ec <UART_SetConfig+0x2c4>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d13a      	bne.n	8003608 <UART_SetConfig+0x2e0>
 8003592:	4b18      	ldr	r3, [pc, #96]	; (80035f4 <UART_SetConfig+0x2cc>)
 8003594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003598:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800359c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035a0:	d01a      	beq.n	80035d8 <UART_SetConfig+0x2b0>
 80035a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035a6:	d81b      	bhi.n	80035e0 <UART_SetConfig+0x2b8>
 80035a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035ac:	d00c      	beq.n	80035c8 <UART_SetConfig+0x2a0>
 80035ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035b2:	d815      	bhi.n	80035e0 <UART_SetConfig+0x2b8>
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <UART_SetConfig+0x298>
 80035b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035bc:	d008      	beq.n	80035d0 <UART_SetConfig+0x2a8>
 80035be:	e00f      	b.n	80035e0 <UART_SetConfig+0x2b8>
 80035c0:	2300      	movs	r3, #0
 80035c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035c6:	e022      	b.n	800360e <UART_SetConfig+0x2e6>
 80035c8:	2302      	movs	r3, #2
 80035ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ce:	e01e      	b.n	800360e <UART_SetConfig+0x2e6>
 80035d0:	2304      	movs	r3, #4
 80035d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035d6:	e01a      	b.n	800360e <UART_SetConfig+0x2e6>
 80035d8:	2308      	movs	r3, #8
 80035da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035de:	e016      	b.n	800360e <UART_SetConfig+0x2e6>
 80035e0:	2310      	movs	r3, #16
 80035e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035e6:	e012      	b.n	800360e <UART_SetConfig+0x2e6>
 80035e8:	efff69f3 	.word	0xefff69f3
 80035ec:	40008000 	.word	0x40008000
 80035f0:	40013800 	.word	0x40013800
 80035f4:	40021000 	.word	0x40021000
 80035f8:	40004400 	.word	0x40004400
 80035fc:	40004800 	.word	0x40004800
 8003600:	40004c00 	.word	0x40004c00
 8003604:	40005000 	.word	0x40005000
 8003608:	2310      	movs	r3, #16
 800360a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a9f      	ldr	r2, [pc, #636]	; (8003890 <UART_SetConfig+0x568>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d17a      	bne.n	800370e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003618:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800361c:	2b08      	cmp	r3, #8
 800361e:	d824      	bhi.n	800366a <UART_SetConfig+0x342>
 8003620:	a201      	add	r2, pc, #4	; (adr r2, 8003628 <UART_SetConfig+0x300>)
 8003622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003626:	bf00      	nop
 8003628:	0800364d 	.word	0x0800364d
 800362c:	0800366b 	.word	0x0800366b
 8003630:	08003655 	.word	0x08003655
 8003634:	0800366b 	.word	0x0800366b
 8003638:	0800365b 	.word	0x0800365b
 800363c:	0800366b 	.word	0x0800366b
 8003640:	0800366b 	.word	0x0800366b
 8003644:	0800366b 	.word	0x0800366b
 8003648:	08003663 	.word	0x08003663
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800364c:	f7fe fdc2 	bl	80021d4 <HAL_RCC_GetPCLK1Freq>
 8003650:	61f8      	str	r0, [r7, #28]
        break;
 8003652:	e010      	b.n	8003676 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003654:	4b8f      	ldr	r3, [pc, #572]	; (8003894 <UART_SetConfig+0x56c>)
 8003656:	61fb      	str	r3, [r7, #28]
        break;
 8003658:	e00d      	b.n	8003676 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800365a:	f7fe fd23 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 800365e:	61f8      	str	r0, [r7, #28]
        break;
 8003660:	e009      	b.n	8003676 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003666:	61fb      	str	r3, [r7, #28]
        break;
 8003668:	e005      	b.n	8003676 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800366a:	2300      	movs	r3, #0
 800366c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003674:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 80fb 	beq.w	8003874 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	4413      	add	r3, r2
 8003688:	69fa      	ldr	r2, [r7, #28]
 800368a:	429a      	cmp	r2, r3
 800368c:	d305      	bcc.n	800369a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003694:	69fa      	ldr	r2, [r7, #28]
 8003696:	429a      	cmp	r2, r3
 8003698:	d903      	bls.n	80036a2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80036a0:	e0e8      	b.n	8003874 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	2200      	movs	r2, #0
 80036a6:	461c      	mov	r4, r3
 80036a8:	4615      	mov	r5, r2
 80036aa:	f04f 0200 	mov.w	r2, #0
 80036ae:	f04f 0300 	mov.w	r3, #0
 80036b2:	022b      	lsls	r3, r5, #8
 80036b4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80036b8:	0222      	lsls	r2, r4, #8
 80036ba:	68f9      	ldr	r1, [r7, #12]
 80036bc:	6849      	ldr	r1, [r1, #4]
 80036be:	0849      	lsrs	r1, r1, #1
 80036c0:	2000      	movs	r0, #0
 80036c2:	4688      	mov	r8, r1
 80036c4:	4681      	mov	r9, r0
 80036c6:	eb12 0a08 	adds.w	sl, r2, r8
 80036ca:	eb43 0b09 	adc.w	fp, r3, r9
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	603b      	str	r3, [r7, #0]
 80036d6:	607a      	str	r2, [r7, #4]
 80036d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036dc:	4650      	mov	r0, sl
 80036de:	4659      	mov	r1, fp
 80036e0:	f7fc fd76 	bl	80001d0 <__aeabi_uldivmod>
 80036e4:	4602      	mov	r2, r0
 80036e6:	460b      	mov	r3, r1
 80036e8:	4613      	mov	r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036f2:	d308      	bcc.n	8003706 <UART_SetConfig+0x3de>
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036fa:	d204      	bcs.n	8003706 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	60da      	str	r2, [r3, #12]
 8003704:	e0b6      	b.n	8003874 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800370c:	e0b2      	b.n	8003874 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003716:	d15e      	bne.n	80037d6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003718:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800371c:	2b08      	cmp	r3, #8
 800371e:	d828      	bhi.n	8003772 <UART_SetConfig+0x44a>
 8003720:	a201      	add	r2, pc, #4	; (adr r2, 8003728 <UART_SetConfig+0x400>)
 8003722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003726:	bf00      	nop
 8003728:	0800374d 	.word	0x0800374d
 800372c:	08003755 	.word	0x08003755
 8003730:	0800375d 	.word	0x0800375d
 8003734:	08003773 	.word	0x08003773
 8003738:	08003763 	.word	0x08003763
 800373c:	08003773 	.word	0x08003773
 8003740:	08003773 	.word	0x08003773
 8003744:	08003773 	.word	0x08003773
 8003748:	0800376b 	.word	0x0800376b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800374c:	f7fe fd42 	bl	80021d4 <HAL_RCC_GetPCLK1Freq>
 8003750:	61f8      	str	r0, [r7, #28]
        break;
 8003752:	e014      	b.n	800377e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003754:	f7fe fd54 	bl	8002200 <HAL_RCC_GetPCLK2Freq>
 8003758:	61f8      	str	r0, [r7, #28]
        break;
 800375a:	e010      	b.n	800377e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800375c:	4b4d      	ldr	r3, [pc, #308]	; (8003894 <UART_SetConfig+0x56c>)
 800375e:	61fb      	str	r3, [r7, #28]
        break;
 8003760:	e00d      	b.n	800377e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003762:	f7fe fc9f 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 8003766:	61f8      	str	r0, [r7, #28]
        break;
 8003768:	e009      	b.n	800377e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800376a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800376e:	61fb      	str	r3, [r7, #28]
        break;
 8003770:	e005      	b.n	800377e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003772:	2300      	movs	r3, #0
 8003774:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800377c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d077      	beq.n	8003874 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	005a      	lsls	r2, r3, #1
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	085b      	lsrs	r3, r3, #1
 800378e:	441a      	add	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	fbb2 f3f3 	udiv	r3, r2, r3
 8003798:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	2b0f      	cmp	r3, #15
 800379e:	d916      	bls.n	80037ce <UART_SetConfig+0x4a6>
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a6:	d212      	bcs.n	80037ce <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	f023 030f 	bic.w	r3, r3, #15
 80037b0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	085b      	lsrs	r3, r3, #1
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	b29a      	uxth	r2, r3
 80037be:	8afb      	ldrh	r3, [r7, #22]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	8afa      	ldrh	r2, [r7, #22]
 80037ca:	60da      	str	r2, [r3, #12]
 80037cc:	e052      	b.n	8003874 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80037d4:	e04e      	b.n	8003874 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037da:	2b08      	cmp	r3, #8
 80037dc:	d827      	bhi.n	800382e <UART_SetConfig+0x506>
 80037de:	a201      	add	r2, pc, #4	; (adr r2, 80037e4 <UART_SetConfig+0x4bc>)
 80037e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e4:	08003809 	.word	0x08003809
 80037e8:	08003811 	.word	0x08003811
 80037ec:	08003819 	.word	0x08003819
 80037f0:	0800382f 	.word	0x0800382f
 80037f4:	0800381f 	.word	0x0800381f
 80037f8:	0800382f 	.word	0x0800382f
 80037fc:	0800382f 	.word	0x0800382f
 8003800:	0800382f 	.word	0x0800382f
 8003804:	08003827 	.word	0x08003827
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003808:	f7fe fce4 	bl	80021d4 <HAL_RCC_GetPCLK1Freq>
 800380c:	61f8      	str	r0, [r7, #28]
        break;
 800380e:	e014      	b.n	800383a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003810:	f7fe fcf6 	bl	8002200 <HAL_RCC_GetPCLK2Freq>
 8003814:	61f8      	str	r0, [r7, #28]
        break;
 8003816:	e010      	b.n	800383a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003818:	4b1e      	ldr	r3, [pc, #120]	; (8003894 <UART_SetConfig+0x56c>)
 800381a:	61fb      	str	r3, [r7, #28]
        break;
 800381c:	e00d      	b.n	800383a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800381e:	f7fe fc41 	bl	80020a4 <HAL_RCC_GetSysClockFreq>
 8003822:	61f8      	str	r0, [r7, #28]
        break;
 8003824:	e009      	b.n	800383a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800382a:	61fb      	str	r3, [r7, #28]
        break;
 800382c:	e005      	b.n	800383a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800382e:	2300      	movs	r3, #0
 8003830:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003838:	bf00      	nop
    }

    if (pclk != 0U)
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d019      	beq.n	8003874 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	085a      	lsrs	r2, r3, #1
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	441a      	add	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003852:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	2b0f      	cmp	r3, #15
 8003858:	d909      	bls.n	800386e <UART_SetConfig+0x546>
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003860:	d205      	bcs.n	800386e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	b29a      	uxth	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	60da      	str	r2, [r3, #12]
 800386c:	e002      	b.n	8003874 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003880:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003884:	4618      	mov	r0, r3
 8003886:	3728      	adds	r7, #40	; 0x28
 8003888:	46bd      	mov	sp, r7
 800388a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800388e:	bf00      	nop
 8003890:	40008000 	.word	0x40008000
 8003894:	00f42400 	.word	0x00f42400

08003898 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00a      	beq.n	8003906 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00a      	beq.n	8003928 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	f003 0310 	and.w	r3, r3, #16
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00a      	beq.n	800394a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	f003 0320 	and.w	r3, r3, #32
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00a      	beq.n	800396c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003974:	2b00      	cmp	r3, #0
 8003976:	d01a      	beq.n	80039ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003996:	d10a      	bne.n	80039ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00a      	beq.n	80039d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	605a      	str	r2, [r3, #4]
  }
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af02      	add	r7, sp, #8
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039ec:	f7fd f9f6 	bl	8000ddc <HAL_GetTick>
 80039f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0308 	and.w	r3, r3, #8
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d10e      	bne.n	8003a1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f82d 	bl	8003a6e <UART_WaitOnFlagUntilTimeout>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e023      	b.n	8003a66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b04      	cmp	r3, #4
 8003a2a:	d10e      	bne.n	8003a4a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f817 	bl	8003a6e <UART_WaitOnFlagUntilTimeout>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e00d      	b.n	8003a66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2220      	movs	r2, #32
 8003a54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b09c      	sub	sp, #112	; 0x70
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	60f8      	str	r0, [r7, #12]
 8003a76:	60b9      	str	r1, [r7, #8]
 8003a78:	603b      	str	r3, [r7, #0]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a7e:	e0a5      	b.n	8003bcc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a86:	f000 80a1 	beq.w	8003bcc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a8a:	f7fd f9a7 	bl	8000ddc <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d302      	bcc.n	8003aa0 <UART_WaitOnFlagUntilTimeout+0x32>
 8003a9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d13e      	bne.n	8003b1e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aa8:	e853 3f00 	ldrex	r3, [r3]
 8003aac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ab0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ab4:	667b      	str	r3, [r7, #100]	; 0x64
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	461a      	mov	r2, r3
 8003abc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003abe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ac0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ac4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ac6:	e841 2300 	strex	r3, r2, [r1]
 8003aca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1e6      	bne.n	8003aa0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	3308      	adds	r3, #8
 8003ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003adc:	e853 3f00 	ldrex	r3, [r3]
 8003ae0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae4:	f023 0301 	bic.w	r3, r3, #1
 8003ae8:	663b      	str	r3, [r7, #96]	; 0x60
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	3308      	adds	r3, #8
 8003af0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003af2:	64ba      	str	r2, [r7, #72]	; 0x48
 8003af4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003af8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003afa:	e841 2300 	strex	r3, r2, [r1]
 8003afe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003b00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1e5      	bne.n	8003ad2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e067      	b.n	8003bee <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d04f      	beq.n	8003bcc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b3a:	d147      	bne.n	8003bcc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b44:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4e:	e853 3f00 	ldrex	r3, [r3]
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	461a      	mov	r2, r3
 8003b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b64:	637b      	str	r3, [r7, #52]	; 0x34
 8003b66:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b6c:	e841 2300 	strex	r3, r2, [r1]
 8003b70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1e6      	bne.n	8003b46 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3308      	adds	r3, #8
 8003b7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	e853 3f00 	ldrex	r3, [r3]
 8003b86:	613b      	str	r3, [r7, #16]
   return(result);
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	f023 0301 	bic.w	r3, r3, #1
 8003b8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	3308      	adds	r3, #8
 8003b96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003b98:	623a      	str	r2, [r7, #32]
 8003b9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9c:	69f9      	ldr	r1, [r7, #28]
 8003b9e:	6a3a      	ldr	r2, [r7, #32]
 8003ba0:	e841 2300 	strex	r3, r2, [r1]
 8003ba4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1e5      	bne.n	8003b78 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e010      	b.n	8003bee <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	69da      	ldr	r2, [r3, #28]
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	bf0c      	ite	eq
 8003bdc:	2301      	moveq	r3, #1
 8003bde:	2300      	movne	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	461a      	mov	r2, r3
 8003be4:	79fb      	ldrb	r3, [r7, #7]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	f43f af4a 	beq.w	8003a80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3770      	adds	r7, #112	; 0x70
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b085      	sub	sp, #20
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003c00:	2300      	movs	r3, #0
 8003c02:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003c04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c08:	2b84      	cmp	r3, #132	; 0x84
 8003c0a:	d005      	beq.n	8003c18 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003c0c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4413      	add	r3, r2
 8003c14:	3303      	adds	r3, #3
 8003c16:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003c18:	68fb      	ldr	r3, [r7, #12]
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003c2a:	f000 fd07 	bl	800463c <vTaskStartScheduler>
  
  return osOK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c36:	b089      	sub	sp, #36	; 0x24
 8003c38:	af04      	add	r7, sp, #16
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d020      	beq.n	8003c88 <osThreadCreate+0x54>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d01c      	beq.n	8003c88 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685c      	ldr	r4, [r3, #4]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681d      	ldr	r5, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691e      	ldr	r6, [r3, #16]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff ffc8 	bl	8003bf6 <makeFreeRtosPriority>
 8003c66:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c70:	9202      	str	r2, [sp, #8]
 8003c72:	9301      	str	r3, [sp, #4]
 8003c74:	9100      	str	r1, [sp, #0]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	4632      	mov	r2, r6
 8003c7a:	4629      	mov	r1, r5
 8003c7c:	4620      	mov	r0, r4
 8003c7e:	f000 f8ed 	bl	8003e5c <xTaskCreateStatic>
 8003c82:	4603      	mov	r3, r0
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	e01c      	b.n	8003cc2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685c      	ldr	r4, [r3, #4]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c94:	b29e      	uxth	r6, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7ff ffaa 	bl	8003bf6 <makeFreeRtosPriority>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	f107 030c 	add.w	r3, r7, #12
 8003ca8:	9301      	str	r3, [sp, #4]
 8003caa:	9200      	str	r2, [sp, #0]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	4632      	mov	r2, r6
 8003cb0:	4629      	mov	r1, r5
 8003cb2:	4620      	mov	r0, r4
 8003cb4:	f000 f92f 	bl	8003f16 <xTaskCreate>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d001      	beq.n	8003cc2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	e000      	b.n	8003cc4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3714      	adds	r7, #20
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ccc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <osDelay+0x16>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	e000      	b.n	8003ce4 <osDelay+0x18>
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 fae1 	bl	80042ac <vTaskDelay>
  
  return osOK;
 8003cea:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f103 0208 	add.w	r2, r3, #8
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f04f 32ff 	mov.w	r2, #4294967295
 8003d0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f103 0208 	add.w	r2, r3, #8
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f103 0208 	add.w	r2, r3, #8
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b085      	sub	sp, #20
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
 8003d56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	1c5a      	adds	r2, r3, #1
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	601a      	str	r2, [r3, #0]
}
 8003d8a:	bf00      	nop
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d96:	b480      	push	{r7}
 8003d98:	b085      	sub	sp, #20
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
 8003d9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dac:	d103      	bne.n	8003db6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	60fb      	str	r3, [r7, #12]
 8003db4:	e00c      	b.n	8003dd0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	3308      	adds	r3, #8
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	e002      	b.n	8003dc4 <vListInsert+0x2e>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d2f6      	bcs.n	8003dbe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	601a      	str	r2, [r3, #0]
}
 8003dfc:	bf00      	nop
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6892      	ldr	r2, [r2, #8]
 8003e1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	6852      	ldr	r2, [r2, #4]
 8003e28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d103      	bne.n	8003e3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	1e5a      	subs	r2, r3, #1
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b08e      	sub	sp, #56	; 0x38
 8003e60:	af04      	add	r7, sp, #16
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
 8003e68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10a      	bne.n	8003e86 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e74:	f383 8811 	msr	BASEPRI, r3
 8003e78:	f3bf 8f6f 	isb	sy
 8003e7c:	f3bf 8f4f 	dsb	sy
 8003e80:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003e82:	bf00      	nop
 8003e84:	e7fe      	b.n	8003e84 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d10a      	bne.n	8003ea2 <xTaskCreateStatic+0x46>
	__asm volatile
 8003e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e90:	f383 8811 	msr	BASEPRI, r3
 8003e94:	f3bf 8f6f 	isb	sy
 8003e98:	f3bf 8f4f 	dsb	sy
 8003e9c:	61fb      	str	r3, [r7, #28]
}
 8003e9e:	bf00      	nop
 8003ea0:	e7fe      	b.n	8003ea0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003ea2:	23b4      	movs	r3, #180	; 0xb4
 8003ea4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	2bb4      	cmp	r3, #180	; 0xb4
 8003eaa:	d00a      	beq.n	8003ec2 <xTaskCreateStatic+0x66>
	__asm volatile
 8003eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb0:	f383 8811 	msr	BASEPRI, r3
 8003eb4:	f3bf 8f6f 	isb	sy
 8003eb8:	f3bf 8f4f 	dsb	sy
 8003ebc:	61bb      	str	r3, [r7, #24]
}
 8003ebe:	bf00      	nop
 8003ec0:	e7fe      	b.n	8003ec0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003ec2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d01e      	beq.n	8003f08 <xTaskCreateStatic+0xac>
 8003eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d01b      	beq.n	8003f08 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ed8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	2202      	movs	r2, #2
 8003ede:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	9303      	str	r3, [sp, #12]
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	9302      	str	r3, [sp, #8]
 8003eea:	f107 0314 	add.w	r3, r7, #20
 8003eee:	9301      	str	r3, [sp, #4]
 8003ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	68b9      	ldr	r1, [r7, #8]
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f000 f850 	bl	8003fa0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f02:	f000 f8eb 	bl	80040dc <prvAddNewTaskToReadyList>
 8003f06:	e001      	b.n	8003f0c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003f0c:	697b      	ldr	r3, [r7, #20]
	}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3728      	adds	r7, #40	; 0x28
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b08c      	sub	sp, #48	; 0x30
 8003f1a:	af04      	add	r7, sp, #16
 8003f1c:	60f8      	str	r0, [r7, #12]
 8003f1e:	60b9      	str	r1, [r7, #8]
 8003f20:	603b      	str	r3, [r7, #0]
 8003f22:	4613      	mov	r3, r2
 8003f24:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003f26:	88fb      	ldrh	r3, [r7, #6]
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f001 f954 	bl	80051d8 <pvPortMalloc>
 8003f30:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00e      	beq.n	8003f56 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003f38:	20b4      	movs	r0, #180	; 0xb4
 8003f3a:	f001 f94d 	bl	80051d8 <pvPortMalloc>
 8003f3e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	631a      	str	r2, [r3, #48]	; 0x30
 8003f4c:	e005      	b.n	8003f5a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003f4e:	6978      	ldr	r0, [r7, #20]
 8003f50:	f001 fa0e 	bl	8005370 <vPortFree>
 8003f54:	e001      	b.n	8003f5a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003f56:	2300      	movs	r3, #0
 8003f58:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d017      	beq.n	8003f90 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003f68:	88fa      	ldrh	r2, [r7, #6]
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	9303      	str	r3, [sp, #12]
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	9302      	str	r3, [sp, #8]
 8003f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f74:	9301      	str	r3, [sp, #4]
 8003f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	68b9      	ldr	r1, [r7, #8]
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 f80e 	bl	8003fa0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f84:	69f8      	ldr	r0, [r7, #28]
 8003f86:	f000 f8a9 	bl	80040dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	61bb      	str	r3, [r7, #24]
 8003f8e:	e002      	b.n	8003f96 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f90:	f04f 33ff 	mov.w	r3, #4294967295
 8003f94:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f96:	69bb      	ldr	r3, [r7, #24]
	}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3720      	adds	r7, #32
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b088      	sub	sp, #32
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
 8003fac:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	4413      	add	r3, r2
 8003fbe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	f023 0307 	bic.w	r3, r3, #7
 8003fc6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd6:	f383 8811 	msr	BASEPRI, r3
 8003fda:	f3bf 8f6f 	isb	sy
 8003fde:	f3bf 8f4f 	dsb	sy
 8003fe2:	617b      	str	r3, [r7, #20]
}
 8003fe4:	bf00      	nop
 8003fe6:	e7fe      	b.n	8003fe6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d01f      	beq.n	800402e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fee:	2300      	movs	r3, #0
 8003ff0:	61fb      	str	r3, [r7, #28]
 8003ff2:	e012      	b.n	800401a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	7819      	ldrb	r1, [r3, #0]
 8003ffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	4413      	add	r3, r2
 8004002:	3334      	adds	r3, #52	; 0x34
 8004004:	460a      	mov	r2, r1
 8004006:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004008:	68ba      	ldr	r2, [r7, #8]
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	4413      	add	r3, r2
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d006      	beq.n	8004022 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	3301      	adds	r3, #1
 8004018:	61fb      	str	r3, [r7, #28]
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	2b0f      	cmp	r3, #15
 800401e:	d9e9      	bls.n	8003ff4 <prvInitialiseNewTask+0x54>
 8004020:	e000      	b.n	8004024 <prvInitialiseNewTask+0x84>
			{
				break;
 8004022:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800402c:	e003      	b.n	8004036 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800402e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004038:	2b06      	cmp	r3, #6
 800403a:	d901      	bls.n	8004040 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800403c:	2306      	movs	r3, #6
 800403e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004042:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004044:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004048:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800404a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800404c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800404e:	2200      	movs	r2, #0
 8004050:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004054:	3304      	adds	r3, #4
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff fe6c 	bl	8003d34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800405c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405e:	3318      	adds	r3, #24
 8004060:	4618      	mov	r0, r3
 8004062:	f7ff fe67 	bl	8003d34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800406a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800406c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406e:	f1c3 0207 	rsb	r2, r3, #7
 8004072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004074:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800407a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800407c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407e:	2200      	movs	r2, #0
 8004080:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004086:	2200      	movs	r2, #0
 8004088:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800408c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408e:	334c      	adds	r3, #76	; 0x4c
 8004090:	2260      	movs	r2, #96	; 0x60
 8004092:	2100      	movs	r1, #0
 8004094:	4618      	mov	r0, r3
 8004096:	f001 faaf 	bl	80055f8 <memset>
 800409a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409c:	4a0c      	ldr	r2, [pc, #48]	; (80040d0 <prvInitialiseNewTask+0x130>)
 800409e:	651a      	str	r2, [r3, #80]	; 0x50
 80040a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a2:	4a0c      	ldr	r2, [pc, #48]	; (80040d4 <prvInitialiseNewTask+0x134>)
 80040a4:	655a      	str	r2, [r3, #84]	; 0x54
 80040a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a8:	4a0b      	ldr	r2, [pc, #44]	; (80040d8 <prvInitialiseNewTask+0x138>)
 80040aa:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	68f9      	ldr	r1, [r7, #12]
 80040b0:	69b8      	ldr	r0, [r7, #24]
 80040b2:	f000 fe41 	bl	8004d38 <pxPortInitialiseStack>
 80040b6:	4602      	mov	r2, r0
 80040b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80040bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d002      	beq.n	80040c8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80040c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040c8:	bf00      	nop
 80040ca:	3720      	adds	r7, #32
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	080058b0 	.word	0x080058b0
 80040d4:	080058d0 	.word	0x080058d0
 80040d8:	08005890 	.word	0x08005890

080040dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80040e4:	f000 ff56 	bl	8004f94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80040e8:	4b2a      	ldr	r3, [pc, #168]	; (8004194 <prvAddNewTaskToReadyList+0xb8>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	3301      	adds	r3, #1
 80040ee:	4a29      	ldr	r2, [pc, #164]	; (8004194 <prvAddNewTaskToReadyList+0xb8>)
 80040f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80040f2:	4b29      	ldr	r3, [pc, #164]	; (8004198 <prvAddNewTaskToReadyList+0xbc>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d109      	bne.n	800410e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80040fa:	4a27      	ldr	r2, [pc, #156]	; (8004198 <prvAddNewTaskToReadyList+0xbc>)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004100:	4b24      	ldr	r3, [pc, #144]	; (8004194 <prvAddNewTaskToReadyList+0xb8>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d110      	bne.n	800412a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004108:	f000 fcee 	bl	8004ae8 <prvInitialiseTaskLists>
 800410c:	e00d      	b.n	800412a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800410e:	4b23      	ldr	r3, [pc, #140]	; (800419c <prvAddNewTaskToReadyList+0xc0>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d109      	bne.n	800412a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004116:	4b20      	ldr	r3, [pc, #128]	; (8004198 <prvAddNewTaskToReadyList+0xbc>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004120:	429a      	cmp	r2, r3
 8004122:	d802      	bhi.n	800412a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004124:	4a1c      	ldr	r2, [pc, #112]	; (8004198 <prvAddNewTaskToReadyList+0xbc>)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800412a:	4b1d      	ldr	r3, [pc, #116]	; (80041a0 <prvAddNewTaskToReadyList+0xc4>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	3301      	adds	r3, #1
 8004130:	4a1b      	ldr	r2, [pc, #108]	; (80041a0 <prvAddNewTaskToReadyList+0xc4>)
 8004132:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004138:	2201      	movs	r2, #1
 800413a:	409a      	lsls	r2, r3
 800413c:	4b19      	ldr	r3, [pc, #100]	; (80041a4 <prvAddNewTaskToReadyList+0xc8>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4313      	orrs	r3, r2
 8004142:	4a18      	ldr	r2, [pc, #96]	; (80041a4 <prvAddNewTaskToReadyList+0xc8>)
 8004144:	6013      	str	r3, [r2, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800414a:	4613      	mov	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	4a15      	ldr	r2, [pc, #84]	; (80041a8 <prvAddNewTaskToReadyList+0xcc>)
 8004154:	441a      	add	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	3304      	adds	r3, #4
 800415a:	4619      	mov	r1, r3
 800415c:	4610      	mov	r0, r2
 800415e:	f7ff fdf6 	bl	8003d4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004162:	f000 ff47 	bl	8004ff4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004166:	4b0d      	ldr	r3, [pc, #52]	; (800419c <prvAddNewTaskToReadyList+0xc0>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00e      	beq.n	800418c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800416e:	4b0a      	ldr	r3, [pc, #40]	; (8004198 <prvAddNewTaskToReadyList+0xbc>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004178:	429a      	cmp	r2, r3
 800417a:	d207      	bcs.n	800418c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800417c:	4b0b      	ldr	r3, [pc, #44]	; (80041ac <prvAddNewTaskToReadyList+0xd0>)
 800417e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	f3bf 8f4f 	dsb	sy
 8004188:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800418c:	bf00      	nop
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	20000588 	.word	0x20000588
 8004198:	20000488 	.word	0x20000488
 800419c:	20000594 	.word	0x20000594
 80041a0:	200005a4 	.word	0x200005a4
 80041a4:	20000590 	.word	0x20000590
 80041a8:	2000048c 	.word	0x2000048c
 80041ac:	e000ed04 	.word	0xe000ed04

080041b0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b08a      	sub	sp, #40	; 0x28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80041ba:	2300      	movs	r3, #0
 80041bc:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d10a      	bne.n	80041da <vTaskDelayUntil+0x2a>
	__asm volatile
 80041c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c8:	f383 8811 	msr	BASEPRI, r3
 80041cc:	f3bf 8f6f 	isb	sy
 80041d0:	f3bf 8f4f 	dsb	sy
 80041d4:	617b      	str	r3, [r7, #20]
}
 80041d6:	bf00      	nop
 80041d8:	e7fe      	b.n	80041d8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10a      	bne.n	80041f6 <vTaskDelayUntil+0x46>
	__asm volatile
 80041e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e4:	f383 8811 	msr	BASEPRI, r3
 80041e8:	f3bf 8f6f 	isb	sy
 80041ec:	f3bf 8f4f 	dsb	sy
 80041f0:	613b      	str	r3, [r7, #16]
}
 80041f2:	bf00      	nop
 80041f4:	e7fe      	b.n	80041f4 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80041f6:	4b2a      	ldr	r3, [pc, #168]	; (80042a0 <vTaskDelayUntil+0xf0>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00a      	beq.n	8004214 <vTaskDelayUntil+0x64>
	__asm volatile
 80041fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004202:	f383 8811 	msr	BASEPRI, r3
 8004206:	f3bf 8f6f 	isb	sy
 800420a:	f3bf 8f4f 	dsb	sy
 800420e:	60fb      	str	r3, [r7, #12]
}
 8004210:	bf00      	nop
 8004212:	e7fe      	b.n	8004212 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8004214:	f000 fa7c 	bl	8004710 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004218:	4b22      	ldr	r3, [pc, #136]	; (80042a4 <vTaskDelayUntil+0xf4>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	4413      	add	r3, r2
 8004226:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6a3a      	ldr	r2, [r7, #32]
 800422e:	429a      	cmp	r2, r3
 8004230:	d20b      	bcs.n	800424a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	69fa      	ldr	r2, [r7, #28]
 8004238:	429a      	cmp	r2, r3
 800423a:	d211      	bcs.n	8004260 <vTaskDelayUntil+0xb0>
 800423c:	69fa      	ldr	r2, [r7, #28]
 800423e:	6a3b      	ldr	r3, [r7, #32]
 8004240:	429a      	cmp	r2, r3
 8004242:	d90d      	bls.n	8004260 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8004244:	2301      	movs	r3, #1
 8004246:	627b      	str	r3, [r7, #36]	; 0x24
 8004248:	e00a      	b.n	8004260 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	69fa      	ldr	r2, [r7, #28]
 8004250:	429a      	cmp	r2, r3
 8004252:	d303      	bcc.n	800425c <vTaskDelayUntil+0xac>
 8004254:	69fa      	ldr	r2, [r7, #28]
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	429a      	cmp	r2, r3
 800425a:	d901      	bls.n	8004260 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800425c:	2301      	movs	r3, #1
 800425e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	69fa      	ldr	r2, [r7, #28]
 8004264:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	2b00      	cmp	r3, #0
 800426a:	d006      	beq.n	800427a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800426c:	69fa      	ldr	r2, [r7, #28]
 800426e:	6a3b      	ldr	r3, [r7, #32]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2100      	movs	r1, #0
 8004274:	4618      	mov	r0, r3
 8004276:	f000 fcf9 	bl	8004c6c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800427a:	f000 fa57 	bl	800472c <xTaskResumeAll>
 800427e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d107      	bne.n	8004296 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8004286:	4b08      	ldr	r3, [pc, #32]	; (80042a8 <vTaskDelayUntil+0xf8>)
 8004288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004296:	bf00      	nop
 8004298:	3728      	adds	r7, #40	; 0x28
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	200005b0 	.word	0x200005b0
 80042a4:	2000058c 	.word	0x2000058c
 80042a8:	e000ed04 	.word	0xe000ed04

080042ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80042b4:	2300      	movs	r3, #0
 80042b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d017      	beq.n	80042ee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80042be:	4b13      	ldr	r3, [pc, #76]	; (800430c <vTaskDelay+0x60>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00a      	beq.n	80042dc <vTaskDelay+0x30>
	__asm volatile
 80042c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ca:	f383 8811 	msr	BASEPRI, r3
 80042ce:	f3bf 8f6f 	isb	sy
 80042d2:	f3bf 8f4f 	dsb	sy
 80042d6:	60bb      	str	r3, [r7, #8]
}
 80042d8:	bf00      	nop
 80042da:	e7fe      	b.n	80042da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80042dc:	f000 fa18 	bl	8004710 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80042e0:	2100      	movs	r1, #0
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 fcc2 	bl	8004c6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80042e8:	f000 fa20 	bl	800472c <xTaskResumeAll>
 80042ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d107      	bne.n	8004304 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80042f4:	4b06      	ldr	r3, [pc, #24]	; (8004310 <vTaskDelay+0x64>)
 80042f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042fa:	601a      	str	r2, [r3, #0]
 80042fc:	f3bf 8f4f 	dsb	sy
 8004300:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004304:	bf00      	nop
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	200005b0 	.word	0x200005b0
 8004310:	e000ed04 	.word	0xe000ed04

08004314 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800431c:	f000 fe3a 	bl	8004f94 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d102      	bne.n	800432c <vTaskSuspend+0x18>
 8004326:	4b3c      	ldr	r3, [pc, #240]	; (8004418 <vTaskSuspend+0x104>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	e000      	b.n	800432e <vTaskSuspend+0x1a>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	3304      	adds	r3, #4
 8004334:	4618      	mov	r0, r3
 8004336:	f7ff fd67 	bl	8003e08 <uxListRemove>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d115      	bne.n	800436c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004344:	4935      	ldr	r1, [pc, #212]	; (800441c <vTaskSuspend+0x108>)
 8004346:	4613      	mov	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4413      	add	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	440b      	add	r3, r1
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10a      	bne.n	800436c <vTaskSuspend+0x58>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435a:	2201      	movs	r2, #1
 800435c:	fa02 f303 	lsl.w	r3, r2, r3
 8004360:	43da      	mvns	r2, r3
 8004362:	4b2f      	ldr	r3, [pc, #188]	; (8004420 <vTaskSuspend+0x10c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4013      	ands	r3, r2
 8004368:	4a2d      	ldr	r2, [pc, #180]	; (8004420 <vTaskSuspend+0x10c>)
 800436a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004370:	2b00      	cmp	r3, #0
 8004372:	d004      	beq.n	800437e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	3318      	adds	r3, #24
 8004378:	4618      	mov	r0, r3
 800437a:	f7ff fd45 	bl	8003e08 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	3304      	adds	r3, #4
 8004382:	4619      	mov	r1, r3
 8004384:	4827      	ldr	r0, [pc, #156]	; (8004424 <vTaskSuspend+0x110>)
 8004386:	f7ff fce2 	bl	8003d4e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b01      	cmp	r3, #1
 8004394:	d103      	bne.n	800439e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800439e:	f000 fe29 	bl	8004ff4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80043a2:	4b21      	ldr	r3, [pc, #132]	; (8004428 <vTaskSuspend+0x114>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d005      	beq.n	80043b6 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80043aa:	f000 fdf3 	bl	8004f94 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80043ae:	f000 fc3d 	bl	8004c2c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80043b2:	f000 fe1f 	bl	8004ff4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80043b6:	4b18      	ldr	r3, [pc, #96]	; (8004418 <vTaskSuspend+0x104>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d127      	bne.n	8004410 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 80043c0:	4b19      	ldr	r3, [pc, #100]	; (8004428 <vTaskSuspend+0x114>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d017      	beq.n	80043f8 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80043c8:	4b18      	ldr	r3, [pc, #96]	; (800442c <vTaskSuspend+0x118>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00a      	beq.n	80043e6 <vTaskSuspend+0xd2>
	__asm volatile
 80043d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d4:	f383 8811 	msr	BASEPRI, r3
 80043d8:	f3bf 8f6f 	isb	sy
 80043dc:	f3bf 8f4f 	dsb	sy
 80043e0:	60bb      	str	r3, [r7, #8]
}
 80043e2:	bf00      	nop
 80043e4:	e7fe      	b.n	80043e4 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 80043e6:	4b12      	ldr	r3, [pc, #72]	; (8004430 <vTaskSuspend+0x11c>)
 80043e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043ec:	601a      	str	r2, [r3, #0]
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80043f6:	e00b      	b.n	8004410 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80043f8:	4b0a      	ldr	r3, [pc, #40]	; (8004424 <vTaskSuspend+0x110>)
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	4b0d      	ldr	r3, [pc, #52]	; (8004434 <vTaskSuspend+0x120>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	429a      	cmp	r2, r3
 8004402:	d103      	bne.n	800440c <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8004404:	4b04      	ldr	r3, [pc, #16]	; (8004418 <vTaskSuspend+0x104>)
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]
	}
 800440a:	e001      	b.n	8004410 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800440c:	f000 faf2 	bl	80049f4 <vTaskSwitchContext>
	}
 8004410:	bf00      	nop
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	20000488 	.word	0x20000488
 800441c:	2000048c 	.word	0x2000048c
 8004420:	20000590 	.word	0x20000590
 8004424:	20000574 	.word	0x20000574
 8004428:	20000594 	.word	0x20000594
 800442c:	200005b0 	.word	0x200005b0
 8004430:	e000ed04 	.word	0xe000ed04
 8004434:	20000588 	.word	0x20000588

08004438 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8004438:	b480      	push	{r7}
 800443a:	b087      	sub	sp, #28
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8004440:	2300      	movs	r3, #0
 8004442:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10a      	bne.n	8004464 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800444e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	60fb      	str	r3, [r7, #12]
}
 8004460:	bf00      	nop
 8004462:	e7fe      	b.n	8004462 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	4a0a      	ldr	r2, [pc, #40]	; (8004494 <prvTaskIsTaskSuspended+0x5c>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d10a      	bne.n	8004484 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004472:	4a09      	ldr	r2, [pc, #36]	; (8004498 <prvTaskIsTaskSuspended+0x60>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d005      	beq.n	8004484 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8004480:	2301      	movs	r3, #1
 8004482:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004484:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8004486:	4618      	mov	r0, r3
 8004488:	371c      	adds	r7, #28
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	20000574 	.word	0x20000574
 8004498:	20000548 	.word	0x20000548

0800449c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10a      	bne.n	80044c4 <vTaskResume+0x28>
	__asm volatile
 80044ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b2:	f383 8811 	msr	BASEPRI, r3
 80044b6:	f3bf 8f6f 	isb	sy
 80044ba:	f3bf 8f4f 	dsb	sy
 80044be:	60bb      	str	r3, [r7, #8]
}
 80044c0:	bf00      	nop
 80044c2:	e7fe      	b.n	80044c2 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80044c4:	4b20      	ldr	r3, [pc, #128]	; (8004548 <vTaskResume+0xac>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d037      	beq.n	800453e <vTaskResume+0xa2>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d034      	beq.n	800453e <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 80044d4:	f000 fd5e 	bl	8004f94 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f7ff ffad 	bl	8004438 <prvTaskIsTaskSuspended>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d02a      	beq.n	800453a <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	3304      	adds	r3, #4
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7ff fc8d 	bl	8003e08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f2:	2201      	movs	r2, #1
 80044f4:	409a      	lsls	r2, r3
 80044f6:	4b15      	ldr	r3, [pc, #84]	; (800454c <vTaskResume+0xb0>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	4a13      	ldr	r2, [pc, #76]	; (800454c <vTaskResume+0xb0>)
 80044fe:	6013      	str	r3, [r2, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004504:	4613      	mov	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4413      	add	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4a10      	ldr	r2, [pc, #64]	; (8004550 <vTaskResume+0xb4>)
 800450e:	441a      	add	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	3304      	adds	r3, #4
 8004514:	4619      	mov	r1, r3
 8004516:	4610      	mov	r0, r2
 8004518:	f7ff fc19 	bl	8003d4e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004520:	4b09      	ldr	r3, [pc, #36]	; (8004548 <vTaskResume+0xac>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004526:	429a      	cmp	r2, r3
 8004528:	d307      	bcc.n	800453a <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800452a:	4b0a      	ldr	r3, [pc, #40]	; (8004554 <vTaskResume+0xb8>)
 800452c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004530:	601a      	str	r2, [r3, #0]
 8004532:	f3bf 8f4f 	dsb	sy
 8004536:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800453a:	f000 fd5b 	bl	8004ff4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800453e:	bf00      	nop
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	20000488 	.word	0x20000488
 800454c:	20000590 	.word	0x20000590
 8004550:	2000048c 	.word	0x2000048c
 8004554:	e000ed04 	.word	0xe000ed04

08004558 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8004558:	b580      	push	{r7, lr}
 800455a:	b08a      	sub	sp, #40	; 0x28
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8004560:	2300      	movs	r3, #0
 8004562:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10a      	bne.n	8004584 <xTaskResumeFromISR+0x2c>
	__asm volatile
 800456e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004572:	f383 8811 	msr	BASEPRI, r3
 8004576:	f3bf 8f6f 	isb	sy
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	61bb      	str	r3, [r7, #24]
}
 8004580:	bf00      	nop
 8004582:	e7fe      	b.n	8004582 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004584:	f000 fde8 	bl	8005158 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004588:	f3ef 8211 	mrs	r2, BASEPRI
 800458c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004590:	f383 8811 	msr	BASEPRI, r3
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	617a      	str	r2, [r7, #20]
 800459e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80045a0:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80045a2:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80045a4:	6a38      	ldr	r0, [r7, #32]
 80045a6:	f7ff ff47 	bl	8004438 <prvTaskIsTaskSuspended>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d02f      	beq.n	8004610 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045b0:	4b1d      	ldr	r3, [pc, #116]	; (8004628 <xTaskResumeFromISR+0xd0>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d125      	bne.n	8004604 <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045b8:	6a3b      	ldr	r3, [r7, #32]
 80045ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045bc:	4b1b      	ldr	r3, [pc, #108]	; (800462c <xTaskResumeFromISR+0xd4>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d301      	bcc.n	80045ca <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 80045c6:	2301      	movs	r3, #1
 80045c8:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045ca:	6a3b      	ldr	r3, [r7, #32]
 80045cc:	3304      	adds	r3, #4
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7ff fc1a 	bl	8003e08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80045d4:	6a3b      	ldr	r3, [r7, #32]
 80045d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d8:	2201      	movs	r2, #1
 80045da:	409a      	lsls	r2, r3
 80045dc:	4b14      	ldr	r3, [pc, #80]	; (8004630 <xTaskResumeFromISR+0xd8>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	4a13      	ldr	r2, [pc, #76]	; (8004630 <xTaskResumeFromISR+0xd8>)
 80045e4:	6013      	str	r3, [r2, #0]
 80045e6:	6a3b      	ldr	r3, [r7, #32]
 80045e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ea:	4613      	mov	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	4413      	add	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	4a10      	ldr	r2, [pc, #64]	; (8004634 <xTaskResumeFromISR+0xdc>)
 80045f4:	441a      	add	r2, r3
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	3304      	adds	r3, #4
 80045fa:	4619      	mov	r1, r3
 80045fc:	4610      	mov	r0, r2
 80045fe:	f7ff fba6 	bl	8003d4e <vListInsertEnd>
 8004602:	e005      	b.n	8004610 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	3318      	adds	r3, #24
 8004608:	4619      	mov	r1, r3
 800460a:	480b      	ldr	r0, [pc, #44]	; (8004638 <xTaskResumeFromISR+0xe0>)
 800460c:	f7ff fb9f 	bl	8003d4e <vListInsertEnd>
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800461a:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 800461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800461e:	4618      	mov	r0, r3
 8004620:	3728      	adds	r7, #40	; 0x28
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	200005b0 	.word	0x200005b0
 800462c:	20000488 	.word	0x20000488
 8004630:	20000590 	.word	0x20000590
 8004634:	2000048c 	.word	0x2000048c
 8004638:	20000548 	.word	0x20000548

0800463c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b08a      	sub	sp, #40	; 0x28
 8004640:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004642:	2300      	movs	r3, #0
 8004644:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004646:	2300      	movs	r3, #0
 8004648:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800464a:	463a      	mov	r2, r7
 800464c:	1d39      	adds	r1, r7, #4
 800464e:	f107 0308 	add.w	r3, r7, #8
 8004652:	4618      	mov	r0, r3
 8004654:	f7fb ff3e 	bl	80004d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004658:	6839      	ldr	r1, [r7, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	9202      	str	r2, [sp, #8]
 8004660:	9301      	str	r3, [sp, #4]
 8004662:	2300      	movs	r3, #0
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	2300      	movs	r3, #0
 8004668:	460a      	mov	r2, r1
 800466a:	4921      	ldr	r1, [pc, #132]	; (80046f0 <vTaskStartScheduler+0xb4>)
 800466c:	4821      	ldr	r0, [pc, #132]	; (80046f4 <vTaskStartScheduler+0xb8>)
 800466e:	f7ff fbf5 	bl	8003e5c <xTaskCreateStatic>
 8004672:	4603      	mov	r3, r0
 8004674:	4a20      	ldr	r2, [pc, #128]	; (80046f8 <vTaskStartScheduler+0xbc>)
 8004676:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004678:	4b1f      	ldr	r3, [pc, #124]	; (80046f8 <vTaskStartScheduler+0xbc>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004680:	2301      	movs	r3, #1
 8004682:	617b      	str	r3, [r7, #20]
 8004684:	e001      	b.n	800468a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004686:	2300      	movs	r3, #0
 8004688:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d11b      	bne.n	80046c8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004694:	f383 8811 	msr	BASEPRI, r3
 8004698:	f3bf 8f6f 	isb	sy
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	613b      	str	r3, [r7, #16]
}
 80046a2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80046a4:	4b15      	ldr	r3, [pc, #84]	; (80046fc <vTaskStartScheduler+0xc0>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	334c      	adds	r3, #76	; 0x4c
 80046aa:	4a15      	ldr	r2, [pc, #84]	; (8004700 <vTaskStartScheduler+0xc4>)
 80046ac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80046ae:	4b15      	ldr	r3, [pc, #84]	; (8004704 <vTaskStartScheduler+0xc8>)
 80046b0:	f04f 32ff 	mov.w	r2, #4294967295
 80046b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80046b6:	4b14      	ldr	r3, [pc, #80]	; (8004708 <vTaskStartScheduler+0xcc>)
 80046b8:	2201      	movs	r2, #1
 80046ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80046bc:	4b13      	ldr	r3, [pc, #76]	; (800470c <vTaskStartScheduler+0xd0>)
 80046be:	2200      	movs	r2, #0
 80046c0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80046c2:	f000 fbc5 	bl	8004e50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80046c6:	e00e      	b.n	80046e6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ce:	d10a      	bne.n	80046e6 <vTaskStartScheduler+0xaa>
	__asm volatile
 80046d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d4:	f383 8811 	msr	BASEPRI, r3
 80046d8:	f3bf 8f6f 	isb	sy
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	60fb      	str	r3, [r7, #12]
}
 80046e2:	bf00      	nop
 80046e4:	e7fe      	b.n	80046e4 <vTaskStartScheduler+0xa8>
}
 80046e6:	bf00      	nop
 80046e8:	3718      	adds	r7, #24
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	08005840 	.word	0x08005840
 80046f4:	08004ab9 	.word	0x08004ab9
 80046f8:	200005ac 	.word	0x200005ac
 80046fc:	20000488 	.word	0x20000488
 8004700:	20000010 	.word	0x20000010
 8004704:	200005a8 	.word	0x200005a8
 8004708:	20000594 	.word	0x20000594
 800470c:	2000058c 	.word	0x2000058c

08004710 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004710:	b480      	push	{r7}
 8004712:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004714:	4b04      	ldr	r3, [pc, #16]	; (8004728 <vTaskSuspendAll+0x18>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	3301      	adds	r3, #1
 800471a:	4a03      	ldr	r2, [pc, #12]	; (8004728 <vTaskSuspendAll+0x18>)
 800471c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800471e:	bf00      	nop
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	200005b0 	.word	0x200005b0

0800472c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004732:	2300      	movs	r3, #0
 8004734:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004736:	2300      	movs	r3, #0
 8004738:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800473a:	4b41      	ldr	r3, [pc, #260]	; (8004840 <xTaskResumeAll+0x114>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10a      	bne.n	8004758 <xTaskResumeAll+0x2c>
	__asm volatile
 8004742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004746:	f383 8811 	msr	BASEPRI, r3
 800474a:	f3bf 8f6f 	isb	sy
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	603b      	str	r3, [r7, #0]
}
 8004754:	bf00      	nop
 8004756:	e7fe      	b.n	8004756 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004758:	f000 fc1c 	bl	8004f94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800475c:	4b38      	ldr	r3, [pc, #224]	; (8004840 <xTaskResumeAll+0x114>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	3b01      	subs	r3, #1
 8004762:	4a37      	ldr	r2, [pc, #220]	; (8004840 <xTaskResumeAll+0x114>)
 8004764:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004766:	4b36      	ldr	r3, [pc, #216]	; (8004840 <xTaskResumeAll+0x114>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d161      	bne.n	8004832 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800476e:	4b35      	ldr	r3, [pc, #212]	; (8004844 <xTaskResumeAll+0x118>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d05d      	beq.n	8004832 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004776:	e02e      	b.n	80047d6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004778:	4b33      	ldr	r3, [pc, #204]	; (8004848 <xTaskResumeAll+0x11c>)
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	3318      	adds	r3, #24
 8004784:	4618      	mov	r0, r3
 8004786:	f7ff fb3f 	bl	8003e08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	3304      	adds	r3, #4
 800478e:	4618      	mov	r0, r3
 8004790:	f7ff fb3a 	bl	8003e08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004798:	2201      	movs	r2, #1
 800479a:	409a      	lsls	r2, r3
 800479c:	4b2b      	ldr	r3, [pc, #172]	; (800484c <xTaskResumeAll+0x120>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	4a2a      	ldr	r2, [pc, #168]	; (800484c <xTaskResumeAll+0x120>)
 80047a4:	6013      	str	r3, [r2, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047aa:	4613      	mov	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4413      	add	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4a27      	ldr	r2, [pc, #156]	; (8004850 <xTaskResumeAll+0x124>)
 80047b4:	441a      	add	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	3304      	adds	r3, #4
 80047ba:	4619      	mov	r1, r3
 80047bc:	4610      	mov	r0, r2
 80047be:	f7ff fac6 	bl	8003d4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c6:	4b23      	ldr	r3, [pc, #140]	; (8004854 <xTaskResumeAll+0x128>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d302      	bcc.n	80047d6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80047d0:	4b21      	ldr	r3, [pc, #132]	; (8004858 <xTaskResumeAll+0x12c>)
 80047d2:	2201      	movs	r2, #1
 80047d4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047d6:	4b1c      	ldr	r3, [pc, #112]	; (8004848 <xTaskResumeAll+0x11c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1cc      	bne.n	8004778 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80047e4:	f000 fa22 	bl	8004c2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80047e8:	4b1c      	ldr	r3, [pc, #112]	; (800485c <xTaskResumeAll+0x130>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d010      	beq.n	8004816 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80047f4:	f000 f846 	bl	8004884 <xTaskIncrementTick>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d002      	beq.n	8004804 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80047fe:	4b16      	ldr	r3, [pc, #88]	; (8004858 <xTaskResumeAll+0x12c>)
 8004800:	2201      	movs	r2, #1
 8004802:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	3b01      	subs	r3, #1
 8004808:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1f1      	bne.n	80047f4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004810:	4b12      	ldr	r3, [pc, #72]	; (800485c <xTaskResumeAll+0x130>)
 8004812:	2200      	movs	r2, #0
 8004814:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004816:	4b10      	ldr	r3, [pc, #64]	; (8004858 <xTaskResumeAll+0x12c>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d009      	beq.n	8004832 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800481e:	2301      	movs	r3, #1
 8004820:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004822:	4b0f      	ldr	r3, [pc, #60]	; (8004860 <xTaskResumeAll+0x134>)
 8004824:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	f3bf 8f4f 	dsb	sy
 800482e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004832:	f000 fbdf 	bl	8004ff4 <vPortExitCritical>

	return xAlreadyYielded;
 8004836:	68bb      	ldr	r3, [r7, #8]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	200005b0 	.word	0x200005b0
 8004844:	20000588 	.word	0x20000588
 8004848:	20000548 	.word	0x20000548
 800484c:	20000590 	.word	0x20000590
 8004850:	2000048c 	.word	0x2000048c
 8004854:	20000488 	.word	0x20000488
 8004858:	2000059c 	.word	0x2000059c
 800485c:	20000598 	.word	0x20000598
 8004860:	e000ed04 	.word	0xe000ed04

08004864 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800486a:	4b05      	ldr	r3, [pc, #20]	; (8004880 <xTaskGetTickCount+0x1c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004870:	687b      	ldr	r3, [r7, #4]
}
 8004872:	4618      	mov	r0, r3
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	2000058c 	.word	0x2000058c

08004884 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800488a:	2300      	movs	r3, #0
 800488c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800488e:	4b4e      	ldr	r3, [pc, #312]	; (80049c8 <xTaskIncrementTick+0x144>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	f040 808e 	bne.w	80049b4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004898:	4b4c      	ldr	r3, [pc, #304]	; (80049cc <xTaskIncrementTick+0x148>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3301      	adds	r3, #1
 800489e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80048a0:	4a4a      	ldr	r2, [pc, #296]	; (80049cc <xTaskIncrementTick+0x148>)
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d120      	bne.n	80048ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80048ac:	4b48      	ldr	r3, [pc, #288]	; (80049d0 <xTaskIncrementTick+0x14c>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00a      	beq.n	80048cc <xTaskIncrementTick+0x48>
	__asm volatile
 80048b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ba:	f383 8811 	msr	BASEPRI, r3
 80048be:	f3bf 8f6f 	isb	sy
 80048c2:	f3bf 8f4f 	dsb	sy
 80048c6:	603b      	str	r3, [r7, #0]
}
 80048c8:	bf00      	nop
 80048ca:	e7fe      	b.n	80048ca <xTaskIncrementTick+0x46>
 80048cc:	4b40      	ldr	r3, [pc, #256]	; (80049d0 <xTaskIncrementTick+0x14c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	60fb      	str	r3, [r7, #12]
 80048d2:	4b40      	ldr	r3, [pc, #256]	; (80049d4 <xTaskIncrementTick+0x150>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a3e      	ldr	r2, [pc, #248]	; (80049d0 <xTaskIncrementTick+0x14c>)
 80048d8:	6013      	str	r3, [r2, #0]
 80048da:	4a3e      	ldr	r2, [pc, #248]	; (80049d4 <xTaskIncrementTick+0x150>)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6013      	str	r3, [r2, #0]
 80048e0:	4b3d      	ldr	r3, [pc, #244]	; (80049d8 <xTaskIncrementTick+0x154>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	3301      	adds	r3, #1
 80048e6:	4a3c      	ldr	r2, [pc, #240]	; (80049d8 <xTaskIncrementTick+0x154>)
 80048e8:	6013      	str	r3, [r2, #0]
 80048ea:	f000 f99f 	bl	8004c2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80048ee:	4b3b      	ldr	r3, [pc, #236]	; (80049dc <xTaskIncrementTick+0x158>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d348      	bcc.n	800498a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048f8:	4b35      	ldr	r3, [pc, #212]	; (80049d0 <xTaskIncrementTick+0x14c>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d104      	bne.n	800490c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004902:	4b36      	ldr	r3, [pc, #216]	; (80049dc <xTaskIncrementTick+0x158>)
 8004904:	f04f 32ff 	mov.w	r2, #4294967295
 8004908:	601a      	str	r2, [r3, #0]
					break;
 800490a:	e03e      	b.n	800498a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800490c:	4b30      	ldr	r3, [pc, #192]	; (80049d0 <xTaskIncrementTick+0x14c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	429a      	cmp	r2, r3
 8004922:	d203      	bcs.n	800492c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004924:	4a2d      	ldr	r2, [pc, #180]	; (80049dc <xTaskIncrementTick+0x158>)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800492a:	e02e      	b.n	800498a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	3304      	adds	r3, #4
 8004930:	4618      	mov	r0, r3
 8004932:	f7ff fa69 	bl	8003e08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493a:	2b00      	cmp	r3, #0
 800493c:	d004      	beq.n	8004948 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	3318      	adds	r3, #24
 8004942:	4618      	mov	r0, r3
 8004944:	f7ff fa60 	bl	8003e08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494c:	2201      	movs	r2, #1
 800494e:	409a      	lsls	r2, r3
 8004950:	4b23      	ldr	r3, [pc, #140]	; (80049e0 <xTaskIncrementTick+0x15c>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4313      	orrs	r3, r2
 8004956:	4a22      	ldr	r2, [pc, #136]	; (80049e0 <xTaskIncrementTick+0x15c>)
 8004958:	6013      	str	r3, [r2, #0]
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800495e:	4613      	mov	r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	4413      	add	r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4a1f      	ldr	r2, [pc, #124]	; (80049e4 <xTaskIncrementTick+0x160>)
 8004968:	441a      	add	r2, r3
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	3304      	adds	r3, #4
 800496e:	4619      	mov	r1, r3
 8004970:	4610      	mov	r0, r2
 8004972:	f7ff f9ec 	bl	8003d4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800497a:	4b1b      	ldr	r3, [pc, #108]	; (80049e8 <xTaskIncrementTick+0x164>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004980:	429a      	cmp	r2, r3
 8004982:	d3b9      	bcc.n	80048f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004984:	2301      	movs	r3, #1
 8004986:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004988:	e7b6      	b.n	80048f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800498a:	4b17      	ldr	r3, [pc, #92]	; (80049e8 <xTaskIncrementTick+0x164>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004990:	4914      	ldr	r1, [pc, #80]	; (80049e4 <xTaskIncrementTick+0x160>)
 8004992:	4613      	mov	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4413      	add	r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	440b      	add	r3, r1
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d901      	bls.n	80049a6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80049a2:	2301      	movs	r3, #1
 80049a4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80049a6:	4b11      	ldr	r3, [pc, #68]	; (80049ec <xTaskIncrementTick+0x168>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d007      	beq.n	80049be <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80049ae:	2301      	movs	r3, #1
 80049b0:	617b      	str	r3, [r7, #20]
 80049b2:	e004      	b.n	80049be <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80049b4:	4b0e      	ldr	r3, [pc, #56]	; (80049f0 <xTaskIncrementTick+0x16c>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	3301      	adds	r3, #1
 80049ba:	4a0d      	ldr	r2, [pc, #52]	; (80049f0 <xTaskIncrementTick+0x16c>)
 80049bc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80049be:	697b      	ldr	r3, [r7, #20]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3718      	adds	r7, #24
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	200005b0 	.word	0x200005b0
 80049cc:	2000058c 	.word	0x2000058c
 80049d0:	20000540 	.word	0x20000540
 80049d4:	20000544 	.word	0x20000544
 80049d8:	200005a0 	.word	0x200005a0
 80049dc:	200005a8 	.word	0x200005a8
 80049e0:	20000590 	.word	0x20000590
 80049e4:	2000048c 	.word	0x2000048c
 80049e8:	20000488 	.word	0x20000488
 80049ec:	2000059c 	.word	0x2000059c
 80049f0:	20000598 	.word	0x20000598

080049f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80049f4:	b480      	push	{r7}
 80049f6:	b087      	sub	sp, #28
 80049f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80049fa:	4b29      	ldr	r3, [pc, #164]	; (8004aa0 <vTaskSwitchContext+0xac>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a02:	4b28      	ldr	r3, [pc, #160]	; (8004aa4 <vTaskSwitchContext+0xb0>)
 8004a04:	2201      	movs	r2, #1
 8004a06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a08:	e044      	b.n	8004a94 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004a0a:	4b26      	ldr	r3, [pc, #152]	; (8004aa4 <vTaskSwitchContext+0xb0>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a10:	4b25      	ldr	r3, [pc, #148]	; (8004aa8 <vTaskSwitchContext+0xb4>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	fab3 f383 	clz	r3, r3
 8004a1c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004a1e:	7afb      	ldrb	r3, [r7, #11]
 8004a20:	f1c3 031f 	rsb	r3, r3, #31
 8004a24:	617b      	str	r3, [r7, #20]
 8004a26:	4921      	ldr	r1, [pc, #132]	; (8004aac <vTaskSwitchContext+0xb8>)
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	440b      	add	r3, r1
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10a      	bne.n	8004a50 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3e:	f383 8811 	msr	BASEPRI, r3
 8004a42:	f3bf 8f6f 	isb	sy
 8004a46:	f3bf 8f4f 	dsb	sy
 8004a4a:	607b      	str	r3, [r7, #4]
}
 8004a4c:	bf00      	nop
 8004a4e:	e7fe      	b.n	8004a4e <vTaskSwitchContext+0x5a>
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	4613      	mov	r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4a14      	ldr	r2, [pc, #80]	; (8004aac <vTaskSwitchContext+0xb8>)
 8004a5c:	4413      	add	r3, r2
 8004a5e:	613b      	str	r3, [r7, #16]
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	685a      	ldr	r2, [r3, #4]
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	605a      	str	r2, [r3, #4]
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	3308      	adds	r3, #8
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d104      	bne.n	8004a80 <vTaskSwitchContext+0x8c>
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	605a      	str	r2, [r3, #4]
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	4a0a      	ldr	r2, [pc, #40]	; (8004ab0 <vTaskSwitchContext+0xbc>)
 8004a88:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004a8a:	4b09      	ldr	r3, [pc, #36]	; (8004ab0 <vTaskSwitchContext+0xbc>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	334c      	adds	r3, #76	; 0x4c
 8004a90:	4a08      	ldr	r2, [pc, #32]	; (8004ab4 <vTaskSwitchContext+0xc0>)
 8004a92:	6013      	str	r3, [r2, #0]
}
 8004a94:	bf00      	nop
 8004a96:	371c      	adds	r7, #28
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	200005b0 	.word	0x200005b0
 8004aa4:	2000059c 	.word	0x2000059c
 8004aa8:	20000590 	.word	0x20000590
 8004aac:	2000048c 	.word	0x2000048c
 8004ab0:	20000488 	.word	0x20000488
 8004ab4:	20000010 	.word	0x20000010

08004ab8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ac0:	f000 f852 	bl	8004b68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ac4:	4b06      	ldr	r3, [pc, #24]	; (8004ae0 <prvIdleTask+0x28>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d9f9      	bls.n	8004ac0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004acc:	4b05      	ldr	r3, [pc, #20]	; (8004ae4 <prvIdleTask+0x2c>)
 8004ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ad2:	601a      	str	r2, [r3, #0]
 8004ad4:	f3bf 8f4f 	dsb	sy
 8004ad8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004adc:	e7f0      	b.n	8004ac0 <prvIdleTask+0x8>
 8004ade:	bf00      	nop
 8004ae0:	2000048c 	.word	0x2000048c
 8004ae4:	e000ed04 	.word	0xe000ed04

08004ae8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004aee:	2300      	movs	r3, #0
 8004af0:	607b      	str	r3, [r7, #4]
 8004af2:	e00c      	b.n	8004b0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	4613      	mov	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4a12      	ldr	r2, [pc, #72]	; (8004b48 <prvInitialiseTaskLists+0x60>)
 8004b00:	4413      	add	r3, r2
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7ff f8f6 	bl	8003cf4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	607b      	str	r3, [r7, #4]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b06      	cmp	r3, #6
 8004b12:	d9ef      	bls.n	8004af4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004b14:	480d      	ldr	r0, [pc, #52]	; (8004b4c <prvInitialiseTaskLists+0x64>)
 8004b16:	f7ff f8ed 	bl	8003cf4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004b1a:	480d      	ldr	r0, [pc, #52]	; (8004b50 <prvInitialiseTaskLists+0x68>)
 8004b1c:	f7ff f8ea 	bl	8003cf4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004b20:	480c      	ldr	r0, [pc, #48]	; (8004b54 <prvInitialiseTaskLists+0x6c>)
 8004b22:	f7ff f8e7 	bl	8003cf4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b26:	480c      	ldr	r0, [pc, #48]	; (8004b58 <prvInitialiseTaskLists+0x70>)
 8004b28:	f7ff f8e4 	bl	8003cf4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004b2c:	480b      	ldr	r0, [pc, #44]	; (8004b5c <prvInitialiseTaskLists+0x74>)
 8004b2e:	f7ff f8e1 	bl	8003cf4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004b32:	4b0b      	ldr	r3, [pc, #44]	; (8004b60 <prvInitialiseTaskLists+0x78>)
 8004b34:	4a05      	ldr	r2, [pc, #20]	; (8004b4c <prvInitialiseTaskLists+0x64>)
 8004b36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b38:	4b0a      	ldr	r3, [pc, #40]	; (8004b64 <prvInitialiseTaskLists+0x7c>)
 8004b3a:	4a05      	ldr	r2, [pc, #20]	; (8004b50 <prvInitialiseTaskLists+0x68>)
 8004b3c:	601a      	str	r2, [r3, #0]
}
 8004b3e:	bf00      	nop
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	2000048c 	.word	0x2000048c
 8004b4c:	20000518 	.word	0x20000518
 8004b50:	2000052c 	.word	0x2000052c
 8004b54:	20000548 	.word	0x20000548
 8004b58:	2000055c 	.word	0x2000055c
 8004b5c:	20000574 	.word	0x20000574
 8004b60:	20000540 	.word	0x20000540
 8004b64:	20000544 	.word	0x20000544

08004b68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b6e:	e019      	b.n	8004ba4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004b70:	f000 fa10 	bl	8004f94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b74:	4b10      	ldr	r3, [pc, #64]	; (8004bb8 <prvCheckTasksWaitingTermination+0x50>)
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	3304      	adds	r3, #4
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7ff f941 	bl	8003e08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b86:	4b0d      	ldr	r3, [pc, #52]	; (8004bbc <prvCheckTasksWaitingTermination+0x54>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	4a0b      	ldr	r2, [pc, #44]	; (8004bbc <prvCheckTasksWaitingTermination+0x54>)
 8004b8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b90:	4b0b      	ldr	r3, [pc, #44]	; (8004bc0 <prvCheckTasksWaitingTermination+0x58>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	3b01      	subs	r3, #1
 8004b96:	4a0a      	ldr	r2, [pc, #40]	; (8004bc0 <prvCheckTasksWaitingTermination+0x58>)
 8004b98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004b9a:	f000 fa2b 	bl	8004ff4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f810 	bl	8004bc4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ba4:	4b06      	ldr	r3, [pc, #24]	; (8004bc0 <prvCheckTasksWaitingTermination+0x58>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1e1      	bne.n	8004b70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004bac:	bf00      	nop
 8004bae:	bf00      	nop
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	2000055c 	.word	0x2000055c
 8004bbc:	20000588 	.word	0x20000588
 8004bc0:	20000570 	.word	0x20000570

08004bc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	334c      	adds	r3, #76	; 0x4c
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f000 fd27 	bl	8005624 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d108      	bne.n	8004bf2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 fbc3 	bl	8005370 <vPortFree>
				vPortFree( pxTCB );
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 fbc0 	bl	8005370 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004bf0:	e018      	b.n	8004c24 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d103      	bne.n	8004c04 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 fbb7 	bl	8005370 <vPortFree>
	}
 8004c02:	e00f      	b.n	8004c24 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d00a      	beq.n	8004c24 <prvDeleteTCB+0x60>
	__asm volatile
 8004c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c12:	f383 8811 	msr	BASEPRI, r3
 8004c16:	f3bf 8f6f 	isb	sy
 8004c1a:	f3bf 8f4f 	dsb	sy
 8004c1e:	60fb      	str	r3, [r7, #12]
}
 8004c20:	bf00      	nop
 8004c22:	e7fe      	b.n	8004c22 <prvDeleteTCB+0x5e>
	}
 8004c24:	bf00      	nop
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c32:	4b0c      	ldr	r3, [pc, #48]	; (8004c64 <prvResetNextTaskUnblockTime+0x38>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d104      	bne.n	8004c46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004c3c:	4b0a      	ldr	r3, [pc, #40]	; (8004c68 <prvResetNextTaskUnblockTime+0x3c>)
 8004c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004c44:	e008      	b.n	8004c58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c46:	4b07      	ldr	r3, [pc, #28]	; (8004c64 <prvResetNextTaskUnblockTime+0x38>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	4a04      	ldr	r2, [pc, #16]	; (8004c68 <prvResetNextTaskUnblockTime+0x3c>)
 8004c56:	6013      	str	r3, [r2, #0]
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	20000540 	.word	0x20000540
 8004c68:	200005a8 	.word	0x200005a8

08004c6c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c76:	4b29      	ldr	r3, [pc, #164]	; (8004d1c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c7c:	4b28      	ldr	r3, [pc, #160]	; (8004d20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	3304      	adds	r3, #4
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7ff f8c0 	bl	8003e08 <uxListRemove>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10b      	bne.n	8004ca6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004c8e:	4b24      	ldr	r3, [pc, #144]	; (8004d20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c94:	2201      	movs	r2, #1
 8004c96:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9a:	43da      	mvns	r2, r3
 8004c9c:	4b21      	ldr	r3, [pc, #132]	; (8004d24 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	4a20      	ldr	r2, [pc, #128]	; (8004d24 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004ca4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cac:	d10a      	bne.n	8004cc4 <prvAddCurrentTaskToDelayedList+0x58>
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d007      	beq.n	8004cc4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cb4:	4b1a      	ldr	r3, [pc, #104]	; (8004d20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	3304      	adds	r3, #4
 8004cba:	4619      	mov	r1, r3
 8004cbc:	481a      	ldr	r0, [pc, #104]	; (8004d28 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004cbe:	f7ff f846 	bl	8003d4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004cc2:	e026      	b.n	8004d12 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4413      	add	r3, r2
 8004cca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ccc:	4b14      	ldr	r3, [pc, #80]	; (8004d20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d209      	bcs.n	8004cf0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cdc:	4b13      	ldr	r3, [pc, #76]	; (8004d2c <prvAddCurrentTaskToDelayedList+0xc0>)
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	4b0f      	ldr	r3, [pc, #60]	; (8004d20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	3304      	adds	r3, #4
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	4610      	mov	r0, r2
 8004cea:	f7ff f854 	bl	8003d96 <vListInsert>
}
 8004cee:	e010      	b.n	8004d12 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cf0:	4b0f      	ldr	r3, [pc, #60]	; (8004d30 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	4b0a      	ldr	r3, [pc, #40]	; (8004d20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	3304      	adds	r3, #4
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	4610      	mov	r0, r2
 8004cfe:	f7ff f84a 	bl	8003d96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d02:	4b0c      	ldr	r3, [pc, #48]	; (8004d34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68ba      	ldr	r2, [r7, #8]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d202      	bcs.n	8004d12 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004d0c:	4a09      	ldr	r2, [pc, #36]	; (8004d34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	6013      	str	r3, [r2, #0]
}
 8004d12:	bf00      	nop
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	2000058c 	.word	0x2000058c
 8004d20:	20000488 	.word	0x20000488
 8004d24:	20000590 	.word	0x20000590
 8004d28:	20000574 	.word	0x20000574
 8004d2c:	20000544 	.word	0x20000544
 8004d30:	20000540 	.word	0x20000540
 8004d34:	200005a8 	.word	0x200005a8

08004d38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	3b04      	subs	r3, #4
 8004d48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	3b04      	subs	r3, #4
 8004d56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	f023 0201 	bic.w	r2, r3, #1
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	3b04      	subs	r3, #4
 8004d66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d68:	4a0c      	ldr	r2, [pc, #48]	; (8004d9c <pxPortInitialiseStack+0x64>)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	3b14      	subs	r3, #20
 8004d72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	3b04      	subs	r3, #4
 8004d7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f06f 0202 	mvn.w	r2, #2
 8004d86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	3b20      	subs	r3, #32
 8004d8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	08004da1 	.word	0x08004da1

08004da0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004da6:	2300      	movs	r3, #0
 8004da8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004daa:	4b12      	ldr	r3, [pc, #72]	; (8004df4 <prvTaskExitError+0x54>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db2:	d00a      	beq.n	8004dca <prvTaskExitError+0x2a>
	__asm volatile
 8004db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db8:	f383 8811 	msr	BASEPRI, r3
 8004dbc:	f3bf 8f6f 	isb	sy
 8004dc0:	f3bf 8f4f 	dsb	sy
 8004dc4:	60fb      	str	r3, [r7, #12]
}
 8004dc6:	bf00      	nop
 8004dc8:	e7fe      	b.n	8004dc8 <prvTaskExitError+0x28>
	__asm volatile
 8004dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dce:	f383 8811 	msr	BASEPRI, r3
 8004dd2:	f3bf 8f6f 	isb	sy
 8004dd6:	f3bf 8f4f 	dsb	sy
 8004dda:	60bb      	str	r3, [r7, #8]
}
 8004ddc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004dde:	bf00      	nop
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d0fc      	beq.n	8004de0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004de6:	bf00      	nop
 8004de8:	bf00      	nop
 8004dea:	3714      	adds	r7, #20
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr
 8004df4:	2000000c 	.word	0x2000000c
	...

08004e00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004e00:	4b07      	ldr	r3, [pc, #28]	; (8004e20 <pxCurrentTCBConst2>)
 8004e02:	6819      	ldr	r1, [r3, #0]
 8004e04:	6808      	ldr	r0, [r1, #0]
 8004e06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e0a:	f380 8809 	msr	PSP, r0
 8004e0e:	f3bf 8f6f 	isb	sy
 8004e12:	f04f 0000 	mov.w	r0, #0
 8004e16:	f380 8811 	msr	BASEPRI, r0
 8004e1a:	4770      	bx	lr
 8004e1c:	f3af 8000 	nop.w

08004e20 <pxCurrentTCBConst2>:
 8004e20:	20000488 	.word	0x20000488
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004e24:	bf00      	nop
 8004e26:	bf00      	nop

08004e28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004e28:	4808      	ldr	r0, [pc, #32]	; (8004e4c <prvPortStartFirstTask+0x24>)
 8004e2a:	6800      	ldr	r0, [r0, #0]
 8004e2c:	6800      	ldr	r0, [r0, #0]
 8004e2e:	f380 8808 	msr	MSP, r0
 8004e32:	f04f 0000 	mov.w	r0, #0
 8004e36:	f380 8814 	msr	CONTROL, r0
 8004e3a:	b662      	cpsie	i
 8004e3c:	b661      	cpsie	f
 8004e3e:	f3bf 8f4f 	dsb	sy
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	df00      	svc	0
 8004e48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004e4a:	bf00      	nop
 8004e4c:	e000ed08 	.word	0xe000ed08

08004e50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004e56:	4b46      	ldr	r3, [pc, #280]	; (8004f70 <xPortStartScheduler+0x120>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a46      	ldr	r2, [pc, #280]	; (8004f74 <xPortStartScheduler+0x124>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d10a      	bne.n	8004e76 <xPortStartScheduler+0x26>
	__asm volatile
 8004e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e64:	f383 8811 	msr	BASEPRI, r3
 8004e68:	f3bf 8f6f 	isb	sy
 8004e6c:	f3bf 8f4f 	dsb	sy
 8004e70:	613b      	str	r3, [r7, #16]
}
 8004e72:	bf00      	nop
 8004e74:	e7fe      	b.n	8004e74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004e76:	4b3e      	ldr	r3, [pc, #248]	; (8004f70 <xPortStartScheduler+0x120>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a3f      	ldr	r2, [pc, #252]	; (8004f78 <xPortStartScheduler+0x128>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d10a      	bne.n	8004e96 <xPortStartScheduler+0x46>
	__asm volatile
 8004e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e84:	f383 8811 	msr	BASEPRI, r3
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	60fb      	str	r3, [r7, #12]
}
 8004e92:	bf00      	nop
 8004e94:	e7fe      	b.n	8004e94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e96:	4b39      	ldr	r3, [pc, #228]	; (8004f7c <xPortStartScheduler+0x12c>)
 8004e98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	22ff      	movs	r2, #255	; 0xff
 8004ea6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004eb0:	78fb      	ldrb	r3, [r7, #3]
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004eb8:	b2da      	uxtb	r2, r3
 8004eba:	4b31      	ldr	r3, [pc, #196]	; (8004f80 <xPortStartScheduler+0x130>)
 8004ebc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ebe:	4b31      	ldr	r3, [pc, #196]	; (8004f84 <xPortStartScheduler+0x134>)
 8004ec0:	2207      	movs	r2, #7
 8004ec2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ec4:	e009      	b.n	8004eda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004ec6:	4b2f      	ldr	r3, [pc, #188]	; (8004f84 <xPortStartScheduler+0x134>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	4a2d      	ldr	r2, [pc, #180]	; (8004f84 <xPortStartScheduler+0x134>)
 8004ece:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ed0:	78fb      	ldrb	r3, [r7, #3]
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	005b      	lsls	r3, r3, #1
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004eda:	78fb      	ldrb	r3, [r7, #3]
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee2:	2b80      	cmp	r3, #128	; 0x80
 8004ee4:	d0ef      	beq.n	8004ec6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ee6:	4b27      	ldr	r3, [pc, #156]	; (8004f84 <xPortStartScheduler+0x134>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f1c3 0307 	rsb	r3, r3, #7
 8004eee:	2b04      	cmp	r3, #4
 8004ef0:	d00a      	beq.n	8004f08 <xPortStartScheduler+0xb8>
	__asm volatile
 8004ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef6:	f383 8811 	msr	BASEPRI, r3
 8004efa:	f3bf 8f6f 	isb	sy
 8004efe:	f3bf 8f4f 	dsb	sy
 8004f02:	60bb      	str	r3, [r7, #8]
}
 8004f04:	bf00      	nop
 8004f06:	e7fe      	b.n	8004f06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004f08:	4b1e      	ldr	r3, [pc, #120]	; (8004f84 <xPortStartScheduler+0x134>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	021b      	lsls	r3, r3, #8
 8004f0e:	4a1d      	ldr	r2, [pc, #116]	; (8004f84 <xPortStartScheduler+0x134>)
 8004f10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004f12:	4b1c      	ldr	r3, [pc, #112]	; (8004f84 <xPortStartScheduler+0x134>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f1a:	4a1a      	ldr	r2, [pc, #104]	; (8004f84 <xPortStartScheduler+0x134>)
 8004f1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004f26:	4b18      	ldr	r3, [pc, #96]	; (8004f88 <xPortStartScheduler+0x138>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a17      	ldr	r2, [pc, #92]	; (8004f88 <xPortStartScheduler+0x138>)
 8004f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004f32:	4b15      	ldr	r3, [pc, #84]	; (8004f88 <xPortStartScheduler+0x138>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a14      	ldr	r2, [pc, #80]	; (8004f88 <xPortStartScheduler+0x138>)
 8004f38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004f3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004f3e:	f000 f8dd 	bl	80050fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004f42:	4b12      	ldr	r3, [pc, #72]	; (8004f8c <xPortStartScheduler+0x13c>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004f48:	f000 f8fc 	bl	8005144 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004f4c:	4b10      	ldr	r3, [pc, #64]	; (8004f90 <xPortStartScheduler+0x140>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a0f      	ldr	r2, [pc, #60]	; (8004f90 <xPortStartScheduler+0x140>)
 8004f52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004f56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f58:	f7ff ff66 	bl	8004e28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f5c:	f7ff fd4a 	bl	80049f4 <vTaskSwitchContext>
	prvTaskExitError();
 8004f60:	f7ff ff1e 	bl	8004da0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3718      	adds	r7, #24
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	e000ed00 	.word	0xe000ed00
 8004f74:	410fc271 	.word	0x410fc271
 8004f78:	410fc270 	.word	0x410fc270
 8004f7c:	e000e400 	.word	0xe000e400
 8004f80:	200005b4 	.word	0x200005b4
 8004f84:	200005b8 	.word	0x200005b8
 8004f88:	e000ed20 	.word	0xe000ed20
 8004f8c:	2000000c 	.word	0x2000000c
 8004f90:	e000ef34 	.word	0xe000ef34

08004f94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
	__asm volatile
 8004f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9e:	f383 8811 	msr	BASEPRI, r3
 8004fa2:	f3bf 8f6f 	isb	sy
 8004fa6:	f3bf 8f4f 	dsb	sy
 8004faa:	607b      	str	r3, [r7, #4]
}
 8004fac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004fae:	4b0f      	ldr	r3, [pc, #60]	; (8004fec <vPortEnterCritical+0x58>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	4a0d      	ldr	r2, [pc, #52]	; (8004fec <vPortEnterCritical+0x58>)
 8004fb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004fb8:	4b0c      	ldr	r3, [pc, #48]	; (8004fec <vPortEnterCritical+0x58>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d10f      	bne.n	8004fe0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004fc0:	4b0b      	ldr	r3, [pc, #44]	; (8004ff0 <vPortEnterCritical+0x5c>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00a      	beq.n	8004fe0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fce:	f383 8811 	msr	BASEPRI, r3
 8004fd2:	f3bf 8f6f 	isb	sy
 8004fd6:	f3bf 8f4f 	dsb	sy
 8004fda:	603b      	str	r3, [r7, #0]
}
 8004fdc:	bf00      	nop
 8004fde:	e7fe      	b.n	8004fde <vPortEnterCritical+0x4a>
	}
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	2000000c 	.word	0x2000000c
 8004ff0:	e000ed04 	.word	0xe000ed04

08004ff4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004ffa:	4b12      	ldr	r3, [pc, #72]	; (8005044 <vPortExitCritical+0x50>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10a      	bne.n	8005018 <vPortExitCritical+0x24>
	__asm volatile
 8005002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005006:	f383 8811 	msr	BASEPRI, r3
 800500a:	f3bf 8f6f 	isb	sy
 800500e:	f3bf 8f4f 	dsb	sy
 8005012:	607b      	str	r3, [r7, #4]
}
 8005014:	bf00      	nop
 8005016:	e7fe      	b.n	8005016 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005018:	4b0a      	ldr	r3, [pc, #40]	; (8005044 <vPortExitCritical+0x50>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	3b01      	subs	r3, #1
 800501e:	4a09      	ldr	r2, [pc, #36]	; (8005044 <vPortExitCritical+0x50>)
 8005020:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005022:	4b08      	ldr	r3, [pc, #32]	; (8005044 <vPortExitCritical+0x50>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d105      	bne.n	8005036 <vPortExitCritical+0x42>
 800502a:	2300      	movs	r3, #0
 800502c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	f383 8811 	msr	BASEPRI, r3
}
 8005034:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005036:	bf00      	nop
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	2000000c 	.word	0x2000000c
	...

08005050 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005050:	f3ef 8009 	mrs	r0, PSP
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	4b15      	ldr	r3, [pc, #84]	; (80050b0 <pxCurrentTCBConst>)
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	f01e 0f10 	tst.w	lr, #16
 8005060:	bf08      	it	eq
 8005062:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005066:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800506a:	6010      	str	r0, [r2, #0]
 800506c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005070:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005074:	f380 8811 	msr	BASEPRI, r0
 8005078:	f3bf 8f4f 	dsb	sy
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	f7ff fcb8 	bl	80049f4 <vTaskSwitchContext>
 8005084:	f04f 0000 	mov.w	r0, #0
 8005088:	f380 8811 	msr	BASEPRI, r0
 800508c:	bc09      	pop	{r0, r3}
 800508e:	6819      	ldr	r1, [r3, #0]
 8005090:	6808      	ldr	r0, [r1, #0]
 8005092:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005096:	f01e 0f10 	tst.w	lr, #16
 800509a:	bf08      	it	eq
 800509c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80050a0:	f380 8809 	msr	PSP, r0
 80050a4:	f3bf 8f6f 	isb	sy
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	f3af 8000 	nop.w

080050b0 <pxCurrentTCBConst>:
 80050b0:	20000488 	.word	0x20000488
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80050b4:	bf00      	nop
 80050b6:	bf00      	nop

080050b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
	__asm volatile
 80050be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	607b      	str	r3, [r7, #4]
}
 80050d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80050d2:	f7ff fbd7 	bl	8004884 <xTaskIncrementTick>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d003      	beq.n	80050e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80050dc:	4b06      	ldr	r3, [pc, #24]	; (80050f8 <SysTick_Handler+0x40>)
 80050de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050e2:	601a      	str	r2, [r3, #0]
 80050e4:	2300      	movs	r3, #0
 80050e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	f383 8811 	msr	BASEPRI, r3
}
 80050ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80050f0:	bf00      	nop
 80050f2:	3708      	adds	r7, #8
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	e000ed04 	.word	0xe000ed04

080050fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80050fc:	b480      	push	{r7}
 80050fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005100:	4b0b      	ldr	r3, [pc, #44]	; (8005130 <vPortSetupTimerInterrupt+0x34>)
 8005102:	2200      	movs	r2, #0
 8005104:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005106:	4b0b      	ldr	r3, [pc, #44]	; (8005134 <vPortSetupTimerInterrupt+0x38>)
 8005108:	2200      	movs	r2, #0
 800510a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800510c:	4b0a      	ldr	r3, [pc, #40]	; (8005138 <vPortSetupTimerInterrupt+0x3c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a0a      	ldr	r2, [pc, #40]	; (800513c <vPortSetupTimerInterrupt+0x40>)
 8005112:	fba2 2303 	umull	r2, r3, r2, r3
 8005116:	099b      	lsrs	r3, r3, #6
 8005118:	4a09      	ldr	r2, [pc, #36]	; (8005140 <vPortSetupTimerInterrupt+0x44>)
 800511a:	3b01      	subs	r3, #1
 800511c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800511e:	4b04      	ldr	r3, [pc, #16]	; (8005130 <vPortSetupTimerInterrupt+0x34>)
 8005120:	2207      	movs	r2, #7
 8005122:	601a      	str	r2, [r3, #0]
}
 8005124:	bf00      	nop
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	e000e010 	.word	0xe000e010
 8005134:	e000e018 	.word	0xe000e018
 8005138:	20000000 	.word	0x20000000
 800513c:	10624dd3 	.word	0x10624dd3
 8005140:	e000e014 	.word	0xe000e014

08005144 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005144:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005154 <vPortEnableVFP+0x10>
 8005148:	6801      	ldr	r1, [r0, #0]
 800514a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800514e:	6001      	str	r1, [r0, #0]
 8005150:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005152:	bf00      	nop
 8005154:	e000ed88 	.word	0xe000ed88

08005158 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800515e:	f3ef 8305 	mrs	r3, IPSR
 8005162:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2b0f      	cmp	r3, #15
 8005168:	d914      	bls.n	8005194 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800516a:	4a17      	ldr	r2, [pc, #92]	; (80051c8 <vPortValidateInterruptPriority+0x70>)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4413      	add	r3, r2
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005174:	4b15      	ldr	r3, [pc, #84]	; (80051cc <vPortValidateInterruptPriority+0x74>)
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	7afa      	ldrb	r2, [r7, #11]
 800517a:	429a      	cmp	r2, r3
 800517c:	d20a      	bcs.n	8005194 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800517e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005182:	f383 8811 	msr	BASEPRI, r3
 8005186:	f3bf 8f6f 	isb	sy
 800518a:	f3bf 8f4f 	dsb	sy
 800518e:	607b      	str	r3, [r7, #4]
}
 8005190:	bf00      	nop
 8005192:	e7fe      	b.n	8005192 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005194:	4b0e      	ldr	r3, [pc, #56]	; (80051d0 <vPortValidateInterruptPriority+0x78>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800519c:	4b0d      	ldr	r3, [pc, #52]	; (80051d4 <vPortValidateInterruptPriority+0x7c>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d90a      	bls.n	80051ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80051a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a8:	f383 8811 	msr	BASEPRI, r3
 80051ac:	f3bf 8f6f 	isb	sy
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	603b      	str	r3, [r7, #0]
}
 80051b6:	bf00      	nop
 80051b8:	e7fe      	b.n	80051b8 <vPortValidateInterruptPriority+0x60>
	}
 80051ba:	bf00      	nop
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	e000e3f0 	.word	0xe000e3f0
 80051cc:	200005b4 	.word	0x200005b4
 80051d0:	e000ed0c 	.word	0xe000ed0c
 80051d4:	200005b8 	.word	0x200005b8

080051d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b08a      	sub	sp, #40	; 0x28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80051e0:	2300      	movs	r3, #0
 80051e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80051e4:	f7ff fa94 	bl	8004710 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80051e8:	4b5b      	ldr	r3, [pc, #364]	; (8005358 <pvPortMalloc+0x180>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d101      	bne.n	80051f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80051f0:	f000 f920 	bl	8005434 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80051f4:	4b59      	ldr	r3, [pc, #356]	; (800535c <pvPortMalloc+0x184>)
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4013      	ands	r3, r2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f040 8093 	bne.w	8005328 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d01d      	beq.n	8005244 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005208:	2208      	movs	r2, #8
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4413      	add	r3, r2
 800520e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f003 0307 	and.w	r3, r3, #7
 8005216:	2b00      	cmp	r3, #0
 8005218:	d014      	beq.n	8005244 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f023 0307 	bic.w	r3, r3, #7
 8005220:	3308      	adds	r3, #8
 8005222:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00a      	beq.n	8005244 <pvPortMalloc+0x6c>
	__asm volatile
 800522e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	617b      	str	r3, [r7, #20]
}
 8005240:	bf00      	nop
 8005242:	e7fe      	b.n	8005242 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d06e      	beq.n	8005328 <pvPortMalloc+0x150>
 800524a:	4b45      	ldr	r3, [pc, #276]	; (8005360 <pvPortMalloc+0x188>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	429a      	cmp	r2, r3
 8005252:	d869      	bhi.n	8005328 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005254:	4b43      	ldr	r3, [pc, #268]	; (8005364 <pvPortMalloc+0x18c>)
 8005256:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005258:	4b42      	ldr	r3, [pc, #264]	; (8005364 <pvPortMalloc+0x18c>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800525e:	e004      	b.n	800526a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	429a      	cmp	r2, r3
 8005272:	d903      	bls.n	800527c <pvPortMalloc+0xa4>
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1f1      	bne.n	8005260 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800527c:	4b36      	ldr	r3, [pc, #216]	; (8005358 <pvPortMalloc+0x180>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005282:	429a      	cmp	r2, r3
 8005284:	d050      	beq.n	8005328 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2208      	movs	r2, #8
 800528c:	4413      	add	r3, r2
 800528e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	6a3b      	ldr	r3, [r7, #32]
 8005296:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	1ad2      	subs	r2, r2, r3
 80052a0:	2308      	movs	r3, #8
 80052a2:	005b      	lsls	r3, r3, #1
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d91f      	bls.n	80052e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80052a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4413      	add	r3, r2
 80052ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	f003 0307 	and.w	r3, r3, #7
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00a      	beq.n	80052d0 <pvPortMalloc+0xf8>
	__asm volatile
 80052ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052be:	f383 8811 	msr	BASEPRI, r3
 80052c2:	f3bf 8f6f 	isb	sy
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	613b      	str	r3, [r7, #16]
}
 80052cc:	bf00      	nop
 80052ce:	e7fe      	b.n	80052ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80052d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	1ad2      	subs	r2, r2, r3
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80052e2:	69b8      	ldr	r0, [r7, #24]
 80052e4:	f000 f908 	bl	80054f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80052e8:	4b1d      	ldr	r3, [pc, #116]	; (8005360 <pvPortMalloc+0x188>)
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	4a1b      	ldr	r2, [pc, #108]	; (8005360 <pvPortMalloc+0x188>)
 80052f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80052f6:	4b1a      	ldr	r3, [pc, #104]	; (8005360 <pvPortMalloc+0x188>)
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	4b1b      	ldr	r3, [pc, #108]	; (8005368 <pvPortMalloc+0x190>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d203      	bcs.n	800530a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005302:	4b17      	ldr	r3, [pc, #92]	; (8005360 <pvPortMalloc+0x188>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a18      	ldr	r2, [pc, #96]	; (8005368 <pvPortMalloc+0x190>)
 8005308:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	4b13      	ldr	r3, [pc, #76]	; (800535c <pvPortMalloc+0x184>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	431a      	orrs	r2, r3
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005316:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	2200      	movs	r2, #0
 800531c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800531e:	4b13      	ldr	r3, [pc, #76]	; (800536c <pvPortMalloc+0x194>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3301      	adds	r3, #1
 8005324:	4a11      	ldr	r2, [pc, #68]	; (800536c <pvPortMalloc+0x194>)
 8005326:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005328:	f7ff fa00 	bl	800472c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	f003 0307 	and.w	r3, r3, #7
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00a      	beq.n	800534c <pvPortMalloc+0x174>
	__asm volatile
 8005336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533a:	f383 8811 	msr	BASEPRI, r3
 800533e:	f3bf 8f6f 	isb	sy
 8005342:	f3bf 8f4f 	dsb	sy
 8005346:	60fb      	str	r3, [r7, #12]
}
 8005348:	bf00      	nop
 800534a:	e7fe      	b.n	800534a <pvPortMalloc+0x172>
	return pvReturn;
 800534c:	69fb      	ldr	r3, [r7, #28]
}
 800534e:	4618      	mov	r0, r3
 8005350:	3728      	adds	r7, #40	; 0x28
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	2000117c 	.word	0x2000117c
 800535c:	20001190 	.word	0x20001190
 8005360:	20001180 	.word	0x20001180
 8005364:	20001174 	.word	0x20001174
 8005368:	20001184 	.word	0x20001184
 800536c:	20001188 	.word	0x20001188

08005370 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d04d      	beq.n	800541e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005382:	2308      	movs	r3, #8
 8005384:	425b      	negs	r3, r3
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	4413      	add	r3, r2
 800538a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	685a      	ldr	r2, [r3, #4]
 8005394:	4b24      	ldr	r3, [pc, #144]	; (8005428 <vPortFree+0xb8>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4013      	ands	r3, r2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10a      	bne.n	80053b4 <vPortFree+0x44>
	__asm volatile
 800539e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	60fb      	str	r3, [r7, #12]
}
 80053b0:	bf00      	nop
 80053b2:	e7fe      	b.n	80053b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00a      	beq.n	80053d2 <vPortFree+0x62>
	__asm volatile
 80053bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c0:	f383 8811 	msr	BASEPRI, r3
 80053c4:	f3bf 8f6f 	isb	sy
 80053c8:	f3bf 8f4f 	dsb	sy
 80053cc:	60bb      	str	r3, [r7, #8]
}
 80053ce:	bf00      	nop
 80053d0:	e7fe      	b.n	80053d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	4b14      	ldr	r3, [pc, #80]	; (8005428 <vPortFree+0xb8>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4013      	ands	r3, r2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d01e      	beq.n	800541e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d11a      	bne.n	800541e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	4b0e      	ldr	r3, [pc, #56]	; (8005428 <vPortFree+0xb8>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	43db      	mvns	r3, r3
 80053f2:	401a      	ands	r2, r3
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80053f8:	f7ff f98a 	bl	8004710 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	4b0a      	ldr	r3, [pc, #40]	; (800542c <vPortFree+0xbc>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4413      	add	r3, r2
 8005406:	4a09      	ldr	r2, [pc, #36]	; (800542c <vPortFree+0xbc>)
 8005408:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800540a:	6938      	ldr	r0, [r7, #16]
 800540c:	f000 f874 	bl	80054f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005410:	4b07      	ldr	r3, [pc, #28]	; (8005430 <vPortFree+0xc0>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	3301      	adds	r3, #1
 8005416:	4a06      	ldr	r2, [pc, #24]	; (8005430 <vPortFree+0xc0>)
 8005418:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800541a:	f7ff f987 	bl	800472c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800541e:	bf00      	nop
 8005420:	3718      	adds	r7, #24
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	20001190 	.word	0x20001190
 800542c:	20001180 	.word	0x20001180
 8005430:	2000118c 	.word	0x2000118c

08005434 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800543a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800543e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005440:	4b27      	ldr	r3, [pc, #156]	; (80054e0 <prvHeapInit+0xac>)
 8005442:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f003 0307 	and.w	r3, r3, #7
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00c      	beq.n	8005468 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	3307      	adds	r3, #7
 8005452:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f023 0307 	bic.w	r3, r3, #7
 800545a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	4a1f      	ldr	r2, [pc, #124]	; (80054e0 <prvHeapInit+0xac>)
 8005464:	4413      	add	r3, r2
 8005466:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800546c:	4a1d      	ldr	r2, [pc, #116]	; (80054e4 <prvHeapInit+0xb0>)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005472:	4b1c      	ldr	r3, [pc, #112]	; (80054e4 <prvHeapInit+0xb0>)
 8005474:	2200      	movs	r2, #0
 8005476:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	4413      	add	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005480:	2208      	movs	r2, #8
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	1a9b      	subs	r3, r3, r2
 8005486:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f023 0307 	bic.w	r3, r3, #7
 800548e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	4a15      	ldr	r2, [pc, #84]	; (80054e8 <prvHeapInit+0xb4>)
 8005494:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005496:	4b14      	ldr	r3, [pc, #80]	; (80054e8 <prvHeapInit+0xb4>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2200      	movs	r2, #0
 800549c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800549e:	4b12      	ldr	r3, [pc, #72]	; (80054e8 <prvHeapInit+0xb4>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2200      	movs	r2, #0
 80054a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	1ad2      	subs	r2, r2, r3
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80054b4:	4b0c      	ldr	r3, [pc, #48]	; (80054e8 <prvHeapInit+0xb4>)
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	4a0a      	ldr	r2, [pc, #40]	; (80054ec <prvHeapInit+0xb8>)
 80054c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	4a09      	ldr	r2, [pc, #36]	; (80054f0 <prvHeapInit+0xbc>)
 80054ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80054cc:	4b09      	ldr	r3, [pc, #36]	; (80054f4 <prvHeapInit+0xc0>)
 80054ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80054d2:	601a      	str	r2, [r3, #0]
}
 80054d4:	bf00      	nop
 80054d6:	3714      	adds	r7, #20
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	200005bc 	.word	0x200005bc
 80054e4:	20001174 	.word	0x20001174
 80054e8:	2000117c 	.word	0x2000117c
 80054ec:	20001184 	.word	0x20001184
 80054f0:	20001180 	.word	0x20001180
 80054f4:	20001190 	.word	0x20001190

080054f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005500:	4b28      	ldr	r3, [pc, #160]	; (80055a4 <prvInsertBlockIntoFreeList+0xac>)
 8005502:	60fb      	str	r3, [r7, #12]
 8005504:	e002      	b.n	800550c <prvInsertBlockIntoFreeList+0x14>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	60fb      	str	r3, [r7, #12]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	429a      	cmp	r2, r3
 8005514:	d8f7      	bhi.n	8005506 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	4413      	add	r3, r2
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	429a      	cmp	r2, r3
 8005526:	d108      	bne.n	800553a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	441a      	add	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	441a      	add	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	429a      	cmp	r2, r3
 800554c:	d118      	bne.n	8005580 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	4b15      	ldr	r3, [pc, #84]	; (80055a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	429a      	cmp	r2, r3
 8005558:	d00d      	beq.n	8005576 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	441a      	add	r2, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	e008      	b.n	8005588 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005576:	4b0c      	ldr	r3, [pc, #48]	; (80055a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	601a      	str	r2, [r3, #0]
 800557e:	e003      	b.n	8005588 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	429a      	cmp	r2, r3
 800558e:	d002      	beq.n	8005596 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005596:	bf00      	nop
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	20001174 	.word	0x20001174
 80055a8:	2000117c 	.word	0x2000117c

080055ac <__libc_init_array>:
 80055ac:	b570      	push	{r4, r5, r6, lr}
 80055ae:	4d0d      	ldr	r5, [pc, #52]	; (80055e4 <__libc_init_array+0x38>)
 80055b0:	4c0d      	ldr	r4, [pc, #52]	; (80055e8 <__libc_init_array+0x3c>)
 80055b2:	1b64      	subs	r4, r4, r5
 80055b4:	10a4      	asrs	r4, r4, #2
 80055b6:	2600      	movs	r6, #0
 80055b8:	42a6      	cmp	r6, r4
 80055ba:	d109      	bne.n	80055d0 <__libc_init_array+0x24>
 80055bc:	4d0b      	ldr	r5, [pc, #44]	; (80055ec <__libc_init_array+0x40>)
 80055be:	4c0c      	ldr	r4, [pc, #48]	; (80055f0 <__libc_init_array+0x44>)
 80055c0:	f000 f8e4 	bl	800578c <_init>
 80055c4:	1b64      	subs	r4, r4, r5
 80055c6:	10a4      	asrs	r4, r4, #2
 80055c8:	2600      	movs	r6, #0
 80055ca:	42a6      	cmp	r6, r4
 80055cc:	d105      	bne.n	80055da <__libc_init_array+0x2e>
 80055ce:	bd70      	pop	{r4, r5, r6, pc}
 80055d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80055d4:	4798      	blx	r3
 80055d6:	3601      	adds	r6, #1
 80055d8:	e7ee      	b.n	80055b8 <__libc_init_array+0xc>
 80055da:	f855 3b04 	ldr.w	r3, [r5], #4
 80055de:	4798      	blx	r3
 80055e0:	3601      	adds	r6, #1
 80055e2:	e7f2      	b.n	80055ca <__libc_init_array+0x1e>
 80055e4:	080058f8 	.word	0x080058f8
 80055e8:	080058f8 	.word	0x080058f8
 80055ec:	080058f8 	.word	0x080058f8
 80055f0:	080058fc 	.word	0x080058fc

080055f4 <__retarget_lock_acquire_recursive>:
 80055f4:	4770      	bx	lr

080055f6 <__retarget_lock_release_recursive>:
 80055f6:	4770      	bx	lr

080055f8 <memset>:
 80055f8:	4402      	add	r2, r0
 80055fa:	4603      	mov	r3, r0
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d100      	bne.n	8005602 <memset+0xa>
 8005600:	4770      	bx	lr
 8005602:	f803 1b01 	strb.w	r1, [r3], #1
 8005606:	e7f9      	b.n	80055fc <memset+0x4>

08005608 <cleanup_glue>:
 8005608:	b538      	push	{r3, r4, r5, lr}
 800560a:	460c      	mov	r4, r1
 800560c:	6809      	ldr	r1, [r1, #0]
 800560e:	4605      	mov	r5, r0
 8005610:	b109      	cbz	r1, 8005616 <cleanup_glue+0xe>
 8005612:	f7ff fff9 	bl	8005608 <cleanup_glue>
 8005616:	4621      	mov	r1, r4
 8005618:	4628      	mov	r0, r5
 800561a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800561e:	f000 b869 	b.w	80056f4 <_free_r>
	...

08005624 <_reclaim_reent>:
 8005624:	4b2c      	ldr	r3, [pc, #176]	; (80056d8 <_reclaim_reent+0xb4>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4283      	cmp	r3, r0
 800562a:	b570      	push	{r4, r5, r6, lr}
 800562c:	4604      	mov	r4, r0
 800562e:	d051      	beq.n	80056d4 <_reclaim_reent+0xb0>
 8005630:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005632:	b143      	cbz	r3, 8005646 <_reclaim_reent+0x22>
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d14a      	bne.n	80056d0 <_reclaim_reent+0xac>
 800563a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800563c:	6819      	ldr	r1, [r3, #0]
 800563e:	b111      	cbz	r1, 8005646 <_reclaim_reent+0x22>
 8005640:	4620      	mov	r0, r4
 8005642:	f000 f857 	bl	80056f4 <_free_r>
 8005646:	6961      	ldr	r1, [r4, #20]
 8005648:	b111      	cbz	r1, 8005650 <_reclaim_reent+0x2c>
 800564a:	4620      	mov	r0, r4
 800564c:	f000 f852 	bl	80056f4 <_free_r>
 8005650:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005652:	b111      	cbz	r1, 800565a <_reclaim_reent+0x36>
 8005654:	4620      	mov	r0, r4
 8005656:	f000 f84d 	bl	80056f4 <_free_r>
 800565a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800565c:	b111      	cbz	r1, 8005664 <_reclaim_reent+0x40>
 800565e:	4620      	mov	r0, r4
 8005660:	f000 f848 	bl	80056f4 <_free_r>
 8005664:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005666:	b111      	cbz	r1, 800566e <_reclaim_reent+0x4a>
 8005668:	4620      	mov	r0, r4
 800566a:	f000 f843 	bl	80056f4 <_free_r>
 800566e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005670:	b111      	cbz	r1, 8005678 <_reclaim_reent+0x54>
 8005672:	4620      	mov	r0, r4
 8005674:	f000 f83e 	bl	80056f4 <_free_r>
 8005678:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800567a:	b111      	cbz	r1, 8005682 <_reclaim_reent+0x5e>
 800567c:	4620      	mov	r0, r4
 800567e:	f000 f839 	bl	80056f4 <_free_r>
 8005682:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005684:	b111      	cbz	r1, 800568c <_reclaim_reent+0x68>
 8005686:	4620      	mov	r0, r4
 8005688:	f000 f834 	bl	80056f4 <_free_r>
 800568c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800568e:	b111      	cbz	r1, 8005696 <_reclaim_reent+0x72>
 8005690:	4620      	mov	r0, r4
 8005692:	f000 f82f 	bl	80056f4 <_free_r>
 8005696:	69a3      	ldr	r3, [r4, #24]
 8005698:	b1e3      	cbz	r3, 80056d4 <_reclaim_reent+0xb0>
 800569a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800569c:	4620      	mov	r0, r4
 800569e:	4798      	blx	r3
 80056a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80056a2:	b1b9      	cbz	r1, 80056d4 <_reclaim_reent+0xb0>
 80056a4:	4620      	mov	r0, r4
 80056a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80056aa:	f7ff bfad 	b.w	8005608 <cleanup_glue>
 80056ae:	5949      	ldr	r1, [r1, r5]
 80056b0:	b941      	cbnz	r1, 80056c4 <_reclaim_reent+0xa0>
 80056b2:	3504      	adds	r5, #4
 80056b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056b6:	2d80      	cmp	r5, #128	; 0x80
 80056b8:	68d9      	ldr	r1, [r3, #12]
 80056ba:	d1f8      	bne.n	80056ae <_reclaim_reent+0x8a>
 80056bc:	4620      	mov	r0, r4
 80056be:	f000 f819 	bl	80056f4 <_free_r>
 80056c2:	e7ba      	b.n	800563a <_reclaim_reent+0x16>
 80056c4:	680e      	ldr	r6, [r1, #0]
 80056c6:	4620      	mov	r0, r4
 80056c8:	f000 f814 	bl	80056f4 <_free_r>
 80056cc:	4631      	mov	r1, r6
 80056ce:	e7ef      	b.n	80056b0 <_reclaim_reent+0x8c>
 80056d0:	2500      	movs	r5, #0
 80056d2:	e7ef      	b.n	80056b4 <_reclaim_reent+0x90>
 80056d4:	bd70      	pop	{r4, r5, r6, pc}
 80056d6:	bf00      	nop
 80056d8:	20000010 	.word	0x20000010

080056dc <__malloc_lock>:
 80056dc:	4801      	ldr	r0, [pc, #4]	; (80056e4 <__malloc_lock+0x8>)
 80056de:	f7ff bf89 	b.w	80055f4 <__retarget_lock_acquire_recursive>
 80056e2:	bf00      	nop
 80056e4:	20001194 	.word	0x20001194

080056e8 <__malloc_unlock>:
 80056e8:	4801      	ldr	r0, [pc, #4]	; (80056f0 <__malloc_unlock+0x8>)
 80056ea:	f7ff bf84 	b.w	80055f6 <__retarget_lock_release_recursive>
 80056ee:	bf00      	nop
 80056f0:	20001194 	.word	0x20001194

080056f4 <_free_r>:
 80056f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056f6:	2900      	cmp	r1, #0
 80056f8:	d044      	beq.n	8005784 <_free_r+0x90>
 80056fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056fe:	9001      	str	r0, [sp, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	f1a1 0404 	sub.w	r4, r1, #4
 8005706:	bfb8      	it	lt
 8005708:	18e4      	addlt	r4, r4, r3
 800570a:	f7ff ffe7 	bl	80056dc <__malloc_lock>
 800570e:	4a1e      	ldr	r2, [pc, #120]	; (8005788 <_free_r+0x94>)
 8005710:	9801      	ldr	r0, [sp, #4]
 8005712:	6813      	ldr	r3, [r2, #0]
 8005714:	b933      	cbnz	r3, 8005724 <_free_r+0x30>
 8005716:	6063      	str	r3, [r4, #4]
 8005718:	6014      	str	r4, [r2, #0]
 800571a:	b003      	add	sp, #12
 800571c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005720:	f7ff bfe2 	b.w	80056e8 <__malloc_unlock>
 8005724:	42a3      	cmp	r3, r4
 8005726:	d908      	bls.n	800573a <_free_r+0x46>
 8005728:	6825      	ldr	r5, [r4, #0]
 800572a:	1961      	adds	r1, r4, r5
 800572c:	428b      	cmp	r3, r1
 800572e:	bf01      	itttt	eq
 8005730:	6819      	ldreq	r1, [r3, #0]
 8005732:	685b      	ldreq	r3, [r3, #4]
 8005734:	1949      	addeq	r1, r1, r5
 8005736:	6021      	streq	r1, [r4, #0]
 8005738:	e7ed      	b.n	8005716 <_free_r+0x22>
 800573a:	461a      	mov	r2, r3
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	b10b      	cbz	r3, 8005744 <_free_r+0x50>
 8005740:	42a3      	cmp	r3, r4
 8005742:	d9fa      	bls.n	800573a <_free_r+0x46>
 8005744:	6811      	ldr	r1, [r2, #0]
 8005746:	1855      	adds	r5, r2, r1
 8005748:	42a5      	cmp	r5, r4
 800574a:	d10b      	bne.n	8005764 <_free_r+0x70>
 800574c:	6824      	ldr	r4, [r4, #0]
 800574e:	4421      	add	r1, r4
 8005750:	1854      	adds	r4, r2, r1
 8005752:	42a3      	cmp	r3, r4
 8005754:	6011      	str	r1, [r2, #0]
 8005756:	d1e0      	bne.n	800571a <_free_r+0x26>
 8005758:	681c      	ldr	r4, [r3, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	6053      	str	r3, [r2, #4]
 800575e:	4421      	add	r1, r4
 8005760:	6011      	str	r1, [r2, #0]
 8005762:	e7da      	b.n	800571a <_free_r+0x26>
 8005764:	d902      	bls.n	800576c <_free_r+0x78>
 8005766:	230c      	movs	r3, #12
 8005768:	6003      	str	r3, [r0, #0]
 800576a:	e7d6      	b.n	800571a <_free_r+0x26>
 800576c:	6825      	ldr	r5, [r4, #0]
 800576e:	1961      	adds	r1, r4, r5
 8005770:	428b      	cmp	r3, r1
 8005772:	bf04      	itt	eq
 8005774:	6819      	ldreq	r1, [r3, #0]
 8005776:	685b      	ldreq	r3, [r3, #4]
 8005778:	6063      	str	r3, [r4, #4]
 800577a:	bf04      	itt	eq
 800577c:	1949      	addeq	r1, r1, r5
 800577e:	6021      	streq	r1, [r4, #0]
 8005780:	6054      	str	r4, [r2, #4]
 8005782:	e7ca      	b.n	800571a <_free_r+0x26>
 8005784:	b003      	add	sp, #12
 8005786:	bd30      	pop	{r4, r5, pc}
 8005788:	20001198 	.word	0x20001198

0800578c <_init>:
 800578c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800578e:	bf00      	nop
 8005790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005792:	bc08      	pop	{r3}
 8005794:	469e      	mov	lr, r3
 8005796:	4770      	bx	lr

08005798 <_fini>:
 8005798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579a:	bf00      	nop
 800579c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800579e:	bc08      	pop	{r3}
 80057a0:	469e      	mov	lr, r3
 80057a2:	4770      	bx	lr
