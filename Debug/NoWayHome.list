
NoWayHome.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005614  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  080057a4  080057a4  000157a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058f0  080058f0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080058f0  080058f0  000158f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058f8  080058f8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058f8  080058f8  000158f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058fc  080058fc  000158fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005900  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001128  20000074  08005974  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000119c  08005974  0002119c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b0d9  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000342e  00000000  00000000  0003b17d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a0  00000000  00000000  0003e5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001558  00000000  00000000  0003fc50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000288dc  00000000  00000000  000411a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a9d4  00000000  00000000  00069a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbecc  00000000  00000000  00084458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00180324  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006234  00000000  00000000  00180374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800578c 	.word	0x0800578c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800578c 	.word	0x0800578c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	4a07      	ldr	r2, [pc, #28]	; (8000500 <vApplicationGetIdleTaskMemory+0x2c>)
 80004e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	4a06      	ldr	r2, [pc, #24]	; (8000504 <vApplicationGetIdleTaskMemory+0x30>)
 80004ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2280      	movs	r2, #128	; 0x80
 80004f0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000090 	.word	0x20000090
 8000504:	20000144 	.word	0x20000144

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b5b0      	push	{r4, r5, r7, lr}
 800050a:	b09c      	sub	sp, #112	; 0x70
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fc3c 	bl	8000d8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f863 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 f925 	bl	8000764 <MX_GPIO_Init>
  MX_I2C2_Init();
 800051a:	f000 f8b5 	bl	8000688 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800051e:	f000 f8f1 	bl	8000704 <MX_USART1_UART_Init>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000522:	4b26      	ldr	r3, [pc, #152]	; (80005bc <main+0xb4>)
 8000524:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000528:	461d      	mov	r5, r3
 800052a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800052c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800052e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000532:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000536:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800053a:	2100      	movs	r1, #0
 800053c:	4618      	mov	r0, r3
 800053e:	f003 fb7d 	bl	8003c3c <osThreadCreate>
 8000542:	4603      	mov	r3, r0
 8000544:	4a1e      	ldr	r2, [pc, #120]	; (80005c0 <main+0xb8>)
 8000546:	6013      	str	r3, [r2, #0]

  /* definition and creation of BlinkLed */
  osThreadDef(BlinkLed, StartBlinkLed, osPriorityNormal, 0, 128);
 8000548:	4b1e      	ldr	r3, [pc, #120]	; (80005c4 <main+0xbc>)
 800054a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800054e:	461d      	mov	r5, r3
 8000550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000554:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000558:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BlinkLedHandle = osThreadCreate(osThread(BlinkLed), NULL);
 800055c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f003 fb6a 	bl	8003c3c <osThreadCreate>
 8000568:	4603      	mov	r3, r0
 800056a:	4a17      	ldr	r2, [pc, #92]	; (80005c8 <main+0xc0>)
 800056c:	6013      	str	r3, [r2, #0]

  /* definition and creation of RnT_Sensor */
  osThreadDef(RnT_Sensor, Start_RnT_Sensor, osPriorityBelowNormal, 0, 128);
 800056e:	4b17      	ldr	r3, [pc, #92]	; (80005cc <main+0xc4>)
 8000570:	f107 041c 	add.w	r4, r7, #28
 8000574:	461d      	mov	r5, r3
 8000576:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000578:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800057a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800057e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RnT_SensorHandle = osThreadCreate(osThread(RnT_Sensor), NULL);
 8000582:	f107 031c 	add.w	r3, r7, #28
 8000586:	2100      	movs	r1, #0
 8000588:	4618      	mov	r0, r3
 800058a:	f003 fb57 	bl	8003c3c <osThreadCreate>
 800058e:	4603      	mov	r3, r0
 8000590:	4a0f      	ldr	r2, [pc, #60]	; (80005d0 <main+0xc8>)
 8000592:	6013      	str	r3, [r2, #0]

  /* definition and creation of Int_But */
  osThreadDef(Int_But, StartInt_But, osPriorityAboveNormal, 0, 128);
 8000594:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <main+0xcc>)
 8000596:	463c      	mov	r4, r7
 8000598:	461d      	mov	r5, r3
 800059a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800059c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800059e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Int_ButHandle = osThreadCreate(osThread(Int_But), NULL);
 80005a6:	463b      	mov	r3, r7
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f003 fb46 	bl	8003c3c <osThreadCreate>
 80005b0:	4603      	mov	r3, r0
 80005b2:	4a09      	ldr	r2, [pc, #36]	; (80005d8 <main+0xd0>)
 80005b4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005b6:	f003 fb3a 	bl	8003c2e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80005ba:	e7fe      	b.n	80005ba <main+0xb2>
 80005bc:	080057d0 	.word	0x080057d0
 80005c0:	2000041c 	.word	0x2000041c
 80005c4:	080057ec 	.word	0x080057ec
 80005c8:	20000420 	.word	0x20000420
 80005cc:	08005808 	.word	0x08005808
 80005d0:	20000424 	.word	0x20000424
 80005d4:	08005824 	.word	0x08005824
 80005d8:	20000428 	.word	0x20000428

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b096      	sub	sp, #88	; 0x58
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	2244      	movs	r2, #68	; 0x44
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f005 f804 	bl	80055f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	463b      	mov	r3, r7
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000602:	f001 f821 	bl	8001648 <HAL_PWREx_ControlVoltageScaling>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800060c:	f000 f9ea 	bl	80009e4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000610:	f000 fffc 	bl	800160c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000614:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <SystemClock_Config+0xa8>)
 8000616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800061a:	4a1a      	ldr	r2, [pc, #104]	; (8000684 <SystemClock_Config+0xa8>)
 800061c:	f023 0318 	bic.w	r3, r3, #24
 8000620:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000624:	2314      	movs	r3, #20
 8000626:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000628:	2301      	movs	r3, #1
 800062a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800062c:	2301      	movs	r3, #1
 800062e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000634:	2360      	movs	r3, #96	; 0x60
 8000636:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000638:	2300      	movs	r3, #0
 800063a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	4618      	mov	r0, r3
 8000642:	f001 f857 	bl	80016f4 <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800064c:	f000 f9ca 	bl	80009e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000650:	230f      	movs	r3, #15
 8000652:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000664:	463b      	mov	r3, r7
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f001 fc1f 	bl	8001eac <HAL_RCC_ClockConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000674:	f000 f9b6 	bl	80009e4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000678:	f002 f958 	bl	800292c <HAL_RCCEx_EnableMSIPLLMode>
}
 800067c:	bf00      	nop
 800067e:	3758      	adds	r7, #88	; 0x58
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40021000 	.word	0x40021000

08000688 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800068c:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <MX_I2C2_Init+0x74>)
 800068e:	4a1c      	ldr	r2, [pc, #112]	; (8000700 <MX_I2C2_Init+0x78>)
 8000690:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000692:	4b1a      	ldr	r3, [pc, #104]	; (80006fc <MX_I2C2_Init+0x74>)
 8000694:	f640 6214 	movw	r2, #3604	; 0xe14
 8000698:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800069a:	4b18      	ldr	r3, [pc, #96]	; (80006fc <MX_I2C2_Init+0x74>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a0:	4b16      	ldr	r3, [pc, #88]	; (80006fc <MX_I2C2_Init+0x74>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a6:	4b15      	ldr	r3, [pc, #84]	; (80006fc <MX_I2C2_Init+0x74>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006ac:	4b13      	ldr	r3, [pc, #76]	; (80006fc <MX_I2C2_Init+0x74>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006b2:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_I2C2_Init+0x74>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b8:	4b10      	ldr	r3, [pc, #64]	; (80006fc <MX_I2C2_Init+0x74>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_I2C2_Init+0x74>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006c4:	480d      	ldr	r0, [pc, #52]	; (80006fc <MX_I2C2_Init+0x74>)
 80006c6:	f000 fe7a 	bl	80013be <HAL_I2C_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80006d0:	f000 f988 	bl	80009e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006d4:	2100      	movs	r1, #0
 80006d6:	4809      	ldr	r0, [pc, #36]	; (80006fc <MX_I2C2_Init+0x74>)
 80006d8:	f000 ff00 	bl	80014dc <HAL_I2CEx_ConfigAnalogFilter>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80006e2:	f000 f97f 	bl	80009e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006e6:	2100      	movs	r1, #0
 80006e8:	4804      	ldr	r0, [pc, #16]	; (80006fc <MX_I2C2_Init+0x74>)
 80006ea:	f000 ff42 	bl	8001572 <HAL_I2CEx_ConfigDigitalFilter>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80006f4:	f000 f976 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000344 	.word	0x20000344
 8000700:	40005800 	.word	0x40005800

08000704 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000708:	4b14      	ldr	r3, [pc, #80]	; (800075c <MX_USART1_UART_Init+0x58>)
 800070a:	4a15      	ldr	r2, [pc, #84]	; (8000760 <MX_USART1_UART_Init+0x5c>)
 800070c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800070e:	4b13      	ldr	r3, [pc, #76]	; (800075c <MX_USART1_UART_Init+0x58>)
 8000710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000714:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_USART1_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_USART1_UART_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_USART1_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_USART1_UART_Init+0x58>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <MX_USART1_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_USART1_UART_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <MX_USART1_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_USART1_UART_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_USART1_UART_Init+0x58>)
 8000748:	f002 fda4 	bl	8003294 <HAL_UART_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000752:	f000 f947 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000398 	.word	0x20000398
 8000760:	40013800 	.word	0x40013800

08000764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	; 0x28
 8000768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	4b2f      	ldr	r3, [pc, #188]	; (8000838 <MX_GPIO_Init+0xd4>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	4a2e      	ldr	r2, [pc, #184]	; (8000838 <MX_GPIO_Init+0xd4>)
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000786:	4b2c      	ldr	r3, [pc, #176]	; (8000838 <MX_GPIO_Init+0xd4>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	f003 0304 	and.w	r3, r3, #4
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000792:	4b29      	ldr	r3, [pc, #164]	; (8000838 <MX_GPIO_Init+0xd4>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	4a28      	ldr	r2, [pc, #160]	; (8000838 <MX_GPIO_Init+0xd4>)
 8000798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800079c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079e:	4b26      	ldr	r3, [pc, #152]	; (8000838 <MX_GPIO_Init+0xd4>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	4b23      	ldr	r3, [pc, #140]	; (8000838 <MX_GPIO_Init+0xd4>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	4a22      	ldr	r2, [pc, #136]	; (8000838 <MX_GPIO_Init+0xd4>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b6:	4b20      	ldr	r3, [pc, #128]	; (8000838 <MX_GPIO_Init+0xd4>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <MX_GPIO_Init+0xd4>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	4a1c      	ldr	r2, [pc, #112]	; (8000838 <MX_GPIO_Init+0xd4>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_GPIO_Init+0xd4>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007e0:	4816      	ldr	r0, [pc, #88]	; (800083c <MX_GPIO_Init+0xd8>)
 80007e2:	f000 fd97 	bl	8001314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	4619      	mov	r1, r3
 80007fc:	4810      	ldr	r0, [pc, #64]	; (8000840 <MX_GPIO_Init+0xdc>)
 80007fe:	f000 fbdf 	bl	8000fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000802:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000808:	2301      	movs	r3, #1
 800080a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	2300      	movs	r3, #0
 8000812:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4619      	mov	r1, r3
 800081a:	4808      	ldr	r0, [pc, #32]	; (800083c <MX_GPIO_Init+0xd8>)
 800081c:	f000 fbd0 	bl	8000fc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000820:	2200      	movs	r2, #0
 8000822:	2105      	movs	r1, #5
 8000824:	2028      	movs	r0, #40	; 0x28
 8000826:	f000 fba1 	bl	8000f6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800082a:	2028      	movs	r0, #40	; 0x28
 800082c:	f000 fbba 	bl	8000fa4 <HAL_NVIC_EnableIRQ>

}
 8000830:	bf00      	nop
 8000832:	3728      	adds	r7, #40	; 0x28
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40021000 	.word	0x40021000
 800083c:	48000400 	.word	0x48000400
 8000840:	48000800 	.word	0x48000800

08000844 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	const portTickType freq_button_sleep = 1000;
 800084c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000850:	60fb      	str	r3, [r7, #12]
	portTickType lastRun;
	lastRun = xTaskGetTickCount();
 8000852:	f004 f80b 	bl	800486c <xTaskGetTickCount>
 8000856:	60b8      	str	r0, [r7, #8]
	/* Infinite loop */
	for(;;)
	{
		if(button_press > 0)
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <StartDefaultTask+0x30>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	ddfb      	ble.n	8000858 <StartDefaultTask+0x14>
		{
			vTaskDelay(freq_button_sleep);
 8000860:	68f8      	ldr	r0, [r7, #12]
 8000862:	f003 fd27 	bl	80042b4 <vTaskDelay>
			vTaskResume(Int_ButHandle);
 8000866:	4b04      	ldr	r3, [pc, #16]	; (8000878 <StartDefaultTask+0x34>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4618      	mov	r0, r3
 800086c:	f003 fe1a 	bl	80044a4 <vTaskResume>
		if(button_press > 0)
 8000870:	e7f2      	b.n	8000858 <StartDefaultTask+0x14>
 8000872:	bf00      	nop
 8000874:	20000434 	.word	0x20000434
 8000878:	20000428 	.word	0x20000428

0800087c <StartBlinkLed>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlinkLed */
void StartBlinkLed(void const * argument)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkLed */
	portTickType lastRun;
	const portTickType frequency_battle = 500;
 8000884:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000888:	617b      	str	r3, [r7, #20]
	const portTickType frequency_warning = 166;
 800088a:	23a6      	movs	r3, #166	; 0xa6
 800088c:	613b      	str	r3, [r7, #16]
	lastRun = xTaskGetTickCount();
 800088e:	f003 ffed 	bl	800486c <xTaskGetTickCount>
 8000892:	4603      	mov	r3, r0
 8000894:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{
		if(mode == 1 && state == 0)
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <StartBlinkLed+0x70>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d10f      	bne.n	80008be <StartBlinkLed+0x42>
 800089e:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <StartBlinkLed+0x74>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d10b      	bne.n	80008be <StartBlinkLed+0x42>
		{
			HAL_GPIO_TogglePin(GPIOB, LED_Pin);
 80008a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008aa:	4812      	ldr	r0, [pc, #72]	; (80008f4 <StartBlinkLed+0x78>)
 80008ac:	f000 fd4a 	bl	8001344 <HAL_GPIO_TogglePin>
			vTaskDelayUntil(&lastRun,frequency_battle);
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	6979      	ldr	r1, [r7, #20]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f003 fc7e 	bl	80041b8 <vTaskDelayUntil>
 80008bc:	e015      	b.n	80008ea <StartBlinkLed+0x6e>
		}
		else if(state == 1)
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <StartBlinkLed+0x74>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d10b      	bne.n	80008de <StartBlinkLed+0x62>
		{
			HAL_GPIO_TogglePin(GPIOB, LED_Pin);
 80008c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008ca:	480a      	ldr	r0, [pc, #40]	; (80008f4 <StartBlinkLed+0x78>)
 80008cc:	f000 fd3a 	bl	8001344 <HAL_GPIO_TogglePin>
			vTaskDelayUntil(&lastRun,frequency_warning);
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	6939      	ldr	r1, [r7, #16]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f003 fc6e 	bl	80041b8 <vTaskDelayUntil>
 80008dc:	e7db      	b.n	8000896 <StartBlinkLed+0x1a>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_SET);
 80008de:	2201      	movs	r2, #1
 80008e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008e4:	4803      	ldr	r0, [pc, #12]	; (80008f4 <StartBlinkLed+0x78>)
 80008e6:	f000 fd15 	bl	8001314 <HAL_GPIO_WritePin>
		if(mode == 1 && state == 0)
 80008ea:	e7d4      	b.n	8000896 <StartBlinkLed+0x1a>
 80008ec:	2000042c 	.word	0x2000042c
 80008f0:	20000430 	.word	0x20000430
 80008f4:	48000400 	.word	0x48000400

080008f8 <Start_RnT_Sensor>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_RnT_Sensor */
void Start_RnT_Sensor(void const * argument)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_RnT_Sensor */
	/* Infinite loop */
	for(;;)
	{

		osDelay(1);
 8000900:	2001      	movs	r0, #1
 8000902:	f003 f9e7 	bl	8003cd4 <osDelay>
 8000906:	e7fb      	b.n	8000900 <Start_RnT_Sensor+0x8>

08000908 <StartInt_But>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartInt_But */
void StartInt_But(void const * argument)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartInt_But */
	portTickType lastRun;
	lastRun = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{
		vTaskSuspend(NULL);
 8000914:	2000      	movs	r0, #0
 8000916:	f003 fd01 	bl	800431c <vTaskSuspend>
		if((xTaskGetTickCount() - lastRun) > 750)
 800091a:	f003 ffa7 	bl	800486c <xTaskGetTickCount>
 800091e:	4602      	mov	r2, r0
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	1ad3      	subs	r3, r2, r3
 8000924:	f240 22ee 	movw	r2, #750	; 0x2ee
 8000928:	4293      	cmp	r3, r2
 800092a:	d93b      	bls.n	80009a4 <StartInt_But+0x9c>
		{
			if(button_press == 0)
 800092c:	4b20      	ldr	r3, [pc, #128]	; (80009b0 <StartInt_But+0xa8>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d10b      	bne.n	800094c <StartInt_But+0x44>
			{
				button_press = 1;
 8000934:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <StartInt_But+0xa8>)
 8000936:	2201      	movs	r2, #1
 8000938:	601a      	str	r2, [r3, #0]
				lastRun = xTaskGetTickCount();
 800093a:	f003 ff97 	bl	800486c <xTaskGetTickCount>
 800093e:	60f8      	str	r0, [r7, #12]
				vTaskResume(defaultTaskHandle);
 8000940:	4b1c      	ldr	r3, [pc, #112]	; (80009b4 <StartInt_But+0xac>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4618      	mov	r0, r3
 8000946:	f003 fdad 	bl	80044a4 <vTaskResume>
 800094a:	e7e3      	b.n	8000914 <StartInt_But+0xc>
			}
			else if(button_press == 1)
 800094c:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <StartInt_But+0xa8>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b01      	cmp	r3, #1
 8000952:	d10d      	bne.n	8000970 <StartInt_But+0x68>
			{
				state = !state;
 8000954:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <StartInt_But+0xb0>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	bf0c      	ite	eq
 800095c:	2301      	moveq	r3, #1
 800095e:	2300      	movne	r3, #0
 8000960:	b2db      	uxtb	r3, r3
 8000962:	461a      	mov	r2, r3
 8000964:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <StartInt_But+0xb0>)
 8000966:	601a      	str	r2, [r3, #0]
				button_press = 0;
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <StartInt_But+0xa8>)
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	e7d1      	b.n	8000914 <StartInt_But+0xc>
			}
			else if(button_press == 2 && state == 0)
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <StartInt_But+0xa8>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b02      	cmp	r3, #2
 8000976:	d111      	bne.n	800099c <StartInt_But+0x94>
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <StartInt_But+0xb0>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d10d      	bne.n	800099c <StartInt_But+0x94>
			{
				mode = !mode;
 8000980:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <StartInt_But+0xb4>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	bf0c      	ite	eq
 8000988:	2301      	moveq	r3, #1
 800098a:	2300      	movne	r3, #0
 800098c:	b2db      	uxtb	r3, r3
 800098e:	461a      	mov	r2, r3
 8000990:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <StartInt_But+0xb4>)
 8000992:	601a      	str	r2, [r3, #0]
				button_press = 0;
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <StartInt_But+0xa8>)
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	e008      	b.n	80009ae <StartInt_But+0xa6>
			}
			else
			{
				button_press = 0;
 800099c:	4b04      	ldr	r3, [pc, #16]	; (80009b0 <StartInt_But+0xa8>)
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	e7b7      	b.n	8000914 <StartInt_But+0xc>
			}
		}
		else
		{
			button_press += 1;
 80009a4:	4b02      	ldr	r3, [pc, #8]	; (80009b0 <StartInt_But+0xa8>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	3301      	adds	r3, #1
 80009aa:	4a01      	ldr	r2, [pc, #4]	; (80009b0 <StartInt_But+0xa8>)
 80009ac:	6013      	str	r3, [r2, #0]
		vTaskSuspend(NULL);
 80009ae:	e7b1      	b.n	8000914 <StartInt_But+0xc>
 80009b0:	20000434 	.word	0x20000434
 80009b4:	2000041c 	.word	0x2000041c
 80009b8:	20000430 	.word	0x20000430
 80009bc:	2000042c 	.word	0x2000042c

080009c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a04      	ldr	r2, [pc, #16]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d101      	bne.n	80009d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009d2:	f000 f9f3 	bl	8000dbc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40012c00 	.word	0x40012c00

080009e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e8:	b672      	cpsid	i
}
 80009ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80009ec:	e7fe      	b.n	80009ec <Error_Handler+0x8>
	...

080009f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <HAL_MspInit+0x4c>)
 80009f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009fa:	4a10      	ldr	r2, [pc, #64]	; (8000a3c <HAL_MspInit+0x4c>)
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	6613      	str	r3, [r2, #96]	; 0x60
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <HAL_MspInit+0x4c>)
 8000a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <HAL_MspInit+0x4c>)
 8000a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a12:	4a0a      	ldr	r2, [pc, #40]	; (8000a3c <HAL_MspInit+0x4c>)
 8000a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a18:	6593      	str	r3, [r2, #88]	; 0x58
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <HAL_MspInit+0x4c>)
 8000a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	210f      	movs	r1, #15
 8000a2a:	f06f 0001 	mvn.w	r0, #1
 8000a2e:	f000 fa9d 	bl	8000f6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40021000 	.word	0x40021000

08000a40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b0ac      	sub	sp, #176	; 0xb0
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	2288      	movs	r2, #136	; 0x88
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4618      	mov	r0, r3
 8000a62:	f004 fdc9 	bl	80055f8 <memset>
  if(hi2c->Instance==I2C2)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a21      	ldr	r2, [pc, #132]	; (8000af0 <HAL_I2C_MspInit+0xb0>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d13b      	bne.n	8000ae8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000a70:	2380      	movs	r3, #128	; 0x80
 8000a72:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f001 fc6b 	bl	8002358 <HAL_RCCEx_PeriphCLKConfig>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000a88:	f7ff ffac 	bl	80009e4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8c:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <HAL_I2C_MspInit+0xb4>)
 8000a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a90:	4a18      	ldr	r2, [pc, #96]	; (8000af4 <HAL_I2C_MspInit+0xb4>)
 8000a92:	f043 0302 	orr.w	r3, r3, #2
 8000a96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a98:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <HAL_I2C_MspInit+0xb4>)
 8000a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9c:	f003 0302 	and.w	r3, r3, #2
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000aa4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000aa8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aac:	2312      	movs	r3, #18
 8000aae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000abe:	2304      	movs	r3, #4
 8000ac0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ac8:	4619      	mov	r1, r3
 8000aca:	480b      	ldr	r0, [pc, #44]	; (8000af8 <HAL_I2C_MspInit+0xb8>)
 8000acc:	f000 fa78 	bl	8000fc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <HAL_I2C_MspInit+0xb4>)
 8000ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad4:	4a07      	ldr	r2, [pc, #28]	; (8000af4 <HAL_I2C_MspInit+0xb4>)
 8000ad6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ada:	6593      	str	r3, [r2, #88]	; 0x58
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <HAL_I2C_MspInit+0xb4>)
 8000ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ae8:	bf00      	nop
 8000aea:	37b0      	adds	r7, #176	; 0xb0
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40005800 	.word	0x40005800
 8000af4:	40021000 	.word	0x40021000
 8000af8:	48000400 	.word	0x48000400

08000afc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b0ac      	sub	sp, #176	; 0xb0
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	2288      	movs	r2, #136	; 0x88
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f004 fd6b 	bl	80055f8 <memset>
  if(huart->Instance==USART1)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a22      	ldr	r2, [pc, #136]	; (8000bb0 <HAL_UART_MspInit+0xb4>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d13c      	bne.n	8000ba6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b30:	2300      	movs	r3, #0
 8000b32:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f001 fc0d 	bl	8002358 <HAL_RCCEx_PeriphCLKConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b44:	f7ff ff4e 	bl	80009e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b48:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <HAL_UART_MspInit+0xb8>)
 8000b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b4c:	4a19      	ldr	r2, [pc, #100]	; (8000bb4 <HAL_UART_MspInit+0xb8>)
 8000b4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b52:	6613      	str	r3, [r2, #96]	; 0x60
 8000b54:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <HAL_UART_MspInit+0xb8>)
 8000b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b60:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <HAL_UART_MspInit+0xb8>)
 8000b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b64:	4a13      	ldr	r2, [pc, #76]	; (8000bb4 <HAL_UART_MspInit+0xb8>)
 8000b66:	f043 0301 	orr.w	r3, r3, #1
 8000b6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b6c:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <HAL_UART_MspInit+0xb8>)
 8000b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b78:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b92:	2307      	movs	r3, #7
 8000b94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b98:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba2:	f000 fa0d 	bl	8000fc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ba6:	bf00      	nop
 8000ba8:	37b0      	adds	r7, #176	; 0xb0
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40013800 	.word	0x40013800
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08c      	sub	sp, #48	; 0x30
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000bc6:	4b2e      	ldr	r3, [pc, #184]	; (8000c80 <HAL_InitTick+0xc8>)
 8000bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bca:	4a2d      	ldr	r2, [pc, #180]	; (8000c80 <HAL_InitTick+0xc8>)
 8000bcc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bd0:	6613      	str	r3, [r2, #96]	; 0x60
 8000bd2:	4b2b      	ldr	r3, [pc, #172]	; (8000c80 <HAL_InitTick+0xc8>)
 8000bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bde:	f107 020c 	add.w	r2, r7, #12
 8000be2:	f107 0310 	add.w	r3, r7, #16
 8000be6:	4611      	mov	r1, r2
 8000be8:	4618      	mov	r0, r3
 8000bea:	f001 fb23 	bl	8002234 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000bee:	f001 fb0b 	bl	8002208 <HAL_RCC_GetPCLK2Freq>
 8000bf2:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bf6:	4a23      	ldr	r2, [pc, #140]	; (8000c84 <HAL_InitTick+0xcc>)
 8000bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bfc:	0c9b      	lsrs	r3, r3, #18
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c02:	4b21      	ldr	r3, [pc, #132]	; (8000c88 <HAL_InitTick+0xd0>)
 8000c04:	4a21      	ldr	r2, [pc, #132]	; (8000c8c <HAL_InitTick+0xd4>)
 8000c06:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c08:	4b1f      	ldr	r3, [pc, #124]	; (8000c88 <HAL_InitTick+0xd0>)
 8000c0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c0e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c10:	4a1d      	ldr	r2, [pc, #116]	; (8000c88 <HAL_InitTick+0xd0>)
 8000c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c14:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c16:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <HAL_InitTick+0xd0>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1c:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <HAL_InitTick+0xd0>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c22:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <HAL_InitTick+0xd0>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000c28:	4817      	ldr	r0, [pc, #92]	; (8000c88 <HAL_InitTick+0xd0>)
 8000c2a:	f002 f861 	bl	8002cf0 <HAL_TIM_Base_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000c34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d11b      	bne.n	8000c74 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000c3c:	4812      	ldr	r0, [pc, #72]	; (8000c88 <HAL_InitTick+0xd0>)
 8000c3e:	f002 f8b9 	bl	8002db4 <HAL_TIM_Base_Start_IT>
 8000c42:	4603      	mov	r3, r0
 8000c44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000c48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d111      	bne.n	8000c74 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000c50:	2019      	movs	r0, #25
 8000c52:	f000 f9a7 	bl	8000fa4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2b0f      	cmp	r3, #15
 8000c5a:	d808      	bhi.n	8000c6e <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	2019      	movs	r0, #25
 8000c62:	f000 f983 	bl	8000f6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c66:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <HAL_InitTick+0xd8>)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6013      	str	r3, [r2, #0]
 8000c6c:	e002      	b.n	8000c74 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3730      	adds	r7, #48	; 0x30
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40021000 	.word	0x40021000
 8000c84:	431bde83 	.word	0x431bde83
 8000c88:	20000438 	.word	0x20000438
 8000c8c:	40012c00 	.word	0x40012c00
 8000c90:	20000004 	.word	0x20000004

08000c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <NMI_Handler+0x4>

08000c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9e:	e7fe      	b.n	8000c9e <HardFault_Handler+0x4>

08000ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <MemManage_Handler+0x4>

08000ca6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000caa:	e7fe      	b.n	8000caa <BusFault_Handler+0x4>

08000cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <UsageFault_Handler+0x4>

08000cb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cc4:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000cc6:	f002 f8e5 	bl	8002e94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000438 	.word	0x20000438

08000cd4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000cda:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cde:	f000 fb4b 	bl	8001378 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  BaseType_t checkIfYieldRequired;
  checkIfYieldRequired = xTaskResumeFromISR(Int_ButHandle);
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <EXTI15_10_IRQHandler+0x38>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f003 fc3a 	bl	8004560 <xTaskResumeFromISR>
 8000cec:	6078      	str	r0, [r7, #4]
  portYIELD_FROM_ISR(checkIfYieldRequired);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d007      	beq.n	8000d04 <EXTI15_10_IRQHandler+0x30>
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <EXTI15_10_IRQHandler+0x3c>)
 8000cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	f3bf 8f4f 	dsb	sy
 8000d00:	f3bf 8f6f 	isb	sy

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000428 	.word	0x20000428
 8000d10:	e000ed04 	.word	0xe000ed04

08000d14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <SystemInit+0x20>)
 8000d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d1e:	4a05      	ldr	r2, [pc, #20]	; (8000d34 <SystemInit+0x20>)
 8000d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d70 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d3c:	f7ff ffea 	bl	8000d14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d40:	480c      	ldr	r0, [pc, #48]	; (8000d74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d42:	490d      	ldr	r1, [pc, #52]	; (8000d78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d44:	4a0d      	ldr	r2, [pc, #52]	; (8000d7c <LoopForever+0xe>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d48:	e002      	b.n	8000d50 <LoopCopyDataInit>

08000d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4e:	3304      	adds	r3, #4

08000d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d54:	d3f9      	bcc.n	8000d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d56:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d58:	4c0a      	ldr	r4, [pc, #40]	; (8000d84 <LoopForever+0x16>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d5c:	e001      	b.n	8000d62 <LoopFillZerobss>

08000d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d60:	3204      	adds	r2, #4

08000d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d64:	d3fb      	bcc.n	8000d5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d66:	f004 fc21 	bl	80055ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d6a:	f7ff fbcd 	bl	8000508 <main>

08000d6e <LoopForever>:

LoopForever:
    b LoopForever
 8000d6e:	e7fe      	b.n	8000d6e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d70:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d78:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d7c:	08005900 	.word	0x08005900
  ldr r2, =_sbss
 8000d80:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d84:	2000119c 	.word	0x2000119c

08000d88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d88:	e7fe      	b.n	8000d88 <ADC1_2_IRQHandler>

08000d8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d90:	2300      	movs	r3, #0
 8000d92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d94:	2003      	movs	r0, #3
 8000d96:	f000 f8de 	bl	8000f56 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d9a:	200f      	movs	r0, #15
 8000d9c:	f7ff ff0c 	bl	8000bb8 <HAL_InitTick>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d002      	beq.n	8000dac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	71fb      	strb	r3, [r7, #7]
 8000daa:	e001      	b.n	8000db0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dac:	f7ff fe20 	bl	80009f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000db0:	79fb      	ldrb	r3, [r7, #7]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_IncTick+0x20>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_IncTick+0x24>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4413      	add	r3, r2
 8000dcc:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <HAL_IncTick+0x24>)
 8000dce:	6013      	str	r3, [r2, #0]
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	20000484 	.word	0x20000484

08000de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return uwTick;
 8000de8:	4b03      	ldr	r3, [pc, #12]	; (8000df8 <HAL_GetTick+0x14>)
 8000dea:	681b      	ldr	r3, [r3, #0]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	20000484 	.word	0x20000484

08000dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e12:	68ba      	ldr	r2, [r7, #8]
 8000e14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2e:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	60d3      	str	r3, [r2, #12]
}
 8000e34:	bf00      	nop
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e48:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <__NVIC_GetPriorityGrouping+0x18>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	0a1b      	lsrs	r3, r3, #8
 8000e4e:	f003 0307 	and.w	r3, r3, #7
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	db0b      	blt.n	8000e8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	f003 021f 	and.w	r2, r3, #31
 8000e78:	4907      	ldr	r1, [pc, #28]	; (8000e98 <__NVIC_EnableIRQ+0x38>)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	095b      	lsrs	r3, r3, #5
 8000e80:	2001      	movs	r0, #1
 8000e82:	fa00 f202 	lsl.w	r2, r0, r2
 8000e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	e000e100 	.word	0xe000e100

08000e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	6039      	str	r1, [r7, #0]
 8000ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	db0a      	blt.n	8000ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	490c      	ldr	r1, [pc, #48]	; (8000ee8 <__NVIC_SetPriority+0x4c>)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	0112      	lsls	r2, r2, #4
 8000ebc:	b2d2      	uxtb	r2, r2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec4:	e00a      	b.n	8000edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4908      	ldr	r1, [pc, #32]	; (8000eec <__NVIC_SetPriority+0x50>)
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	f003 030f 	and.w	r3, r3, #15
 8000ed2:	3b04      	subs	r3, #4
 8000ed4:	0112      	lsls	r2, r2, #4
 8000ed6:	b2d2      	uxtb	r2, r2
 8000ed8:	440b      	add	r3, r1
 8000eda:	761a      	strb	r2, [r3, #24]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000e100 	.word	0xe000e100
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	; 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f1c3 0307 	rsb	r3, r3, #7
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	bf28      	it	cs
 8000f0e:	2304      	movcs	r3, #4
 8000f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3304      	adds	r3, #4
 8000f16:	2b06      	cmp	r3, #6
 8000f18:	d902      	bls.n	8000f20 <NVIC_EncodePriority+0x30>
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3b03      	subs	r3, #3
 8000f1e:	e000      	b.n	8000f22 <NVIC_EncodePriority+0x32>
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	f04f 32ff 	mov.w	r2, #4294967295
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43da      	mvns	r2, r3
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	401a      	ands	r2, r3
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f38:	f04f 31ff 	mov.w	r1, #4294967295
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f42:	43d9      	mvns	r1, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	4313      	orrs	r3, r2
         );
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3724      	adds	r7, #36	; 0x24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff ff4c 	bl	8000dfc <__NVIC_SetPriorityGrouping>
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
 8000f78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f7e:	f7ff ff61 	bl	8000e44 <__NVIC_GetPriorityGrouping>
 8000f82:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	68b9      	ldr	r1, [r7, #8]
 8000f88:	6978      	ldr	r0, [r7, #20]
 8000f8a:	f7ff ffb1 	bl	8000ef0 <NVIC_EncodePriority>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f94:	4611      	mov	r1, r2
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff ff80 	bl	8000e9c <__NVIC_SetPriority>
}
 8000f9c:	bf00      	nop
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff ff54 	bl	8000e60 <__NVIC_EnableIRQ>
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b087      	sub	sp, #28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fce:	e17f      	b.n	80012d0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f000 8171 	beq.w	80012ca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d005      	beq.n	8001000 <HAL_GPIO_Init+0x40>
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0303 	and.w	r3, r3, #3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d130      	bne.n	8001062 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	2203      	movs	r2, #3
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	68da      	ldr	r2, [r3, #12]
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4313      	orrs	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001036:	2201      	movs	r2, #1
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43db      	mvns	r3, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	091b      	lsrs	r3, r3, #4
 800104c:	f003 0201 	and.w	r2, r3, #1
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f003 0303 	and.w	r3, r3, #3
 800106a:	2b03      	cmp	r3, #3
 800106c:	d118      	bne.n	80010a0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001072:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001074:	2201      	movs	r2, #1
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4013      	ands	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	08db      	lsrs	r3, r3, #3
 800108a:	f003 0201 	and.w	r2, r3, #1
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	4313      	orrs	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	2b03      	cmp	r3, #3
 80010aa:	d017      	beq.n	80010dc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	2203      	movs	r2, #3
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4013      	ands	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	689a      	ldr	r2, [r3, #8]
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0303 	and.w	r3, r3, #3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d123      	bne.n	8001130 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	08da      	lsrs	r2, r3, #3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3208      	adds	r2, #8
 80010f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	f003 0307 	and.w	r3, r3, #7
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	220f      	movs	r2, #15
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4013      	ands	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	691a      	ldr	r2, [r3, #16]
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	4313      	orrs	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	08da      	lsrs	r2, r3, #3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3208      	adds	r2, #8
 800112a:	6939      	ldr	r1, [r7, #16]
 800112c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	2203      	movs	r2, #3
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4013      	ands	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0203 	and.w	r2, r3, #3
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4313      	orrs	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800116c:	2b00      	cmp	r3, #0
 800116e:	f000 80ac 	beq.w	80012ca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001172:	4b5f      	ldr	r3, [pc, #380]	; (80012f0 <HAL_GPIO_Init+0x330>)
 8001174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001176:	4a5e      	ldr	r2, [pc, #376]	; (80012f0 <HAL_GPIO_Init+0x330>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6613      	str	r3, [r2, #96]	; 0x60
 800117e:	4b5c      	ldr	r3, [pc, #368]	; (80012f0 <HAL_GPIO_Init+0x330>)
 8001180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800118a:	4a5a      	ldr	r2, [pc, #360]	; (80012f4 <HAL_GPIO_Init+0x334>)
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	089b      	lsrs	r3, r3, #2
 8001190:	3302      	adds	r3, #2
 8001192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001196:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	f003 0303 	and.w	r3, r3, #3
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	220f      	movs	r2, #15
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43db      	mvns	r3, r3
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4013      	ands	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011b4:	d025      	beq.n	8001202 <HAL_GPIO_Init+0x242>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a4f      	ldr	r2, [pc, #316]	; (80012f8 <HAL_GPIO_Init+0x338>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d01f      	beq.n	80011fe <HAL_GPIO_Init+0x23e>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a4e      	ldr	r2, [pc, #312]	; (80012fc <HAL_GPIO_Init+0x33c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d019      	beq.n	80011fa <HAL_GPIO_Init+0x23a>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a4d      	ldr	r2, [pc, #308]	; (8001300 <HAL_GPIO_Init+0x340>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d013      	beq.n	80011f6 <HAL_GPIO_Init+0x236>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a4c      	ldr	r2, [pc, #304]	; (8001304 <HAL_GPIO_Init+0x344>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d00d      	beq.n	80011f2 <HAL_GPIO_Init+0x232>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a4b      	ldr	r2, [pc, #300]	; (8001308 <HAL_GPIO_Init+0x348>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d007      	beq.n	80011ee <HAL_GPIO_Init+0x22e>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a4a      	ldr	r2, [pc, #296]	; (800130c <HAL_GPIO_Init+0x34c>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d101      	bne.n	80011ea <HAL_GPIO_Init+0x22a>
 80011e6:	2306      	movs	r3, #6
 80011e8:	e00c      	b.n	8001204 <HAL_GPIO_Init+0x244>
 80011ea:	2307      	movs	r3, #7
 80011ec:	e00a      	b.n	8001204 <HAL_GPIO_Init+0x244>
 80011ee:	2305      	movs	r3, #5
 80011f0:	e008      	b.n	8001204 <HAL_GPIO_Init+0x244>
 80011f2:	2304      	movs	r3, #4
 80011f4:	e006      	b.n	8001204 <HAL_GPIO_Init+0x244>
 80011f6:	2303      	movs	r3, #3
 80011f8:	e004      	b.n	8001204 <HAL_GPIO_Init+0x244>
 80011fa:	2302      	movs	r3, #2
 80011fc:	e002      	b.n	8001204 <HAL_GPIO_Init+0x244>
 80011fe:	2301      	movs	r3, #1
 8001200:	e000      	b.n	8001204 <HAL_GPIO_Init+0x244>
 8001202:	2300      	movs	r3, #0
 8001204:	697a      	ldr	r2, [r7, #20]
 8001206:	f002 0203 	and.w	r2, r2, #3
 800120a:	0092      	lsls	r2, r2, #2
 800120c:	4093      	lsls	r3, r2
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4313      	orrs	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001214:	4937      	ldr	r1, [pc, #220]	; (80012f4 <HAL_GPIO_Init+0x334>)
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	089b      	lsrs	r3, r3, #2
 800121a:	3302      	adds	r3, #2
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001222:	4b3b      	ldr	r3, [pc, #236]	; (8001310 <HAL_GPIO_Init+0x350>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	43db      	mvns	r3, r3
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	4013      	ands	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4313      	orrs	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001246:	4a32      	ldr	r2, [pc, #200]	; (8001310 <HAL_GPIO_Init+0x350>)
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800124c:	4b30      	ldr	r3, [pc, #192]	; (8001310 <HAL_GPIO_Init+0x350>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	43db      	mvns	r3, r3
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4013      	ands	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d003      	beq.n	8001270 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	4313      	orrs	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001270:	4a27      	ldr	r2, [pc, #156]	; (8001310 <HAL_GPIO_Init+0x350>)
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001276:	4b26      	ldr	r3, [pc, #152]	; (8001310 <HAL_GPIO_Init+0x350>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	43db      	mvns	r3, r3
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4013      	ands	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4313      	orrs	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800129a:	4a1d      	ldr	r2, [pc, #116]	; (8001310 <HAL_GPIO_Init+0x350>)
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012a0:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <HAL_GPIO_Init+0x350>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4013      	ands	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012c4:	4a12      	ldr	r2, [pc, #72]	; (8001310 <HAL_GPIO_Init+0x350>)
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	3301      	adds	r3, #1
 80012ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	fa22 f303 	lsr.w	r3, r2, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f47f ae78 	bne.w	8000fd0 <HAL_GPIO_Init+0x10>
  }
}
 80012e0:	bf00      	nop
 80012e2:	bf00      	nop
 80012e4:	371c      	adds	r7, #28
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40010000 	.word	0x40010000
 80012f8:	48000400 	.word	0x48000400
 80012fc:	48000800 	.word	0x48000800
 8001300:	48000c00 	.word	0x48000c00
 8001304:	48001000 	.word	0x48001000
 8001308:	48001400 	.word	0x48001400
 800130c:	48001800 	.word	0x48001800
 8001310:	40010400 	.word	0x40010400

08001314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	460b      	mov	r3, r1
 800131e:	807b      	strh	r3, [r7, #2]
 8001320:	4613      	mov	r3, r2
 8001322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001324:	787b      	ldrb	r3, [r7, #1]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800132a:	887a      	ldrh	r2, [r7, #2]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001330:	e002      	b.n	8001338 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001332:	887a      	ldrh	r2, [r7, #2]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	460b      	mov	r3, r1
 800134e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001356:	887a      	ldrh	r2, [r7, #2]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	4013      	ands	r3, r2
 800135c:	041a      	lsls	r2, r3, #16
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	43d9      	mvns	r1, r3
 8001362:	887b      	ldrh	r3, [r7, #2]
 8001364:	400b      	ands	r3, r1
 8001366:	431a      	orrs	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	619a      	str	r2, [r3, #24]
}
 800136c:	bf00      	nop
 800136e:	3714      	adds	r7, #20
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001384:	695a      	ldr	r2, [r3, #20]
 8001386:	88fb      	ldrh	r3, [r7, #6]
 8001388:	4013      	ands	r3, r2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d006      	beq.n	800139c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800138e:	4a05      	ldr	r2, [pc, #20]	; (80013a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001390:	88fb      	ldrh	r3, [r7, #6]
 8001392:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001394:	88fb      	ldrh	r3, [r7, #6]
 8001396:	4618      	mov	r0, r3
 8001398:	f000 f806 	bl	80013a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40010400 	.word	0x40010400

080013a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d101      	bne.n	80013d0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e081      	b.n	80014d4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d106      	bne.n	80013ea <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff fb2b 	bl	8000a40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2224      	movs	r2, #36	; 0x24
 80013ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f022 0201 	bic.w	r2, r2, #1
 8001400:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800140e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	689a      	ldr	r2, [r3, #8]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800141e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d107      	bne.n	8001438 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	e006      	b.n	8001446 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001444:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	2b02      	cmp	r3, #2
 800144c:	d104      	bne.n	8001458 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001456:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	6812      	ldr	r2, [r2, #0]
 8001462:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800146a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	68da      	ldr	r2, [r3, #12]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800147a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	691a      	ldr	r2, [r3, #16]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	430a      	orrs	r2, r1
 8001494:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69d9      	ldr	r1, [r3, #28]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a1a      	ldr	r2, [r3, #32]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f042 0201 	orr.w	r2, r2, #1
 80014b4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2220      	movs	r2, #32
 80014c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b20      	cmp	r3, #32
 80014f0:	d138      	bne.n	8001564 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d101      	bne.n	8001500 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80014fc:	2302      	movs	r3, #2
 80014fe:	e032      	b.n	8001566 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2224      	movs	r2, #36	; 0x24
 800150c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 0201 	bic.w	r2, r2, #1
 800151e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800152e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6819      	ldr	r1, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	683a      	ldr	r2, [r7, #0]
 800153c:	430a      	orrs	r2, r1
 800153e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f042 0201 	orr.w	r2, r2, #1
 800154e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2220      	movs	r2, #32
 8001554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001560:	2300      	movs	r3, #0
 8001562:	e000      	b.n	8001566 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001564:	2302      	movs	r3, #2
  }
}
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001572:	b480      	push	{r7}
 8001574:	b085      	sub	sp, #20
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
 800157a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2b20      	cmp	r3, #32
 8001586:	d139      	bne.n	80015fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800158e:	2b01      	cmp	r3, #1
 8001590:	d101      	bne.n	8001596 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001592:	2302      	movs	r3, #2
 8001594:	e033      	b.n	80015fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2201      	movs	r2, #1
 800159a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2224      	movs	r2, #36	; 0x24
 80015a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f022 0201 	bic.w	r2, r2, #1
 80015b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80015c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	021b      	lsls	r3, r3, #8
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f042 0201 	orr.w	r2, r2, #1
 80015e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2220      	movs	r2, #32
 80015ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80015f8:	2300      	movs	r3, #0
 80015fa:	e000      	b.n	80015fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80015fc:	2302      	movs	r3, #2
  }
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
	...

0800160c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001610:	4b05      	ldr	r3, [pc, #20]	; (8001628 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a04      	ldr	r2, [pc, #16]	; (8001628 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800161a:	6013      	str	r3, [r2, #0]
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	40007000 	.word	0x40007000

0800162c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001630:	4b04      	ldr	r3, [pc, #16]	; (8001644 <HAL_PWREx_GetVoltageRange+0x18>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001638:	4618      	mov	r0, r3
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	40007000 	.word	0x40007000

08001648 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001656:	d130      	bne.n	80016ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001658:	4b23      	ldr	r3, [pc, #140]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001664:	d038      	beq.n	80016d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001666:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800166e:	4a1e      	ldr	r2, [pc, #120]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001670:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001674:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001676:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2232      	movs	r2, #50	; 0x32
 800167c:	fb02 f303 	mul.w	r3, r2, r3
 8001680:	4a1b      	ldr	r2, [pc, #108]	; (80016f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001682:	fba2 2303 	umull	r2, r3, r2, r3
 8001686:	0c9b      	lsrs	r3, r3, #18
 8001688:	3301      	adds	r3, #1
 800168a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800168c:	e002      	b.n	8001694 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	3b01      	subs	r3, #1
 8001692:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001694:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800169c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016a0:	d102      	bne.n	80016a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1f2      	bne.n	800168e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016a8:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016b4:	d110      	bne.n	80016d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e00f      	b.n	80016da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016ba:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016c6:	d007      	beq.n	80016d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016c8:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016d0:	4a05      	ldr	r2, [pc, #20]	; (80016e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	40007000 	.word	0x40007000
 80016ec:	20000000 	.word	0x20000000
 80016f0:	431bde83 	.word	0x431bde83

080016f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b088      	sub	sp, #32
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e3ca      	b.n	8001e9c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001706:	4b97      	ldr	r3, [pc, #604]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f003 030c 	and.w	r3, r3, #12
 800170e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001710:	4b94      	ldr	r3, [pc, #592]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	f003 0303 	and.w	r3, r3, #3
 8001718:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0310 	and.w	r3, r3, #16
 8001722:	2b00      	cmp	r3, #0
 8001724:	f000 80e4 	beq.w	80018f0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d007      	beq.n	800173e <HAL_RCC_OscConfig+0x4a>
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	2b0c      	cmp	r3, #12
 8001732:	f040 808b 	bne.w	800184c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	2b01      	cmp	r3, #1
 800173a:	f040 8087 	bne.w	800184c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800173e:	4b89      	ldr	r3, [pc, #548]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d005      	beq.n	8001756 <HAL_RCC_OscConfig+0x62>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e3a2      	b.n	8001e9c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a1a      	ldr	r2, [r3, #32]
 800175a:	4b82      	ldr	r3, [pc, #520]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0308 	and.w	r3, r3, #8
 8001762:	2b00      	cmp	r3, #0
 8001764:	d004      	beq.n	8001770 <HAL_RCC_OscConfig+0x7c>
 8001766:	4b7f      	ldr	r3, [pc, #508]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800176e:	e005      	b.n	800177c <HAL_RCC_OscConfig+0x88>
 8001770:	4b7c      	ldr	r3, [pc, #496]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 8001772:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001776:	091b      	lsrs	r3, r3, #4
 8001778:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800177c:	4293      	cmp	r3, r2
 800177e:	d223      	bcs.n	80017c8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a1b      	ldr	r3, [r3, #32]
 8001784:	4618      	mov	r0, r3
 8001786:	f000 fd87 	bl	8002298 <RCC_SetFlashLatencyFromMSIRange>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e383      	b.n	8001e9c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001794:	4b73      	ldr	r3, [pc, #460]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a72      	ldr	r2, [pc, #456]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 800179a:	f043 0308 	orr.w	r3, r3, #8
 800179e:	6013      	str	r3, [r2, #0]
 80017a0:	4b70      	ldr	r3, [pc, #448]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	496d      	ldr	r1, [pc, #436]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017b2:	4b6c      	ldr	r3, [pc, #432]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	021b      	lsls	r3, r3, #8
 80017c0:	4968      	ldr	r1, [pc, #416]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	604b      	str	r3, [r1, #4]
 80017c6:	e025      	b.n	8001814 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017c8:	4b66      	ldr	r3, [pc, #408]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a65      	ldr	r2, [pc, #404]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 80017ce:	f043 0308 	orr.w	r3, r3, #8
 80017d2:	6013      	str	r3, [r2, #0]
 80017d4:	4b63      	ldr	r3, [pc, #396]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	4960      	ldr	r1, [pc, #384]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017e6:	4b5f      	ldr	r3, [pc, #380]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	021b      	lsls	r3, r3, #8
 80017f4:	495b      	ldr	r1, [pc, #364]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d109      	bne.n	8001814 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a1b      	ldr	r3, [r3, #32]
 8001804:	4618      	mov	r0, r3
 8001806:	f000 fd47 	bl	8002298 <RCC_SetFlashLatencyFromMSIRange>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e343      	b.n	8001e9c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001814:	f000 fc4a 	bl	80020ac <HAL_RCC_GetSysClockFreq>
 8001818:	4602      	mov	r2, r0
 800181a:	4b52      	ldr	r3, [pc, #328]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	091b      	lsrs	r3, r3, #4
 8001820:	f003 030f 	and.w	r3, r3, #15
 8001824:	4950      	ldr	r1, [pc, #320]	; (8001968 <HAL_RCC_OscConfig+0x274>)
 8001826:	5ccb      	ldrb	r3, [r1, r3]
 8001828:	f003 031f 	and.w	r3, r3, #31
 800182c:	fa22 f303 	lsr.w	r3, r2, r3
 8001830:	4a4e      	ldr	r2, [pc, #312]	; (800196c <HAL_RCC_OscConfig+0x278>)
 8001832:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001834:	4b4e      	ldr	r3, [pc, #312]	; (8001970 <HAL_RCC_OscConfig+0x27c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff f9bd 	bl	8000bb8 <HAL_InitTick>
 800183e:	4603      	mov	r3, r0
 8001840:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001842:	7bfb      	ldrb	r3, [r7, #15]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d052      	beq.n	80018ee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001848:	7bfb      	ldrb	r3, [r7, #15]
 800184a:	e327      	b.n	8001e9c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d032      	beq.n	80018ba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001854:	4b43      	ldr	r3, [pc, #268]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a42      	ldr	r2, [pc, #264]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001860:	f7ff fac0 	bl	8000de4 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001868:	f7ff fabc 	bl	8000de4 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e310      	b.n	8001e9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800187a:	4b3a      	ldr	r3, [pc, #232]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0f0      	beq.n	8001868 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001886:	4b37      	ldr	r3, [pc, #220]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a36      	ldr	r2, [pc, #216]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 800188c:	f043 0308 	orr.w	r3, r3, #8
 8001890:	6013      	str	r3, [r2, #0]
 8001892:	4b34      	ldr	r3, [pc, #208]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a1b      	ldr	r3, [r3, #32]
 800189e:	4931      	ldr	r1, [pc, #196]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018a4:	4b2f      	ldr	r3, [pc, #188]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	69db      	ldr	r3, [r3, #28]
 80018b0:	021b      	lsls	r3, r3, #8
 80018b2:	492c      	ldr	r1, [pc, #176]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 80018b4:	4313      	orrs	r3, r2
 80018b6:	604b      	str	r3, [r1, #4]
 80018b8:	e01a      	b.n	80018f0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018ba:	4b2a      	ldr	r3, [pc, #168]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a29      	ldr	r2, [pc, #164]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 80018c0:	f023 0301 	bic.w	r3, r3, #1
 80018c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018c6:	f7ff fa8d 	bl	8000de4 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018ce:	f7ff fa89 	bl	8000de4 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e2dd      	b.n	8001e9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018e0:	4b20      	ldr	r3, [pc, #128]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1f0      	bne.n	80018ce <HAL_RCC_OscConfig+0x1da>
 80018ec:	e000      	b.n	80018f0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018ee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d074      	beq.n	80019e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	2b08      	cmp	r3, #8
 8001900:	d005      	beq.n	800190e <HAL_RCC_OscConfig+0x21a>
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	2b0c      	cmp	r3, #12
 8001906:	d10e      	bne.n	8001926 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	2b03      	cmp	r3, #3
 800190c:	d10b      	bne.n	8001926 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d064      	beq.n	80019e4 <HAL_RCC_OscConfig+0x2f0>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d160      	bne.n	80019e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e2ba      	b.n	8001e9c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800192e:	d106      	bne.n	800193e <HAL_RCC_OscConfig+0x24a>
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a0b      	ldr	r2, [pc, #44]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 8001936:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	e026      	b.n	800198c <HAL_RCC_OscConfig+0x298>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001946:	d115      	bne.n	8001974 <HAL_RCC_OscConfig+0x280>
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a05      	ldr	r2, [pc, #20]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 800194e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001952:	6013      	str	r3, [r2, #0]
 8001954:	4b03      	ldr	r3, [pc, #12]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a02      	ldr	r2, [pc, #8]	; (8001964 <HAL_RCC_OscConfig+0x270>)
 800195a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	e014      	b.n	800198c <HAL_RCC_OscConfig+0x298>
 8001962:	bf00      	nop
 8001964:	40021000 	.word	0x40021000
 8001968:	08005848 	.word	0x08005848
 800196c:	20000000 	.word	0x20000000
 8001970:	20000004 	.word	0x20000004
 8001974:	4ba0      	ldr	r3, [pc, #640]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a9f      	ldr	r2, [pc, #636]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 800197a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800197e:	6013      	str	r3, [r2, #0]
 8001980:	4b9d      	ldr	r3, [pc, #628]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a9c      	ldr	r2, [pc, #624]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001986:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800198a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d013      	beq.n	80019bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001994:	f7ff fa26 	bl	8000de4 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800199c:	f7ff fa22 	bl	8000de4 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b64      	cmp	r3, #100	; 0x64
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e276      	b.n	8001e9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ae:	4b92      	ldr	r3, [pc, #584]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0f0      	beq.n	800199c <HAL_RCC_OscConfig+0x2a8>
 80019ba:	e014      	b.n	80019e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019bc:	f7ff fa12 	bl	8000de4 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c4:	f7ff fa0e 	bl	8000de4 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b64      	cmp	r3, #100	; 0x64
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e262      	b.n	8001e9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019d6:	4b88      	ldr	r3, [pc, #544]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f0      	bne.n	80019c4 <HAL_RCC_OscConfig+0x2d0>
 80019e2:	e000      	b.n	80019e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d060      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	2b04      	cmp	r3, #4
 80019f6:	d005      	beq.n	8001a04 <HAL_RCC_OscConfig+0x310>
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	2b0c      	cmp	r3, #12
 80019fc:	d119      	bne.n	8001a32 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d116      	bne.n	8001a32 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a04:	4b7c      	ldr	r3, [pc, #496]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d005      	beq.n	8001a1c <HAL_RCC_OscConfig+0x328>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e23f      	b.n	8001e9c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a1c:	4b76      	ldr	r3, [pc, #472]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	061b      	lsls	r3, r3, #24
 8001a2a:	4973      	ldr	r1, [pc, #460]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a30:	e040      	b.n	8001ab4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d023      	beq.n	8001a82 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a3a:	4b6f      	ldr	r3, [pc, #444]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a6e      	ldr	r2, [pc, #440]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a46:	f7ff f9cd 	bl	8000de4 <HAL_GetTick>
 8001a4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a4c:	e008      	b.n	8001a60 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a4e:	f7ff f9c9 	bl	8000de4 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e21d      	b.n	8001e9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a60:	4b65      	ldr	r3, [pc, #404]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d0f0      	beq.n	8001a4e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a6c:	4b62      	ldr	r3, [pc, #392]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	061b      	lsls	r3, r3, #24
 8001a7a:	495f      	ldr	r1, [pc, #380]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	604b      	str	r3, [r1, #4]
 8001a80:	e018      	b.n	8001ab4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a82:	4b5d      	ldr	r3, [pc, #372]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a5c      	ldr	r2, [pc, #368]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8e:	f7ff f9a9 	bl	8000de4 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a96:	f7ff f9a5 	bl	8000de4 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e1f9      	b.n	8001e9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001aa8:	4b53      	ldr	r3, [pc, #332]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1f0      	bne.n	8001a96 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0308 	and.w	r3, r3, #8
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d03c      	beq.n	8001b3a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d01c      	beq.n	8001b02 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ac8:	4b4b      	ldr	r3, [pc, #300]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ace:	4a4a      	ldr	r2, [pc, #296]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad8:	f7ff f984 	bl	8000de4 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae0:	f7ff f980 	bl	8000de4 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e1d4      	b.n	8001e9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001af2:	4b41      	ldr	r3, [pc, #260]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001af4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0ef      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x3ec>
 8001b00:	e01b      	b.n	8001b3a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b02:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b08:	4a3b      	ldr	r2, [pc, #236]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001b0a:	f023 0301 	bic.w	r3, r3, #1
 8001b0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b12:	f7ff f967 	bl	8000de4 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b1a:	f7ff f963 	bl	8000de4 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e1b7      	b.n	8001e9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b2c:	4b32      	ldr	r3, [pc, #200]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1ef      	bne.n	8001b1a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 80a6 	beq.w	8001c94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b4c:	4b2a      	ldr	r3, [pc, #168]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d10d      	bne.n	8001b74 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b58:	4b27      	ldr	r3, [pc, #156]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5c:	4a26      	ldr	r2, [pc, #152]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b62:	6593      	str	r3, [r2, #88]	; 0x58
 8001b64:	4b24      	ldr	r3, [pc, #144]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b70:	2301      	movs	r3, #1
 8001b72:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b74:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <HAL_RCC_OscConfig+0x508>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d118      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b80:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <HAL_RCC_OscConfig+0x508>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a1d      	ldr	r2, [pc, #116]	; (8001bfc <HAL_RCC_OscConfig+0x508>)
 8001b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b8c:	f7ff f92a 	bl	8000de4 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b94:	f7ff f926 	bl	8000de4 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e17a      	b.n	8001e9c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ba6:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <HAL_RCC_OscConfig+0x508>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0f0      	beq.n	8001b94 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d108      	bne.n	8001bcc <HAL_RCC_OscConfig+0x4d8>
 8001bba:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bc0:	4a0d      	ldr	r2, [pc, #52]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bca:	e029      	b.n	8001c20 <HAL_RCC_OscConfig+0x52c>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	2b05      	cmp	r3, #5
 8001bd2:	d115      	bne.n	8001c00 <HAL_RCC_OscConfig+0x50c>
 8001bd4:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bda:	4a07      	ldr	r2, [pc, #28]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001bdc:	f043 0304 	orr.w	r3, r3, #4
 8001be0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001be4:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bea:	4a03      	ldr	r2, [pc, #12]	; (8001bf8 <HAL_RCC_OscConfig+0x504>)
 8001bec:	f043 0301 	orr.w	r3, r3, #1
 8001bf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bf4:	e014      	b.n	8001c20 <HAL_RCC_OscConfig+0x52c>
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	40007000 	.word	0x40007000
 8001c00:	4b9c      	ldr	r3, [pc, #624]	; (8001e74 <HAL_RCC_OscConfig+0x780>)
 8001c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c06:	4a9b      	ldr	r2, [pc, #620]	; (8001e74 <HAL_RCC_OscConfig+0x780>)
 8001c08:	f023 0301 	bic.w	r3, r3, #1
 8001c0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c10:	4b98      	ldr	r3, [pc, #608]	; (8001e74 <HAL_RCC_OscConfig+0x780>)
 8001c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c16:	4a97      	ldr	r2, [pc, #604]	; (8001e74 <HAL_RCC_OscConfig+0x780>)
 8001c18:	f023 0304 	bic.w	r3, r3, #4
 8001c1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d016      	beq.n	8001c56 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c28:	f7ff f8dc 	bl	8000de4 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c2e:	e00a      	b.n	8001c46 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c30:	f7ff f8d8 	bl	8000de4 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e12a      	b.n	8001e9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c46:	4b8b      	ldr	r3, [pc, #556]	; (8001e74 <HAL_RCC_OscConfig+0x780>)
 8001c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0ed      	beq.n	8001c30 <HAL_RCC_OscConfig+0x53c>
 8001c54:	e015      	b.n	8001c82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c56:	f7ff f8c5 	bl	8000de4 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c5c:	e00a      	b.n	8001c74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5e:	f7ff f8c1 	bl	8000de4 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e113      	b.n	8001e9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c74:	4b7f      	ldr	r3, [pc, #508]	; (8001e74 <HAL_RCC_OscConfig+0x780>)
 8001c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1ed      	bne.n	8001c5e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c82:	7ffb      	ldrb	r3, [r7, #31]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d105      	bne.n	8001c94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c88:	4b7a      	ldr	r3, [pc, #488]	; (8001e74 <HAL_RCC_OscConfig+0x780>)
 8001c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8c:	4a79      	ldr	r2, [pc, #484]	; (8001e74 <HAL_RCC_OscConfig+0x780>)
 8001c8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c92:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f000 80fe 	beq.w	8001e9a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	f040 80d0 	bne.w	8001e48 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ca8:	4b72      	ldr	r3, [pc, #456]	; (8001e74 <HAL_RCC_OscConfig+0x780>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f003 0203 	and.w	r2, r3, #3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d130      	bne.n	8001d1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d127      	bne.n	8001d1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d11f      	bne.n	8001d1e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ce8:	2a07      	cmp	r2, #7
 8001cea:	bf14      	ite	ne
 8001cec:	2201      	movne	r2, #1
 8001cee:	2200      	moveq	r2, #0
 8001cf0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d113      	bne.n	8001d1e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d00:	085b      	lsrs	r3, r3, #1
 8001d02:	3b01      	subs	r3, #1
 8001d04:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d109      	bne.n	8001d1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	085b      	lsrs	r3, r3, #1
 8001d16:	3b01      	subs	r3, #1
 8001d18:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d06e      	beq.n	8001dfc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	2b0c      	cmp	r3, #12
 8001d22:	d069      	beq.n	8001df8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d24:	4b53      	ldr	r3, [pc, #332]	; (8001e74 <HAL_RCC_OscConfig+0x780>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d105      	bne.n	8001d3c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d30:	4b50      	ldr	r3, [pc, #320]	; (8001e74 <HAL_RCC_OscConfig+0x780>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e0ad      	b.n	8001e9c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d40:	4b4c      	ldr	r3, [pc, #304]	; (8001e74 <HAL_RCC_OscConfig+0x780>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a4b      	ldr	r2, [pc, #300]	; (8001e74 <HAL_RCC_OscConfig+0x780>)
 8001d46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d4a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d4c:	f7ff f84a 	bl	8000de4 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d54:	f7ff f846 	bl	8000de4 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e09a      	b.n	8001e9c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d66:	4b43      	ldr	r3, [pc, #268]	; (8001e74 <HAL_RCC_OscConfig+0x780>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f0      	bne.n	8001d54 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d72:	4b40      	ldr	r3, [pc, #256]	; (8001e74 <HAL_RCC_OscConfig+0x780>)
 8001d74:	68da      	ldr	r2, [r3, #12]
 8001d76:	4b40      	ldr	r3, [pc, #256]	; (8001e78 <HAL_RCC_OscConfig+0x784>)
 8001d78:	4013      	ands	r3, r2
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d82:	3a01      	subs	r2, #1
 8001d84:	0112      	lsls	r2, r2, #4
 8001d86:	4311      	orrs	r1, r2
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d8c:	0212      	lsls	r2, r2, #8
 8001d8e:	4311      	orrs	r1, r2
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d94:	0852      	lsrs	r2, r2, #1
 8001d96:	3a01      	subs	r2, #1
 8001d98:	0552      	lsls	r2, r2, #21
 8001d9a:	4311      	orrs	r1, r2
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001da0:	0852      	lsrs	r2, r2, #1
 8001da2:	3a01      	subs	r2, #1
 8001da4:	0652      	lsls	r2, r2, #25
 8001da6:	4311      	orrs	r1, r2
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001dac:	0912      	lsrs	r2, r2, #4
 8001dae:	0452      	lsls	r2, r2, #17
 8001db0:	430a      	orrs	r2, r1
 8001db2:	4930      	ldr	r1, [pc, #192]	; (8001e74 <HAL_RCC_OscConfig+0x780>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001db8:	4b2e      	ldr	r3, [pc, #184]	; (8001e74 <HAL_RCC_OscConfig+0x780>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a2d      	ldr	r2, [pc, #180]	; (8001e74 <HAL_RCC_OscConfig+0x780>)
 8001dbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dc2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dc4:	4b2b      	ldr	r3, [pc, #172]	; (8001e74 <HAL_RCC_OscConfig+0x780>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	4a2a      	ldr	r2, [pc, #168]	; (8001e74 <HAL_RCC_OscConfig+0x780>)
 8001dca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dd0:	f7ff f808 	bl	8000de4 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd8:	f7ff f804 	bl	8000de4 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e058      	b.n	8001e9c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dea:	4b22      	ldr	r3, [pc, #136]	; (8001e74 <HAL_RCC_OscConfig+0x780>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0f0      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001df6:	e050      	b.n	8001e9a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e04f      	b.n	8001e9c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dfc:	4b1d      	ldr	r3, [pc, #116]	; (8001e74 <HAL_RCC_OscConfig+0x780>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d148      	bne.n	8001e9a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e08:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <HAL_RCC_OscConfig+0x780>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a19      	ldr	r2, [pc, #100]	; (8001e74 <HAL_RCC_OscConfig+0x780>)
 8001e0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e12:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e14:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <HAL_RCC_OscConfig+0x780>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	4a16      	ldr	r2, [pc, #88]	; (8001e74 <HAL_RCC_OscConfig+0x780>)
 8001e1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e20:	f7fe ffe0 	bl	8000de4 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e28:	f7fe ffdc 	bl	8000de4 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e030      	b.n	8001e9c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e3a:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <HAL_RCC_OscConfig+0x780>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0f0      	beq.n	8001e28 <HAL_RCC_OscConfig+0x734>
 8001e46:	e028      	b.n	8001e9a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	2b0c      	cmp	r3, #12
 8001e4c:	d023      	beq.n	8001e96 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e4e:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <HAL_RCC_OscConfig+0x780>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a08      	ldr	r2, [pc, #32]	; (8001e74 <HAL_RCC_OscConfig+0x780>)
 8001e54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5a:	f7fe ffc3 	bl	8000de4 <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e60:	e00c      	b.n	8001e7c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e62:	f7fe ffbf 	bl	8000de4 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d905      	bls.n	8001e7c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e013      	b.n	8001e9c <HAL_RCC_OscConfig+0x7a8>
 8001e74:	40021000 	.word	0x40021000
 8001e78:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e7c:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <HAL_RCC_OscConfig+0x7b0>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1ec      	bne.n	8001e62 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e88:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <HAL_RCC_OscConfig+0x7b0>)
 8001e8a:	68da      	ldr	r2, [r3, #12]
 8001e8c:	4905      	ldr	r1, [pc, #20]	; (8001ea4 <HAL_RCC_OscConfig+0x7b0>)
 8001e8e:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_RCC_OscConfig+0x7b4>)
 8001e90:	4013      	ands	r3, r2
 8001e92:	60cb      	str	r3, [r1, #12]
 8001e94:	e001      	b.n	8001e9a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3720      	adds	r7, #32
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	feeefffc 	.word	0xfeeefffc

08001eac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0e7      	b.n	8002090 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec0:	4b75      	ldr	r3, [pc, #468]	; (8002098 <HAL_RCC_ClockConfig+0x1ec>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d910      	bls.n	8001ef0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ece:	4b72      	ldr	r3, [pc, #456]	; (8002098 <HAL_RCC_ClockConfig+0x1ec>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f023 0207 	bic.w	r2, r3, #7
 8001ed6:	4970      	ldr	r1, [pc, #448]	; (8002098 <HAL_RCC_ClockConfig+0x1ec>)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ede:	4b6e      	ldr	r3, [pc, #440]	; (8002098 <HAL_RCC_ClockConfig+0x1ec>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d001      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0cf      	b.n	8002090 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d010      	beq.n	8001f1e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	4b66      	ldr	r3, [pc, #408]	; (800209c <HAL_RCC_ClockConfig+0x1f0>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d908      	bls.n	8001f1e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f0c:	4b63      	ldr	r3, [pc, #396]	; (800209c <HAL_RCC_ClockConfig+0x1f0>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	4960      	ldr	r1, [pc, #384]	; (800209c <HAL_RCC_ClockConfig+0x1f0>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d04c      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b03      	cmp	r3, #3
 8001f30:	d107      	bne.n	8001f42 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f32:	4b5a      	ldr	r3, [pc, #360]	; (800209c <HAL_RCC_ClockConfig+0x1f0>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d121      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e0a6      	b.n	8002090 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d107      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f4a:	4b54      	ldr	r3, [pc, #336]	; (800209c <HAL_RCC_ClockConfig+0x1f0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d115      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e09a      	b.n	8002090 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d107      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f62:	4b4e      	ldr	r3, [pc, #312]	; (800209c <HAL_RCC_ClockConfig+0x1f0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d109      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e08e      	b.n	8002090 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f72:	4b4a      	ldr	r3, [pc, #296]	; (800209c <HAL_RCC_ClockConfig+0x1f0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e086      	b.n	8002090 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f82:	4b46      	ldr	r3, [pc, #280]	; (800209c <HAL_RCC_ClockConfig+0x1f0>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f023 0203 	bic.w	r2, r3, #3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	4943      	ldr	r1, [pc, #268]	; (800209c <HAL_RCC_ClockConfig+0x1f0>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f94:	f7fe ff26 	bl	8000de4 <HAL_GetTick>
 8001f98:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9a:	e00a      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f9c:	f7fe ff22 	bl	8000de4 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e06e      	b.n	8002090 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb2:	4b3a      	ldr	r3, [pc, #232]	; (800209c <HAL_RCC_ClockConfig+0x1f0>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 020c 	and.w	r2, r3, #12
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d1eb      	bne.n	8001f9c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d010      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	4b31      	ldr	r3, [pc, #196]	; (800209c <HAL_RCC_ClockConfig+0x1f0>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d208      	bcs.n	8001ff2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe0:	4b2e      	ldr	r3, [pc, #184]	; (800209c <HAL_RCC_ClockConfig+0x1f0>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	492b      	ldr	r1, [pc, #172]	; (800209c <HAL_RCC_ClockConfig+0x1f0>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ff2:	4b29      	ldr	r3, [pc, #164]	; (8002098 <HAL_RCC_ClockConfig+0x1ec>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d210      	bcs.n	8002022 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002000:	4b25      	ldr	r3, [pc, #148]	; (8002098 <HAL_RCC_ClockConfig+0x1ec>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f023 0207 	bic.w	r2, r3, #7
 8002008:	4923      	ldr	r1, [pc, #140]	; (8002098 <HAL_RCC_ClockConfig+0x1ec>)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	4313      	orrs	r3, r2
 800200e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002010:	4b21      	ldr	r3, [pc, #132]	; (8002098 <HAL_RCC_ClockConfig+0x1ec>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	429a      	cmp	r2, r3
 800201c:	d001      	beq.n	8002022 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e036      	b.n	8002090 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0304 	and.w	r3, r3, #4
 800202a:	2b00      	cmp	r3, #0
 800202c:	d008      	beq.n	8002040 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800202e:	4b1b      	ldr	r3, [pc, #108]	; (800209c <HAL_RCC_ClockConfig+0x1f0>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	4918      	ldr	r1, [pc, #96]	; (800209c <HAL_RCC_ClockConfig+0x1f0>)
 800203c:	4313      	orrs	r3, r2
 800203e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	2b00      	cmp	r3, #0
 800204a:	d009      	beq.n	8002060 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800204c:	4b13      	ldr	r3, [pc, #76]	; (800209c <HAL_RCC_ClockConfig+0x1f0>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	4910      	ldr	r1, [pc, #64]	; (800209c <HAL_RCC_ClockConfig+0x1f0>)
 800205c:	4313      	orrs	r3, r2
 800205e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002060:	f000 f824 	bl	80020ac <HAL_RCC_GetSysClockFreq>
 8002064:	4602      	mov	r2, r0
 8002066:	4b0d      	ldr	r3, [pc, #52]	; (800209c <HAL_RCC_ClockConfig+0x1f0>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	091b      	lsrs	r3, r3, #4
 800206c:	f003 030f 	and.w	r3, r3, #15
 8002070:	490b      	ldr	r1, [pc, #44]	; (80020a0 <HAL_RCC_ClockConfig+0x1f4>)
 8002072:	5ccb      	ldrb	r3, [r1, r3]
 8002074:	f003 031f 	and.w	r3, r3, #31
 8002078:	fa22 f303 	lsr.w	r3, r2, r3
 800207c:	4a09      	ldr	r2, [pc, #36]	; (80020a4 <HAL_RCC_ClockConfig+0x1f8>)
 800207e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002080:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <HAL_RCC_ClockConfig+0x1fc>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe fd97 	bl	8000bb8 <HAL_InitTick>
 800208a:	4603      	mov	r3, r0
 800208c:	72fb      	strb	r3, [r7, #11]

  return status;
 800208e:	7afb      	ldrb	r3, [r7, #11]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40022000 	.word	0x40022000
 800209c:	40021000 	.word	0x40021000
 80020a0:	08005848 	.word	0x08005848
 80020a4:	20000000 	.word	0x20000000
 80020a8:	20000004 	.word	0x20000004

080020ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b089      	sub	sp, #36	; 0x24
 80020b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	61fb      	str	r3, [r7, #28]
 80020b6:	2300      	movs	r3, #0
 80020b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020ba:	4b3e      	ldr	r3, [pc, #248]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 030c 	and.w	r3, r3, #12
 80020c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020c4:	4b3b      	ldr	r3, [pc, #236]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	f003 0303 	and.w	r3, r3, #3
 80020cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <HAL_RCC_GetSysClockFreq+0x34>
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	2b0c      	cmp	r3, #12
 80020d8:	d121      	bne.n	800211e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d11e      	bne.n	800211e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020e0:	4b34      	ldr	r3, [pc, #208]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0308 	and.w	r3, r3, #8
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d107      	bne.n	80020fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020ec:	4b31      	ldr	r3, [pc, #196]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020f2:	0a1b      	lsrs	r3, r3, #8
 80020f4:	f003 030f 	and.w	r3, r3, #15
 80020f8:	61fb      	str	r3, [r7, #28]
 80020fa:	e005      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020fc:	4b2d      	ldr	r3, [pc, #180]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	091b      	lsrs	r3, r3, #4
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002108:	4a2b      	ldr	r2, [pc, #172]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002110:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10d      	bne.n	8002134 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800211c:	e00a      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	2b04      	cmp	r3, #4
 8002122:	d102      	bne.n	800212a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002124:	4b25      	ldr	r3, [pc, #148]	; (80021bc <HAL_RCC_GetSysClockFreq+0x110>)
 8002126:	61bb      	str	r3, [r7, #24]
 8002128:	e004      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	2b08      	cmp	r3, #8
 800212e:	d101      	bne.n	8002134 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002130:	4b23      	ldr	r3, [pc, #140]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002132:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	2b0c      	cmp	r3, #12
 8002138:	d134      	bne.n	80021a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800213a:	4b1e      	ldr	r3, [pc, #120]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	2b02      	cmp	r3, #2
 8002148:	d003      	beq.n	8002152 <HAL_RCC_GetSysClockFreq+0xa6>
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	2b03      	cmp	r3, #3
 800214e:	d003      	beq.n	8002158 <HAL_RCC_GetSysClockFreq+0xac>
 8002150:	e005      	b.n	800215e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002152:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <HAL_RCC_GetSysClockFreq+0x110>)
 8002154:	617b      	str	r3, [r7, #20]
      break;
 8002156:	e005      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002158:	4b19      	ldr	r3, [pc, #100]	; (80021c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800215a:	617b      	str	r3, [r7, #20]
      break;
 800215c:	e002      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	617b      	str	r3, [r7, #20]
      break;
 8002162:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002164:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	091b      	lsrs	r3, r3, #4
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	3301      	adds	r3, #1
 8002170:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002172:	4b10      	ldr	r3, [pc, #64]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	0a1b      	lsrs	r3, r3, #8
 8002178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800217c:	697a      	ldr	r2, [r7, #20]
 800217e:	fb03 f202 	mul.w	r2, r3, r2
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	fbb2 f3f3 	udiv	r3, r2, r3
 8002188:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800218a:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	0e5b      	lsrs	r3, r3, #25
 8002190:	f003 0303 	and.w	r3, r3, #3
 8002194:	3301      	adds	r3, #1
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021a4:	69bb      	ldr	r3, [r7, #24]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3724      	adds	r7, #36	; 0x24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40021000 	.word	0x40021000
 80021b8:	08005860 	.word	0x08005860
 80021bc:	00f42400 	.word	0x00f42400
 80021c0:	007a1200 	.word	0x007a1200

080021c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021c8:	4b03      	ldr	r3, [pc, #12]	; (80021d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80021ca:	681b      	ldr	r3, [r3, #0]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	20000000 	.word	0x20000000

080021dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021e0:	f7ff fff0 	bl	80021c4 <HAL_RCC_GetHCLKFreq>
 80021e4:	4602      	mov	r2, r0
 80021e6:	4b06      	ldr	r3, [pc, #24]	; (8002200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	0a1b      	lsrs	r3, r3, #8
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	4904      	ldr	r1, [pc, #16]	; (8002204 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021f2:	5ccb      	ldrb	r3, [r1, r3]
 80021f4:	f003 031f 	and.w	r3, r3, #31
 80021f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40021000 	.word	0x40021000
 8002204:	08005858 	.word	0x08005858

08002208 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800220c:	f7ff ffda 	bl	80021c4 <HAL_RCC_GetHCLKFreq>
 8002210:	4602      	mov	r2, r0
 8002212:	4b06      	ldr	r3, [pc, #24]	; (800222c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	0adb      	lsrs	r3, r3, #11
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	4904      	ldr	r1, [pc, #16]	; (8002230 <HAL_RCC_GetPCLK2Freq+0x28>)
 800221e:	5ccb      	ldrb	r3, [r1, r3]
 8002220:	f003 031f 	and.w	r3, r3, #31
 8002224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002228:	4618      	mov	r0, r3
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40021000 	.word	0x40021000
 8002230:	08005858 	.word	0x08005858

08002234 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	220f      	movs	r2, #15
 8002242:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002244:	4b12      	ldr	r3, [pc, #72]	; (8002290 <HAL_RCC_GetClockConfig+0x5c>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f003 0203 	and.w	r2, r3, #3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002250:	4b0f      	ldr	r3, [pc, #60]	; (8002290 <HAL_RCC_GetClockConfig+0x5c>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800225c:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <HAL_RCC_GetClockConfig+0x5c>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002268:	4b09      	ldr	r3, [pc, #36]	; (8002290 <HAL_RCC_GetClockConfig+0x5c>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	08db      	lsrs	r3, r3, #3
 800226e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002276:	4b07      	ldr	r3, [pc, #28]	; (8002294 <HAL_RCC_GetClockConfig+0x60>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0207 	and.w	r2, r3, #7
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	601a      	str	r2, [r3, #0]
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	40021000 	.word	0x40021000
 8002294:	40022000 	.word	0x40022000

08002298 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022a0:	2300      	movs	r3, #0
 80022a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022a4:	4b2a      	ldr	r3, [pc, #168]	; (8002350 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022b0:	f7ff f9bc 	bl	800162c <HAL_PWREx_GetVoltageRange>
 80022b4:	6178      	str	r0, [r7, #20]
 80022b6:	e014      	b.n	80022e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022b8:	4b25      	ldr	r3, [pc, #148]	; (8002350 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022bc:	4a24      	ldr	r2, [pc, #144]	; (8002350 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c2:	6593      	str	r3, [r2, #88]	; 0x58
 80022c4:	4b22      	ldr	r3, [pc, #136]	; (8002350 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022d0:	f7ff f9ac 	bl	800162c <HAL_PWREx_GetVoltageRange>
 80022d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022d6:	4b1e      	ldr	r3, [pc, #120]	; (8002350 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022da:	4a1d      	ldr	r2, [pc, #116]	; (8002350 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022e8:	d10b      	bne.n	8002302 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b80      	cmp	r3, #128	; 0x80
 80022ee:	d919      	bls.n	8002324 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2ba0      	cmp	r3, #160	; 0xa0
 80022f4:	d902      	bls.n	80022fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022f6:	2302      	movs	r3, #2
 80022f8:	613b      	str	r3, [r7, #16]
 80022fa:	e013      	b.n	8002324 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022fc:	2301      	movs	r3, #1
 80022fe:	613b      	str	r3, [r7, #16]
 8002300:	e010      	b.n	8002324 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b80      	cmp	r3, #128	; 0x80
 8002306:	d902      	bls.n	800230e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002308:	2303      	movs	r3, #3
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	e00a      	b.n	8002324 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b80      	cmp	r3, #128	; 0x80
 8002312:	d102      	bne.n	800231a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002314:	2302      	movs	r3, #2
 8002316:	613b      	str	r3, [r7, #16]
 8002318:	e004      	b.n	8002324 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b70      	cmp	r3, #112	; 0x70
 800231e:	d101      	bne.n	8002324 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002320:	2301      	movs	r3, #1
 8002322:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002324:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f023 0207 	bic.w	r2, r3, #7
 800232c:	4909      	ldr	r1, [pc, #36]	; (8002354 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002334:	4b07      	ldr	r3, [pc, #28]	; (8002354 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	429a      	cmp	r2, r3
 8002340:	d001      	beq.n	8002346 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e000      	b.n	8002348 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40021000 	.word	0x40021000
 8002354:	40022000 	.word	0x40022000

08002358 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002360:	2300      	movs	r3, #0
 8002362:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002364:	2300      	movs	r3, #0
 8002366:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002370:	2b00      	cmp	r3, #0
 8002372:	d041      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002378:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800237c:	d02a      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800237e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002382:	d824      	bhi.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002384:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002388:	d008      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800238a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800238e:	d81e      	bhi.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00a      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002394:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002398:	d010      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800239a:	e018      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800239c:	4b86      	ldr	r3, [pc, #536]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	4a85      	ldr	r2, [pc, #532]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023a8:	e015      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	3304      	adds	r3, #4
 80023ae:	2100      	movs	r1, #0
 80023b0:	4618      	mov	r0, r3
 80023b2:	f000 facb 	bl	800294c <RCCEx_PLLSAI1_Config>
 80023b6:	4603      	mov	r3, r0
 80023b8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023ba:	e00c      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3320      	adds	r3, #32
 80023c0:	2100      	movs	r1, #0
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 fbb6 	bl	8002b34 <RCCEx_PLLSAI2_Config>
 80023c8:	4603      	mov	r3, r0
 80023ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023cc:	e003      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	74fb      	strb	r3, [r7, #19]
      break;
 80023d2:	e000      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80023d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023d6:	7cfb      	ldrb	r3, [r7, #19]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10b      	bne.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023dc:	4b76      	ldr	r3, [pc, #472]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023ea:	4973      	ldr	r1, [pc, #460]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023f2:	e001      	b.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023f4:	7cfb      	ldrb	r3, [r7, #19]
 80023f6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d041      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002408:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800240c:	d02a      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800240e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002412:	d824      	bhi.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002414:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002418:	d008      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800241a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800241e:	d81e      	bhi.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00a      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002424:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002428:	d010      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800242a:	e018      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800242c:	4b62      	ldr	r3, [pc, #392]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	4a61      	ldr	r2, [pc, #388]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002436:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002438:	e015      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3304      	adds	r3, #4
 800243e:	2100      	movs	r1, #0
 8002440:	4618      	mov	r0, r3
 8002442:	f000 fa83 	bl	800294c <RCCEx_PLLSAI1_Config>
 8002446:	4603      	mov	r3, r0
 8002448:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800244a:	e00c      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3320      	adds	r3, #32
 8002450:	2100      	movs	r1, #0
 8002452:	4618      	mov	r0, r3
 8002454:	f000 fb6e 	bl	8002b34 <RCCEx_PLLSAI2_Config>
 8002458:	4603      	mov	r3, r0
 800245a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800245c:	e003      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	74fb      	strb	r3, [r7, #19]
      break;
 8002462:	e000      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002464:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002466:	7cfb      	ldrb	r3, [r7, #19]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10b      	bne.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800246c:	4b52      	ldr	r3, [pc, #328]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800246e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002472:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800247a:	494f      	ldr	r1, [pc, #316]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800247c:	4313      	orrs	r3, r2
 800247e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002482:	e001      	b.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002484:	7cfb      	ldrb	r3, [r7, #19]
 8002486:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 80a0 	beq.w	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002496:	2300      	movs	r3, #0
 8002498:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800249a:	4b47      	ldr	r3, [pc, #284]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800249c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80024a6:	2301      	movs	r3, #1
 80024a8:	e000      	b.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x154>
 80024aa:	2300      	movs	r3, #0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00d      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b0:	4b41      	ldr	r3, [pc, #260]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b4:	4a40      	ldr	r2, [pc, #256]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ba:	6593      	str	r3, [r2, #88]	; 0x58
 80024bc:	4b3e      	ldr	r3, [pc, #248]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c4:	60bb      	str	r3, [r7, #8]
 80024c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024c8:	2301      	movs	r3, #1
 80024ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024cc:	4b3b      	ldr	r3, [pc, #236]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a3a      	ldr	r2, [pc, #232]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024d8:	f7fe fc84 	bl	8000de4 <HAL_GetTick>
 80024dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024de:	e009      	b.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e0:	f7fe fc80 	bl	8000de4 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d902      	bls.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	74fb      	strb	r3, [r7, #19]
        break;
 80024f2:	e005      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024f4:	4b31      	ldr	r3, [pc, #196]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0ef      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002500:	7cfb      	ldrb	r3, [r7, #19]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d15c      	bne.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002506:	4b2c      	ldr	r3, [pc, #176]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002510:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d01f      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	429a      	cmp	r2, r3
 8002522:	d019      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002524:	4b24      	ldr	r3, [pc, #144]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800252e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002530:	4b21      	ldr	r3, [pc, #132]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002536:	4a20      	ldr	r2, [pc, #128]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800253c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002540:	4b1d      	ldr	r3, [pc, #116]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002546:	4a1c      	ldr	r2, [pc, #112]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800254c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002550:	4a19      	ldr	r2, [pc, #100]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d016      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002562:	f7fe fc3f 	bl	8000de4 <HAL_GetTick>
 8002566:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002568:	e00b      	b.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800256a:	f7fe fc3b 	bl	8000de4 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	f241 3288 	movw	r2, #5000	; 0x1388
 8002578:	4293      	cmp	r3, r2
 800257a:	d902      	bls.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	74fb      	strb	r3, [r7, #19]
            break;
 8002580:	e006      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002582:	4b0d      	ldr	r3, [pc, #52]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0ec      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002590:	7cfb      	ldrb	r3, [r7, #19]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10c      	bne.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002596:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025a6:	4904      	ldr	r1, [pc, #16]	; (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80025ae:	e009      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025b0:	7cfb      	ldrb	r3, [r7, #19]
 80025b2:	74bb      	strb	r3, [r7, #18]
 80025b4:	e006      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80025b6:	bf00      	nop
 80025b8:	40021000 	.word	0x40021000
 80025bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025c0:	7cfb      	ldrb	r3, [r7, #19]
 80025c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025c4:	7c7b      	ldrb	r3, [r7, #17]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d105      	bne.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ca:	4b9e      	ldr	r3, [pc, #632]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ce:	4a9d      	ldr	r2, [pc, #628]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00a      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025e2:	4b98      	ldr	r3, [pc, #608]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e8:	f023 0203 	bic.w	r2, r3, #3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f0:	4994      	ldr	r1, [pc, #592]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00a      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002604:	4b8f      	ldr	r3, [pc, #572]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260a:	f023 020c 	bic.w	r2, r3, #12
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002612:	498c      	ldr	r1, [pc, #560]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002614:	4313      	orrs	r3, r2
 8002616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0304 	and.w	r3, r3, #4
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00a      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002626:	4b87      	ldr	r3, [pc, #540]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002634:	4983      	ldr	r1, [pc, #524]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002636:	4313      	orrs	r3, r2
 8002638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0308 	and.w	r3, r3, #8
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00a      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002648:	4b7e      	ldr	r3, [pc, #504]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800264a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002656:	497b      	ldr	r1, [pc, #492]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002658:	4313      	orrs	r3, r2
 800265a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0310 	and.w	r3, r3, #16
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00a      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800266a:	4b76      	ldr	r3, [pc, #472]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002670:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002678:	4972      	ldr	r1, [pc, #456]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267a:	4313      	orrs	r3, r2
 800267c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0320 	and.w	r3, r3, #32
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00a      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800268c:	4b6d      	ldr	r3, [pc, #436]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800268e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002692:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800269a:	496a      	ldr	r1, [pc, #424]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269c:	4313      	orrs	r3, r2
 800269e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00a      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026ae:	4b65      	ldr	r3, [pc, #404]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026bc:	4961      	ldr	r1, [pc, #388]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00a      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026d0:	4b5c      	ldr	r3, [pc, #368]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026de:	4959      	ldr	r1, [pc, #356]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00a      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026f2:	4b54      	ldr	r3, [pc, #336]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002700:	4950      	ldr	r1, [pc, #320]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002702:	4313      	orrs	r3, r2
 8002704:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00a      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002714:	4b4b      	ldr	r3, [pc, #300]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002722:	4948      	ldr	r1, [pc, #288]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002724:	4313      	orrs	r3, r2
 8002726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00a      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002736:	4b43      	ldr	r3, [pc, #268]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002744:	493f      	ldr	r1, [pc, #252]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002746:	4313      	orrs	r3, r2
 8002748:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d028      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002758:	4b3a      	ldr	r3, [pc, #232]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002766:	4937      	ldr	r1, [pc, #220]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002768:	4313      	orrs	r3, r2
 800276a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002772:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002776:	d106      	bne.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002778:	4b32      	ldr	r3, [pc, #200]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	4a31      	ldr	r2, [pc, #196]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002782:	60d3      	str	r3, [r2, #12]
 8002784:	e011      	b.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800278a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800278e:	d10c      	bne.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3304      	adds	r3, #4
 8002794:	2101      	movs	r1, #1
 8002796:	4618      	mov	r0, r3
 8002798:	f000 f8d8 	bl	800294c <RCCEx_PLLSAI1_Config>
 800279c:	4603      	mov	r3, r0
 800279e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80027a0:	7cfb      	ldrb	r3, [r7, #19]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80027a6:	7cfb      	ldrb	r3, [r7, #19]
 80027a8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d028      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027b6:	4b23      	ldr	r3, [pc, #140]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c4:	491f      	ldr	r1, [pc, #124]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027d4:	d106      	bne.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027d6:	4b1b      	ldr	r3, [pc, #108]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	4a1a      	ldr	r2, [pc, #104]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027e0:	60d3      	str	r3, [r2, #12]
 80027e2:	e011      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027ec:	d10c      	bne.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	3304      	adds	r3, #4
 80027f2:	2101      	movs	r1, #1
 80027f4:	4618      	mov	r0, r3
 80027f6:	f000 f8a9 	bl	800294c <RCCEx_PLLSAI1_Config>
 80027fa:	4603      	mov	r3, r0
 80027fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027fe:	7cfb      	ldrb	r3, [r7, #19]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002804:	7cfb      	ldrb	r3, [r7, #19]
 8002806:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d02b      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002814:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002822:	4908      	ldr	r1, [pc, #32]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002824:	4313      	orrs	r3, r2
 8002826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800282e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002832:	d109      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002834:	4b03      	ldr	r3, [pc, #12]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	4a02      	ldr	r2, [pc, #8]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800283a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800283e:	60d3      	str	r3, [r2, #12]
 8002840:	e014      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002842:	bf00      	nop
 8002844:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800284c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002850:	d10c      	bne.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3304      	adds	r3, #4
 8002856:	2101      	movs	r1, #1
 8002858:	4618      	mov	r0, r3
 800285a:	f000 f877 	bl	800294c <RCCEx_PLLSAI1_Config>
 800285e:	4603      	mov	r3, r0
 8002860:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002862:	7cfb      	ldrb	r3, [r7, #19]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002868:	7cfb      	ldrb	r3, [r7, #19]
 800286a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d02f      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002878:	4b2b      	ldr	r3, [pc, #172]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800287a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002886:	4928      	ldr	r1, [pc, #160]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002888:	4313      	orrs	r3, r2
 800288a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002892:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002896:	d10d      	bne.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3304      	adds	r3, #4
 800289c:	2102      	movs	r1, #2
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 f854 	bl	800294c <RCCEx_PLLSAI1_Config>
 80028a4:	4603      	mov	r3, r0
 80028a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028a8:	7cfb      	ldrb	r3, [r7, #19]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d014      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028ae:	7cfb      	ldrb	r3, [r7, #19]
 80028b0:	74bb      	strb	r3, [r7, #18]
 80028b2:	e011      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028bc:	d10c      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3320      	adds	r3, #32
 80028c2:	2102      	movs	r1, #2
 80028c4:	4618      	mov	r0, r3
 80028c6:	f000 f935 	bl	8002b34 <RCCEx_PLLSAI2_Config>
 80028ca:	4603      	mov	r3, r0
 80028cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028ce:	7cfb      	ldrb	r3, [r7, #19]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028d4:	7cfb      	ldrb	r3, [r7, #19]
 80028d6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00a      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80028e4:	4b10      	ldr	r3, [pc, #64]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028f2:	490d      	ldr	r1, [pc, #52]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00b      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002906:	4b08      	ldr	r3, [pc, #32]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002916:	4904      	ldr	r1, [pc, #16]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002918:	4313      	orrs	r3, r2
 800291a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800291e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002920:	4618      	mov	r0, r3
 8002922:	3718      	adds	r7, #24
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40021000 	.word	0x40021000

0800292c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002930:	4b05      	ldr	r3, [pc, #20]	; (8002948 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a04      	ldr	r2, [pc, #16]	; (8002948 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002936:	f043 0304 	orr.w	r3, r3, #4
 800293a:	6013      	str	r3, [r2, #0]
}
 800293c:	bf00      	nop
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	40021000 	.word	0x40021000

0800294c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002956:	2300      	movs	r3, #0
 8002958:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800295a:	4b75      	ldr	r3, [pc, #468]	; (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d018      	beq.n	8002998 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002966:	4b72      	ldr	r3, [pc, #456]	; (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f003 0203 	and.w	r2, r3, #3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	429a      	cmp	r2, r3
 8002974:	d10d      	bne.n	8002992 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
       ||
 800297a:	2b00      	cmp	r3, #0
 800297c:	d009      	beq.n	8002992 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800297e:	4b6c      	ldr	r3, [pc, #432]	; (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	091b      	lsrs	r3, r3, #4
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	1c5a      	adds	r2, r3, #1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
       ||
 800298e:	429a      	cmp	r2, r3
 8002990:	d047      	beq.n	8002a22 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	73fb      	strb	r3, [r7, #15]
 8002996:	e044      	b.n	8002a22 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2b03      	cmp	r3, #3
 800299e:	d018      	beq.n	80029d2 <RCCEx_PLLSAI1_Config+0x86>
 80029a0:	2b03      	cmp	r3, #3
 80029a2:	d825      	bhi.n	80029f0 <RCCEx_PLLSAI1_Config+0xa4>
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d002      	beq.n	80029ae <RCCEx_PLLSAI1_Config+0x62>
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d009      	beq.n	80029c0 <RCCEx_PLLSAI1_Config+0x74>
 80029ac:	e020      	b.n	80029f0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029ae:	4b60      	ldr	r3, [pc, #384]	; (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d11d      	bne.n	80029f6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029be:	e01a      	b.n	80029f6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029c0:	4b5b      	ldr	r3, [pc, #364]	; (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d116      	bne.n	80029fa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029d0:	e013      	b.n	80029fa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029d2:	4b57      	ldr	r3, [pc, #348]	; (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10f      	bne.n	80029fe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029de:	4b54      	ldr	r3, [pc, #336]	; (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d109      	bne.n	80029fe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029ee:	e006      	b.n	80029fe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	73fb      	strb	r3, [r7, #15]
      break;
 80029f4:	e004      	b.n	8002a00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029f6:	bf00      	nop
 80029f8:	e002      	b.n	8002a00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029fa:	bf00      	nop
 80029fc:	e000      	b.n	8002a00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10d      	bne.n	8002a22 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a06:	4b4a      	ldr	r3, [pc, #296]	; (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6819      	ldr	r1, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	011b      	lsls	r3, r3, #4
 8002a1a:	430b      	orrs	r3, r1
 8002a1c:	4944      	ldr	r1, [pc, #272]	; (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d17d      	bne.n	8002b24 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a28:	4b41      	ldr	r3, [pc, #260]	; (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a40      	ldr	r2, [pc, #256]	; (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a34:	f7fe f9d6 	bl	8000de4 <HAL_GetTick>
 8002a38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a3a:	e009      	b.n	8002a50 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a3c:	f7fe f9d2 	bl	8000de4 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d902      	bls.n	8002a50 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	73fb      	strb	r3, [r7, #15]
        break;
 8002a4e:	e005      	b.n	8002a5c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a50:	4b37      	ldr	r3, [pc, #220]	; (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1ef      	bne.n	8002a3c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d160      	bne.n	8002b24 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d111      	bne.n	8002a8c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a68:	4b31      	ldr	r3, [pc, #196]	; (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6892      	ldr	r2, [r2, #8]
 8002a78:	0211      	lsls	r1, r2, #8
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	68d2      	ldr	r2, [r2, #12]
 8002a7e:	0912      	lsrs	r2, r2, #4
 8002a80:	0452      	lsls	r2, r2, #17
 8002a82:	430a      	orrs	r2, r1
 8002a84:	492a      	ldr	r1, [pc, #168]	; (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	610b      	str	r3, [r1, #16]
 8002a8a:	e027      	b.n	8002adc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d112      	bne.n	8002ab8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a92:	4b27      	ldr	r3, [pc, #156]	; (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002a9a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6892      	ldr	r2, [r2, #8]
 8002aa2:	0211      	lsls	r1, r2, #8
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6912      	ldr	r2, [r2, #16]
 8002aa8:	0852      	lsrs	r2, r2, #1
 8002aaa:	3a01      	subs	r2, #1
 8002aac:	0552      	lsls	r2, r2, #21
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	491f      	ldr	r1, [pc, #124]	; (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	610b      	str	r3, [r1, #16]
 8002ab6:	e011      	b.n	8002adc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ab8:	4b1d      	ldr	r3, [pc, #116]	; (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ac0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6892      	ldr	r2, [r2, #8]
 8002ac8:	0211      	lsls	r1, r2, #8
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6952      	ldr	r2, [r2, #20]
 8002ace:	0852      	lsrs	r2, r2, #1
 8002ad0:	3a01      	subs	r2, #1
 8002ad2:	0652      	lsls	r2, r2, #25
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	4916      	ldr	r1, [pc, #88]	; (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002adc:	4b14      	ldr	r3, [pc, #80]	; (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a13      	ldr	r2, [pc, #76]	; (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ae6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae8:	f7fe f97c 	bl	8000de4 <HAL_GetTick>
 8002aec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002aee:	e009      	b.n	8002b04 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002af0:	f7fe f978 	bl	8000de4 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d902      	bls.n	8002b04 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	73fb      	strb	r3, [r7, #15]
          break;
 8002b02:	e005      	b.n	8002b10 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b04:	4b0a      	ldr	r3, [pc, #40]	; (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0ef      	beq.n	8002af0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d106      	bne.n	8002b24 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b16:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b18:	691a      	ldr	r2, [r3, #16]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	4904      	ldr	r1, [pc, #16]	; (8002b30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40021000 	.word	0x40021000

08002b34 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b42:	4b6a      	ldr	r3, [pc, #424]	; (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d018      	beq.n	8002b80 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b4e:	4b67      	ldr	r3, [pc, #412]	; (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	f003 0203 	and.w	r2, r3, #3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d10d      	bne.n	8002b7a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
       ||
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d009      	beq.n	8002b7a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b66:	4b61      	ldr	r3, [pc, #388]	; (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	091b      	lsrs	r3, r3, #4
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	1c5a      	adds	r2, r3, #1
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
       ||
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d047      	beq.n	8002c0a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	73fb      	strb	r3, [r7, #15]
 8002b7e:	e044      	b.n	8002c0a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2b03      	cmp	r3, #3
 8002b86:	d018      	beq.n	8002bba <RCCEx_PLLSAI2_Config+0x86>
 8002b88:	2b03      	cmp	r3, #3
 8002b8a:	d825      	bhi.n	8002bd8 <RCCEx_PLLSAI2_Config+0xa4>
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d002      	beq.n	8002b96 <RCCEx_PLLSAI2_Config+0x62>
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d009      	beq.n	8002ba8 <RCCEx_PLLSAI2_Config+0x74>
 8002b94:	e020      	b.n	8002bd8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b96:	4b55      	ldr	r3, [pc, #340]	; (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d11d      	bne.n	8002bde <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ba6:	e01a      	b.n	8002bde <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ba8:	4b50      	ldr	r3, [pc, #320]	; (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d116      	bne.n	8002be2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bb8:	e013      	b.n	8002be2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bba:	4b4c      	ldr	r3, [pc, #304]	; (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10f      	bne.n	8002be6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bc6:	4b49      	ldr	r3, [pc, #292]	; (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d109      	bne.n	8002be6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bd6:	e006      	b.n	8002be6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	73fb      	strb	r3, [r7, #15]
      break;
 8002bdc:	e004      	b.n	8002be8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bde:	bf00      	nop
 8002be0:	e002      	b.n	8002be8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002be2:	bf00      	nop
 8002be4:	e000      	b.n	8002be8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002be6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002be8:	7bfb      	ldrb	r3, [r7, #15]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10d      	bne.n	8002c0a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bee:	4b3f      	ldr	r3, [pc, #252]	; (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6819      	ldr	r1, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	430b      	orrs	r3, r1
 8002c04:	4939      	ldr	r1, [pc, #228]	; (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c0a:	7bfb      	ldrb	r3, [r7, #15]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d167      	bne.n	8002ce0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c10:	4b36      	ldr	r3, [pc, #216]	; (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a35      	ldr	r2, [pc, #212]	; (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c1c:	f7fe f8e2 	bl	8000de4 <HAL_GetTick>
 8002c20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c22:	e009      	b.n	8002c38 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c24:	f7fe f8de 	bl	8000de4 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d902      	bls.n	8002c38 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	73fb      	strb	r3, [r7, #15]
        break;
 8002c36:	e005      	b.n	8002c44 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c38:	4b2c      	ldr	r3, [pc, #176]	; (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1ef      	bne.n	8002c24 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c44:	7bfb      	ldrb	r3, [r7, #15]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d14a      	bne.n	8002ce0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d111      	bne.n	8002c74 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c50:	4b26      	ldr	r3, [pc, #152]	; (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6892      	ldr	r2, [r2, #8]
 8002c60:	0211      	lsls	r1, r2, #8
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	68d2      	ldr	r2, [r2, #12]
 8002c66:	0912      	lsrs	r2, r2, #4
 8002c68:	0452      	lsls	r2, r2, #17
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	491f      	ldr	r1, [pc, #124]	; (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	614b      	str	r3, [r1, #20]
 8002c72:	e011      	b.n	8002c98 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c74:	4b1d      	ldr	r3, [pc, #116]	; (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6892      	ldr	r2, [r2, #8]
 8002c84:	0211      	lsls	r1, r2, #8
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6912      	ldr	r2, [r2, #16]
 8002c8a:	0852      	lsrs	r2, r2, #1
 8002c8c:	3a01      	subs	r2, #1
 8002c8e:	0652      	lsls	r2, r2, #25
 8002c90:	430a      	orrs	r2, r1
 8002c92:	4916      	ldr	r1, [pc, #88]	; (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c98:	4b14      	ldr	r3, [pc, #80]	; (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a13      	ldr	r2, [pc, #76]	; (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca4:	f7fe f89e 	bl	8000de4 <HAL_GetTick>
 8002ca8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002caa:	e009      	b.n	8002cc0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002cac:	f7fe f89a 	bl	8000de4 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d902      	bls.n	8002cc0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	73fb      	strb	r3, [r7, #15]
          break;
 8002cbe:	e005      	b.n	8002ccc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002cc0:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0ef      	beq.n	8002cac <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002ccc:	7bfb      	ldrb	r3, [r7, #15]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d106      	bne.n	8002ce0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002cd2:	4b06      	ldr	r3, [pc, #24]	; (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cd4:	695a      	ldr	r2, [r3, #20]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	4904      	ldr	r1, [pc, #16]	; (8002cec <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40021000 	.word	0x40021000

08002cf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e049      	b.n	8002d96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d106      	bne.n	8002d1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f841 	bl	8002d9e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	3304      	adds	r3, #4
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4610      	mov	r0, r2
 8002d30:	f000 f9f8 	bl	8003124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
	...

08002db4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d001      	beq.n	8002dcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e04f      	b.n	8002e6c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0201 	orr.w	r2, r2, #1
 8002de2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a23      	ldr	r2, [pc, #140]	; (8002e78 <HAL_TIM_Base_Start_IT+0xc4>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d01d      	beq.n	8002e2a <HAL_TIM_Base_Start_IT+0x76>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df6:	d018      	beq.n	8002e2a <HAL_TIM_Base_Start_IT+0x76>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a1f      	ldr	r2, [pc, #124]	; (8002e7c <HAL_TIM_Base_Start_IT+0xc8>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d013      	beq.n	8002e2a <HAL_TIM_Base_Start_IT+0x76>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a1e      	ldr	r2, [pc, #120]	; (8002e80 <HAL_TIM_Base_Start_IT+0xcc>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d00e      	beq.n	8002e2a <HAL_TIM_Base_Start_IT+0x76>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a1c      	ldr	r2, [pc, #112]	; (8002e84 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d009      	beq.n	8002e2a <HAL_TIM_Base_Start_IT+0x76>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a1b      	ldr	r2, [pc, #108]	; (8002e88 <HAL_TIM_Base_Start_IT+0xd4>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d004      	beq.n	8002e2a <HAL_TIM_Base_Start_IT+0x76>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a19      	ldr	r2, [pc, #100]	; (8002e8c <HAL_TIM_Base_Start_IT+0xd8>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d115      	bne.n	8002e56 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	4b17      	ldr	r3, [pc, #92]	; (8002e90 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e32:	4013      	ands	r3, r2
 8002e34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2b06      	cmp	r3, #6
 8002e3a:	d015      	beq.n	8002e68 <HAL_TIM_Base_Start_IT+0xb4>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e42:	d011      	beq.n	8002e68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0201 	orr.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e54:	e008      	b.n	8002e68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f042 0201 	orr.w	r2, r2, #1
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	e000      	b.n	8002e6a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e68:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	40012c00 	.word	0x40012c00
 8002e7c:	40000400 	.word	0x40000400
 8002e80:	40000800 	.word	0x40000800
 8002e84:	40000c00 	.word	0x40000c00
 8002e88:	40013400 	.word	0x40013400
 8002e8c:	40014000 	.word	0x40014000
 8002e90:	00010007 	.word	0x00010007

08002e94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d122      	bne.n	8002ef0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d11b      	bne.n	8002ef0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f06f 0202 	mvn.w	r2, #2
 8002ec0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f905 	bl	80030e6 <HAL_TIM_IC_CaptureCallback>
 8002edc:	e005      	b.n	8002eea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f8f7 	bl	80030d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 f908 	bl	80030fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	f003 0304 	and.w	r3, r3, #4
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	d122      	bne.n	8002f44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b04      	cmp	r3, #4
 8002f0a:	d11b      	bne.n	8002f44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f06f 0204 	mvn.w	r2, #4
 8002f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2202      	movs	r2, #2
 8002f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f8db 	bl	80030e6 <HAL_TIM_IC_CaptureCallback>
 8002f30:	e005      	b.n	8002f3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f8cd 	bl	80030d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 f8de 	bl	80030fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	2b08      	cmp	r3, #8
 8002f50:	d122      	bne.n	8002f98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f003 0308 	and.w	r3, r3, #8
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	d11b      	bne.n	8002f98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f06f 0208 	mvn.w	r2, #8
 8002f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2204      	movs	r2, #4
 8002f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f8b1 	bl	80030e6 <HAL_TIM_IC_CaptureCallback>
 8002f84:	e005      	b.n	8002f92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f8a3 	bl	80030d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 f8b4 	bl	80030fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	f003 0310 	and.w	r3, r3, #16
 8002fa2:	2b10      	cmp	r3, #16
 8002fa4:	d122      	bne.n	8002fec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f003 0310 	and.w	r3, r3, #16
 8002fb0:	2b10      	cmp	r3, #16
 8002fb2:	d11b      	bne.n	8002fec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f06f 0210 	mvn.w	r2, #16
 8002fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2208      	movs	r2, #8
 8002fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f887 	bl	80030e6 <HAL_TIM_IC_CaptureCallback>
 8002fd8:	e005      	b.n	8002fe6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f879 	bl	80030d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 f88a 	bl	80030fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d10e      	bne.n	8003018 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b01      	cmp	r3, #1
 8003006:	d107      	bne.n	8003018 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f06f 0201 	mvn.w	r2, #1
 8003010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7fd fcd4 	bl	80009c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003022:	2b80      	cmp	r3, #128	; 0x80
 8003024:	d10e      	bne.n	8003044 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003030:	2b80      	cmp	r3, #128	; 0x80
 8003032:	d107      	bne.n	8003044 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800303c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f914 	bl	800326c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003052:	d10e      	bne.n	8003072 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800305e:	2b80      	cmp	r3, #128	; 0x80
 8003060:	d107      	bne.n	8003072 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800306a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f907 	bl	8003280 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307c:	2b40      	cmp	r3, #64	; 0x40
 800307e:	d10e      	bne.n	800309e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308a:	2b40      	cmp	r3, #64	; 0x40
 800308c:	d107      	bne.n	800309e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 f838 	bl	800310e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	f003 0320 	and.w	r3, r3, #32
 80030a8:	2b20      	cmp	r3, #32
 80030aa:	d10e      	bne.n	80030ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	f003 0320 	and.w	r3, r3, #32
 80030b6:	2b20      	cmp	r3, #32
 80030b8:	d107      	bne.n	80030ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f06f 0220 	mvn.w	r2, #32
 80030c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 f8c7 	bl	8003258 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030ca:	bf00      	nop
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b083      	sub	sp, #12
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003102:	bf00      	nop
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr

0800310e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800310e:	b480      	push	{r7}
 8003110:	b083      	sub	sp, #12
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
	...

08003124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a40      	ldr	r2, [pc, #256]	; (8003238 <TIM_Base_SetConfig+0x114>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d013      	beq.n	8003164 <TIM_Base_SetConfig+0x40>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003142:	d00f      	beq.n	8003164 <TIM_Base_SetConfig+0x40>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a3d      	ldr	r2, [pc, #244]	; (800323c <TIM_Base_SetConfig+0x118>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d00b      	beq.n	8003164 <TIM_Base_SetConfig+0x40>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a3c      	ldr	r2, [pc, #240]	; (8003240 <TIM_Base_SetConfig+0x11c>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d007      	beq.n	8003164 <TIM_Base_SetConfig+0x40>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a3b      	ldr	r2, [pc, #236]	; (8003244 <TIM_Base_SetConfig+0x120>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d003      	beq.n	8003164 <TIM_Base_SetConfig+0x40>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a3a      	ldr	r2, [pc, #232]	; (8003248 <TIM_Base_SetConfig+0x124>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d108      	bne.n	8003176 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800316a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	4313      	orrs	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a2f      	ldr	r2, [pc, #188]	; (8003238 <TIM_Base_SetConfig+0x114>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d01f      	beq.n	80031be <TIM_Base_SetConfig+0x9a>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003184:	d01b      	beq.n	80031be <TIM_Base_SetConfig+0x9a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a2c      	ldr	r2, [pc, #176]	; (800323c <TIM_Base_SetConfig+0x118>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d017      	beq.n	80031be <TIM_Base_SetConfig+0x9a>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a2b      	ldr	r2, [pc, #172]	; (8003240 <TIM_Base_SetConfig+0x11c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d013      	beq.n	80031be <TIM_Base_SetConfig+0x9a>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a2a      	ldr	r2, [pc, #168]	; (8003244 <TIM_Base_SetConfig+0x120>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d00f      	beq.n	80031be <TIM_Base_SetConfig+0x9a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a29      	ldr	r2, [pc, #164]	; (8003248 <TIM_Base_SetConfig+0x124>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d00b      	beq.n	80031be <TIM_Base_SetConfig+0x9a>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a28      	ldr	r2, [pc, #160]	; (800324c <TIM_Base_SetConfig+0x128>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d007      	beq.n	80031be <TIM_Base_SetConfig+0x9a>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a27      	ldr	r2, [pc, #156]	; (8003250 <TIM_Base_SetConfig+0x12c>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d003      	beq.n	80031be <TIM_Base_SetConfig+0x9a>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a26      	ldr	r2, [pc, #152]	; (8003254 <TIM_Base_SetConfig+0x130>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d108      	bne.n	80031d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	4313      	orrs	r3, r2
 80031dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a10      	ldr	r2, [pc, #64]	; (8003238 <TIM_Base_SetConfig+0x114>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d00f      	beq.n	800321c <TIM_Base_SetConfig+0xf8>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a12      	ldr	r2, [pc, #72]	; (8003248 <TIM_Base_SetConfig+0x124>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d00b      	beq.n	800321c <TIM_Base_SetConfig+0xf8>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a11      	ldr	r2, [pc, #68]	; (800324c <TIM_Base_SetConfig+0x128>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d007      	beq.n	800321c <TIM_Base_SetConfig+0xf8>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a10      	ldr	r2, [pc, #64]	; (8003250 <TIM_Base_SetConfig+0x12c>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d003      	beq.n	800321c <TIM_Base_SetConfig+0xf8>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a0f      	ldr	r2, [pc, #60]	; (8003254 <TIM_Base_SetConfig+0x130>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d103      	bne.n	8003224 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	691a      	ldr	r2, [r3, #16]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	615a      	str	r2, [r3, #20]
}
 800322a:	bf00      	nop
 800322c:	3714      	adds	r7, #20
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	40012c00 	.word	0x40012c00
 800323c:	40000400 	.word	0x40000400
 8003240:	40000800 	.word	0x40000800
 8003244:	40000c00 	.word	0x40000c00
 8003248:	40013400 	.word	0x40013400
 800324c:	40014000 	.word	0x40014000
 8003250:	40014400 	.word	0x40014400
 8003254:	40014800 	.word	0x40014800

08003258 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e040      	b.n	8003328 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d106      	bne.n	80032bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7fd fc20 	bl	8000afc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2224      	movs	r2, #36	; 0x24
 80032c0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0201 	bic.w	r2, r2, #1
 80032d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f82c 	bl	8003330 <UART_SetConfig>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e022      	b.n	8003328 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d002      	beq.n	80032f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 fad8 	bl	80038a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800330e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0201 	orr.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 fb5f 	bl	80039e4 <UART_CheckIdleState>
 8003326:	4603      	mov	r3, r0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003334:	b08a      	sub	sp, #40	; 0x28
 8003336:	af00      	add	r7, sp, #0
 8003338:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800333a:	2300      	movs	r3, #0
 800333c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	431a      	orrs	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	431a      	orrs	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	4313      	orrs	r3, r2
 8003356:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	4ba4      	ldr	r3, [pc, #656]	; (80035f0 <UART_SetConfig+0x2c0>)
 8003360:	4013      	ands	r3, r2
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	6812      	ldr	r2, [r2, #0]
 8003366:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003368:	430b      	orrs	r3, r1
 800336a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a99      	ldr	r2, [pc, #612]	; (80035f4 <UART_SetConfig+0x2c4>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d004      	beq.n	800339c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003398:	4313      	orrs	r3, r2
 800339a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ac:	430a      	orrs	r2, r1
 80033ae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a90      	ldr	r2, [pc, #576]	; (80035f8 <UART_SetConfig+0x2c8>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d126      	bne.n	8003408 <UART_SetConfig+0xd8>
 80033ba:	4b90      	ldr	r3, [pc, #576]	; (80035fc <UART_SetConfig+0x2cc>)
 80033bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c0:	f003 0303 	and.w	r3, r3, #3
 80033c4:	2b03      	cmp	r3, #3
 80033c6:	d81b      	bhi.n	8003400 <UART_SetConfig+0xd0>
 80033c8:	a201      	add	r2, pc, #4	; (adr r2, 80033d0 <UART_SetConfig+0xa0>)
 80033ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ce:	bf00      	nop
 80033d0:	080033e1 	.word	0x080033e1
 80033d4:	080033f1 	.word	0x080033f1
 80033d8:	080033e9 	.word	0x080033e9
 80033dc:	080033f9 	.word	0x080033f9
 80033e0:	2301      	movs	r3, #1
 80033e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033e6:	e116      	b.n	8003616 <UART_SetConfig+0x2e6>
 80033e8:	2302      	movs	r3, #2
 80033ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ee:	e112      	b.n	8003616 <UART_SetConfig+0x2e6>
 80033f0:	2304      	movs	r3, #4
 80033f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033f6:	e10e      	b.n	8003616 <UART_SetConfig+0x2e6>
 80033f8:	2308      	movs	r3, #8
 80033fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033fe:	e10a      	b.n	8003616 <UART_SetConfig+0x2e6>
 8003400:	2310      	movs	r3, #16
 8003402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003406:	e106      	b.n	8003616 <UART_SetConfig+0x2e6>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a7c      	ldr	r2, [pc, #496]	; (8003600 <UART_SetConfig+0x2d0>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d138      	bne.n	8003484 <UART_SetConfig+0x154>
 8003412:	4b7a      	ldr	r3, [pc, #488]	; (80035fc <UART_SetConfig+0x2cc>)
 8003414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003418:	f003 030c 	and.w	r3, r3, #12
 800341c:	2b0c      	cmp	r3, #12
 800341e:	d82d      	bhi.n	800347c <UART_SetConfig+0x14c>
 8003420:	a201      	add	r2, pc, #4	; (adr r2, 8003428 <UART_SetConfig+0xf8>)
 8003422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003426:	bf00      	nop
 8003428:	0800345d 	.word	0x0800345d
 800342c:	0800347d 	.word	0x0800347d
 8003430:	0800347d 	.word	0x0800347d
 8003434:	0800347d 	.word	0x0800347d
 8003438:	0800346d 	.word	0x0800346d
 800343c:	0800347d 	.word	0x0800347d
 8003440:	0800347d 	.word	0x0800347d
 8003444:	0800347d 	.word	0x0800347d
 8003448:	08003465 	.word	0x08003465
 800344c:	0800347d 	.word	0x0800347d
 8003450:	0800347d 	.word	0x0800347d
 8003454:	0800347d 	.word	0x0800347d
 8003458:	08003475 	.word	0x08003475
 800345c:	2300      	movs	r3, #0
 800345e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003462:	e0d8      	b.n	8003616 <UART_SetConfig+0x2e6>
 8003464:	2302      	movs	r3, #2
 8003466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800346a:	e0d4      	b.n	8003616 <UART_SetConfig+0x2e6>
 800346c:	2304      	movs	r3, #4
 800346e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003472:	e0d0      	b.n	8003616 <UART_SetConfig+0x2e6>
 8003474:	2308      	movs	r3, #8
 8003476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800347a:	e0cc      	b.n	8003616 <UART_SetConfig+0x2e6>
 800347c:	2310      	movs	r3, #16
 800347e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003482:	e0c8      	b.n	8003616 <UART_SetConfig+0x2e6>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a5e      	ldr	r2, [pc, #376]	; (8003604 <UART_SetConfig+0x2d4>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d125      	bne.n	80034da <UART_SetConfig+0x1aa>
 800348e:	4b5b      	ldr	r3, [pc, #364]	; (80035fc <UART_SetConfig+0x2cc>)
 8003490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003494:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003498:	2b30      	cmp	r3, #48	; 0x30
 800349a:	d016      	beq.n	80034ca <UART_SetConfig+0x19a>
 800349c:	2b30      	cmp	r3, #48	; 0x30
 800349e:	d818      	bhi.n	80034d2 <UART_SetConfig+0x1a2>
 80034a0:	2b20      	cmp	r3, #32
 80034a2:	d00a      	beq.n	80034ba <UART_SetConfig+0x18a>
 80034a4:	2b20      	cmp	r3, #32
 80034a6:	d814      	bhi.n	80034d2 <UART_SetConfig+0x1a2>
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d002      	beq.n	80034b2 <UART_SetConfig+0x182>
 80034ac:	2b10      	cmp	r3, #16
 80034ae:	d008      	beq.n	80034c2 <UART_SetConfig+0x192>
 80034b0:	e00f      	b.n	80034d2 <UART_SetConfig+0x1a2>
 80034b2:	2300      	movs	r3, #0
 80034b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034b8:	e0ad      	b.n	8003616 <UART_SetConfig+0x2e6>
 80034ba:	2302      	movs	r3, #2
 80034bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034c0:	e0a9      	b.n	8003616 <UART_SetConfig+0x2e6>
 80034c2:	2304      	movs	r3, #4
 80034c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034c8:	e0a5      	b.n	8003616 <UART_SetConfig+0x2e6>
 80034ca:	2308      	movs	r3, #8
 80034cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034d0:	e0a1      	b.n	8003616 <UART_SetConfig+0x2e6>
 80034d2:	2310      	movs	r3, #16
 80034d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034d8:	e09d      	b.n	8003616 <UART_SetConfig+0x2e6>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a4a      	ldr	r2, [pc, #296]	; (8003608 <UART_SetConfig+0x2d8>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d125      	bne.n	8003530 <UART_SetConfig+0x200>
 80034e4:	4b45      	ldr	r3, [pc, #276]	; (80035fc <UART_SetConfig+0x2cc>)
 80034e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80034ee:	2bc0      	cmp	r3, #192	; 0xc0
 80034f0:	d016      	beq.n	8003520 <UART_SetConfig+0x1f0>
 80034f2:	2bc0      	cmp	r3, #192	; 0xc0
 80034f4:	d818      	bhi.n	8003528 <UART_SetConfig+0x1f8>
 80034f6:	2b80      	cmp	r3, #128	; 0x80
 80034f8:	d00a      	beq.n	8003510 <UART_SetConfig+0x1e0>
 80034fa:	2b80      	cmp	r3, #128	; 0x80
 80034fc:	d814      	bhi.n	8003528 <UART_SetConfig+0x1f8>
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d002      	beq.n	8003508 <UART_SetConfig+0x1d8>
 8003502:	2b40      	cmp	r3, #64	; 0x40
 8003504:	d008      	beq.n	8003518 <UART_SetConfig+0x1e8>
 8003506:	e00f      	b.n	8003528 <UART_SetConfig+0x1f8>
 8003508:	2300      	movs	r3, #0
 800350a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800350e:	e082      	b.n	8003616 <UART_SetConfig+0x2e6>
 8003510:	2302      	movs	r3, #2
 8003512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003516:	e07e      	b.n	8003616 <UART_SetConfig+0x2e6>
 8003518:	2304      	movs	r3, #4
 800351a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800351e:	e07a      	b.n	8003616 <UART_SetConfig+0x2e6>
 8003520:	2308      	movs	r3, #8
 8003522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003526:	e076      	b.n	8003616 <UART_SetConfig+0x2e6>
 8003528:	2310      	movs	r3, #16
 800352a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800352e:	e072      	b.n	8003616 <UART_SetConfig+0x2e6>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a35      	ldr	r2, [pc, #212]	; (800360c <UART_SetConfig+0x2dc>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d12a      	bne.n	8003590 <UART_SetConfig+0x260>
 800353a:	4b30      	ldr	r3, [pc, #192]	; (80035fc <UART_SetConfig+0x2cc>)
 800353c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003540:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003544:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003548:	d01a      	beq.n	8003580 <UART_SetConfig+0x250>
 800354a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800354e:	d81b      	bhi.n	8003588 <UART_SetConfig+0x258>
 8003550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003554:	d00c      	beq.n	8003570 <UART_SetConfig+0x240>
 8003556:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800355a:	d815      	bhi.n	8003588 <UART_SetConfig+0x258>
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <UART_SetConfig+0x238>
 8003560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003564:	d008      	beq.n	8003578 <UART_SetConfig+0x248>
 8003566:	e00f      	b.n	8003588 <UART_SetConfig+0x258>
 8003568:	2300      	movs	r3, #0
 800356a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800356e:	e052      	b.n	8003616 <UART_SetConfig+0x2e6>
 8003570:	2302      	movs	r3, #2
 8003572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003576:	e04e      	b.n	8003616 <UART_SetConfig+0x2e6>
 8003578:	2304      	movs	r3, #4
 800357a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800357e:	e04a      	b.n	8003616 <UART_SetConfig+0x2e6>
 8003580:	2308      	movs	r3, #8
 8003582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003586:	e046      	b.n	8003616 <UART_SetConfig+0x2e6>
 8003588:	2310      	movs	r3, #16
 800358a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800358e:	e042      	b.n	8003616 <UART_SetConfig+0x2e6>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a17      	ldr	r2, [pc, #92]	; (80035f4 <UART_SetConfig+0x2c4>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d13a      	bne.n	8003610 <UART_SetConfig+0x2e0>
 800359a:	4b18      	ldr	r3, [pc, #96]	; (80035fc <UART_SetConfig+0x2cc>)
 800359c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035a8:	d01a      	beq.n	80035e0 <UART_SetConfig+0x2b0>
 80035aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035ae:	d81b      	bhi.n	80035e8 <UART_SetConfig+0x2b8>
 80035b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035b4:	d00c      	beq.n	80035d0 <UART_SetConfig+0x2a0>
 80035b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035ba:	d815      	bhi.n	80035e8 <UART_SetConfig+0x2b8>
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <UART_SetConfig+0x298>
 80035c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035c4:	d008      	beq.n	80035d8 <UART_SetConfig+0x2a8>
 80035c6:	e00f      	b.n	80035e8 <UART_SetConfig+0x2b8>
 80035c8:	2300      	movs	r3, #0
 80035ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ce:	e022      	b.n	8003616 <UART_SetConfig+0x2e6>
 80035d0:	2302      	movs	r3, #2
 80035d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035d6:	e01e      	b.n	8003616 <UART_SetConfig+0x2e6>
 80035d8:	2304      	movs	r3, #4
 80035da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035de:	e01a      	b.n	8003616 <UART_SetConfig+0x2e6>
 80035e0:	2308      	movs	r3, #8
 80035e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035e6:	e016      	b.n	8003616 <UART_SetConfig+0x2e6>
 80035e8:	2310      	movs	r3, #16
 80035ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ee:	e012      	b.n	8003616 <UART_SetConfig+0x2e6>
 80035f0:	efff69f3 	.word	0xefff69f3
 80035f4:	40008000 	.word	0x40008000
 80035f8:	40013800 	.word	0x40013800
 80035fc:	40021000 	.word	0x40021000
 8003600:	40004400 	.word	0x40004400
 8003604:	40004800 	.word	0x40004800
 8003608:	40004c00 	.word	0x40004c00
 800360c:	40005000 	.word	0x40005000
 8003610:	2310      	movs	r3, #16
 8003612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a9f      	ldr	r2, [pc, #636]	; (8003898 <UART_SetConfig+0x568>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d17a      	bne.n	8003716 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003620:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003624:	2b08      	cmp	r3, #8
 8003626:	d824      	bhi.n	8003672 <UART_SetConfig+0x342>
 8003628:	a201      	add	r2, pc, #4	; (adr r2, 8003630 <UART_SetConfig+0x300>)
 800362a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800362e:	bf00      	nop
 8003630:	08003655 	.word	0x08003655
 8003634:	08003673 	.word	0x08003673
 8003638:	0800365d 	.word	0x0800365d
 800363c:	08003673 	.word	0x08003673
 8003640:	08003663 	.word	0x08003663
 8003644:	08003673 	.word	0x08003673
 8003648:	08003673 	.word	0x08003673
 800364c:	08003673 	.word	0x08003673
 8003650:	0800366b 	.word	0x0800366b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003654:	f7fe fdc2 	bl	80021dc <HAL_RCC_GetPCLK1Freq>
 8003658:	61f8      	str	r0, [r7, #28]
        break;
 800365a:	e010      	b.n	800367e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800365c:	4b8f      	ldr	r3, [pc, #572]	; (800389c <UART_SetConfig+0x56c>)
 800365e:	61fb      	str	r3, [r7, #28]
        break;
 8003660:	e00d      	b.n	800367e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003662:	f7fe fd23 	bl	80020ac <HAL_RCC_GetSysClockFreq>
 8003666:	61f8      	str	r0, [r7, #28]
        break;
 8003668:	e009      	b.n	800367e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800366a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800366e:	61fb      	str	r3, [r7, #28]
        break;
 8003670:	e005      	b.n	800367e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003672:	2300      	movs	r3, #0
 8003674:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800367c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 80fb 	beq.w	800387c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	4613      	mov	r3, r2
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	4413      	add	r3, r2
 8003690:	69fa      	ldr	r2, [r7, #28]
 8003692:	429a      	cmp	r2, r3
 8003694:	d305      	bcc.n	80036a2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800369c:	69fa      	ldr	r2, [r7, #28]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d903      	bls.n	80036aa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80036a8:	e0e8      	b.n	800387c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	2200      	movs	r2, #0
 80036ae:	461c      	mov	r4, r3
 80036b0:	4615      	mov	r5, r2
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	022b      	lsls	r3, r5, #8
 80036bc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80036c0:	0222      	lsls	r2, r4, #8
 80036c2:	68f9      	ldr	r1, [r7, #12]
 80036c4:	6849      	ldr	r1, [r1, #4]
 80036c6:	0849      	lsrs	r1, r1, #1
 80036c8:	2000      	movs	r0, #0
 80036ca:	4688      	mov	r8, r1
 80036cc:	4681      	mov	r9, r0
 80036ce:	eb12 0a08 	adds.w	sl, r2, r8
 80036d2:	eb43 0b09 	adc.w	fp, r3, r9
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	603b      	str	r3, [r7, #0]
 80036de:	607a      	str	r2, [r7, #4]
 80036e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036e4:	4650      	mov	r0, sl
 80036e6:	4659      	mov	r1, fp
 80036e8:	f7fc fd72 	bl	80001d0 <__aeabi_uldivmod>
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	4613      	mov	r3, r2
 80036f2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036fa:	d308      	bcc.n	800370e <UART_SetConfig+0x3de>
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003702:	d204      	bcs.n	800370e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	60da      	str	r2, [r3, #12]
 800370c:	e0b6      	b.n	800387c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003714:	e0b2      	b.n	800387c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800371e:	d15e      	bne.n	80037de <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003720:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003724:	2b08      	cmp	r3, #8
 8003726:	d828      	bhi.n	800377a <UART_SetConfig+0x44a>
 8003728:	a201      	add	r2, pc, #4	; (adr r2, 8003730 <UART_SetConfig+0x400>)
 800372a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372e:	bf00      	nop
 8003730:	08003755 	.word	0x08003755
 8003734:	0800375d 	.word	0x0800375d
 8003738:	08003765 	.word	0x08003765
 800373c:	0800377b 	.word	0x0800377b
 8003740:	0800376b 	.word	0x0800376b
 8003744:	0800377b 	.word	0x0800377b
 8003748:	0800377b 	.word	0x0800377b
 800374c:	0800377b 	.word	0x0800377b
 8003750:	08003773 	.word	0x08003773
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003754:	f7fe fd42 	bl	80021dc <HAL_RCC_GetPCLK1Freq>
 8003758:	61f8      	str	r0, [r7, #28]
        break;
 800375a:	e014      	b.n	8003786 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800375c:	f7fe fd54 	bl	8002208 <HAL_RCC_GetPCLK2Freq>
 8003760:	61f8      	str	r0, [r7, #28]
        break;
 8003762:	e010      	b.n	8003786 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003764:	4b4d      	ldr	r3, [pc, #308]	; (800389c <UART_SetConfig+0x56c>)
 8003766:	61fb      	str	r3, [r7, #28]
        break;
 8003768:	e00d      	b.n	8003786 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800376a:	f7fe fc9f 	bl	80020ac <HAL_RCC_GetSysClockFreq>
 800376e:	61f8      	str	r0, [r7, #28]
        break;
 8003770:	e009      	b.n	8003786 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003776:	61fb      	str	r3, [r7, #28]
        break;
 8003778:	e005      	b.n	8003786 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800377a:	2300      	movs	r3, #0
 800377c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003784:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d077      	beq.n	800387c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	005a      	lsls	r2, r3, #1
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	085b      	lsrs	r3, r3, #1
 8003796:	441a      	add	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	2b0f      	cmp	r3, #15
 80037a6:	d916      	bls.n	80037d6 <UART_SetConfig+0x4a6>
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ae:	d212      	bcs.n	80037d6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	f023 030f 	bic.w	r3, r3, #15
 80037b8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	085b      	lsrs	r3, r3, #1
 80037be:	b29b      	uxth	r3, r3
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	8afb      	ldrh	r3, [r7, #22]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	8afa      	ldrh	r2, [r7, #22]
 80037d2:	60da      	str	r2, [r3, #12]
 80037d4:	e052      	b.n	800387c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80037dc:	e04e      	b.n	800387c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037e2:	2b08      	cmp	r3, #8
 80037e4:	d827      	bhi.n	8003836 <UART_SetConfig+0x506>
 80037e6:	a201      	add	r2, pc, #4	; (adr r2, 80037ec <UART_SetConfig+0x4bc>)
 80037e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ec:	08003811 	.word	0x08003811
 80037f0:	08003819 	.word	0x08003819
 80037f4:	08003821 	.word	0x08003821
 80037f8:	08003837 	.word	0x08003837
 80037fc:	08003827 	.word	0x08003827
 8003800:	08003837 	.word	0x08003837
 8003804:	08003837 	.word	0x08003837
 8003808:	08003837 	.word	0x08003837
 800380c:	0800382f 	.word	0x0800382f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003810:	f7fe fce4 	bl	80021dc <HAL_RCC_GetPCLK1Freq>
 8003814:	61f8      	str	r0, [r7, #28]
        break;
 8003816:	e014      	b.n	8003842 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003818:	f7fe fcf6 	bl	8002208 <HAL_RCC_GetPCLK2Freq>
 800381c:	61f8      	str	r0, [r7, #28]
        break;
 800381e:	e010      	b.n	8003842 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003820:	4b1e      	ldr	r3, [pc, #120]	; (800389c <UART_SetConfig+0x56c>)
 8003822:	61fb      	str	r3, [r7, #28]
        break;
 8003824:	e00d      	b.n	8003842 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003826:	f7fe fc41 	bl	80020ac <HAL_RCC_GetSysClockFreq>
 800382a:	61f8      	str	r0, [r7, #28]
        break;
 800382c:	e009      	b.n	8003842 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800382e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003832:	61fb      	str	r3, [r7, #28]
        break;
 8003834:	e005      	b.n	8003842 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003836:	2300      	movs	r3, #0
 8003838:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003840:	bf00      	nop
    }

    if (pclk != 0U)
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d019      	beq.n	800387c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	085a      	lsrs	r2, r3, #1
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	441a      	add	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	fbb2 f3f3 	udiv	r3, r2, r3
 800385a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	2b0f      	cmp	r3, #15
 8003860:	d909      	bls.n	8003876 <UART_SetConfig+0x546>
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003868:	d205      	bcs.n	8003876 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	b29a      	uxth	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	60da      	str	r2, [r3, #12]
 8003874:	e002      	b.n	800387c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003888:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800388c:	4618      	mov	r0, r3
 800388e:	3728      	adds	r7, #40	; 0x28
 8003890:	46bd      	mov	sp, r7
 8003892:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003896:	bf00      	nop
 8003898:	40008000 	.word	0x40008000
 800389c:	00f42400 	.word	0x00f42400

080038a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00a      	beq.n	80038ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00a      	beq.n	80038ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00a      	beq.n	800390e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	430a      	orrs	r2, r1
 800390c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	f003 0308 	and.w	r3, r3, #8
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00a      	beq.n	8003930 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	f003 0310 	and.w	r3, r3, #16
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00a      	beq.n	8003952 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003956:	f003 0320 	and.w	r3, r3, #32
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00a      	beq.n	8003974 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397c:	2b00      	cmp	r3, #0
 800397e:	d01a      	beq.n	80039b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800399e:	d10a      	bne.n	80039b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00a      	beq.n	80039d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	605a      	str	r2, [r3, #4]
  }
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af02      	add	r7, sp, #8
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039f4:	f7fd f9f6 	bl	8000de4 <HAL_GetTick>
 80039f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0308 	and.w	r3, r3, #8
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d10e      	bne.n	8003a26 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f82d 	bl	8003a76 <UART_WaitOnFlagUntilTimeout>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e023      	b.n	8003a6e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b04      	cmp	r3, #4
 8003a32:	d10e      	bne.n	8003a52 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f817 	bl	8003a76 <UART_WaitOnFlagUntilTimeout>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e00d      	b.n	8003a6e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2220      	movs	r2, #32
 8003a56:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b09c      	sub	sp, #112	; 0x70
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	60f8      	str	r0, [r7, #12]
 8003a7e:	60b9      	str	r1, [r7, #8]
 8003a80:	603b      	str	r3, [r7, #0]
 8003a82:	4613      	mov	r3, r2
 8003a84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a86:	e0a5      	b.n	8003bd4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8e:	f000 80a1 	beq.w	8003bd4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a92:	f7fd f9a7 	bl	8000de4 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d302      	bcc.n	8003aa8 <UART_WaitOnFlagUntilTimeout+0x32>
 8003aa2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d13e      	bne.n	8003b26 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ab0:	e853 3f00 	ldrex	r3, [r3]
 8003ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ab8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003abc:	667b      	str	r3, [r7, #100]	; 0x64
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ac6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ac8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003acc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ace:	e841 2300 	strex	r3, r2, [r1]
 8003ad2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1e6      	bne.n	8003aa8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	3308      	adds	r3, #8
 8003ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ae4:	e853 3f00 	ldrex	r3, [r3]
 8003ae8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aec:	f023 0301 	bic.w	r3, r3, #1
 8003af0:	663b      	str	r3, [r7, #96]	; 0x60
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	3308      	adds	r3, #8
 8003af8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003afa:	64ba      	str	r2, [r7, #72]	; 0x48
 8003afc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b02:	e841 2300 	strex	r3, r2, [r1]
 8003b06:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003b08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1e5      	bne.n	8003ada <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2220      	movs	r2, #32
 8003b12:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2220      	movs	r2, #32
 8003b18:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e067      	b.n	8003bf6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d04f      	beq.n	8003bd4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	69db      	ldr	r3, [r3, #28]
 8003b3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b42:	d147      	bne.n	8003bd4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b4c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b56:	e853 3f00 	ldrex	r3, [r3]
 8003b5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	461a      	mov	r2, r3
 8003b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b6c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b74:	e841 2300 	strex	r3, r2, [r1]
 8003b78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1e6      	bne.n	8003b4e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	3308      	adds	r3, #8
 8003b86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	e853 3f00 	ldrex	r3, [r3]
 8003b8e:	613b      	str	r3, [r7, #16]
   return(result);
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	f023 0301 	bic.w	r3, r3, #1
 8003b96:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	3308      	adds	r3, #8
 8003b9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003ba0:	623a      	str	r2, [r7, #32]
 8003ba2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba4:	69f9      	ldr	r1, [r7, #28]
 8003ba6:	6a3a      	ldr	r2, [r7, #32]
 8003ba8:	e841 2300 	strex	r3, r2, [r1]
 8003bac:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1e5      	bne.n	8003b80 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e010      	b.n	8003bf6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	69da      	ldr	r2, [r3, #28]
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	bf0c      	ite	eq
 8003be4:	2301      	moveq	r3, #1
 8003be6:	2300      	movne	r3, #0
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	461a      	mov	r2, r3
 8003bec:	79fb      	ldrb	r3, [r7, #7]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	f43f af4a 	beq.w	8003a88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3770      	adds	r7, #112	; 0x70
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b085      	sub	sp, #20
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	4603      	mov	r3, r0
 8003c06:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003c0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c10:	2b84      	cmp	r3, #132	; 0x84
 8003c12:	d005      	beq.n	8003c20 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003c14:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	3303      	adds	r3, #3
 8003c1e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003c20:	68fb      	ldr	r3, [r7, #12]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003c32:	f000 fd07 	bl	8004644 <vTaskStartScheduler>
  
  return osOK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c3e:	b089      	sub	sp, #36	; 0x24
 8003c40:	af04      	add	r7, sp, #16
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d020      	beq.n	8003c90 <osThreadCreate+0x54>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d01c      	beq.n	8003c90 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685c      	ldr	r4, [r3, #4]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681d      	ldr	r5, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691e      	ldr	r6, [r3, #16]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff ffc8 	bl	8003bfe <makeFreeRtosPriority>
 8003c6e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c78:	9202      	str	r2, [sp, #8]
 8003c7a:	9301      	str	r3, [sp, #4]
 8003c7c:	9100      	str	r1, [sp, #0]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	4632      	mov	r2, r6
 8003c82:	4629      	mov	r1, r5
 8003c84:	4620      	mov	r0, r4
 8003c86:	f000 f8ed 	bl	8003e64 <xTaskCreateStatic>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	60fb      	str	r3, [r7, #12]
 8003c8e:	e01c      	b.n	8003cca <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685c      	ldr	r4, [r3, #4]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003c9c:	b29e      	uxth	r6, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7ff ffaa 	bl	8003bfe <makeFreeRtosPriority>
 8003caa:	4602      	mov	r2, r0
 8003cac:	f107 030c 	add.w	r3, r7, #12
 8003cb0:	9301      	str	r3, [sp, #4]
 8003cb2:	9200      	str	r2, [sp, #0]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	4632      	mov	r2, r6
 8003cb8:	4629      	mov	r1, r5
 8003cba:	4620      	mov	r0, r4
 8003cbc:	f000 f92f 	bl	8003f1e <xTaskCreate>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d001      	beq.n	8003cca <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	e000      	b.n	8003ccc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003cca:	68fb      	ldr	r3, [r7, #12]
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3714      	adds	r7, #20
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003cd4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <osDelay+0x16>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	e000      	b.n	8003cec <osDelay+0x18>
 8003cea:	2301      	movs	r3, #1
 8003cec:	4618      	mov	r0, r3
 8003cee:	f000 fae1 	bl	80042b4 <vTaskDelay>
  
  return osOK;
 8003cf2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f103 0208 	add.w	r2, r3, #8
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f04f 32ff 	mov.w	r2, #4294967295
 8003d14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f103 0208 	add.w	r2, r3, #8
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f103 0208 	add.w	r2, r3, #8
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d4a:	bf00      	nop
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr

08003d56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d56:	b480      	push	{r7}
 8003d58:	b085      	sub	sp, #20
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
 8003d5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	689a      	ldr	r2, [r3, #8]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	601a      	str	r2, [r3, #0]
}
 8003d92:	bf00      	nop
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b085      	sub	sp, #20
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
 8003da6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db4:	d103      	bne.n	8003dbe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	e00c      	b.n	8003dd8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	3308      	adds	r3, #8
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	e002      	b.n	8003dcc <vListInsert+0x2e>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d2f6      	bcs.n	8003dc6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	601a      	str	r2, [r3, #0]
}
 8003e04:	bf00      	nop
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6892      	ldr	r2, [r2, #8]
 8003e26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6852      	ldr	r2, [r2, #4]
 8003e30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d103      	bne.n	8003e44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	1e5a      	subs	r2, r3, #1
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b08e      	sub	sp, #56	; 0x38
 8003e68:	af04      	add	r7, sp, #16
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
 8003e70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10a      	bne.n	8003e8e <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7c:	f383 8811 	msr	BASEPRI, r3
 8003e80:	f3bf 8f6f 	isb	sy
 8003e84:	f3bf 8f4f 	dsb	sy
 8003e88:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003e8a:	bf00      	nop
 8003e8c:	e7fe      	b.n	8003e8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10a      	bne.n	8003eaa <xTaskCreateStatic+0x46>
	__asm volatile
 8003e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e98:	f383 8811 	msr	BASEPRI, r3
 8003e9c:	f3bf 8f6f 	isb	sy
 8003ea0:	f3bf 8f4f 	dsb	sy
 8003ea4:	61fb      	str	r3, [r7, #28]
}
 8003ea6:	bf00      	nop
 8003ea8:	e7fe      	b.n	8003ea8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003eaa:	23b4      	movs	r3, #180	; 0xb4
 8003eac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	2bb4      	cmp	r3, #180	; 0xb4
 8003eb2:	d00a      	beq.n	8003eca <xTaskCreateStatic+0x66>
	__asm volatile
 8003eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	61bb      	str	r3, [r7, #24]
}
 8003ec6:	bf00      	nop
 8003ec8:	e7fe      	b.n	8003ec8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003eca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d01e      	beq.n	8003f10 <xTaskCreateStatic+0xac>
 8003ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d01b      	beq.n	8003f10 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eda:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ee0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee4:	2202      	movs	r2, #2
 8003ee6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003eea:	2300      	movs	r3, #0
 8003eec:	9303      	str	r3, [sp, #12]
 8003eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef0:	9302      	str	r3, [sp, #8]
 8003ef2:	f107 0314 	add.w	r3, r7, #20
 8003ef6:	9301      	str	r3, [sp, #4]
 8003ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	68b9      	ldr	r1, [r7, #8]
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 f850 	bl	8003fa8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f0a:	f000 f8eb 	bl	80040e4 <prvAddNewTaskToReadyList>
 8003f0e:	e001      	b.n	8003f14 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003f10:	2300      	movs	r3, #0
 8003f12:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003f14:	697b      	ldr	r3, [r7, #20]
	}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3728      	adds	r7, #40	; 0x28
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b08c      	sub	sp, #48	; 0x30
 8003f22:	af04      	add	r7, sp, #16
 8003f24:	60f8      	str	r0, [r7, #12]
 8003f26:	60b9      	str	r1, [r7, #8]
 8003f28:	603b      	str	r3, [r7, #0]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003f2e:	88fb      	ldrh	r3, [r7, #6]
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4618      	mov	r0, r3
 8003f34:	f001 f950 	bl	80051d8 <pvPortMalloc>
 8003f38:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00e      	beq.n	8003f5e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003f40:	20b4      	movs	r0, #180	; 0xb4
 8003f42:	f001 f949 	bl	80051d8 <pvPortMalloc>
 8003f46:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	631a      	str	r2, [r3, #48]	; 0x30
 8003f54:	e005      	b.n	8003f62 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003f56:	6978      	ldr	r0, [r7, #20]
 8003f58:	f001 fa0a 	bl	8005370 <vPortFree>
 8003f5c:	e001      	b.n	8003f62 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d017      	beq.n	8003f98 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003f70:	88fa      	ldrh	r2, [r7, #6]
 8003f72:	2300      	movs	r3, #0
 8003f74:	9303      	str	r3, [sp, #12]
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	9302      	str	r3, [sp, #8]
 8003f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f7c:	9301      	str	r3, [sp, #4]
 8003f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	68b9      	ldr	r1, [r7, #8]
 8003f86:	68f8      	ldr	r0, [r7, #12]
 8003f88:	f000 f80e 	bl	8003fa8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f8c:	69f8      	ldr	r0, [r7, #28]
 8003f8e:	f000 f8a9 	bl	80040e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f92:	2301      	movs	r3, #1
 8003f94:	61bb      	str	r3, [r7, #24]
 8003f96:	e002      	b.n	8003f9e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f98:	f04f 33ff 	mov.w	r3, #4294967295
 8003f9c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f9e:	69bb      	ldr	r3, [r7, #24]
	}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3720      	adds	r7, #32
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b088      	sub	sp, #32
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
 8003fb4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	f023 0307 	bic.w	r3, r3, #7
 8003fce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00a      	beq.n	8003ff0 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fde:	f383 8811 	msr	BASEPRI, r3
 8003fe2:	f3bf 8f6f 	isb	sy
 8003fe6:	f3bf 8f4f 	dsb	sy
 8003fea:	617b      	str	r3, [r7, #20]
}
 8003fec:	bf00      	nop
 8003fee:	e7fe      	b.n	8003fee <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d01f      	beq.n	8004036 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	61fb      	str	r3, [r7, #28]
 8003ffa:	e012      	b.n	8004022 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	4413      	add	r3, r2
 8004002:	7819      	ldrb	r1, [r3, #0]
 8004004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	4413      	add	r3, r2
 800400a:	3334      	adds	r3, #52	; 0x34
 800400c:	460a      	mov	r2, r1
 800400e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	4413      	add	r3, r2
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d006      	beq.n	800402a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	3301      	adds	r3, #1
 8004020:	61fb      	str	r3, [r7, #28]
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	2b0f      	cmp	r3, #15
 8004026:	d9e9      	bls.n	8003ffc <prvInitialiseNewTask+0x54>
 8004028:	e000      	b.n	800402c <prvInitialiseNewTask+0x84>
			{
				break;
 800402a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800402c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402e:	2200      	movs	r2, #0
 8004030:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004034:	e003      	b.n	800403e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800403e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004040:	2b06      	cmp	r3, #6
 8004042:	d901      	bls.n	8004048 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004044:	2306      	movs	r3, #6
 8004046:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800404a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800404c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800404e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004050:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004052:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004056:	2200      	movs	r2, #0
 8004058:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800405a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405c:	3304      	adds	r3, #4
 800405e:	4618      	mov	r0, r3
 8004060:	f7ff fe6c 	bl	8003d3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004066:	3318      	adds	r3, #24
 8004068:	4618      	mov	r0, r3
 800406a:	f7ff fe67 	bl	8003d3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800406e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004072:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004076:	f1c3 0207 	rsb	r2, r3, #7
 800407a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800407e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004082:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004086:	2200      	movs	r2, #0
 8004088:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800408c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408e:	2200      	movs	r2, #0
 8004090:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004096:	334c      	adds	r3, #76	; 0x4c
 8004098:	2260      	movs	r2, #96	; 0x60
 800409a:	2100      	movs	r1, #0
 800409c:	4618      	mov	r0, r3
 800409e:	f001 faab 	bl	80055f8 <memset>
 80040a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a4:	4a0c      	ldr	r2, [pc, #48]	; (80040d8 <prvInitialiseNewTask+0x130>)
 80040a6:	651a      	str	r2, [r3, #80]	; 0x50
 80040a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040aa:	4a0c      	ldr	r2, [pc, #48]	; (80040dc <prvInitialiseNewTask+0x134>)
 80040ac:	655a      	str	r2, [r3, #84]	; 0x54
 80040ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b0:	4a0b      	ldr	r2, [pc, #44]	; (80040e0 <prvInitialiseNewTask+0x138>)
 80040b2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	68f9      	ldr	r1, [r7, #12]
 80040b8:	69b8      	ldr	r0, [r7, #24]
 80040ba:	f000 fe41 	bl	8004d40 <pxPortInitialiseStack>
 80040be:	4602      	mov	r2, r0
 80040c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80040c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d002      	beq.n	80040d0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80040ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040ce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040d0:	bf00      	nop
 80040d2:	3720      	adds	r7, #32
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	080058b0 	.word	0x080058b0
 80040dc:	080058d0 	.word	0x080058d0
 80040e0:	08005890 	.word	0x08005890

080040e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80040ec:	f000 ff52 	bl	8004f94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80040f0:	4b2a      	ldr	r3, [pc, #168]	; (800419c <prvAddNewTaskToReadyList+0xb8>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	3301      	adds	r3, #1
 80040f6:	4a29      	ldr	r2, [pc, #164]	; (800419c <prvAddNewTaskToReadyList+0xb8>)
 80040f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80040fa:	4b29      	ldr	r3, [pc, #164]	; (80041a0 <prvAddNewTaskToReadyList+0xbc>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d109      	bne.n	8004116 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004102:	4a27      	ldr	r2, [pc, #156]	; (80041a0 <prvAddNewTaskToReadyList+0xbc>)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004108:	4b24      	ldr	r3, [pc, #144]	; (800419c <prvAddNewTaskToReadyList+0xb8>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d110      	bne.n	8004132 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004110:	f000 fcee 	bl	8004af0 <prvInitialiseTaskLists>
 8004114:	e00d      	b.n	8004132 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004116:	4b23      	ldr	r3, [pc, #140]	; (80041a4 <prvAddNewTaskToReadyList+0xc0>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d109      	bne.n	8004132 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800411e:	4b20      	ldr	r3, [pc, #128]	; (80041a0 <prvAddNewTaskToReadyList+0xbc>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004128:	429a      	cmp	r2, r3
 800412a:	d802      	bhi.n	8004132 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800412c:	4a1c      	ldr	r2, [pc, #112]	; (80041a0 <prvAddNewTaskToReadyList+0xbc>)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004132:	4b1d      	ldr	r3, [pc, #116]	; (80041a8 <prvAddNewTaskToReadyList+0xc4>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	3301      	adds	r3, #1
 8004138:	4a1b      	ldr	r2, [pc, #108]	; (80041a8 <prvAddNewTaskToReadyList+0xc4>)
 800413a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004140:	2201      	movs	r2, #1
 8004142:	409a      	lsls	r2, r3
 8004144:	4b19      	ldr	r3, [pc, #100]	; (80041ac <prvAddNewTaskToReadyList+0xc8>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4313      	orrs	r3, r2
 800414a:	4a18      	ldr	r2, [pc, #96]	; (80041ac <prvAddNewTaskToReadyList+0xc8>)
 800414c:	6013      	str	r3, [r2, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004152:	4613      	mov	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4413      	add	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4a15      	ldr	r2, [pc, #84]	; (80041b0 <prvAddNewTaskToReadyList+0xcc>)
 800415c:	441a      	add	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	3304      	adds	r3, #4
 8004162:	4619      	mov	r1, r3
 8004164:	4610      	mov	r0, r2
 8004166:	f7ff fdf6 	bl	8003d56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800416a:	f000 ff43 	bl	8004ff4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800416e:	4b0d      	ldr	r3, [pc, #52]	; (80041a4 <prvAddNewTaskToReadyList+0xc0>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00e      	beq.n	8004194 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004176:	4b0a      	ldr	r3, [pc, #40]	; (80041a0 <prvAddNewTaskToReadyList+0xbc>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004180:	429a      	cmp	r2, r3
 8004182:	d207      	bcs.n	8004194 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004184:	4b0b      	ldr	r3, [pc, #44]	; (80041b4 <prvAddNewTaskToReadyList+0xd0>)
 8004186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800418a:	601a      	str	r2, [r3, #0]
 800418c:	f3bf 8f4f 	dsb	sy
 8004190:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004194:	bf00      	nop
 8004196:	3708      	adds	r7, #8
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	20000588 	.word	0x20000588
 80041a0:	20000488 	.word	0x20000488
 80041a4:	20000594 	.word	0x20000594
 80041a8:	200005a4 	.word	0x200005a4
 80041ac:	20000590 	.word	0x20000590
 80041b0:	2000048c 	.word	0x2000048c
 80041b4:	e000ed04 	.word	0xe000ed04

080041b8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b08a      	sub	sp, #40	; 0x28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80041c2:	2300      	movs	r3, #0
 80041c4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10a      	bne.n	80041e2 <vTaskDelayUntil+0x2a>
	__asm volatile
 80041cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d0:	f383 8811 	msr	BASEPRI, r3
 80041d4:	f3bf 8f6f 	isb	sy
 80041d8:	f3bf 8f4f 	dsb	sy
 80041dc:	617b      	str	r3, [r7, #20]
}
 80041de:	bf00      	nop
 80041e0:	e7fe      	b.n	80041e0 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10a      	bne.n	80041fe <vTaskDelayUntil+0x46>
	__asm volatile
 80041e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ec:	f383 8811 	msr	BASEPRI, r3
 80041f0:	f3bf 8f6f 	isb	sy
 80041f4:	f3bf 8f4f 	dsb	sy
 80041f8:	613b      	str	r3, [r7, #16]
}
 80041fa:	bf00      	nop
 80041fc:	e7fe      	b.n	80041fc <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80041fe:	4b2a      	ldr	r3, [pc, #168]	; (80042a8 <vTaskDelayUntil+0xf0>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00a      	beq.n	800421c <vTaskDelayUntil+0x64>
	__asm volatile
 8004206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420a:	f383 8811 	msr	BASEPRI, r3
 800420e:	f3bf 8f6f 	isb	sy
 8004212:	f3bf 8f4f 	dsb	sy
 8004216:	60fb      	str	r3, [r7, #12]
}
 8004218:	bf00      	nop
 800421a:	e7fe      	b.n	800421a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800421c:	f000 fa7c 	bl	8004718 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004220:	4b22      	ldr	r3, [pc, #136]	; (80042ac <vTaskDelayUntil+0xf4>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	4413      	add	r3, r2
 800422e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6a3a      	ldr	r2, [r7, #32]
 8004236:	429a      	cmp	r2, r3
 8004238:	d20b      	bcs.n	8004252 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	69fa      	ldr	r2, [r7, #28]
 8004240:	429a      	cmp	r2, r3
 8004242:	d211      	bcs.n	8004268 <vTaskDelayUntil+0xb0>
 8004244:	69fa      	ldr	r2, [r7, #28]
 8004246:	6a3b      	ldr	r3, [r7, #32]
 8004248:	429a      	cmp	r2, r3
 800424a:	d90d      	bls.n	8004268 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800424c:	2301      	movs	r3, #1
 800424e:	627b      	str	r3, [r7, #36]	; 0x24
 8004250:	e00a      	b.n	8004268 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	69fa      	ldr	r2, [r7, #28]
 8004258:	429a      	cmp	r2, r3
 800425a:	d303      	bcc.n	8004264 <vTaskDelayUntil+0xac>
 800425c:	69fa      	ldr	r2, [r7, #28]
 800425e:	6a3b      	ldr	r3, [r7, #32]
 8004260:	429a      	cmp	r2, r3
 8004262:	d901      	bls.n	8004268 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8004264:	2301      	movs	r3, #1
 8004266:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	69fa      	ldr	r2, [r7, #28]
 800426c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004270:	2b00      	cmp	r3, #0
 8004272:	d006      	beq.n	8004282 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8004274:	69fa      	ldr	r2, [r7, #28]
 8004276:	6a3b      	ldr	r3, [r7, #32]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2100      	movs	r1, #0
 800427c:	4618      	mov	r0, r3
 800427e:	f000 fcf9 	bl	8004c74 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8004282:	f000 fa57 	bl	8004734 <xTaskResumeAll>
 8004286:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d107      	bne.n	800429e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800428e:	4b08      	ldr	r3, [pc, #32]	; (80042b0 <vTaskDelayUntil+0xf8>)
 8004290:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	f3bf 8f4f 	dsb	sy
 800429a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800429e:	bf00      	nop
 80042a0:	3728      	adds	r7, #40	; 0x28
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	200005b0 	.word	0x200005b0
 80042ac:	2000058c 	.word	0x2000058c
 80042b0:	e000ed04 	.word	0xe000ed04

080042b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80042bc:	2300      	movs	r3, #0
 80042be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d017      	beq.n	80042f6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80042c6:	4b13      	ldr	r3, [pc, #76]	; (8004314 <vTaskDelay+0x60>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00a      	beq.n	80042e4 <vTaskDelay+0x30>
	__asm volatile
 80042ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	60bb      	str	r3, [r7, #8]
}
 80042e0:	bf00      	nop
 80042e2:	e7fe      	b.n	80042e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80042e4:	f000 fa18 	bl	8004718 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80042e8:	2100      	movs	r1, #0
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 fcc2 	bl	8004c74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80042f0:	f000 fa20 	bl	8004734 <xTaskResumeAll>
 80042f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d107      	bne.n	800430c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80042fc:	4b06      	ldr	r3, [pc, #24]	; (8004318 <vTaskDelay+0x64>)
 80042fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	f3bf 8f4f 	dsb	sy
 8004308:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800430c:	bf00      	nop
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	200005b0 	.word	0x200005b0
 8004318:	e000ed04 	.word	0xe000ed04

0800431c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004324:	f000 fe36 	bl	8004f94 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d102      	bne.n	8004334 <vTaskSuspend+0x18>
 800432e:	4b3c      	ldr	r3, [pc, #240]	; (8004420 <vTaskSuspend+0x104>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	e000      	b.n	8004336 <vTaskSuspend+0x1a>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	3304      	adds	r3, #4
 800433c:	4618      	mov	r0, r3
 800433e:	f7ff fd67 	bl	8003e10 <uxListRemove>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d115      	bne.n	8004374 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800434c:	4935      	ldr	r1, [pc, #212]	; (8004424 <vTaskSuspend+0x108>)
 800434e:	4613      	mov	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4413      	add	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	440b      	add	r3, r1
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10a      	bne.n	8004374 <vTaskSuspend+0x58>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004362:	2201      	movs	r2, #1
 8004364:	fa02 f303 	lsl.w	r3, r2, r3
 8004368:	43da      	mvns	r2, r3
 800436a:	4b2f      	ldr	r3, [pc, #188]	; (8004428 <vTaskSuspend+0x10c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4013      	ands	r3, r2
 8004370:	4a2d      	ldr	r2, [pc, #180]	; (8004428 <vTaskSuspend+0x10c>)
 8004372:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004378:	2b00      	cmp	r3, #0
 800437a:	d004      	beq.n	8004386 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	3318      	adds	r3, #24
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff fd45 	bl	8003e10 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	3304      	adds	r3, #4
 800438a:	4619      	mov	r1, r3
 800438c:	4827      	ldr	r0, [pc, #156]	; (800442c <vTaskSuspend+0x110>)
 800438e:	f7ff fce2 	bl	8003d56 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b01      	cmp	r3, #1
 800439c:	d103      	bne.n	80043a6 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80043a6:	f000 fe25 	bl	8004ff4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80043aa:	4b21      	ldr	r3, [pc, #132]	; (8004430 <vTaskSuspend+0x114>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d005      	beq.n	80043be <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80043b2:	f000 fdef 	bl	8004f94 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80043b6:	f000 fc3d 	bl	8004c34 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80043ba:	f000 fe1b 	bl	8004ff4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80043be:	4b18      	ldr	r3, [pc, #96]	; (8004420 <vTaskSuspend+0x104>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d127      	bne.n	8004418 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 80043c8:	4b19      	ldr	r3, [pc, #100]	; (8004430 <vTaskSuspend+0x114>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d017      	beq.n	8004400 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80043d0:	4b18      	ldr	r3, [pc, #96]	; (8004434 <vTaskSuspend+0x118>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00a      	beq.n	80043ee <vTaskSuspend+0xd2>
	__asm volatile
 80043d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043dc:	f383 8811 	msr	BASEPRI, r3
 80043e0:	f3bf 8f6f 	isb	sy
 80043e4:	f3bf 8f4f 	dsb	sy
 80043e8:	60bb      	str	r3, [r7, #8]
}
 80043ea:	bf00      	nop
 80043ec:	e7fe      	b.n	80043ec <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 80043ee:	4b12      	ldr	r3, [pc, #72]	; (8004438 <vTaskSuspend+0x11c>)
 80043f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	f3bf 8f4f 	dsb	sy
 80043fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80043fe:	e00b      	b.n	8004418 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8004400:	4b0a      	ldr	r3, [pc, #40]	; (800442c <vTaskSuspend+0x110>)
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	4b0d      	ldr	r3, [pc, #52]	; (800443c <vTaskSuspend+0x120>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	429a      	cmp	r2, r3
 800440a:	d103      	bne.n	8004414 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 800440c:	4b04      	ldr	r3, [pc, #16]	; (8004420 <vTaskSuspend+0x104>)
 800440e:	2200      	movs	r2, #0
 8004410:	601a      	str	r2, [r3, #0]
	}
 8004412:	e001      	b.n	8004418 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8004414:	f000 faf2 	bl	80049fc <vTaskSwitchContext>
	}
 8004418:	bf00      	nop
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	20000488 	.word	0x20000488
 8004424:	2000048c 	.word	0x2000048c
 8004428:	20000590 	.word	0x20000590
 800442c:	20000574 	.word	0x20000574
 8004430:	20000594 	.word	0x20000594
 8004434:	200005b0 	.word	0x200005b0
 8004438:	e000ed04 	.word	0xe000ed04
 800443c:	20000588 	.word	0x20000588

08004440 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8004440:	b480      	push	{r7}
 8004442:	b087      	sub	sp, #28
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8004448:	2300      	movs	r3, #0
 800444a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10a      	bne.n	800446c <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8004456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445a:	f383 8811 	msr	BASEPRI, r3
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	f3bf 8f4f 	dsb	sy
 8004466:	60fb      	str	r3, [r7, #12]
}
 8004468:	bf00      	nop
 800446a:	e7fe      	b.n	800446a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	4a0a      	ldr	r2, [pc, #40]	; (800449c <prvTaskIsTaskSuspended+0x5c>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d10a      	bne.n	800448c <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447a:	4a09      	ldr	r2, [pc, #36]	; (80044a0 <prvTaskIsTaskSuspended+0x60>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d005      	beq.n	800448c <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004484:	2b00      	cmp	r3, #0
 8004486:	d101      	bne.n	800448c <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8004488:	2301      	movs	r3, #1
 800448a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800448c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800448e:	4618      	mov	r0, r3
 8004490:	371c      	adds	r7, #28
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	20000574 	.word	0x20000574
 80044a0:	20000548 	.word	0x20000548

080044a4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10a      	bne.n	80044cc <vTaskResume+0x28>
	__asm volatile
 80044b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ba:	f383 8811 	msr	BASEPRI, r3
 80044be:	f3bf 8f6f 	isb	sy
 80044c2:	f3bf 8f4f 	dsb	sy
 80044c6:	60bb      	str	r3, [r7, #8]
}
 80044c8:	bf00      	nop
 80044ca:	e7fe      	b.n	80044ca <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80044cc:	4b20      	ldr	r3, [pc, #128]	; (8004550 <vTaskResume+0xac>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d037      	beq.n	8004546 <vTaskResume+0xa2>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d034      	beq.n	8004546 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 80044dc:	f000 fd5a 	bl	8004f94 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f7ff ffad 	bl	8004440 <prvTaskIsTaskSuspended>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d02a      	beq.n	8004542 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	3304      	adds	r3, #4
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff fc8d 	bl	8003e10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fa:	2201      	movs	r2, #1
 80044fc:	409a      	lsls	r2, r3
 80044fe:	4b15      	ldr	r3, [pc, #84]	; (8004554 <vTaskResume+0xb0>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4313      	orrs	r3, r2
 8004504:	4a13      	ldr	r2, [pc, #76]	; (8004554 <vTaskResume+0xb0>)
 8004506:	6013      	str	r3, [r2, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800450c:	4613      	mov	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4a10      	ldr	r2, [pc, #64]	; (8004558 <vTaskResume+0xb4>)
 8004516:	441a      	add	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	3304      	adds	r3, #4
 800451c:	4619      	mov	r1, r3
 800451e:	4610      	mov	r0, r2
 8004520:	f7ff fc19 	bl	8003d56 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004528:	4b09      	ldr	r3, [pc, #36]	; (8004550 <vTaskResume+0xac>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452e:	429a      	cmp	r2, r3
 8004530:	d307      	bcc.n	8004542 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8004532:	4b0a      	ldr	r3, [pc, #40]	; (800455c <vTaskResume+0xb8>)
 8004534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004538:	601a      	str	r2, [r3, #0]
 800453a:	f3bf 8f4f 	dsb	sy
 800453e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8004542:	f000 fd57 	bl	8004ff4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004546:	bf00      	nop
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	20000488 	.word	0x20000488
 8004554:	20000590 	.word	0x20000590
 8004558:	2000048c 	.word	0x2000048c
 800455c:	e000ed04 	.word	0xe000ed04

08004560 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8004560:	b580      	push	{r7, lr}
 8004562:	b08a      	sub	sp, #40	; 0x28
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8004568:	2300      	movs	r3, #0
 800456a:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10a      	bne.n	800458c <xTaskResumeFromISR+0x2c>
	__asm volatile
 8004576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457a:	f383 8811 	msr	BASEPRI, r3
 800457e:	f3bf 8f6f 	isb	sy
 8004582:	f3bf 8f4f 	dsb	sy
 8004586:	61bb      	str	r3, [r7, #24]
}
 8004588:	bf00      	nop
 800458a:	e7fe      	b.n	800458a <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800458c:	f000 fde4 	bl	8005158 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004590:	f3ef 8211 	mrs	r2, BASEPRI
 8004594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004598:	f383 8811 	msr	BASEPRI, r3
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	617a      	str	r2, [r7, #20]
 80045a6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80045a8:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80045aa:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80045ac:	6a38      	ldr	r0, [r7, #32]
 80045ae:	f7ff ff47 	bl	8004440 <prvTaskIsTaskSuspended>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d02f      	beq.n	8004618 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045b8:	4b1d      	ldr	r3, [pc, #116]	; (8004630 <xTaskResumeFromISR+0xd0>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d125      	bne.n	800460c <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c4:	4b1b      	ldr	r3, [pc, #108]	; (8004634 <xTaskResumeFromISR+0xd4>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d301      	bcc.n	80045d2 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 80045ce:	2301      	movs	r3, #1
 80045d0:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	3304      	adds	r3, #4
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7ff fc1a 	bl	8003e10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80045dc:	6a3b      	ldr	r3, [r7, #32]
 80045de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e0:	2201      	movs	r2, #1
 80045e2:	409a      	lsls	r2, r3
 80045e4:	4b14      	ldr	r3, [pc, #80]	; (8004638 <xTaskResumeFromISR+0xd8>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	4a13      	ldr	r2, [pc, #76]	; (8004638 <xTaskResumeFromISR+0xd8>)
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f2:	4613      	mov	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4a10      	ldr	r2, [pc, #64]	; (800463c <xTaskResumeFromISR+0xdc>)
 80045fc:	441a      	add	r2, r3
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	3304      	adds	r3, #4
 8004602:	4619      	mov	r1, r3
 8004604:	4610      	mov	r0, r2
 8004606:	f7ff fba6 	bl	8003d56 <vListInsertEnd>
 800460a:	e005      	b.n	8004618 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	3318      	adds	r3, #24
 8004610:	4619      	mov	r1, r3
 8004612:	480b      	ldr	r0, [pc, #44]	; (8004640 <xTaskResumeFromISR+0xe0>)
 8004614:	f7ff fb9f 	bl	8003d56 <vListInsertEnd>
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004622:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8004624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8004626:	4618      	mov	r0, r3
 8004628:	3728      	adds	r7, #40	; 0x28
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	200005b0 	.word	0x200005b0
 8004634:	20000488 	.word	0x20000488
 8004638:	20000590 	.word	0x20000590
 800463c:	2000048c 	.word	0x2000048c
 8004640:	20000548 	.word	0x20000548

08004644 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b08a      	sub	sp, #40	; 0x28
 8004648:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800464a:	2300      	movs	r3, #0
 800464c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800464e:	2300      	movs	r3, #0
 8004650:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004652:	463a      	mov	r2, r7
 8004654:	1d39      	adds	r1, r7, #4
 8004656:	f107 0308 	add.w	r3, r7, #8
 800465a:	4618      	mov	r0, r3
 800465c:	f7fb ff3a 	bl	80004d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004660:	6839      	ldr	r1, [r7, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	9202      	str	r2, [sp, #8]
 8004668:	9301      	str	r3, [sp, #4]
 800466a:	2300      	movs	r3, #0
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	2300      	movs	r3, #0
 8004670:	460a      	mov	r2, r1
 8004672:	4921      	ldr	r1, [pc, #132]	; (80046f8 <vTaskStartScheduler+0xb4>)
 8004674:	4821      	ldr	r0, [pc, #132]	; (80046fc <vTaskStartScheduler+0xb8>)
 8004676:	f7ff fbf5 	bl	8003e64 <xTaskCreateStatic>
 800467a:	4603      	mov	r3, r0
 800467c:	4a20      	ldr	r2, [pc, #128]	; (8004700 <vTaskStartScheduler+0xbc>)
 800467e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004680:	4b1f      	ldr	r3, [pc, #124]	; (8004700 <vTaskStartScheduler+0xbc>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d002      	beq.n	800468e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004688:	2301      	movs	r3, #1
 800468a:	617b      	str	r3, [r7, #20]
 800468c:	e001      	b.n	8004692 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800468e:	2300      	movs	r3, #0
 8004690:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d11b      	bne.n	80046d0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469c:	f383 8811 	msr	BASEPRI, r3
 80046a0:	f3bf 8f6f 	isb	sy
 80046a4:	f3bf 8f4f 	dsb	sy
 80046a8:	613b      	str	r3, [r7, #16]
}
 80046aa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80046ac:	4b15      	ldr	r3, [pc, #84]	; (8004704 <vTaskStartScheduler+0xc0>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	334c      	adds	r3, #76	; 0x4c
 80046b2:	4a15      	ldr	r2, [pc, #84]	; (8004708 <vTaskStartScheduler+0xc4>)
 80046b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80046b6:	4b15      	ldr	r3, [pc, #84]	; (800470c <vTaskStartScheduler+0xc8>)
 80046b8:	f04f 32ff 	mov.w	r2, #4294967295
 80046bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80046be:	4b14      	ldr	r3, [pc, #80]	; (8004710 <vTaskStartScheduler+0xcc>)
 80046c0:	2201      	movs	r2, #1
 80046c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80046c4:	4b13      	ldr	r3, [pc, #76]	; (8004714 <vTaskStartScheduler+0xd0>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80046ca:	f000 fbc1 	bl	8004e50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80046ce:	e00e      	b.n	80046ee <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d6:	d10a      	bne.n	80046ee <vTaskStartScheduler+0xaa>
	__asm volatile
 80046d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	60fb      	str	r3, [r7, #12]
}
 80046ea:	bf00      	nop
 80046ec:	e7fe      	b.n	80046ec <vTaskStartScheduler+0xa8>
}
 80046ee:	bf00      	nop
 80046f0:	3718      	adds	r7, #24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	08005840 	.word	0x08005840
 80046fc:	08004ac1 	.word	0x08004ac1
 8004700:	200005ac 	.word	0x200005ac
 8004704:	20000488 	.word	0x20000488
 8004708:	20000010 	.word	0x20000010
 800470c:	200005a8 	.word	0x200005a8
 8004710:	20000594 	.word	0x20000594
 8004714:	2000058c 	.word	0x2000058c

08004718 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004718:	b480      	push	{r7}
 800471a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800471c:	4b04      	ldr	r3, [pc, #16]	; (8004730 <vTaskSuspendAll+0x18>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	3301      	adds	r3, #1
 8004722:	4a03      	ldr	r2, [pc, #12]	; (8004730 <vTaskSuspendAll+0x18>)
 8004724:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004726:	bf00      	nop
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	200005b0 	.word	0x200005b0

08004734 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800473a:	2300      	movs	r3, #0
 800473c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800473e:	2300      	movs	r3, #0
 8004740:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004742:	4b41      	ldr	r3, [pc, #260]	; (8004848 <xTaskResumeAll+0x114>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10a      	bne.n	8004760 <xTaskResumeAll+0x2c>
	__asm volatile
 800474a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474e:	f383 8811 	msr	BASEPRI, r3
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	f3bf 8f4f 	dsb	sy
 800475a:	603b      	str	r3, [r7, #0]
}
 800475c:	bf00      	nop
 800475e:	e7fe      	b.n	800475e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004760:	f000 fc18 	bl	8004f94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004764:	4b38      	ldr	r3, [pc, #224]	; (8004848 <xTaskResumeAll+0x114>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	3b01      	subs	r3, #1
 800476a:	4a37      	ldr	r2, [pc, #220]	; (8004848 <xTaskResumeAll+0x114>)
 800476c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800476e:	4b36      	ldr	r3, [pc, #216]	; (8004848 <xTaskResumeAll+0x114>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d161      	bne.n	800483a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004776:	4b35      	ldr	r3, [pc, #212]	; (800484c <xTaskResumeAll+0x118>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d05d      	beq.n	800483a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800477e:	e02e      	b.n	80047de <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004780:	4b33      	ldr	r3, [pc, #204]	; (8004850 <xTaskResumeAll+0x11c>)
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	3318      	adds	r3, #24
 800478c:	4618      	mov	r0, r3
 800478e:	f7ff fb3f 	bl	8003e10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	3304      	adds	r3, #4
 8004796:	4618      	mov	r0, r3
 8004798:	f7ff fb3a 	bl	8003e10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a0:	2201      	movs	r2, #1
 80047a2:	409a      	lsls	r2, r3
 80047a4:	4b2b      	ldr	r3, [pc, #172]	; (8004854 <xTaskResumeAll+0x120>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	4a2a      	ldr	r2, [pc, #168]	; (8004854 <xTaskResumeAll+0x120>)
 80047ac:	6013      	str	r3, [r2, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b2:	4613      	mov	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4413      	add	r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	4a27      	ldr	r2, [pc, #156]	; (8004858 <xTaskResumeAll+0x124>)
 80047bc:	441a      	add	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	3304      	adds	r3, #4
 80047c2:	4619      	mov	r1, r3
 80047c4:	4610      	mov	r0, r2
 80047c6:	f7ff fac6 	bl	8003d56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ce:	4b23      	ldr	r3, [pc, #140]	; (800485c <xTaskResumeAll+0x128>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d302      	bcc.n	80047de <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80047d8:	4b21      	ldr	r3, [pc, #132]	; (8004860 <xTaskResumeAll+0x12c>)
 80047da:	2201      	movs	r2, #1
 80047dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047de:	4b1c      	ldr	r3, [pc, #112]	; (8004850 <xTaskResumeAll+0x11c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1cc      	bne.n	8004780 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d001      	beq.n	80047f0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80047ec:	f000 fa22 	bl	8004c34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80047f0:	4b1c      	ldr	r3, [pc, #112]	; (8004864 <xTaskResumeAll+0x130>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d010      	beq.n	800481e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80047fc:	f000 f846 	bl	800488c <xTaskIncrementTick>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d002      	beq.n	800480c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004806:	4b16      	ldr	r3, [pc, #88]	; (8004860 <xTaskResumeAll+0x12c>)
 8004808:	2201      	movs	r2, #1
 800480a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	3b01      	subs	r3, #1
 8004810:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1f1      	bne.n	80047fc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004818:	4b12      	ldr	r3, [pc, #72]	; (8004864 <xTaskResumeAll+0x130>)
 800481a:	2200      	movs	r2, #0
 800481c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800481e:	4b10      	ldr	r3, [pc, #64]	; (8004860 <xTaskResumeAll+0x12c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d009      	beq.n	800483a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004826:	2301      	movs	r3, #1
 8004828:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800482a:	4b0f      	ldr	r3, [pc, #60]	; (8004868 <xTaskResumeAll+0x134>)
 800482c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	f3bf 8f4f 	dsb	sy
 8004836:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800483a:	f000 fbdb 	bl	8004ff4 <vPortExitCritical>

	return xAlreadyYielded;
 800483e:	68bb      	ldr	r3, [r7, #8]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	200005b0 	.word	0x200005b0
 800484c:	20000588 	.word	0x20000588
 8004850:	20000548 	.word	0x20000548
 8004854:	20000590 	.word	0x20000590
 8004858:	2000048c 	.word	0x2000048c
 800485c:	20000488 	.word	0x20000488
 8004860:	2000059c 	.word	0x2000059c
 8004864:	20000598 	.word	0x20000598
 8004868:	e000ed04 	.word	0xe000ed04

0800486c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004872:	4b05      	ldr	r3, [pc, #20]	; (8004888 <xTaskGetTickCount+0x1c>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004878:	687b      	ldr	r3, [r7, #4]
}
 800487a:	4618      	mov	r0, r3
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	2000058c 	.word	0x2000058c

0800488c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004892:	2300      	movs	r3, #0
 8004894:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004896:	4b4e      	ldr	r3, [pc, #312]	; (80049d0 <xTaskIncrementTick+0x144>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	f040 808e 	bne.w	80049bc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80048a0:	4b4c      	ldr	r3, [pc, #304]	; (80049d4 <xTaskIncrementTick+0x148>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	3301      	adds	r3, #1
 80048a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80048a8:	4a4a      	ldr	r2, [pc, #296]	; (80049d4 <xTaskIncrementTick+0x148>)
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d120      	bne.n	80048f6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80048b4:	4b48      	ldr	r3, [pc, #288]	; (80049d8 <xTaskIncrementTick+0x14c>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00a      	beq.n	80048d4 <xTaskIncrementTick+0x48>
	__asm volatile
 80048be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c2:	f383 8811 	msr	BASEPRI, r3
 80048c6:	f3bf 8f6f 	isb	sy
 80048ca:	f3bf 8f4f 	dsb	sy
 80048ce:	603b      	str	r3, [r7, #0]
}
 80048d0:	bf00      	nop
 80048d2:	e7fe      	b.n	80048d2 <xTaskIncrementTick+0x46>
 80048d4:	4b40      	ldr	r3, [pc, #256]	; (80049d8 <xTaskIncrementTick+0x14c>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	60fb      	str	r3, [r7, #12]
 80048da:	4b40      	ldr	r3, [pc, #256]	; (80049dc <xTaskIncrementTick+0x150>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a3e      	ldr	r2, [pc, #248]	; (80049d8 <xTaskIncrementTick+0x14c>)
 80048e0:	6013      	str	r3, [r2, #0]
 80048e2:	4a3e      	ldr	r2, [pc, #248]	; (80049dc <xTaskIncrementTick+0x150>)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6013      	str	r3, [r2, #0]
 80048e8:	4b3d      	ldr	r3, [pc, #244]	; (80049e0 <xTaskIncrementTick+0x154>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	3301      	adds	r3, #1
 80048ee:	4a3c      	ldr	r2, [pc, #240]	; (80049e0 <xTaskIncrementTick+0x154>)
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	f000 f99f 	bl	8004c34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80048f6:	4b3b      	ldr	r3, [pc, #236]	; (80049e4 <xTaskIncrementTick+0x158>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d348      	bcc.n	8004992 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004900:	4b35      	ldr	r3, [pc, #212]	; (80049d8 <xTaskIncrementTick+0x14c>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d104      	bne.n	8004914 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800490a:	4b36      	ldr	r3, [pc, #216]	; (80049e4 <xTaskIncrementTick+0x158>)
 800490c:	f04f 32ff 	mov.w	r2, #4294967295
 8004910:	601a      	str	r2, [r3, #0]
					break;
 8004912:	e03e      	b.n	8004992 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004914:	4b30      	ldr	r3, [pc, #192]	; (80049d8 <xTaskIncrementTick+0x14c>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	429a      	cmp	r2, r3
 800492a:	d203      	bcs.n	8004934 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800492c:	4a2d      	ldr	r2, [pc, #180]	; (80049e4 <xTaskIncrementTick+0x158>)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004932:	e02e      	b.n	8004992 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	3304      	adds	r3, #4
 8004938:	4618      	mov	r0, r3
 800493a:	f7ff fa69 	bl	8003e10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004942:	2b00      	cmp	r3, #0
 8004944:	d004      	beq.n	8004950 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	3318      	adds	r3, #24
 800494a:	4618      	mov	r0, r3
 800494c:	f7ff fa60 	bl	8003e10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004954:	2201      	movs	r2, #1
 8004956:	409a      	lsls	r2, r3
 8004958:	4b23      	ldr	r3, [pc, #140]	; (80049e8 <xTaskIncrementTick+0x15c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4313      	orrs	r3, r2
 800495e:	4a22      	ldr	r2, [pc, #136]	; (80049e8 <xTaskIncrementTick+0x15c>)
 8004960:	6013      	str	r3, [r2, #0]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004966:	4613      	mov	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4a1f      	ldr	r2, [pc, #124]	; (80049ec <xTaskIncrementTick+0x160>)
 8004970:	441a      	add	r2, r3
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	3304      	adds	r3, #4
 8004976:	4619      	mov	r1, r3
 8004978:	4610      	mov	r0, r2
 800497a:	f7ff f9ec 	bl	8003d56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004982:	4b1b      	ldr	r3, [pc, #108]	; (80049f0 <xTaskIncrementTick+0x164>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004988:	429a      	cmp	r2, r3
 800498a:	d3b9      	bcc.n	8004900 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800498c:	2301      	movs	r3, #1
 800498e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004990:	e7b6      	b.n	8004900 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004992:	4b17      	ldr	r3, [pc, #92]	; (80049f0 <xTaskIncrementTick+0x164>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004998:	4914      	ldr	r1, [pc, #80]	; (80049ec <xTaskIncrementTick+0x160>)
 800499a:	4613      	mov	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	440b      	add	r3, r1
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d901      	bls.n	80049ae <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80049aa:	2301      	movs	r3, #1
 80049ac:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80049ae:	4b11      	ldr	r3, [pc, #68]	; (80049f4 <xTaskIncrementTick+0x168>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d007      	beq.n	80049c6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80049b6:	2301      	movs	r3, #1
 80049b8:	617b      	str	r3, [r7, #20]
 80049ba:	e004      	b.n	80049c6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80049bc:	4b0e      	ldr	r3, [pc, #56]	; (80049f8 <xTaskIncrementTick+0x16c>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3301      	adds	r3, #1
 80049c2:	4a0d      	ldr	r2, [pc, #52]	; (80049f8 <xTaskIncrementTick+0x16c>)
 80049c4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80049c6:	697b      	ldr	r3, [r7, #20]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3718      	adds	r7, #24
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	200005b0 	.word	0x200005b0
 80049d4:	2000058c 	.word	0x2000058c
 80049d8:	20000540 	.word	0x20000540
 80049dc:	20000544 	.word	0x20000544
 80049e0:	200005a0 	.word	0x200005a0
 80049e4:	200005a8 	.word	0x200005a8
 80049e8:	20000590 	.word	0x20000590
 80049ec:	2000048c 	.word	0x2000048c
 80049f0:	20000488 	.word	0x20000488
 80049f4:	2000059c 	.word	0x2000059c
 80049f8:	20000598 	.word	0x20000598

080049fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80049fc:	b480      	push	{r7}
 80049fe:	b087      	sub	sp, #28
 8004a00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a02:	4b29      	ldr	r3, [pc, #164]	; (8004aa8 <vTaskSwitchContext+0xac>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a0a:	4b28      	ldr	r3, [pc, #160]	; (8004aac <vTaskSwitchContext+0xb0>)
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a10:	e044      	b.n	8004a9c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004a12:	4b26      	ldr	r3, [pc, #152]	; (8004aac <vTaskSwitchContext+0xb0>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a18:	4b25      	ldr	r3, [pc, #148]	; (8004ab0 <vTaskSwitchContext+0xb4>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	fab3 f383 	clz	r3, r3
 8004a24:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004a26:	7afb      	ldrb	r3, [r7, #11]
 8004a28:	f1c3 031f 	rsb	r3, r3, #31
 8004a2c:	617b      	str	r3, [r7, #20]
 8004a2e:	4921      	ldr	r1, [pc, #132]	; (8004ab4 <vTaskSwitchContext+0xb8>)
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	4613      	mov	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4413      	add	r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	440b      	add	r3, r1
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10a      	bne.n	8004a58 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	607b      	str	r3, [r7, #4]
}
 8004a54:	bf00      	nop
 8004a56:	e7fe      	b.n	8004a56 <vTaskSwitchContext+0x5a>
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4a14      	ldr	r2, [pc, #80]	; (8004ab4 <vTaskSwitchContext+0xb8>)
 8004a64:	4413      	add	r3, r2
 8004a66:	613b      	str	r3, [r7, #16]
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	605a      	str	r2, [r3, #4]
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	685a      	ldr	r2, [r3, #4]
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	3308      	adds	r3, #8
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d104      	bne.n	8004a88 <vTaskSwitchContext+0x8c>
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	605a      	str	r2, [r3, #4]
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	4a0a      	ldr	r2, [pc, #40]	; (8004ab8 <vTaskSwitchContext+0xbc>)
 8004a90:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004a92:	4b09      	ldr	r3, [pc, #36]	; (8004ab8 <vTaskSwitchContext+0xbc>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	334c      	adds	r3, #76	; 0x4c
 8004a98:	4a08      	ldr	r2, [pc, #32]	; (8004abc <vTaskSwitchContext+0xc0>)
 8004a9a:	6013      	str	r3, [r2, #0]
}
 8004a9c:	bf00      	nop
 8004a9e:	371c      	adds	r7, #28
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	200005b0 	.word	0x200005b0
 8004aac:	2000059c 	.word	0x2000059c
 8004ab0:	20000590 	.word	0x20000590
 8004ab4:	2000048c 	.word	0x2000048c
 8004ab8:	20000488 	.word	0x20000488
 8004abc:	20000010 	.word	0x20000010

08004ac0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ac8:	f000 f852 	bl	8004b70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004acc:	4b06      	ldr	r3, [pc, #24]	; (8004ae8 <prvIdleTask+0x28>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d9f9      	bls.n	8004ac8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ad4:	4b05      	ldr	r3, [pc, #20]	; (8004aec <prvIdleTask+0x2c>)
 8004ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004ae4:	e7f0      	b.n	8004ac8 <prvIdleTask+0x8>
 8004ae6:	bf00      	nop
 8004ae8:	2000048c 	.word	0x2000048c
 8004aec:	e000ed04 	.word	0xe000ed04

08004af0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004af6:	2300      	movs	r3, #0
 8004af8:	607b      	str	r3, [r7, #4]
 8004afa:	e00c      	b.n	8004b16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	4613      	mov	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	4413      	add	r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4a12      	ldr	r2, [pc, #72]	; (8004b50 <prvInitialiseTaskLists+0x60>)
 8004b08:	4413      	add	r3, r2
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7ff f8f6 	bl	8003cfc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3301      	adds	r3, #1
 8004b14:	607b      	str	r3, [r7, #4]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b06      	cmp	r3, #6
 8004b1a:	d9ef      	bls.n	8004afc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004b1c:	480d      	ldr	r0, [pc, #52]	; (8004b54 <prvInitialiseTaskLists+0x64>)
 8004b1e:	f7ff f8ed 	bl	8003cfc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004b22:	480d      	ldr	r0, [pc, #52]	; (8004b58 <prvInitialiseTaskLists+0x68>)
 8004b24:	f7ff f8ea 	bl	8003cfc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004b28:	480c      	ldr	r0, [pc, #48]	; (8004b5c <prvInitialiseTaskLists+0x6c>)
 8004b2a:	f7ff f8e7 	bl	8003cfc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b2e:	480c      	ldr	r0, [pc, #48]	; (8004b60 <prvInitialiseTaskLists+0x70>)
 8004b30:	f7ff f8e4 	bl	8003cfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004b34:	480b      	ldr	r0, [pc, #44]	; (8004b64 <prvInitialiseTaskLists+0x74>)
 8004b36:	f7ff f8e1 	bl	8003cfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004b3a:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <prvInitialiseTaskLists+0x78>)
 8004b3c:	4a05      	ldr	r2, [pc, #20]	; (8004b54 <prvInitialiseTaskLists+0x64>)
 8004b3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b40:	4b0a      	ldr	r3, [pc, #40]	; (8004b6c <prvInitialiseTaskLists+0x7c>)
 8004b42:	4a05      	ldr	r2, [pc, #20]	; (8004b58 <prvInitialiseTaskLists+0x68>)
 8004b44:	601a      	str	r2, [r3, #0]
}
 8004b46:	bf00      	nop
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	2000048c 	.word	0x2000048c
 8004b54:	20000518 	.word	0x20000518
 8004b58:	2000052c 	.word	0x2000052c
 8004b5c:	20000548 	.word	0x20000548
 8004b60:	2000055c 	.word	0x2000055c
 8004b64:	20000574 	.word	0x20000574
 8004b68:	20000540 	.word	0x20000540
 8004b6c:	20000544 	.word	0x20000544

08004b70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b76:	e019      	b.n	8004bac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004b78:	f000 fa0c 	bl	8004f94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b7c:	4b10      	ldr	r3, [pc, #64]	; (8004bc0 <prvCheckTasksWaitingTermination+0x50>)
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	3304      	adds	r3, #4
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7ff f941 	bl	8003e10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b8e:	4b0d      	ldr	r3, [pc, #52]	; (8004bc4 <prvCheckTasksWaitingTermination+0x54>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	3b01      	subs	r3, #1
 8004b94:	4a0b      	ldr	r2, [pc, #44]	; (8004bc4 <prvCheckTasksWaitingTermination+0x54>)
 8004b96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b98:	4b0b      	ldr	r3, [pc, #44]	; (8004bc8 <prvCheckTasksWaitingTermination+0x58>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	4a0a      	ldr	r2, [pc, #40]	; (8004bc8 <prvCheckTasksWaitingTermination+0x58>)
 8004ba0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004ba2:	f000 fa27 	bl	8004ff4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f810 	bl	8004bcc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bac:	4b06      	ldr	r3, [pc, #24]	; (8004bc8 <prvCheckTasksWaitingTermination+0x58>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1e1      	bne.n	8004b78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004bb4:	bf00      	nop
 8004bb6:	bf00      	nop
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	2000055c 	.word	0x2000055c
 8004bc4:	20000588 	.word	0x20000588
 8004bc8:	20000570 	.word	0x20000570

08004bcc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	334c      	adds	r3, #76	; 0x4c
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f000 fd23 	bl	8005624 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d108      	bne.n	8004bfa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bec:	4618      	mov	r0, r3
 8004bee:	f000 fbbf 	bl	8005370 <vPortFree>
				vPortFree( pxTCB );
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 fbbc 	bl	8005370 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004bf8:	e018      	b.n	8004c2c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d103      	bne.n	8004c0c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 fbb3 	bl	8005370 <vPortFree>
	}
 8004c0a:	e00f      	b.n	8004c2c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d00a      	beq.n	8004c2c <prvDeleteTCB+0x60>
	__asm volatile
 8004c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1a:	f383 8811 	msr	BASEPRI, r3
 8004c1e:	f3bf 8f6f 	isb	sy
 8004c22:	f3bf 8f4f 	dsb	sy
 8004c26:	60fb      	str	r3, [r7, #12]
}
 8004c28:	bf00      	nop
 8004c2a:	e7fe      	b.n	8004c2a <prvDeleteTCB+0x5e>
	}
 8004c2c:	bf00      	nop
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c3a:	4b0c      	ldr	r3, [pc, #48]	; (8004c6c <prvResetNextTaskUnblockTime+0x38>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d104      	bne.n	8004c4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004c44:	4b0a      	ldr	r3, [pc, #40]	; (8004c70 <prvResetNextTaskUnblockTime+0x3c>)
 8004c46:	f04f 32ff 	mov.w	r2, #4294967295
 8004c4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004c4c:	e008      	b.n	8004c60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c4e:	4b07      	ldr	r3, [pc, #28]	; (8004c6c <prvResetNextTaskUnblockTime+0x38>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	4a04      	ldr	r2, [pc, #16]	; (8004c70 <prvResetNextTaskUnblockTime+0x3c>)
 8004c5e:	6013      	str	r3, [r2, #0]
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	20000540 	.word	0x20000540
 8004c70:	200005a8 	.word	0x200005a8

08004c74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c7e:	4b29      	ldr	r3, [pc, #164]	; (8004d24 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c84:	4b28      	ldr	r3, [pc, #160]	; (8004d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	3304      	adds	r3, #4
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7ff f8c0 	bl	8003e10 <uxListRemove>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10b      	bne.n	8004cae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004c96:	4b24      	ldr	r3, [pc, #144]	; (8004d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca2:	43da      	mvns	r2, r3
 8004ca4:	4b21      	ldr	r3, [pc, #132]	; (8004d2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	4a20      	ldr	r2, [pc, #128]	; (8004d2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004cac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb4:	d10a      	bne.n	8004ccc <prvAddCurrentTaskToDelayedList+0x58>
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d007      	beq.n	8004ccc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cbc:	4b1a      	ldr	r3, [pc, #104]	; (8004d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	3304      	adds	r3, #4
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	481a      	ldr	r0, [pc, #104]	; (8004d30 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004cc6:	f7ff f846 	bl	8003d56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004cca:	e026      	b.n	8004d1a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004cd4:	4b14      	ldr	r3, [pc, #80]	; (8004d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d209      	bcs.n	8004cf8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ce4:	4b13      	ldr	r3, [pc, #76]	; (8004d34 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	4b0f      	ldr	r3, [pc, #60]	; (8004d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	3304      	adds	r3, #4
 8004cee:	4619      	mov	r1, r3
 8004cf0:	4610      	mov	r0, r2
 8004cf2:	f7ff f854 	bl	8003d9e <vListInsert>
}
 8004cf6:	e010      	b.n	8004d1a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cf8:	4b0f      	ldr	r3, [pc, #60]	; (8004d38 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	4b0a      	ldr	r3, [pc, #40]	; (8004d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	3304      	adds	r3, #4
 8004d02:	4619      	mov	r1, r3
 8004d04:	4610      	mov	r0, r2
 8004d06:	f7ff f84a 	bl	8003d9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d0a:	4b0c      	ldr	r3, [pc, #48]	; (8004d3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d202      	bcs.n	8004d1a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004d14:	4a09      	ldr	r2, [pc, #36]	; (8004d3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	6013      	str	r3, [r2, #0]
}
 8004d1a:	bf00      	nop
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	2000058c 	.word	0x2000058c
 8004d28:	20000488 	.word	0x20000488
 8004d2c:	20000590 	.word	0x20000590
 8004d30:	20000574 	.word	0x20000574
 8004d34:	20000544 	.word	0x20000544
 8004d38:	20000540 	.word	0x20000540
 8004d3c:	200005a8 	.word	0x200005a8

08004d40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	3b04      	subs	r3, #4
 8004d50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	3b04      	subs	r3, #4
 8004d5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	f023 0201 	bic.w	r2, r3, #1
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	3b04      	subs	r3, #4
 8004d6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d70:	4a0c      	ldr	r2, [pc, #48]	; (8004da4 <pxPortInitialiseStack+0x64>)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	3b14      	subs	r3, #20
 8004d7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	3b04      	subs	r3, #4
 8004d86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f06f 0202 	mvn.w	r2, #2
 8004d8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	3b20      	subs	r3, #32
 8004d94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d96:	68fb      	ldr	r3, [r7, #12]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	08004da9 	.word	0x08004da9

08004da8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004dae:	2300      	movs	r3, #0
 8004db0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004db2:	4b12      	ldr	r3, [pc, #72]	; (8004dfc <prvTaskExitError+0x54>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dba:	d00a      	beq.n	8004dd2 <prvTaskExitError+0x2a>
	__asm volatile
 8004dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc0:	f383 8811 	msr	BASEPRI, r3
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	f3bf 8f4f 	dsb	sy
 8004dcc:	60fb      	str	r3, [r7, #12]
}
 8004dce:	bf00      	nop
 8004dd0:	e7fe      	b.n	8004dd0 <prvTaskExitError+0x28>
	__asm volatile
 8004dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd6:	f383 8811 	msr	BASEPRI, r3
 8004dda:	f3bf 8f6f 	isb	sy
 8004dde:	f3bf 8f4f 	dsb	sy
 8004de2:	60bb      	str	r3, [r7, #8]
}
 8004de4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004de6:	bf00      	nop
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d0fc      	beq.n	8004de8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004dee:	bf00      	nop
 8004df0:	bf00      	nop
 8004df2:	3714      	adds	r7, #20
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr
 8004dfc:	2000000c 	.word	0x2000000c

08004e00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004e00:	4b07      	ldr	r3, [pc, #28]	; (8004e20 <pxCurrentTCBConst2>)
 8004e02:	6819      	ldr	r1, [r3, #0]
 8004e04:	6808      	ldr	r0, [r1, #0]
 8004e06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e0a:	f380 8809 	msr	PSP, r0
 8004e0e:	f3bf 8f6f 	isb	sy
 8004e12:	f04f 0000 	mov.w	r0, #0
 8004e16:	f380 8811 	msr	BASEPRI, r0
 8004e1a:	4770      	bx	lr
 8004e1c:	f3af 8000 	nop.w

08004e20 <pxCurrentTCBConst2>:
 8004e20:	20000488 	.word	0x20000488
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004e24:	bf00      	nop
 8004e26:	bf00      	nop

08004e28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004e28:	4808      	ldr	r0, [pc, #32]	; (8004e4c <prvPortStartFirstTask+0x24>)
 8004e2a:	6800      	ldr	r0, [r0, #0]
 8004e2c:	6800      	ldr	r0, [r0, #0]
 8004e2e:	f380 8808 	msr	MSP, r0
 8004e32:	f04f 0000 	mov.w	r0, #0
 8004e36:	f380 8814 	msr	CONTROL, r0
 8004e3a:	b662      	cpsie	i
 8004e3c:	b661      	cpsie	f
 8004e3e:	f3bf 8f4f 	dsb	sy
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	df00      	svc	0
 8004e48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004e4a:	bf00      	nop
 8004e4c:	e000ed08 	.word	0xe000ed08

08004e50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004e56:	4b46      	ldr	r3, [pc, #280]	; (8004f70 <xPortStartScheduler+0x120>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a46      	ldr	r2, [pc, #280]	; (8004f74 <xPortStartScheduler+0x124>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d10a      	bne.n	8004e76 <xPortStartScheduler+0x26>
	__asm volatile
 8004e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e64:	f383 8811 	msr	BASEPRI, r3
 8004e68:	f3bf 8f6f 	isb	sy
 8004e6c:	f3bf 8f4f 	dsb	sy
 8004e70:	613b      	str	r3, [r7, #16]
}
 8004e72:	bf00      	nop
 8004e74:	e7fe      	b.n	8004e74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004e76:	4b3e      	ldr	r3, [pc, #248]	; (8004f70 <xPortStartScheduler+0x120>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a3f      	ldr	r2, [pc, #252]	; (8004f78 <xPortStartScheduler+0x128>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d10a      	bne.n	8004e96 <xPortStartScheduler+0x46>
	__asm volatile
 8004e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e84:	f383 8811 	msr	BASEPRI, r3
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	60fb      	str	r3, [r7, #12]
}
 8004e92:	bf00      	nop
 8004e94:	e7fe      	b.n	8004e94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e96:	4b39      	ldr	r3, [pc, #228]	; (8004f7c <xPortStartScheduler+0x12c>)
 8004e98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	22ff      	movs	r2, #255	; 0xff
 8004ea6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004eb0:	78fb      	ldrb	r3, [r7, #3]
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004eb8:	b2da      	uxtb	r2, r3
 8004eba:	4b31      	ldr	r3, [pc, #196]	; (8004f80 <xPortStartScheduler+0x130>)
 8004ebc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ebe:	4b31      	ldr	r3, [pc, #196]	; (8004f84 <xPortStartScheduler+0x134>)
 8004ec0:	2207      	movs	r2, #7
 8004ec2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ec4:	e009      	b.n	8004eda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004ec6:	4b2f      	ldr	r3, [pc, #188]	; (8004f84 <xPortStartScheduler+0x134>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	4a2d      	ldr	r2, [pc, #180]	; (8004f84 <xPortStartScheduler+0x134>)
 8004ece:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ed0:	78fb      	ldrb	r3, [r7, #3]
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	005b      	lsls	r3, r3, #1
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004eda:	78fb      	ldrb	r3, [r7, #3]
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee2:	2b80      	cmp	r3, #128	; 0x80
 8004ee4:	d0ef      	beq.n	8004ec6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ee6:	4b27      	ldr	r3, [pc, #156]	; (8004f84 <xPortStartScheduler+0x134>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f1c3 0307 	rsb	r3, r3, #7
 8004eee:	2b04      	cmp	r3, #4
 8004ef0:	d00a      	beq.n	8004f08 <xPortStartScheduler+0xb8>
	__asm volatile
 8004ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef6:	f383 8811 	msr	BASEPRI, r3
 8004efa:	f3bf 8f6f 	isb	sy
 8004efe:	f3bf 8f4f 	dsb	sy
 8004f02:	60bb      	str	r3, [r7, #8]
}
 8004f04:	bf00      	nop
 8004f06:	e7fe      	b.n	8004f06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004f08:	4b1e      	ldr	r3, [pc, #120]	; (8004f84 <xPortStartScheduler+0x134>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	021b      	lsls	r3, r3, #8
 8004f0e:	4a1d      	ldr	r2, [pc, #116]	; (8004f84 <xPortStartScheduler+0x134>)
 8004f10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004f12:	4b1c      	ldr	r3, [pc, #112]	; (8004f84 <xPortStartScheduler+0x134>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f1a:	4a1a      	ldr	r2, [pc, #104]	; (8004f84 <xPortStartScheduler+0x134>)
 8004f1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004f26:	4b18      	ldr	r3, [pc, #96]	; (8004f88 <xPortStartScheduler+0x138>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a17      	ldr	r2, [pc, #92]	; (8004f88 <xPortStartScheduler+0x138>)
 8004f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004f32:	4b15      	ldr	r3, [pc, #84]	; (8004f88 <xPortStartScheduler+0x138>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a14      	ldr	r2, [pc, #80]	; (8004f88 <xPortStartScheduler+0x138>)
 8004f38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004f3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004f3e:	f000 f8dd 	bl	80050fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004f42:	4b12      	ldr	r3, [pc, #72]	; (8004f8c <xPortStartScheduler+0x13c>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004f48:	f000 f8fc 	bl	8005144 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004f4c:	4b10      	ldr	r3, [pc, #64]	; (8004f90 <xPortStartScheduler+0x140>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a0f      	ldr	r2, [pc, #60]	; (8004f90 <xPortStartScheduler+0x140>)
 8004f52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004f56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f58:	f7ff ff66 	bl	8004e28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f5c:	f7ff fd4e 	bl	80049fc <vTaskSwitchContext>
	prvTaskExitError();
 8004f60:	f7ff ff22 	bl	8004da8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3718      	adds	r7, #24
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	e000ed00 	.word	0xe000ed00
 8004f74:	410fc271 	.word	0x410fc271
 8004f78:	410fc270 	.word	0x410fc270
 8004f7c:	e000e400 	.word	0xe000e400
 8004f80:	200005b4 	.word	0x200005b4
 8004f84:	200005b8 	.word	0x200005b8
 8004f88:	e000ed20 	.word	0xe000ed20
 8004f8c:	2000000c 	.word	0x2000000c
 8004f90:	e000ef34 	.word	0xe000ef34

08004f94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
	__asm volatile
 8004f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9e:	f383 8811 	msr	BASEPRI, r3
 8004fa2:	f3bf 8f6f 	isb	sy
 8004fa6:	f3bf 8f4f 	dsb	sy
 8004faa:	607b      	str	r3, [r7, #4]
}
 8004fac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004fae:	4b0f      	ldr	r3, [pc, #60]	; (8004fec <vPortEnterCritical+0x58>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	4a0d      	ldr	r2, [pc, #52]	; (8004fec <vPortEnterCritical+0x58>)
 8004fb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004fb8:	4b0c      	ldr	r3, [pc, #48]	; (8004fec <vPortEnterCritical+0x58>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d10f      	bne.n	8004fe0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004fc0:	4b0b      	ldr	r3, [pc, #44]	; (8004ff0 <vPortEnterCritical+0x5c>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00a      	beq.n	8004fe0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fce:	f383 8811 	msr	BASEPRI, r3
 8004fd2:	f3bf 8f6f 	isb	sy
 8004fd6:	f3bf 8f4f 	dsb	sy
 8004fda:	603b      	str	r3, [r7, #0]
}
 8004fdc:	bf00      	nop
 8004fde:	e7fe      	b.n	8004fde <vPortEnterCritical+0x4a>
	}
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	2000000c 	.word	0x2000000c
 8004ff0:	e000ed04 	.word	0xe000ed04

08004ff4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004ffa:	4b12      	ldr	r3, [pc, #72]	; (8005044 <vPortExitCritical+0x50>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10a      	bne.n	8005018 <vPortExitCritical+0x24>
	__asm volatile
 8005002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005006:	f383 8811 	msr	BASEPRI, r3
 800500a:	f3bf 8f6f 	isb	sy
 800500e:	f3bf 8f4f 	dsb	sy
 8005012:	607b      	str	r3, [r7, #4]
}
 8005014:	bf00      	nop
 8005016:	e7fe      	b.n	8005016 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005018:	4b0a      	ldr	r3, [pc, #40]	; (8005044 <vPortExitCritical+0x50>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	3b01      	subs	r3, #1
 800501e:	4a09      	ldr	r2, [pc, #36]	; (8005044 <vPortExitCritical+0x50>)
 8005020:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005022:	4b08      	ldr	r3, [pc, #32]	; (8005044 <vPortExitCritical+0x50>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d105      	bne.n	8005036 <vPortExitCritical+0x42>
 800502a:	2300      	movs	r3, #0
 800502c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	f383 8811 	msr	BASEPRI, r3
}
 8005034:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005036:	bf00      	nop
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	2000000c 	.word	0x2000000c
	...

08005050 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005050:	f3ef 8009 	mrs	r0, PSP
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	4b15      	ldr	r3, [pc, #84]	; (80050b0 <pxCurrentTCBConst>)
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	f01e 0f10 	tst.w	lr, #16
 8005060:	bf08      	it	eq
 8005062:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005066:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800506a:	6010      	str	r0, [r2, #0]
 800506c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005070:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005074:	f380 8811 	msr	BASEPRI, r0
 8005078:	f3bf 8f4f 	dsb	sy
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	f7ff fcbc 	bl	80049fc <vTaskSwitchContext>
 8005084:	f04f 0000 	mov.w	r0, #0
 8005088:	f380 8811 	msr	BASEPRI, r0
 800508c:	bc09      	pop	{r0, r3}
 800508e:	6819      	ldr	r1, [r3, #0]
 8005090:	6808      	ldr	r0, [r1, #0]
 8005092:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005096:	f01e 0f10 	tst.w	lr, #16
 800509a:	bf08      	it	eq
 800509c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80050a0:	f380 8809 	msr	PSP, r0
 80050a4:	f3bf 8f6f 	isb	sy
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	f3af 8000 	nop.w

080050b0 <pxCurrentTCBConst>:
 80050b0:	20000488 	.word	0x20000488
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80050b4:	bf00      	nop
 80050b6:	bf00      	nop

080050b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
	__asm volatile
 80050be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	607b      	str	r3, [r7, #4]
}
 80050d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80050d2:	f7ff fbdb 	bl	800488c <xTaskIncrementTick>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d003      	beq.n	80050e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80050dc:	4b06      	ldr	r3, [pc, #24]	; (80050f8 <SysTick_Handler+0x40>)
 80050de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050e2:	601a      	str	r2, [r3, #0]
 80050e4:	2300      	movs	r3, #0
 80050e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	f383 8811 	msr	BASEPRI, r3
}
 80050ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80050f0:	bf00      	nop
 80050f2:	3708      	adds	r7, #8
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	e000ed04 	.word	0xe000ed04

080050fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80050fc:	b480      	push	{r7}
 80050fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005100:	4b0b      	ldr	r3, [pc, #44]	; (8005130 <vPortSetupTimerInterrupt+0x34>)
 8005102:	2200      	movs	r2, #0
 8005104:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005106:	4b0b      	ldr	r3, [pc, #44]	; (8005134 <vPortSetupTimerInterrupt+0x38>)
 8005108:	2200      	movs	r2, #0
 800510a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800510c:	4b0a      	ldr	r3, [pc, #40]	; (8005138 <vPortSetupTimerInterrupt+0x3c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a0a      	ldr	r2, [pc, #40]	; (800513c <vPortSetupTimerInterrupt+0x40>)
 8005112:	fba2 2303 	umull	r2, r3, r2, r3
 8005116:	099b      	lsrs	r3, r3, #6
 8005118:	4a09      	ldr	r2, [pc, #36]	; (8005140 <vPortSetupTimerInterrupt+0x44>)
 800511a:	3b01      	subs	r3, #1
 800511c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800511e:	4b04      	ldr	r3, [pc, #16]	; (8005130 <vPortSetupTimerInterrupt+0x34>)
 8005120:	2207      	movs	r2, #7
 8005122:	601a      	str	r2, [r3, #0]
}
 8005124:	bf00      	nop
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	e000e010 	.word	0xe000e010
 8005134:	e000e018 	.word	0xe000e018
 8005138:	20000000 	.word	0x20000000
 800513c:	10624dd3 	.word	0x10624dd3
 8005140:	e000e014 	.word	0xe000e014

08005144 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005144:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005154 <vPortEnableVFP+0x10>
 8005148:	6801      	ldr	r1, [r0, #0]
 800514a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800514e:	6001      	str	r1, [r0, #0]
 8005150:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005152:	bf00      	nop
 8005154:	e000ed88 	.word	0xe000ed88

08005158 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800515e:	f3ef 8305 	mrs	r3, IPSR
 8005162:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2b0f      	cmp	r3, #15
 8005168:	d914      	bls.n	8005194 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800516a:	4a17      	ldr	r2, [pc, #92]	; (80051c8 <vPortValidateInterruptPriority+0x70>)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4413      	add	r3, r2
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005174:	4b15      	ldr	r3, [pc, #84]	; (80051cc <vPortValidateInterruptPriority+0x74>)
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	7afa      	ldrb	r2, [r7, #11]
 800517a:	429a      	cmp	r2, r3
 800517c:	d20a      	bcs.n	8005194 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800517e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005182:	f383 8811 	msr	BASEPRI, r3
 8005186:	f3bf 8f6f 	isb	sy
 800518a:	f3bf 8f4f 	dsb	sy
 800518e:	607b      	str	r3, [r7, #4]
}
 8005190:	bf00      	nop
 8005192:	e7fe      	b.n	8005192 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005194:	4b0e      	ldr	r3, [pc, #56]	; (80051d0 <vPortValidateInterruptPriority+0x78>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800519c:	4b0d      	ldr	r3, [pc, #52]	; (80051d4 <vPortValidateInterruptPriority+0x7c>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d90a      	bls.n	80051ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80051a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a8:	f383 8811 	msr	BASEPRI, r3
 80051ac:	f3bf 8f6f 	isb	sy
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	603b      	str	r3, [r7, #0]
}
 80051b6:	bf00      	nop
 80051b8:	e7fe      	b.n	80051b8 <vPortValidateInterruptPriority+0x60>
	}
 80051ba:	bf00      	nop
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	e000e3f0 	.word	0xe000e3f0
 80051cc:	200005b4 	.word	0x200005b4
 80051d0:	e000ed0c 	.word	0xe000ed0c
 80051d4:	200005b8 	.word	0x200005b8

080051d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b08a      	sub	sp, #40	; 0x28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80051e0:	2300      	movs	r3, #0
 80051e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80051e4:	f7ff fa98 	bl	8004718 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80051e8:	4b5b      	ldr	r3, [pc, #364]	; (8005358 <pvPortMalloc+0x180>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d101      	bne.n	80051f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80051f0:	f000 f920 	bl	8005434 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80051f4:	4b59      	ldr	r3, [pc, #356]	; (800535c <pvPortMalloc+0x184>)
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4013      	ands	r3, r2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f040 8093 	bne.w	8005328 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d01d      	beq.n	8005244 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005208:	2208      	movs	r2, #8
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4413      	add	r3, r2
 800520e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f003 0307 	and.w	r3, r3, #7
 8005216:	2b00      	cmp	r3, #0
 8005218:	d014      	beq.n	8005244 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f023 0307 	bic.w	r3, r3, #7
 8005220:	3308      	adds	r3, #8
 8005222:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00a      	beq.n	8005244 <pvPortMalloc+0x6c>
	__asm volatile
 800522e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	617b      	str	r3, [r7, #20]
}
 8005240:	bf00      	nop
 8005242:	e7fe      	b.n	8005242 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d06e      	beq.n	8005328 <pvPortMalloc+0x150>
 800524a:	4b45      	ldr	r3, [pc, #276]	; (8005360 <pvPortMalloc+0x188>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	429a      	cmp	r2, r3
 8005252:	d869      	bhi.n	8005328 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005254:	4b43      	ldr	r3, [pc, #268]	; (8005364 <pvPortMalloc+0x18c>)
 8005256:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005258:	4b42      	ldr	r3, [pc, #264]	; (8005364 <pvPortMalloc+0x18c>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800525e:	e004      	b.n	800526a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	429a      	cmp	r2, r3
 8005272:	d903      	bls.n	800527c <pvPortMalloc+0xa4>
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1f1      	bne.n	8005260 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800527c:	4b36      	ldr	r3, [pc, #216]	; (8005358 <pvPortMalloc+0x180>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005282:	429a      	cmp	r2, r3
 8005284:	d050      	beq.n	8005328 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2208      	movs	r2, #8
 800528c:	4413      	add	r3, r2
 800528e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	6a3b      	ldr	r3, [r7, #32]
 8005296:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	1ad2      	subs	r2, r2, r3
 80052a0:	2308      	movs	r3, #8
 80052a2:	005b      	lsls	r3, r3, #1
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d91f      	bls.n	80052e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80052a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4413      	add	r3, r2
 80052ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	f003 0307 	and.w	r3, r3, #7
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00a      	beq.n	80052d0 <pvPortMalloc+0xf8>
	__asm volatile
 80052ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052be:	f383 8811 	msr	BASEPRI, r3
 80052c2:	f3bf 8f6f 	isb	sy
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	613b      	str	r3, [r7, #16]
}
 80052cc:	bf00      	nop
 80052ce:	e7fe      	b.n	80052ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80052d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	1ad2      	subs	r2, r2, r3
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80052e2:	69b8      	ldr	r0, [r7, #24]
 80052e4:	f000 f908 	bl	80054f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80052e8:	4b1d      	ldr	r3, [pc, #116]	; (8005360 <pvPortMalloc+0x188>)
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	4a1b      	ldr	r2, [pc, #108]	; (8005360 <pvPortMalloc+0x188>)
 80052f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80052f6:	4b1a      	ldr	r3, [pc, #104]	; (8005360 <pvPortMalloc+0x188>)
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	4b1b      	ldr	r3, [pc, #108]	; (8005368 <pvPortMalloc+0x190>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d203      	bcs.n	800530a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005302:	4b17      	ldr	r3, [pc, #92]	; (8005360 <pvPortMalloc+0x188>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a18      	ldr	r2, [pc, #96]	; (8005368 <pvPortMalloc+0x190>)
 8005308:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	4b13      	ldr	r3, [pc, #76]	; (800535c <pvPortMalloc+0x184>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	431a      	orrs	r2, r3
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005316:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	2200      	movs	r2, #0
 800531c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800531e:	4b13      	ldr	r3, [pc, #76]	; (800536c <pvPortMalloc+0x194>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3301      	adds	r3, #1
 8005324:	4a11      	ldr	r2, [pc, #68]	; (800536c <pvPortMalloc+0x194>)
 8005326:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005328:	f7ff fa04 	bl	8004734 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	f003 0307 	and.w	r3, r3, #7
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00a      	beq.n	800534c <pvPortMalloc+0x174>
	__asm volatile
 8005336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533a:	f383 8811 	msr	BASEPRI, r3
 800533e:	f3bf 8f6f 	isb	sy
 8005342:	f3bf 8f4f 	dsb	sy
 8005346:	60fb      	str	r3, [r7, #12]
}
 8005348:	bf00      	nop
 800534a:	e7fe      	b.n	800534a <pvPortMalloc+0x172>
	return pvReturn;
 800534c:	69fb      	ldr	r3, [r7, #28]
}
 800534e:	4618      	mov	r0, r3
 8005350:	3728      	adds	r7, #40	; 0x28
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	2000117c 	.word	0x2000117c
 800535c:	20001190 	.word	0x20001190
 8005360:	20001180 	.word	0x20001180
 8005364:	20001174 	.word	0x20001174
 8005368:	20001184 	.word	0x20001184
 800536c:	20001188 	.word	0x20001188

08005370 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d04d      	beq.n	800541e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005382:	2308      	movs	r3, #8
 8005384:	425b      	negs	r3, r3
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	4413      	add	r3, r2
 800538a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	685a      	ldr	r2, [r3, #4]
 8005394:	4b24      	ldr	r3, [pc, #144]	; (8005428 <vPortFree+0xb8>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4013      	ands	r3, r2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10a      	bne.n	80053b4 <vPortFree+0x44>
	__asm volatile
 800539e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	60fb      	str	r3, [r7, #12]
}
 80053b0:	bf00      	nop
 80053b2:	e7fe      	b.n	80053b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00a      	beq.n	80053d2 <vPortFree+0x62>
	__asm volatile
 80053bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c0:	f383 8811 	msr	BASEPRI, r3
 80053c4:	f3bf 8f6f 	isb	sy
 80053c8:	f3bf 8f4f 	dsb	sy
 80053cc:	60bb      	str	r3, [r7, #8]
}
 80053ce:	bf00      	nop
 80053d0:	e7fe      	b.n	80053d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	4b14      	ldr	r3, [pc, #80]	; (8005428 <vPortFree+0xb8>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4013      	ands	r3, r2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d01e      	beq.n	800541e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d11a      	bne.n	800541e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	4b0e      	ldr	r3, [pc, #56]	; (8005428 <vPortFree+0xb8>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	43db      	mvns	r3, r3
 80053f2:	401a      	ands	r2, r3
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80053f8:	f7ff f98e 	bl	8004718 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	4b0a      	ldr	r3, [pc, #40]	; (800542c <vPortFree+0xbc>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4413      	add	r3, r2
 8005406:	4a09      	ldr	r2, [pc, #36]	; (800542c <vPortFree+0xbc>)
 8005408:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800540a:	6938      	ldr	r0, [r7, #16]
 800540c:	f000 f874 	bl	80054f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005410:	4b07      	ldr	r3, [pc, #28]	; (8005430 <vPortFree+0xc0>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	3301      	adds	r3, #1
 8005416:	4a06      	ldr	r2, [pc, #24]	; (8005430 <vPortFree+0xc0>)
 8005418:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800541a:	f7ff f98b 	bl	8004734 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800541e:	bf00      	nop
 8005420:	3718      	adds	r7, #24
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	20001190 	.word	0x20001190
 800542c:	20001180 	.word	0x20001180
 8005430:	2000118c 	.word	0x2000118c

08005434 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800543a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800543e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005440:	4b27      	ldr	r3, [pc, #156]	; (80054e0 <prvHeapInit+0xac>)
 8005442:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f003 0307 	and.w	r3, r3, #7
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00c      	beq.n	8005468 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	3307      	adds	r3, #7
 8005452:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f023 0307 	bic.w	r3, r3, #7
 800545a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	4a1f      	ldr	r2, [pc, #124]	; (80054e0 <prvHeapInit+0xac>)
 8005464:	4413      	add	r3, r2
 8005466:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800546c:	4a1d      	ldr	r2, [pc, #116]	; (80054e4 <prvHeapInit+0xb0>)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005472:	4b1c      	ldr	r3, [pc, #112]	; (80054e4 <prvHeapInit+0xb0>)
 8005474:	2200      	movs	r2, #0
 8005476:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	4413      	add	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005480:	2208      	movs	r2, #8
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	1a9b      	subs	r3, r3, r2
 8005486:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f023 0307 	bic.w	r3, r3, #7
 800548e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	4a15      	ldr	r2, [pc, #84]	; (80054e8 <prvHeapInit+0xb4>)
 8005494:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005496:	4b14      	ldr	r3, [pc, #80]	; (80054e8 <prvHeapInit+0xb4>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2200      	movs	r2, #0
 800549c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800549e:	4b12      	ldr	r3, [pc, #72]	; (80054e8 <prvHeapInit+0xb4>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2200      	movs	r2, #0
 80054a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	1ad2      	subs	r2, r2, r3
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80054b4:	4b0c      	ldr	r3, [pc, #48]	; (80054e8 <prvHeapInit+0xb4>)
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	4a0a      	ldr	r2, [pc, #40]	; (80054ec <prvHeapInit+0xb8>)
 80054c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	4a09      	ldr	r2, [pc, #36]	; (80054f0 <prvHeapInit+0xbc>)
 80054ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80054cc:	4b09      	ldr	r3, [pc, #36]	; (80054f4 <prvHeapInit+0xc0>)
 80054ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80054d2:	601a      	str	r2, [r3, #0]
}
 80054d4:	bf00      	nop
 80054d6:	3714      	adds	r7, #20
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	200005bc 	.word	0x200005bc
 80054e4:	20001174 	.word	0x20001174
 80054e8:	2000117c 	.word	0x2000117c
 80054ec:	20001184 	.word	0x20001184
 80054f0:	20001180 	.word	0x20001180
 80054f4:	20001190 	.word	0x20001190

080054f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005500:	4b28      	ldr	r3, [pc, #160]	; (80055a4 <prvInsertBlockIntoFreeList+0xac>)
 8005502:	60fb      	str	r3, [r7, #12]
 8005504:	e002      	b.n	800550c <prvInsertBlockIntoFreeList+0x14>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	60fb      	str	r3, [r7, #12]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	429a      	cmp	r2, r3
 8005514:	d8f7      	bhi.n	8005506 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	4413      	add	r3, r2
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	429a      	cmp	r2, r3
 8005526:	d108      	bne.n	800553a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	441a      	add	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	441a      	add	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	429a      	cmp	r2, r3
 800554c:	d118      	bne.n	8005580 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	4b15      	ldr	r3, [pc, #84]	; (80055a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	429a      	cmp	r2, r3
 8005558:	d00d      	beq.n	8005576 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	441a      	add	r2, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	e008      	b.n	8005588 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005576:	4b0c      	ldr	r3, [pc, #48]	; (80055a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	601a      	str	r2, [r3, #0]
 800557e:	e003      	b.n	8005588 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	429a      	cmp	r2, r3
 800558e:	d002      	beq.n	8005596 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005596:	bf00      	nop
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	20001174 	.word	0x20001174
 80055a8:	2000117c 	.word	0x2000117c

080055ac <__libc_init_array>:
 80055ac:	b570      	push	{r4, r5, r6, lr}
 80055ae:	4d0d      	ldr	r5, [pc, #52]	; (80055e4 <__libc_init_array+0x38>)
 80055b0:	4c0d      	ldr	r4, [pc, #52]	; (80055e8 <__libc_init_array+0x3c>)
 80055b2:	1b64      	subs	r4, r4, r5
 80055b4:	10a4      	asrs	r4, r4, #2
 80055b6:	2600      	movs	r6, #0
 80055b8:	42a6      	cmp	r6, r4
 80055ba:	d109      	bne.n	80055d0 <__libc_init_array+0x24>
 80055bc:	4d0b      	ldr	r5, [pc, #44]	; (80055ec <__libc_init_array+0x40>)
 80055be:	4c0c      	ldr	r4, [pc, #48]	; (80055f0 <__libc_init_array+0x44>)
 80055c0:	f000 f8e4 	bl	800578c <_init>
 80055c4:	1b64      	subs	r4, r4, r5
 80055c6:	10a4      	asrs	r4, r4, #2
 80055c8:	2600      	movs	r6, #0
 80055ca:	42a6      	cmp	r6, r4
 80055cc:	d105      	bne.n	80055da <__libc_init_array+0x2e>
 80055ce:	bd70      	pop	{r4, r5, r6, pc}
 80055d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80055d4:	4798      	blx	r3
 80055d6:	3601      	adds	r6, #1
 80055d8:	e7ee      	b.n	80055b8 <__libc_init_array+0xc>
 80055da:	f855 3b04 	ldr.w	r3, [r5], #4
 80055de:	4798      	blx	r3
 80055e0:	3601      	adds	r6, #1
 80055e2:	e7f2      	b.n	80055ca <__libc_init_array+0x1e>
 80055e4:	080058f8 	.word	0x080058f8
 80055e8:	080058f8 	.word	0x080058f8
 80055ec:	080058f8 	.word	0x080058f8
 80055f0:	080058fc 	.word	0x080058fc

080055f4 <__retarget_lock_acquire_recursive>:
 80055f4:	4770      	bx	lr

080055f6 <__retarget_lock_release_recursive>:
 80055f6:	4770      	bx	lr

080055f8 <memset>:
 80055f8:	4402      	add	r2, r0
 80055fa:	4603      	mov	r3, r0
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d100      	bne.n	8005602 <memset+0xa>
 8005600:	4770      	bx	lr
 8005602:	f803 1b01 	strb.w	r1, [r3], #1
 8005606:	e7f9      	b.n	80055fc <memset+0x4>

08005608 <cleanup_glue>:
 8005608:	b538      	push	{r3, r4, r5, lr}
 800560a:	460c      	mov	r4, r1
 800560c:	6809      	ldr	r1, [r1, #0]
 800560e:	4605      	mov	r5, r0
 8005610:	b109      	cbz	r1, 8005616 <cleanup_glue+0xe>
 8005612:	f7ff fff9 	bl	8005608 <cleanup_glue>
 8005616:	4621      	mov	r1, r4
 8005618:	4628      	mov	r0, r5
 800561a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800561e:	f000 b869 	b.w	80056f4 <_free_r>
	...

08005624 <_reclaim_reent>:
 8005624:	4b2c      	ldr	r3, [pc, #176]	; (80056d8 <_reclaim_reent+0xb4>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4283      	cmp	r3, r0
 800562a:	b570      	push	{r4, r5, r6, lr}
 800562c:	4604      	mov	r4, r0
 800562e:	d051      	beq.n	80056d4 <_reclaim_reent+0xb0>
 8005630:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005632:	b143      	cbz	r3, 8005646 <_reclaim_reent+0x22>
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d14a      	bne.n	80056d0 <_reclaim_reent+0xac>
 800563a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800563c:	6819      	ldr	r1, [r3, #0]
 800563e:	b111      	cbz	r1, 8005646 <_reclaim_reent+0x22>
 8005640:	4620      	mov	r0, r4
 8005642:	f000 f857 	bl	80056f4 <_free_r>
 8005646:	6961      	ldr	r1, [r4, #20]
 8005648:	b111      	cbz	r1, 8005650 <_reclaim_reent+0x2c>
 800564a:	4620      	mov	r0, r4
 800564c:	f000 f852 	bl	80056f4 <_free_r>
 8005650:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005652:	b111      	cbz	r1, 800565a <_reclaim_reent+0x36>
 8005654:	4620      	mov	r0, r4
 8005656:	f000 f84d 	bl	80056f4 <_free_r>
 800565a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800565c:	b111      	cbz	r1, 8005664 <_reclaim_reent+0x40>
 800565e:	4620      	mov	r0, r4
 8005660:	f000 f848 	bl	80056f4 <_free_r>
 8005664:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005666:	b111      	cbz	r1, 800566e <_reclaim_reent+0x4a>
 8005668:	4620      	mov	r0, r4
 800566a:	f000 f843 	bl	80056f4 <_free_r>
 800566e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005670:	b111      	cbz	r1, 8005678 <_reclaim_reent+0x54>
 8005672:	4620      	mov	r0, r4
 8005674:	f000 f83e 	bl	80056f4 <_free_r>
 8005678:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800567a:	b111      	cbz	r1, 8005682 <_reclaim_reent+0x5e>
 800567c:	4620      	mov	r0, r4
 800567e:	f000 f839 	bl	80056f4 <_free_r>
 8005682:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005684:	b111      	cbz	r1, 800568c <_reclaim_reent+0x68>
 8005686:	4620      	mov	r0, r4
 8005688:	f000 f834 	bl	80056f4 <_free_r>
 800568c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800568e:	b111      	cbz	r1, 8005696 <_reclaim_reent+0x72>
 8005690:	4620      	mov	r0, r4
 8005692:	f000 f82f 	bl	80056f4 <_free_r>
 8005696:	69a3      	ldr	r3, [r4, #24]
 8005698:	b1e3      	cbz	r3, 80056d4 <_reclaim_reent+0xb0>
 800569a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800569c:	4620      	mov	r0, r4
 800569e:	4798      	blx	r3
 80056a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80056a2:	b1b9      	cbz	r1, 80056d4 <_reclaim_reent+0xb0>
 80056a4:	4620      	mov	r0, r4
 80056a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80056aa:	f7ff bfad 	b.w	8005608 <cleanup_glue>
 80056ae:	5949      	ldr	r1, [r1, r5]
 80056b0:	b941      	cbnz	r1, 80056c4 <_reclaim_reent+0xa0>
 80056b2:	3504      	adds	r5, #4
 80056b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056b6:	2d80      	cmp	r5, #128	; 0x80
 80056b8:	68d9      	ldr	r1, [r3, #12]
 80056ba:	d1f8      	bne.n	80056ae <_reclaim_reent+0x8a>
 80056bc:	4620      	mov	r0, r4
 80056be:	f000 f819 	bl	80056f4 <_free_r>
 80056c2:	e7ba      	b.n	800563a <_reclaim_reent+0x16>
 80056c4:	680e      	ldr	r6, [r1, #0]
 80056c6:	4620      	mov	r0, r4
 80056c8:	f000 f814 	bl	80056f4 <_free_r>
 80056cc:	4631      	mov	r1, r6
 80056ce:	e7ef      	b.n	80056b0 <_reclaim_reent+0x8c>
 80056d0:	2500      	movs	r5, #0
 80056d2:	e7ef      	b.n	80056b4 <_reclaim_reent+0x90>
 80056d4:	bd70      	pop	{r4, r5, r6, pc}
 80056d6:	bf00      	nop
 80056d8:	20000010 	.word	0x20000010

080056dc <__malloc_lock>:
 80056dc:	4801      	ldr	r0, [pc, #4]	; (80056e4 <__malloc_lock+0x8>)
 80056de:	f7ff bf89 	b.w	80055f4 <__retarget_lock_acquire_recursive>
 80056e2:	bf00      	nop
 80056e4:	20001194 	.word	0x20001194

080056e8 <__malloc_unlock>:
 80056e8:	4801      	ldr	r0, [pc, #4]	; (80056f0 <__malloc_unlock+0x8>)
 80056ea:	f7ff bf84 	b.w	80055f6 <__retarget_lock_release_recursive>
 80056ee:	bf00      	nop
 80056f0:	20001194 	.word	0x20001194

080056f4 <_free_r>:
 80056f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056f6:	2900      	cmp	r1, #0
 80056f8:	d044      	beq.n	8005784 <_free_r+0x90>
 80056fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056fe:	9001      	str	r0, [sp, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	f1a1 0404 	sub.w	r4, r1, #4
 8005706:	bfb8      	it	lt
 8005708:	18e4      	addlt	r4, r4, r3
 800570a:	f7ff ffe7 	bl	80056dc <__malloc_lock>
 800570e:	4a1e      	ldr	r2, [pc, #120]	; (8005788 <_free_r+0x94>)
 8005710:	9801      	ldr	r0, [sp, #4]
 8005712:	6813      	ldr	r3, [r2, #0]
 8005714:	b933      	cbnz	r3, 8005724 <_free_r+0x30>
 8005716:	6063      	str	r3, [r4, #4]
 8005718:	6014      	str	r4, [r2, #0]
 800571a:	b003      	add	sp, #12
 800571c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005720:	f7ff bfe2 	b.w	80056e8 <__malloc_unlock>
 8005724:	42a3      	cmp	r3, r4
 8005726:	d908      	bls.n	800573a <_free_r+0x46>
 8005728:	6825      	ldr	r5, [r4, #0]
 800572a:	1961      	adds	r1, r4, r5
 800572c:	428b      	cmp	r3, r1
 800572e:	bf01      	itttt	eq
 8005730:	6819      	ldreq	r1, [r3, #0]
 8005732:	685b      	ldreq	r3, [r3, #4]
 8005734:	1949      	addeq	r1, r1, r5
 8005736:	6021      	streq	r1, [r4, #0]
 8005738:	e7ed      	b.n	8005716 <_free_r+0x22>
 800573a:	461a      	mov	r2, r3
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	b10b      	cbz	r3, 8005744 <_free_r+0x50>
 8005740:	42a3      	cmp	r3, r4
 8005742:	d9fa      	bls.n	800573a <_free_r+0x46>
 8005744:	6811      	ldr	r1, [r2, #0]
 8005746:	1855      	adds	r5, r2, r1
 8005748:	42a5      	cmp	r5, r4
 800574a:	d10b      	bne.n	8005764 <_free_r+0x70>
 800574c:	6824      	ldr	r4, [r4, #0]
 800574e:	4421      	add	r1, r4
 8005750:	1854      	adds	r4, r2, r1
 8005752:	42a3      	cmp	r3, r4
 8005754:	6011      	str	r1, [r2, #0]
 8005756:	d1e0      	bne.n	800571a <_free_r+0x26>
 8005758:	681c      	ldr	r4, [r3, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	6053      	str	r3, [r2, #4]
 800575e:	4421      	add	r1, r4
 8005760:	6011      	str	r1, [r2, #0]
 8005762:	e7da      	b.n	800571a <_free_r+0x26>
 8005764:	d902      	bls.n	800576c <_free_r+0x78>
 8005766:	230c      	movs	r3, #12
 8005768:	6003      	str	r3, [r0, #0]
 800576a:	e7d6      	b.n	800571a <_free_r+0x26>
 800576c:	6825      	ldr	r5, [r4, #0]
 800576e:	1961      	adds	r1, r4, r5
 8005770:	428b      	cmp	r3, r1
 8005772:	bf04      	itt	eq
 8005774:	6819      	ldreq	r1, [r3, #0]
 8005776:	685b      	ldreq	r3, [r3, #4]
 8005778:	6063      	str	r3, [r4, #4]
 800577a:	bf04      	itt	eq
 800577c:	1949      	addeq	r1, r1, r5
 800577e:	6021      	streq	r1, [r4, #0]
 8005780:	6054      	str	r4, [r2, #4]
 8005782:	e7ca      	b.n	800571a <_free_r+0x26>
 8005784:	b003      	add	sp, #12
 8005786:	bd30      	pop	{r4, r5, pc}
 8005788:	20001198 	.word	0x20001198

0800578c <_init>:
 800578c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800578e:	bf00      	nop
 8005790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005792:	bc08      	pop	{r3}
 8005794:	469e      	mov	lr, r3
 8005796:	4770      	bx	lr

08005798 <_fini>:
 8005798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579a:	bf00      	nop
 800579c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800579e:	bc08      	pop	{r3}
 80057a0:	469e      	mov	lr, r3
 80057a2:	4770      	bx	lr
