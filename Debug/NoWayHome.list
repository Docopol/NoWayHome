
NoWayHome.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000590  0800b128  0800b128  0001b128  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6b8  0800b6b8  000202a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b6b8  0800b6b8  0001b6b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b6c0  0800b6c0  000202a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6c0  0800b6c0  0001b6c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b6c4  0800b6c4  0001b6c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a4  20000000  0800b6c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001970  200002a4  0800b96c  000202a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c14  0800b96c  00021c14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fd4f  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047eb  00000000  00000000  00040023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b40  00000000  00000000  00044810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001918  00000000  00000000  00046350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bfc3  00000000  00000000  00047c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021da6  00000000  00000000  00073c2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010353b  00000000  00000000  000959d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00198f0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008084  00000000  00000000  00198f5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002a4 	.word	0x200002a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b110 	.word	0x0800b110

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002a8 	.word	0x200002a8
 80001cc:	0800b110 	.word	0x0800b110

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ebc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	4a06      	ldr	r2, [pc, #24]	; (8000edc <vApplicationGetIdleTaskMemory+0x30>)
 8000ec2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2280      	movs	r2, #128	; 0x80
 8000ec8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000eca:	bf00      	nop
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	200002c0 	.word	0x200002c0
 8000edc:	20000374 	.word	0x20000374

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	b5b0      	push	{r4, r5, r7, lr}
 8000ee2:	b09c      	sub	sp, #112	; 0x70
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee6:	f001 ff09 	bl	8002cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eea:	f000 f86f 	bl	8000fcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eee:	f000 f94b 	bl	8001188 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000ef2:	f000 f8c1 	bl	8001078 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000ef6:	f000 f8fd 	bl	80010f4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	BSP_ACCELERO_Init();
 8000efa:	f001 f827 	bl	8001f4c <BSP_ACCELERO_Init>
	BSP_TSENSOR_Init();
 8000efe:	f001 f95d 	bl	80021bc <BSP_TSENSOR_Init>
	BSP_GYRO_Init();
 8000f02:	f001 f879 	bl	8001ff8 <BSP_GYRO_Init>
	BSP_PSENSOR_Init();
 8000f06:	f001 f92b 	bl	8002160 <BSP_PSENSOR_Init>
	BSP_MAGNETO_Init();
 8000f0a:	f001 f8e5 	bl	80020d8 <BSP_MAGNETO_Init>
	BSP_HSENSOR_Init();
 8000f0e:	f001 f8b5 	bl	800207c <BSP_HSENSOR_Init>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000f12:	4b26      	ldr	r3, [pc, #152]	; (8000fac <main+0xcc>)
 8000f14:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000f18:	461d      	mov	r5, r3
 8000f1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f1e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000f26:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f005 fcc9 	bl	80068c4 <osThreadCreate>
 8000f32:	4603      	mov	r3, r0
 8000f34:	4a1e      	ldr	r2, [pc, #120]	; (8000fb0 <main+0xd0>)
 8000f36:	6013      	str	r3, [r2, #0]

  /* definition and creation of BlinkLed */
  osThreadDef(BlinkLed, StartBlinkLed, osPriorityNormal, 0, 128);
 8000f38:	4b1e      	ldr	r3, [pc, #120]	; (8000fb4 <main+0xd4>)
 8000f3a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000f3e:	461d      	mov	r5, r3
 8000f40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BlinkLedHandle = osThreadCreate(osThread(BlinkLed), NULL);
 8000f4c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f005 fcb6 	bl	80068c4 <osThreadCreate>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	4a17      	ldr	r2, [pc, #92]	; (8000fb8 <main+0xd8>)
 8000f5c:	6013      	str	r3, [r2, #0]

  /* definition and creation of RnT_Sensor */
  osThreadDef(RnT_Sensor, Start_RnT_Sensor, osPriorityBelowNormal, 0, 512);
 8000f5e:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <main+0xdc>)
 8000f60:	f107 041c 	add.w	r4, r7, #28
 8000f64:	461d      	mov	r5, r3
 8000f66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RnT_SensorHandle = osThreadCreate(osThread(RnT_Sensor), NULL);
 8000f72:	f107 031c 	add.w	r3, r7, #28
 8000f76:	2100      	movs	r1, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f005 fca3 	bl	80068c4 <osThreadCreate>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	4a0f      	ldr	r2, [pc, #60]	; (8000fc0 <main+0xe0>)
 8000f82:	6013      	str	r3, [r2, #0]

  /* definition and creation of Int_But */
  osThreadDef(Int_But, StartInt_But, osPriorityAboveNormal, 0, 128);
 8000f84:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <main+0xe4>)
 8000f86:	463c      	mov	r4, r7
 8000f88:	461d      	mov	r5, r3
 8000f8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Int_ButHandle = osThreadCreate(osThread(Int_But), NULL);
 8000f96:	463b      	mov	r3, r7
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f005 fc92 	bl	80068c4 <osThreadCreate>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4a09      	ldr	r2, [pc, #36]	; (8000fc8 <main+0xe8>)
 8000fa4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000fa6:	f005 fc86 	bl	80068b6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000faa:	e7fe      	b.n	8000faa <main+0xca>
 8000fac:	0800b154 	.word	0x0800b154
 8000fb0:	2000064c 	.word	0x2000064c
 8000fb4:	0800b170 	.word	0x0800b170
 8000fb8:	20000650 	.word	0x20000650
 8000fbc:	0800b18c 	.word	0x0800b18c
 8000fc0:	20000654 	.word	0x20000654
 8000fc4:	0800b1a8 	.word	0x0800b1a8
 8000fc8:	20000658 	.word	0x20000658

08000fcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b096      	sub	sp, #88	; 0x58
 8000fd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	2244      	movs	r2, #68	; 0x44
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f007 fa47 	bl	800846e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
 8000fec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fee:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ff2:	f003 f8d9 	bl	80041a8 <HAL_PWREx_ControlVoltageScaling>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ffc:	f000 faee 	bl	80015dc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001000:	f003 f8b4 	bl	800416c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001004:	4b1b      	ldr	r3, [pc, #108]	; (8001074 <SystemClock_Config+0xa8>)
 8001006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800100a:	4a1a      	ldr	r2, [pc, #104]	; (8001074 <SystemClock_Config+0xa8>)
 800100c:	f023 0318 	bic.w	r3, r3, #24
 8001010:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001014:	2314      	movs	r3, #20
 8001016:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001018:	2301      	movs	r3, #1
 800101a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800101c:	2301      	movs	r3, #1
 800101e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001024:	2360      	movs	r3, #96	; 0x60
 8001026:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001028:	2300      	movs	r3, #0
 800102a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4618      	mov	r0, r3
 8001032:	f003 f90f 	bl	8004254 <HAL_RCC_OscConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800103c:	f000 face 	bl	80015dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001040:	230f      	movs	r3, #15
 8001042:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001044:	2300      	movs	r3, #0
 8001046:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001048:	2300      	movs	r3, #0
 800104a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800104c:	2300      	movs	r3, #0
 800104e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001050:	2300      	movs	r3, #0
 8001052:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001054:	463b      	mov	r3, r7
 8001056:	2100      	movs	r1, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f003 fcd7 	bl	8004a0c <HAL_RCC_ClockConfig>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001064:	f000 faba 	bl	80015dc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001068:	f004 fa10 	bl	800548c <HAL_RCCEx_EnableMSIPLLMode>
}
 800106c:	bf00      	nop
 800106e:	3758      	adds	r7, #88	; 0x58
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40021000 	.word	0x40021000

08001078 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800107c:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <MX_I2C2_Init+0x74>)
 800107e:	4a1c      	ldr	r2, [pc, #112]	; (80010f0 <MX_I2C2_Init+0x78>)
 8001080:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8001082:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <MX_I2C2_Init+0x74>)
 8001084:	f640 6214 	movw	r2, #3604	; 0xe14
 8001088:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800108a:	4b18      	ldr	r3, [pc, #96]	; (80010ec <MX_I2C2_Init+0x74>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001090:	4b16      	ldr	r3, [pc, #88]	; (80010ec <MX_I2C2_Init+0x74>)
 8001092:	2201      	movs	r2, #1
 8001094:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <MX_I2C2_Init+0x74>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800109c:	4b13      	ldr	r3, [pc, #76]	; (80010ec <MX_I2C2_Init+0x74>)
 800109e:	2200      	movs	r2, #0
 80010a0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010a2:	4b12      	ldr	r3, [pc, #72]	; (80010ec <MX_I2C2_Init+0x74>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010a8:	4b10      	ldr	r3, [pc, #64]	; (80010ec <MX_I2C2_Init+0x74>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ae:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <MX_I2C2_Init+0x74>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80010b4:	480d      	ldr	r0, [pc, #52]	; (80010ec <MX_I2C2_Init+0x74>)
 80010b6:	f002 fa2e 	bl	8003516 <HAL_I2C_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80010c0:	f000 fa8c 	bl	80015dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010c4:	2100      	movs	r1, #0
 80010c6:	4809      	ldr	r0, [pc, #36]	; (80010ec <MX_I2C2_Init+0x74>)
 80010c8:	f002 ffb8 	bl	800403c <HAL_I2CEx_ConfigAnalogFilter>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80010d2:	f000 fa83 	bl	80015dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80010d6:	2100      	movs	r1, #0
 80010d8:	4804      	ldr	r0, [pc, #16]	; (80010ec <MX_I2C2_Init+0x74>)
 80010da:	f002 fffa 	bl	80040d2 <HAL_I2CEx_ConfigDigitalFilter>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80010e4:	f000 fa7a 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000574 	.word	0x20000574
 80010f0:	40005800 	.word	0x40005800

080010f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */
	//    __HAL_RCC_GPIOB_CLK_ENABLE();
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001108:	2307      	movs	r3, #7
 800110a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800110c:	23c0      	movs	r3, #192	; 0xc0
 800110e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001110:	2302      	movs	r3, #2
 8001112:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001118:	2303      	movs	r3, #3
 800111a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	4619      	mov	r1, r3
 8001120:	4816      	ldr	r0, [pc, #88]	; (800117c <MX_USART1_UART_Init+0x88>)
 8001122:	f001 ff05 	bl	8002f30 <HAL_GPIO_Init>
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001126:	4b16      	ldr	r3, [pc, #88]	; (8001180 <MX_USART1_UART_Init+0x8c>)
 8001128:	4a16      	ldr	r2, [pc, #88]	; (8001184 <MX_USART1_UART_Init+0x90>)
 800112a:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800112c:	4b14      	ldr	r3, [pc, #80]	; (8001180 <MX_USART1_UART_Init+0x8c>)
 800112e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001132:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <MX_USART1_UART_Init+0x8c>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800113a:	4b11      	ldr	r3, [pc, #68]	; (8001180 <MX_USART1_UART_Init+0x8c>)
 800113c:	2200      	movs	r2, #0
 800113e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001140:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <MX_USART1_UART_Init+0x8c>)
 8001142:	2200      	movs	r2, #0
 8001144:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <MX_USART1_UART_Init+0x8c>)
 8001148:	220c      	movs	r2, #12
 800114a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <MX_USART1_UART_Init+0x8c>)
 800114e:	2200      	movs	r2, #0
 8001150:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <MX_USART1_UART_Init+0x8c>)
 8001154:	2200      	movs	r2, #0
 8001156:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001158:	4b09      	ldr	r3, [pc, #36]	; (8001180 <MX_USART1_UART_Init+0x8c>)
 800115a:	2200      	movs	r2, #0
 800115c:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800115e:	4b08      	ldr	r3, [pc, #32]	; (8001180 <MX_USART1_UART_Init+0x8c>)
 8001160:	2200      	movs	r2, #0
 8001162:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001164:	4806      	ldr	r0, [pc, #24]	; (8001180 <MX_USART1_UART_Init+0x8c>)
 8001166:	f004 fe45 	bl	8005df4 <HAL_UART_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8001170:	f000 fa34 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001174:	bf00      	nop
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	48000400 	.word	0x48000400
 8001180:	200005c8 	.word	0x200005c8
 8001184:	40013800 	.word	0x40013800

08001188 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119e:	4b2f      	ldr	r3, [pc, #188]	; (800125c <MX_GPIO_Init+0xd4>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a2:	4a2e      	ldr	r2, [pc, #184]	; (800125c <MX_GPIO_Init+0xd4>)
 80011a4:	f043 0304 	orr.w	r3, r3, #4
 80011a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011aa:	4b2c      	ldr	r3, [pc, #176]	; (800125c <MX_GPIO_Init+0xd4>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	f003 0304 	and.w	r3, r3, #4
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011b6:	4b29      	ldr	r3, [pc, #164]	; (800125c <MX_GPIO_Init+0xd4>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	4a28      	ldr	r2, [pc, #160]	; (800125c <MX_GPIO_Init+0xd4>)
 80011bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c2:	4b26      	ldr	r3, [pc, #152]	; (800125c <MX_GPIO_Init+0xd4>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ce:	4b23      	ldr	r3, [pc, #140]	; (800125c <MX_GPIO_Init+0xd4>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d2:	4a22      	ldr	r2, [pc, #136]	; (800125c <MX_GPIO_Init+0xd4>)
 80011d4:	f043 0302 	orr.w	r3, r3, #2
 80011d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011da:	4b20      	ldr	r3, [pc, #128]	; (800125c <MX_GPIO_Init+0xd4>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	4b1d      	ldr	r3, [pc, #116]	; (800125c <MX_GPIO_Init+0xd4>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	4a1c      	ldr	r2, [pc, #112]	; (800125c <MX_GPIO_Init+0xd4>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f2:	4b1a      	ldr	r3, [pc, #104]	; (800125c <MX_GPIO_Init+0xd4>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001204:	4816      	ldr	r0, [pc, #88]	; (8001260 <MX_GPIO_Init+0xd8>)
 8001206:	f002 f931 	bl	800346c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800120a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800120e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001210:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001214:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	4619      	mov	r1, r3
 8001220:	4810      	ldr	r0, [pc, #64]	; (8001264 <MX_GPIO_Init+0xdc>)
 8001222:	f001 fe85 	bl	8002f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001226:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800122a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122c:	2301      	movs	r3, #1
 800122e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001234:	2300      	movs	r3, #0
 8001236:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	4619      	mov	r1, r3
 800123e:	4808      	ldr	r0, [pc, #32]	; (8001260 <MX_GPIO_Init+0xd8>)
 8001240:	f001 fe76 	bl	8002f30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001244:	2200      	movs	r2, #0
 8001246:	2105      	movs	r1, #5
 8001248:	2028      	movs	r0, #40	; 0x28
 800124a:	f001 fe47 	bl	8002edc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800124e:	2028      	movs	r0, #40	; 0x28
 8001250:	f001 fe60 	bl	8002f14 <HAL_NVIC_EnableIRQ>

}
 8001254:	bf00      	nop
 8001256:	3728      	adds	r7, #40	; 0x28
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40021000 	.word	0x40021000
 8001260:	48000400 	.word	0x48000400
 8001264:	48000800 	.word	0x48000800

08001268 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	const portTickType freq_button_sleep = 1000;
 8001270:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001274:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{
		if(button_press > 0)
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <StartDefaultTask+0x30>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	dd07      	ble.n	800128e <StartDefaultTask+0x26>
		{
			vTaskDelay(freq_button_sleep);
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	f005 fe48 	bl	8006f14 <vTaskDelay>
			vTaskResume(Int_ButHandle);
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <StartDefaultTask+0x34>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f005 ff3b 	bl	8007104 <vTaskResume>
		}
		vTaskSuspend(NULL);
 800128e:	2000      	movs	r0, #0
 8001290:	f005 fe74 	bl	8006f7c <vTaskSuspend>
		if(button_press > 0)
 8001294:	e7ef      	b.n	8001276 <StartDefaultTask+0xe>
 8001296:	bf00      	nop
 8001298:	20000664 	.word	0x20000664
 800129c:	20000658 	.word	0x20000658

080012a0 <StartBlinkLed>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBlinkLed */
void StartBlinkLed(void const * argument)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkLed */
	portTickType lastRun;
	const portTickType frequency_battle = 500;
 80012a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012ac:	617b      	str	r3, [r7, #20]
	const portTickType frequency_warning = 166;
 80012ae:	23a6      	movs	r3, #166	; 0xa6
 80012b0:	613b      	str	r3, [r7, #16]
	lastRun = xTaskGetTickCount();
 80012b2:	f006 f90b 	bl	80074cc <xTaskGetTickCount>
 80012b6:	4603      	mov	r3, r0
 80012b8:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{
		if(mode == 1 && state == 0)
 80012ba:	4b18      	ldr	r3, [pc, #96]	; (800131c <StartBlinkLed+0x7c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d10f      	bne.n	80012e2 <StartBlinkLed+0x42>
 80012c2:	4b17      	ldr	r3, [pc, #92]	; (8001320 <StartBlinkLed+0x80>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d10b      	bne.n	80012e2 <StartBlinkLed+0x42>
		{
			HAL_GPIO_TogglePin(GPIOB, LED_Pin);
 80012ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012ce:	4815      	ldr	r0, [pc, #84]	; (8001324 <StartBlinkLed+0x84>)
 80012d0:	f002 f8e4 	bl	800349c <HAL_GPIO_TogglePin>
			vTaskDelayUntil(&lastRun,frequency_battle);
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	6979      	ldr	r1, [r7, #20]
 80012da:	4618      	mov	r0, r3
 80012dc:	f005 fd9c 	bl	8006e18 <vTaskDelayUntil>
 80012e0:	e01b      	b.n	800131a <StartBlinkLed+0x7a>
		}
		else if(state == 1)
 80012e2:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <StartBlinkLed+0x80>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d10b      	bne.n	8001302 <StartBlinkLed+0x62>
		{
			HAL_GPIO_TogglePin(GPIOB, LED_Pin);
 80012ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012ee:	480d      	ldr	r0, [pc, #52]	; (8001324 <StartBlinkLed+0x84>)
 80012f0:	f002 f8d4 	bl	800349c <HAL_GPIO_TogglePin>
			vTaskDelayUntil(&lastRun,frequency_warning);
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	6939      	ldr	r1, [r7, #16]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f005 fd8c 	bl	8006e18 <vTaskDelayUntil>
 8001300:	e7db      	b.n	80012ba <StartBlinkLed+0x1a>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_SET);
 8001302:	2201      	movs	r2, #1
 8001304:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001308:	4806      	ldr	r0, [pc, #24]	; (8001324 <StartBlinkLed+0x84>)
 800130a:	f002 f8af 	bl	800346c <HAL_GPIO_WritePin>
			vTaskDelayUntil(&lastRun,frequency_warning);
 800130e:	f107 030c 	add.w	r3, r7, #12
 8001312:	6939      	ldr	r1, [r7, #16]
 8001314:	4618      	mov	r0, r3
 8001316:	f005 fd7f 	bl	8006e18 <vTaskDelayUntil>
		if(mode == 1 && state == 0)
 800131a:	e7ce      	b.n	80012ba <StartBlinkLed+0x1a>
 800131c:	2000065c 	.word	0x2000065c
 8001320:	20000660 	.word	0x20000660
 8001324:	48000400 	.word	0x48000400

08001328 <Start_RnT_Sensor>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_RnT_Sensor */
void Start_RnT_Sensor(void const * argument)
{
 8001328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800132c:	b0c6      	sub	sp, #280	; 0x118
 800132e:	af06      	add	r7, sp, #24
 8001330:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_RnT_Sensor */
	portTickType lastRun;
	const portTickType frequency_transmit = 1000;
 8001332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001336:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	float hum_data[1];

	/* Infinite loop */
	for(;;)
	{
		if(mode == 0 && state == 0)
 800133a:	4b6b      	ldr	r3, [pc, #428]	; (80014e8 <Start_RnT_Sensor+0x1c0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d150      	bne.n	80013e4 <Start_RnT_Sensor+0xbc>
 8001342:	4b6a      	ldr	r3, [pc, #424]	; (80014ec <Start_RnT_Sensor+0x1c4>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d14c      	bne.n	80013e4 <Start_RnT_Sensor+0xbc>
		{
//			Read_Gyro(gyro_data);
			Read_Mag(mag_data);
 800134a:	f107 0320 	add.w	r3, r7, #32
 800134e:	4618      	mov	r0, r3
 8001350:	f000 f998 	bl	8001684 <Read_Mag>
			Read_Pres(pres_data);
 8001354:	f107 030c 	add.w	r3, r7, #12
 8001358:	4618      	mov	r0, r3
 800135a:	f000 f9e0 	bl	800171e <Read_Pres>
			Read_Hum(hum_data);
 800135e:	f107 0308 	add.w	r3, r7, #8
 8001362:	4618      	mov	r0, r3
 8001364:	f000 f9cc 	bl	8001700 <Read_Hum>
			gyro_data[2] = 0;
 8001368:	f04f 0300 	mov.w	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
			sprintf(message_exploration, "G: %2.2f(deg/s), M: %2.2f (g),  P: %2.2f (hPa), H: %2.2f (%%rH), \r\nFluxer's battery is 0 %%\r\n", gyro_data[2], mag_data[2], pres_data[0], hum_data[0]);
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff f8e9 	bl	8000548 <__aeabi_f2d>
 8001376:	4682      	mov	sl, r0
 8001378:	468b      	mov	fp, r1
 800137a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f8e3 	bl	8000548 <__aeabi_f2d>
 8001382:	4604      	mov	r4, r0
 8001384:	460d      	mov	r5, r1
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f8dd 	bl	8000548 <__aeabi_f2d>
 800138e:	4680      	mov	r8, r0
 8001390:	4689      	mov	r9, r1
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff f8d7 	bl	8000548 <__aeabi_f2d>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 80013a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80013a6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80013aa:	e9cd 4500 	strd	r4, r5, [sp]
 80013ae:	4652      	mov	r2, sl
 80013b0:	465b      	mov	r3, fp
 80013b2:	494f      	ldr	r1, [pc, #316]	; (80014f0 <Start_RnT_Sensor+0x1c8>)
 80013b4:	f007 fddc 	bl	8008f70 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)message_exploration, strlen(message_exploration), 0xFFFF);
 80013b8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80013bc:	4618      	mov	r0, r3
 80013be:	f7fe ff07 	bl	80001d0 <strlen>
 80013c2:	4603      	mov	r3, r0
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80013ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013ce:	4849      	ldr	r0, [pc, #292]	; (80014f4 <Start_RnT_Sensor+0x1cc>)
 80013d0:	f004 fd5e 	bl	8005e90 <HAL_UART_Transmit>
			vTaskDelayUntil(&lastRun,frequency_transmit);
 80013d4:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80013d8:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 80013dc:	4618      	mov	r0, r3
 80013de:	f005 fd1b 	bl	8006e18 <vTaskDelayUntil>
 80013e2:	e080      	b.n	80014e6 <Start_RnT_Sensor+0x1be>

		}
		else if(mode == 1 && state == 0)
 80013e4:	4b40      	ldr	r3, [pc, #256]	; (80014e8 <Start_RnT_Sensor+0x1c0>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d1a6      	bne.n	800133a <Start_RnT_Sensor+0x12>
 80013ec:	4b3f      	ldr	r3, [pc, #252]	; (80014ec <Start_RnT_Sensor+0x1c4>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1a2      	bne.n	800133a <Start_RnT_Sensor+0x12>
		{
			Read_Acc(accel_data);
 80013f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013f8:	4618      	mov	r0, r3
 80013fa:	f000 f8f5 	bl	80015e8 <Read_Acc>
			Read_Mag(mag_data);
 80013fe:	f107 0320 	add.w	r3, r7, #32
 8001402:	4618      	mov	r0, r3
 8001404:	f000 f93e 	bl	8001684 <Read_Mag>
			Read_Temp(temp_data);
 8001408:	f107 0310 	add.w	r3, r7, #16
 800140c:	4618      	mov	r0, r3
 800140e:	f000 f929 	bl	8001664 <Read_Temp>
//			Read_Gyro(gyro_data);
			Read_Pres(pres_data);
 8001412:	f107 030c 	add.w	r3, r7, #12
 8001416:	4618      	mov	r0, r3
 8001418:	f000 f981 	bl	800171e <Read_Pres>
			Read_Hum(hum_data);
 800141c:	f107 0308 	add.w	r3, r7, #8
 8001420:	4618      	mov	r0, r3
 8001422:	f000 f96d 	bl	8001700 <Read_Hum>
			gyro_data[2] =0;
 8001426:	f04f 0300 	mov.w	r3, #0
 800142a:	61fb      	str	r3, [r7, #28]
			sprintf(message_battle1, "T:%2.2f (deg C), P: %2.2f (hPa), H: %2.2f (%%rH), ", temp_data[0],  pres_data[0],  hum_data[0]);
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff f88a 	bl	8000548 <__aeabi_f2d>
 8001434:	4680      	mov	r8, r0
 8001436:	4689      	mov	r9, r1
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff f884 	bl	8000548 <__aeabi_f2d>
 8001440:	4604      	mov	r4, r0
 8001442:	460d      	mov	r5, r1
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff f87e 	bl	8000548 <__aeabi_f2d>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8001454:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001458:	e9cd 4500 	strd	r4, r5, [sp]
 800145c:	4642      	mov	r2, r8
 800145e:	464b      	mov	r3, r9
 8001460:	4925      	ldr	r1, [pc, #148]	; (80014f8 <Start_RnT_Sensor+0x1d0>)
 8001462:	f007 fd85 	bl	8008f70 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)message_battle1, strlen(message_battle1), 0xFFFF);
 8001466:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800146a:	4618      	mov	r0, r3
 800146c:	f7fe feb0 	bl	80001d0 <strlen>
 8001470:	4603      	mov	r3, r0
 8001472:	b29a      	uxth	r2, r3
 8001474:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001478:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800147c:	481d      	ldr	r0, [pc, #116]	; (80014f4 <Start_RnT_Sensor+0x1cc>)
 800147e:	f004 fd07 	bl	8005e90 <HAL_UART_Transmit>
			sprintf(message_battle2, "A: %2.2f (m/s^2), G: %2.2f(deg/s), M: %2.2f (g)\r\n", accel_data[2], gyro_data[2], mag_data[2]);
 8001482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff f85f 	bl	8000548 <__aeabi_f2d>
 800148a:	4680      	mov	r8, r0
 800148c:	4689      	mov	r9, r1
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff f859 	bl	8000548 <__aeabi_f2d>
 8001496:	4604      	mov	r4, r0
 8001498:	460d      	mov	r5, r1
 800149a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff f853 	bl	8000548 <__aeabi_f2d>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80014aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80014ae:	e9cd 4500 	strd	r4, r5, [sp]
 80014b2:	4642      	mov	r2, r8
 80014b4:	464b      	mov	r3, r9
 80014b6:	4911      	ldr	r1, [pc, #68]	; (80014fc <Start_RnT_Sensor+0x1d4>)
 80014b8:	f007 fd5a 	bl	8008f70 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)message_battle2, strlen(message_battle2), 0xFFFF);
 80014bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7fe fe85 	bl	80001d0 <strlen>
 80014c6:	4603      	mov	r3, r0
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80014ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014d2:	4808      	ldr	r0, [pc, #32]	; (80014f4 <Start_RnT_Sensor+0x1cc>)
 80014d4:	f004 fcdc 	bl	8005e90 <HAL_UART_Transmit>
			vTaskDelayUntil(&lastRun,frequency_transmit);
 80014d8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80014dc:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 80014e0:	4618      	mov	r0, r3
 80014e2:	f005 fc99 	bl	8006e18 <vTaskDelayUntil>
		if(mode == 0 && state == 0)
 80014e6:	e728      	b.n	800133a <Start_RnT_Sensor+0x12>
 80014e8:	2000065c 	.word	0x2000065c
 80014ec:	20000660 	.word	0x20000660
 80014f0:	0800b1c4 	.word	0x0800b1c4
 80014f4:	200005c8 	.word	0x200005c8
 80014f8:	0800b224 	.word	0x0800b224
 80014fc:	0800b258 	.word	0x0800b258

08001500 <StartInt_But>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartInt_But */
void StartInt_But(void const * argument)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartInt_But */
	portTickType lastRun;
	lastRun = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{
		vTaskSuspend(NULL);
 800150c:	2000      	movs	r0, #0
 800150e:	f005 fd35 	bl	8006f7c <vTaskSuspend>
		if((xTaskGetTickCount() - lastRun) > 750)
 8001512:	f005 ffdb 	bl	80074cc <xTaskGetTickCount>
 8001516:	4602      	mov	r2, r0
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001520:	4293      	cmp	r3, r2
 8001522:	d93b      	bls.n	800159c <StartInt_But+0x9c>
		{
			if(button_press == 0)
 8001524:	4b20      	ldr	r3, [pc, #128]	; (80015a8 <StartInt_But+0xa8>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d10b      	bne.n	8001544 <StartInt_But+0x44>
			{
				button_press = 1;
 800152c:	4b1e      	ldr	r3, [pc, #120]	; (80015a8 <StartInt_But+0xa8>)
 800152e:	2201      	movs	r2, #1
 8001530:	601a      	str	r2, [r3, #0]
				lastRun = xTaskGetTickCount();
 8001532:	f005 ffcb 	bl	80074cc <xTaskGetTickCount>
 8001536:	60f8      	str	r0, [r7, #12]
				vTaskResume(defaultTaskHandle);
 8001538:	4b1c      	ldr	r3, [pc, #112]	; (80015ac <StartInt_But+0xac>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f005 fde1 	bl	8007104 <vTaskResume>
 8001542:	e7e3      	b.n	800150c <StartInt_But+0xc>
			}
			else if(button_press == 1)
 8001544:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <StartInt_But+0xa8>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d10d      	bne.n	8001568 <StartInt_But+0x68>
			{
				state = !state;
 800154c:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <StartInt_But+0xb0>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	bf0c      	ite	eq
 8001554:	2301      	moveq	r3, #1
 8001556:	2300      	movne	r3, #0
 8001558:	b2db      	uxtb	r3, r3
 800155a:	461a      	mov	r2, r3
 800155c:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <StartInt_But+0xb0>)
 800155e:	601a      	str	r2, [r3, #0]
				button_press = 0;
 8001560:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <StartInt_But+0xa8>)
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	e7d1      	b.n	800150c <StartInt_But+0xc>
			}
			else if(button_press == 2 && state == 0)
 8001568:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <StartInt_But+0xa8>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b02      	cmp	r3, #2
 800156e:	d111      	bne.n	8001594 <StartInt_But+0x94>
 8001570:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <StartInt_But+0xb0>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d10d      	bne.n	8001594 <StartInt_But+0x94>
			{
				mode = !mode;
 8001578:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <StartInt_But+0xb4>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	bf0c      	ite	eq
 8001580:	2301      	moveq	r3, #1
 8001582:	2300      	movne	r3, #0
 8001584:	b2db      	uxtb	r3, r3
 8001586:	461a      	mov	r2, r3
 8001588:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <StartInt_But+0xb4>)
 800158a:	601a      	str	r2, [r3, #0]
				button_press = 0;
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <StartInt_But+0xa8>)
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	e008      	b.n	80015a6 <StartInt_But+0xa6>
			}
			else
			{
				button_press = 0;
 8001594:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <StartInt_But+0xa8>)
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	e7b7      	b.n	800150c <StartInt_But+0xc>
			}
		}
		else
		{
			button_press += 1;
 800159c:	4b02      	ldr	r3, [pc, #8]	; (80015a8 <StartInt_But+0xa8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	3301      	adds	r3, #1
 80015a2:	4a01      	ldr	r2, [pc, #4]	; (80015a8 <StartInt_But+0xa8>)
 80015a4:	6013      	str	r3, [r2, #0]
		vTaskSuspend(NULL);
 80015a6:	e7b1      	b.n	800150c <StartInt_But+0xc>
 80015a8:	20000664 	.word	0x20000664
 80015ac:	2000064c 	.word	0x2000064c
 80015b0:	20000660 	.word	0x20000660
 80015b4:	2000065c 	.word	0x2000065c

080015b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d101      	bne.n	80015ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015ca:	f001 fbaf 	bl	8002d2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40012c00 	.word	0x40012c00

080015dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e0:	b672      	cpsid	i
}
 80015e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80015e4:	e7fe      	b.n	80015e4 <Error_Handler+0x8>
	...

080015e8 <Read_Acc>:
 */

#include "sensorIO.h"

void Read_Acc(float *accel_data)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
	int16_t accel_data_i16[3] = { 0 };
 80015f0:	f107 0308 	add.w	r3, r7, #8
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	809a      	strh	r2, [r3, #4]
	BSP_ACCELERO_AccGetXYZ(accel_data_i16);
 80015fa:	f107 0308 	add.w	r3, r7, #8
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 fce2 	bl	8001fc8 <BSP_ACCELERO_AccGetXYZ>

	accel_data[0] = (float)accel_data_i16[0] / 100.0f;
 8001604:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001608:	ee07 3a90 	vmov	s15, r3
 800160c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001610:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001660 <Read_Acc+0x78>
 8001614:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	edc3 7a00 	vstr	s15, [r3]
	accel_data[1] = (float)accel_data_i16[1] / 100.0f;
 800161e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001622:	ee07 3a90 	vmov	s15, r3
 8001626:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	3304      	adds	r3, #4
 800162e:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001660 <Read_Acc+0x78>
 8001632:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001636:	edc3 7a00 	vstr	s15, [r3]
	accel_data[2] = (float)accel_data_i16[2] / 100.0f;
 800163a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800163e:	ee07 3a90 	vmov	s15, r3
 8001642:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	3308      	adds	r3, #8
 800164a:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001660 <Read_Acc+0x78>
 800164e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001652:	edc3 7a00 	vstr	s15, [r3]

	return;
 8001656:	bf00      	nop
}
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	42c80000 	.word	0x42c80000

08001664 <Read_Temp>:
void Read_Temp(float *temp_data)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
	temp_data[0] = BSP_TSENSOR_ReadTemp();			// read temperature sensor
 800166c:	f000 fdc2 	bl	80021f4 <BSP_TSENSOR_ReadTemp>
 8001670:	eef0 7a40 	vmov.f32	s15, s0
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	edc3 7a00 	vstr	s15, [r3]
	return;
 800167a:	bf00      	nop
}
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <Read_Mag>:

void Read_Mag(float *mag_data)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	int16_t magneto_data_i16[3] = { 0 };
 800168c:	f107 0308 	add.w	r3, r7, #8
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	809a      	strh	r2, [r3, #4]
	BSP_MAGNETO_GetXYZ(magneto_data_i16);
 8001696:	f107 0308 	add.w	r3, r7, #8
 800169a:	4618      	mov	r0, r3
 800169c:	f000 fd48 	bl	8002130 <BSP_MAGNETO_GetXYZ>
	mag_data[0] = (float)magneto_data_i16[0] / 100.0f;
 80016a0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80016a4:	ee07 3a90 	vmov	s15, r3
 80016a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ac:	eddf 6a13 	vldr	s13, [pc, #76]	; 80016fc <Read_Mag+0x78>
 80016b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	edc3 7a00 	vstr	s15, [r3]
	mag_data[1] = (float)magneto_data_i16[1] / 100.0f;
 80016ba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80016be:	ee07 3a90 	vmov	s15, r3
 80016c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3304      	adds	r3, #4
 80016ca:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80016fc <Read_Mag+0x78>
 80016ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016d2:	edc3 7a00 	vstr	s15, [r3]
	mag_data[2] = (float)magneto_data_i16[2] / 100.0f;
 80016d6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80016da:	ee07 3a90 	vmov	s15, r3
 80016de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3308      	adds	r3, #8
 80016e6:	eddf 6a05 	vldr	s13, [pc, #20]	; 80016fc <Read_Mag+0x78>
 80016ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016ee:	edc3 7a00 	vstr	s15, [r3]

	return;
 80016f2:	bf00      	nop
}
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	42c80000 	.word	0x42c80000

08001700 <Read_Hum>:

	return;
}

void Read_Hum(float *hum_data)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	hum_data[0] = BSP_HSENSOR_ReadHumidity();
 8001708:	f000 fcd8 	bl	80020bc <BSP_HSENSOR_ReadHumidity>
 800170c:	eef0 7a40 	vmov.f32	s15, s0
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	edc3 7a00 	vstr	s15, [r3]
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <Read_Pres>:

void Read_Pres(float *pres_data)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
	pres_data[0] = BSP_PSENSOR_ReadPressure();
 8001726:	f000 fd3b 	bl	80021a0 <BSP_PSENSOR_ReadPressure>
 800172a:	eef0 7a40 	vmov.f32	s15, s0
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	edc3 7a00 	vstr	s15, [r3]
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001742:	4b11      	ldr	r3, [pc, #68]	; (8001788 <HAL_MspInit+0x4c>)
 8001744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001746:	4a10      	ldr	r2, [pc, #64]	; (8001788 <HAL_MspInit+0x4c>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6613      	str	r3, [r2, #96]	; 0x60
 800174e:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <HAL_MspInit+0x4c>)
 8001750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800175a:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <HAL_MspInit+0x4c>)
 800175c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175e:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <HAL_MspInit+0x4c>)
 8001760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001764:	6593      	str	r3, [r2, #88]	; 0x58
 8001766:	4b08      	ldr	r3, [pc, #32]	; (8001788 <HAL_MspInit+0x4c>)
 8001768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176e:	603b      	str	r3, [r7, #0]
 8001770:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	210f      	movs	r1, #15
 8001776:	f06f 0001 	mvn.w	r0, #1
 800177a:	f001 fbaf 	bl	8002edc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40021000 	.word	0x40021000

0800178c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b0ac      	sub	sp, #176	; 0xb0
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	2288      	movs	r2, #136	; 0x88
 80017aa:	2100      	movs	r1, #0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f006 fe5e 	bl	800846e <memset>
  if(hi2c->Instance==I2C2)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a21      	ldr	r2, [pc, #132]	; (800183c <HAL_I2C_MspInit+0xb0>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d13b      	bne.n	8001834 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80017bc:	2380      	movs	r3, #128	; 0x80
 80017be:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80017c0:	2300      	movs	r3, #0
 80017c2:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	4618      	mov	r0, r3
 80017ca:	f003 fb75 	bl	8004eb8 <HAL_RCCEx_PeriphCLKConfig>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80017d4:	f7ff ff02 	bl	80015dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d8:	4b19      	ldr	r3, [pc, #100]	; (8001840 <HAL_I2C_MspInit+0xb4>)
 80017da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017dc:	4a18      	ldr	r2, [pc, #96]	; (8001840 <HAL_I2C_MspInit+0xb4>)
 80017de:	f043 0302 	orr.w	r3, r3, #2
 80017e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017e4:	4b16      	ldr	r3, [pc, #88]	; (8001840 <HAL_I2C_MspInit+0xb4>)
 80017e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80017f0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017f8:	2312      	movs	r3, #18
 80017fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001804:	2303      	movs	r3, #3
 8001806:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800180a:	2304      	movs	r3, #4
 800180c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001810:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001814:	4619      	mov	r1, r3
 8001816:	480b      	ldr	r0, [pc, #44]	; (8001844 <HAL_I2C_MspInit+0xb8>)
 8001818:	f001 fb8a 	bl	8002f30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800181c:	4b08      	ldr	r3, [pc, #32]	; (8001840 <HAL_I2C_MspInit+0xb4>)
 800181e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001820:	4a07      	ldr	r2, [pc, #28]	; (8001840 <HAL_I2C_MspInit+0xb4>)
 8001822:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001826:	6593      	str	r3, [r2, #88]	; 0x58
 8001828:	4b05      	ldr	r3, [pc, #20]	; (8001840 <HAL_I2C_MspInit+0xb4>)
 800182a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001834:	bf00      	nop
 8001836:	37b0      	adds	r7, #176	; 0xb0
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40005800 	.word	0x40005800
 8001840:	40021000 	.word	0x40021000
 8001844:	48000400 	.word	0x48000400

08001848 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0b      	ldr	r2, [pc, #44]	; (8001884 <HAL_I2C_MspDeInit+0x3c>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d10f      	bne.n	800187a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800185a:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <HAL_I2C_MspDeInit+0x40>)
 800185c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185e:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <HAL_I2C_MspDeInit+0x40>)
 8001860:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001864:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8001866:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800186a:	4808      	ldr	r0, [pc, #32]	; (800188c <HAL_I2C_MspDeInit+0x44>)
 800186c:	f001 fd0a 	bl	8003284 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8001870:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001874:	4805      	ldr	r0, [pc, #20]	; (800188c <HAL_I2C_MspDeInit+0x44>)
 8001876:	f001 fd05 	bl	8003284 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40005800 	.word	0x40005800
 8001888:	40021000 	.word	0x40021000
 800188c:	48000400 	.word	0x48000400

08001890 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b0ac      	sub	sp, #176	; 0xb0
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	2288      	movs	r2, #136	; 0x88
 80018ae:	2100      	movs	r1, #0
 80018b0:	4618      	mov	r0, r3
 80018b2:	f006 fddc 	bl	800846e <memset>
  if(huart->Instance==USART1)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a22      	ldr	r2, [pc, #136]	; (8001944 <HAL_UART_MspInit+0xb4>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d13c      	bne.n	800193a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80018c0:	2301      	movs	r3, #1
 80018c2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018c4:	2300      	movs	r3, #0
 80018c6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	4618      	mov	r0, r3
 80018ce:	f003 faf3 	bl	8004eb8 <HAL_RCCEx_PeriphCLKConfig>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018d8:	f7ff fe80 	bl	80015dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018dc:	4b1a      	ldr	r3, [pc, #104]	; (8001948 <HAL_UART_MspInit+0xb8>)
 80018de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018e0:	4a19      	ldr	r2, [pc, #100]	; (8001948 <HAL_UART_MspInit+0xb8>)
 80018e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e6:	6613      	str	r3, [r2, #96]	; 0x60
 80018e8:	4b17      	ldr	r3, [pc, #92]	; (8001948 <HAL_UART_MspInit+0xb8>)
 80018ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f4:	4b14      	ldr	r3, [pc, #80]	; (8001948 <HAL_UART_MspInit+0xb8>)
 80018f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f8:	4a13      	ldr	r2, [pc, #76]	; (8001948 <HAL_UART_MspInit+0xb8>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001900:	4b11      	ldr	r3, [pc, #68]	; (8001948 <HAL_UART_MspInit+0xb8>)
 8001902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800190c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001910:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001914:	2302      	movs	r3, #2
 8001916:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001920:	2303      	movs	r3, #3
 8001922:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001926:	2307      	movs	r3, #7
 8001928:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001930:	4619      	mov	r1, r3
 8001932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001936:	f001 fafb 	bl	8002f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800193a:	bf00      	nop
 800193c:	37b0      	adds	r7, #176	; 0xb0
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40013800 	.word	0x40013800
 8001948:	40021000 	.word	0x40021000

0800194c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08c      	sub	sp, #48	; 0x30
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001954:	2300      	movs	r3, #0
 8001956:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800195a:	4b2e      	ldr	r3, [pc, #184]	; (8001a14 <HAL_InitTick+0xc8>)
 800195c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800195e:	4a2d      	ldr	r2, [pc, #180]	; (8001a14 <HAL_InitTick+0xc8>)
 8001960:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001964:	6613      	str	r3, [r2, #96]	; 0x60
 8001966:	4b2b      	ldr	r3, [pc, #172]	; (8001a14 <HAL_InitTick+0xc8>)
 8001968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800196a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001972:	f107 020c 	add.w	r2, r7, #12
 8001976:	f107 0310 	add.w	r3, r7, #16
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f003 fa09 	bl	8004d94 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001982:	f003 f9f1 	bl	8004d68 <HAL_RCC_GetPCLK2Freq>
 8001986:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800198a:	4a23      	ldr	r2, [pc, #140]	; (8001a18 <HAL_InitTick+0xcc>)
 800198c:	fba2 2303 	umull	r2, r3, r2, r3
 8001990:	0c9b      	lsrs	r3, r3, #18
 8001992:	3b01      	subs	r3, #1
 8001994:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001996:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <HAL_InitTick+0xd0>)
 8001998:	4a21      	ldr	r2, [pc, #132]	; (8001a20 <HAL_InitTick+0xd4>)
 800199a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800199c:	4b1f      	ldr	r3, [pc, #124]	; (8001a1c <HAL_InitTick+0xd0>)
 800199e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019a2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80019a4:	4a1d      	ldr	r2, [pc, #116]	; (8001a1c <HAL_InitTick+0xd0>)
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80019aa:	4b1c      	ldr	r3, [pc, #112]	; (8001a1c <HAL_InitTick+0xd0>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b0:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <HAL_InitTick+0xd0>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b6:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <HAL_InitTick+0xd0>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80019bc:	4817      	ldr	r0, [pc, #92]	; (8001a1c <HAL_InitTick+0xd0>)
 80019be:	f003 ff47 	bl	8005850 <HAL_TIM_Base_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80019c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d11b      	bne.n	8001a08 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80019d0:	4812      	ldr	r0, [pc, #72]	; (8001a1c <HAL_InitTick+0xd0>)
 80019d2:	f003 ff9f 	bl	8005914 <HAL_TIM_Base_Start_IT>
 80019d6:	4603      	mov	r3, r0
 80019d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80019dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d111      	bne.n	8001a08 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80019e4:	2019      	movs	r0, #25
 80019e6:	f001 fa95 	bl	8002f14 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b0f      	cmp	r3, #15
 80019ee:	d808      	bhi.n	8001a02 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80019f0:	2200      	movs	r2, #0
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	2019      	movs	r0, #25
 80019f6:	f001 fa71 	bl	8002edc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019fa:	4a0a      	ldr	r2, [pc, #40]	; (8001a24 <HAL_InitTick+0xd8>)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6013      	str	r3, [r2, #0]
 8001a00:	e002      	b.n	8001a08 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001a08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3730      	adds	r7, #48	; 0x30
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40021000 	.word	0x40021000
 8001a18:	431bde83 	.word	0x431bde83
 8001a1c:	20000668 	.word	0x20000668
 8001a20:	40012c00 	.word	0x40012c00
 8001a24:	200000c8 	.word	0x200000c8

08001a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a2c:	e7fe      	b.n	8001a2c <NMI_Handler+0x4>

08001a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a32:	e7fe      	b.n	8001a32 <HardFault_Handler+0x4>

08001a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a38:	e7fe      	b.n	8001a38 <MemManage_Handler+0x4>

08001a3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a3e:	e7fe      	b.n	8001a3e <BusFault_Handler+0x4>

08001a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a44:	e7fe      	b.n	8001a44 <UsageFault_Handler+0x4>

08001a46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a58:	4802      	ldr	r0, [pc, #8]	; (8001a64 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001a5a:	f003 ffcb 	bl	80059f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000668 	.word	0x20000668

08001a68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001a6e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a72:	f001 fd2d 	bl	80034d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  BaseType_t checkIfYieldRequired;
  checkIfYieldRequired = xTaskResumeFromISR(Int_ButHandle);
 8001a76:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <EXTI15_10_IRQHandler+0x38>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f005 fba0 	bl	80071c0 <xTaskResumeFromISR>
 8001a80:	6078      	str	r0, [r7, #4]
  portYIELD_FROM_ISR(checkIfYieldRequired);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d007      	beq.n	8001a98 <EXTI15_10_IRQHandler+0x30>
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <EXTI15_10_IRQHandler+0x3c>)
 8001a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	f3bf 8f4f 	dsb	sy
 8001a94:	f3bf 8f6f 	isb	sy


  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20000658 	.word	0x20000658
 8001aa4:	e000ed04 	.word	0xe000ed04

08001aa8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
	return 1;
 8001aac:	2301      	movs	r3, #1
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <_kill>:

int _kill(int pid, int sig)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ac2:	f006 fba3 	bl	800820c <__errno>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2216      	movs	r2, #22
 8001aca:	601a      	str	r2, [r3, #0]
	return -1;
 8001acc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <_exit>:

void _exit (int status)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff ffe7 	bl	8001ab8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001aea:	e7fe      	b.n	8001aea <_exit+0x12>

08001aec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	e00a      	b.n	8001b14 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001afe:	f3af 8000 	nop.w
 8001b02:	4601      	mov	r1, r0
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	1c5a      	adds	r2, r3, #1
 8001b08:	60ba      	str	r2, [r7, #8]
 8001b0a:	b2ca      	uxtb	r2, r1
 8001b0c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	3301      	adds	r3, #1
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	dbf0      	blt.n	8001afe <_read+0x12>
	}

return len;
 8001b1c:	687b      	ldr	r3, [r7, #4]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3718      	adds	r7, #24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b086      	sub	sp, #24
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	60f8      	str	r0, [r7, #12]
 8001b2e:	60b9      	str	r1, [r7, #8]
 8001b30:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	e009      	b.n	8001b4c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	60ba      	str	r2, [r7, #8]
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	617b      	str	r3, [r7, #20]
 8001b4c:	697a      	ldr	r2, [r7, #20]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	dbf1      	blt.n	8001b38 <_write+0x12>
	}
	return len;
 8001b54:	687b      	ldr	r3, [r7, #4]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <_close>:

int _close(int file)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
	return -1;
 8001b66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
 8001b7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b86:	605a      	str	r2, [r3, #4]
	return 0;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <_isatty>:

int _isatty(int file)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
	return 1;
 8001b9e:	2301      	movs	r3, #1
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
	return 0;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
	...

08001bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bd0:	4a14      	ldr	r2, [pc, #80]	; (8001c24 <_sbrk+0x5c>)
 8001bd2:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <_sbrk+0x60>)
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bdc:	4b13      	ldr	r3, [pc, #76]	; (8001c2c <_sbrk+0x64>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d102      	bne.n	8001bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001be4:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <_sbrk+0x64>)
 8001be6:	4a12      	ldr	r2, [pc, #72]	; (8001c30 <_sbrk+0x68>)
 8001be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bea:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <_sbrk+0x64>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d207      	bcs.n	8001c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bf8:	f006 fb08 	bl	800820c <__errno>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	220c      	movs	r2, #12
 8001c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c02:	f04f 33ff 	mov.w	r3, #4294967295
 8001c06:	e009      	b.n	8001c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c08:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <_sbrk+0x64>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c0e:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <_sbrk+0x64>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	4a05      	ldr	r2, [pc, #20]	; (8001c2c <_sbrk+0x64>)
 8001c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20018000 	.word	0x20018000
 8001c28:	00000400 	.word	0x00000400
 8001c2c:	200006b4 	.word	0x200006b4
 8001c30:	20001c18 	.word	0x20001c18

08001c34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <SystemInit+0x20>)
 8001c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c3e:	4a05      	ldr	r2, [pc, #20]	; (8001c54 <SystemInit+0x20>)
 8001c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c5c:	f7ff ffea 	bl	8001c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c60:	480c      	ldr	r0, [pc, #48]	; (8001c94 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c62:	490d      	ldr	r1, [pc, #52]	; (8001c98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c64:	4a0d      	ldr	r2, [pc, #52]	; (8001c9c <LoopForever+0xe>)
  movs r3, #0
 8001c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c68:	e002      	b.n	8001c70 <LoopCopyDataInit>

08001c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c6e:	3304      	adds	r3, #4

08001c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c74:	d3f9      	bcc.n	8001c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c76:	4a0a      	ldr	r2, [pc, #40]	; (8001ca0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c78:	4c0a      	ldr	r4, [pc, #40]	; (8001ca4 <LoopForever+0x16>)
  movs r3, #0
 8001c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c7c:	e001      	b.n	8001c82 <LoopFillZerobss>

08001c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c80:	3204      	adds	r2, #4

08001c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c84:	d3fb      	bcc.n	8001c7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c86:	f006 fbbd 	bl	8008404 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c8a:	f7ff f929 	bl	8000ee0 <main>

08001c8e <LoopForever>:

LoopForever:
    b LoopForever
 8001c8e:	e7fe      	b.n	8001c8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c90:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c98:	200002a4 	.word	0x200002a4
  ldr r2, =_sidata
 8001c9c:	0800b6c8 	.word	0x0800b6c8
  ldr r2, =_sbss
 8001ca0:	200002a4 	.word	0x200002a4
  ldr r4, =_ebss
 8001ca4:	20001c14 	.word	0x20001c14

08001ca8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ca8:	e7fe      	b.n	8001ca8 <ADC1_2_IRQHandler>
	...

08001cac <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08a      	sub	sp, #40	; 0x28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001cb4:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <I2Cx_MspInit+0xa8>)
 8001cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb8:	4a26      	ldr	r2, [pc, #152]	; (8001d54 <I2Cx_MspInit+0xa8>)
 8001cba:	f043 0302 	orr.w	r3, r3, #2
 8001cbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cc0:	4b24      	ldr	r3, [pc, #144]	; (8001d54 <I2Cx_MspInit+0xa8>)
 8001cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001ccc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001cd0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001cd2:	2312      	movs	r3, #18
 8001cd4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001cde:	2304      	movs	r3, #4
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001ce2:	f107 0314 	add.w	r3, r7, #20
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	481b      	ldr	r0, [pc, #108]	; (8001d58 <I2Cx_MspInit+0xac>)
 8001cea:	f001 f921 	bl	8002f30 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001cee:	f107 0314 	add.w	r3, r7, #20
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4818      	ldr	r0, [pc, #96]	; (8001d58 <I2Cx_MspInit+0xac>)
 8001cf6:	f001 f91b 	bl	8002f30 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001cfa:	4b16      	ldr	r3, [pc, #88]	; (8001d54 <I2Cx_MspInit+0xa8>)
 8001cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfe:	4a15      	ldr	r2, [pc, #84]	; (8001d54 <I2Cx_MspInit+0xa8>)
 8001d00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d04:	6593      	str	r3, [r2, #88]	; 0x58
 8001d06:	4b13      	ldr	r3, [pc, #76]	; (8001d54 <I2Cx_MspInit+0xa8>)
 8001d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001d12:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <I2Cx_MspInit+0xa8>)
 8001d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d16:	4a0f      	ldr	r2, [pc, #60]	; (8001d54 <I2Cx_MspInit+0xa8>)
 8001d18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d1c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001d1e:	4b0d      	ldr	r3, [pc, #52]	; (8001d54 <I2Cx_MspInit+0xa8>)
 8001d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d22:	4a0c      	ldr	r2, [pc, #48]	; (8001d54 <I2Cx_MspInit+0xa8>)
 8001d24:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001d28:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	210f      	movs	r1, #15
 8001d2e:	2021      	movs	r0, #33	; 0x21
 8001d30:	f001 f8d4 	bl	8002edc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001d34:	2021      	movs	r0, #33	; 0x21
 8001d36:	f001 f8ed 	bl	8002f14 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	210f      	movs	r1, #15
 8001d3e:	2022      	movs	r0, #34	; 0x22
 8001d40:	f001 f8cc 	bl	8002edc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001d44:	2022      	movs	r0, #34	; 0x22
 8001d46:	f001 f8e5 	bl	8002f14 <HAL_NVIC_EnableIRQ>
}
 8001d4a:	bf00      	nop
 8001d4c:	3728      	adds	r7, #40	; 0x28
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40021000 	.word	0x40021000
 8001d58:	48000400 	.word	0x48000400

08001d5c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a12      	ldr	r2, [pc, #72]	; (8001db0 <I2Cx_Init+0x54>)
 8001d68:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a11      	ldr	r2, [pc, #68]	; (8001db4 <I2Cx_Init+0x58>)
 8001d6e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff ff89 	bl	8001cac <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f001 fbbb 	bl	8003516 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001da0:	2100      	movs	r1, #0
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f002 f94a 	bl	800403c <HAL_I2CEx_ConfigAnalogFilter>
}
 8001da8:	bf00      	nop
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40005800 	.word	0x40005800
 8001db4:	00702681 	.word	0x00702681

08001db8 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08a      	sub	sp, #40	; 0x28
 8001dbc:	af04      	add	r7, sp, #16
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	4608      	mov	r0, r1
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	72fb      	strb	r3, [r7, #11]
 8001dca:	460b      	mov	r3, r1
 8001dcc:	813b      	strh	r3, [r7, #8]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001dd6:	7afb      	ldrb	r3, [r7, #11]
 8001dd8:	b299      	uxth	r1, r3
 8001dda:	88f8      	ldrh	r0, [r7, #6]
 8001ddc:	893a      	ldrh	r2, [r7, #8]
 8001dde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001de2:	9302      	str	r3, [sp, #8]
 8001de4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001de6:	9301      	str	r3, [sp, #4]
 8001de8:	6a3b      	ldr	r3, [r7, #32]
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	4603      	mov	r3, r0
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f001 fd64 	bl	80038bc <HAL_I2C_Mem_Read>
 8001df4:	4603      	mov	r3, r0
 8001df6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001df8:	7dfb      	ldrb	r3, [r7, #23]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d004      	beq.n	8001e08 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8001dfe:	7afb      	ldrb	r3, [r7, #11]
 8001e00:	4619      	mov	r1, r3
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f000 f832 	bl	8001e6c <I2Cx_Error>
  }
  return status;
 8001e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b08a      	sub	sp, #40	; 0x28
 8001e16:	af04      	add	r7, sp, #16
 8001e18:	60f8      	str	r0, [r7, #12]
 8001e1a:	4608      	mov	r0, r1
 8001e1c:	4611      	mov	r1, r2
 8001e1e:	461a      	mov	r2, r3
 8001e20:	4603      	mov	r3, r0
 8001e22:	72fb      	strb	r3, [r7, #11]
 8001e24:	460b      	mov	r3, r1
 8001e26:	813b      	strh	r3, [r7, #8]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001e30:	7afb      	ldrb	r3, [r7, #11]
 8001e32:	b299      	uxth	r1, r3
 8001e34:	88f8      	ldrh	r0, [r7, #6]
 8001e36:	893a      	ldrh	r2, [r7, #8]
 8001e38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e3c:	9302      	str	r3, [sp, #8]
 8001e3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e40:	9301      	str	r3, [sp, #4]
 8001e42:	6a3b      	ldr	r3, [r7, #32]
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	4603      	mov	r3, r0
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f001 fc23 	bl	8003694 <HAL_I2C_Mem_Write>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001e52:	7dfb      	ldrb	r3, [r7, #23]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d004      	beq.n	8001e62 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001e58:	7afb      	ldrb	r3, [r7, #11]
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f000 f805 	bl	8001e6c <I2Cx_Error>
  }
  return status;
 8001e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	460b      	mov	r3, r1
 8001e76:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f001 fbdb 	bl	8003634 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff ff6c 	bl	8001d5c <I2Cx_Init>
}
 8001e84:	bf00      	nop
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001e90:	4802      	ldr	r0, [pc, #8]	; (8001e9c <SENSOR_IO_Init+0x10>)
 8001e92:	f7ff ff63 	bl	8001d5c <I2Cx_Init>
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	200006b8 	.word	0x200006b8

08001ea0 <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af02      	add	r7, sp, #8
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	71fb      	strb	r3, [r7, #7]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	71bb      	strb	r3, [r7, #6]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001eb2:	79bb      	ldrb	r3, [r7, #6]
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	79f9      	ldrb	r1, [r7, #7]
 8001eb8:	2301      	movs	r3, #1
 8001eba:	9301      	str	r3, [sp, #4]
 8001ebc:	1d7b      	adds	r3, r7, #5
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	4803      	ldr	r0, [pc, #12]	; (8001ed0 <SENSOR_IO_Write+0x30>)
 8001ec4:	f7ff ffa5 	bl	8001e12 <I2Cx_WriteMultiple>
}
 8001ec8:	bf00      	nop
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	200006b8 	.word	0x200006b8

08001ed4 <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af02      	add	r7, sp, #8
 8001eda:	4603      	mov	r3, r0
 8001edc:	460a      	mov	r2, r1
 8001ede:	71fb      	strb	r3, [r7, #7]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001ee8:	79bb      	ldrb	r3, [r7, #6]
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	79f9      	ldrb	r1, [r7, #7]
 8001eee:	2301      	movs	r3, #1
 8001ef0:	9301      	str	r3, [sp, #4]
 8001ef2:	f107 030f 	add.w	r3, r7, #15
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	2301      	movs	r3, #1
 8001efa:	4804      	ldr	r0, [pc, #16]	; (8001f0c <SENSOR_IO_Read+0x38>)
 8001efc:	f7ff ff5c 	bl	8001db8 <I2Cx_ReadMultiple>

  return read_value;
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	200006b8 	.word	0x200006b8

08001f10 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af02      	add	r7, sp, #8
 8001f16:	603a      	str	r2, [r7, #0]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	71fb      	strb	r3, [r7, #7]
 8001f1e:	460b      	mov	r3, r1
 8001f20:	71bb      	strb	r3, [r7, #6]
 8001f22:	4613      	mov	r3, r2
 8001f24:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001f26:	79bb      	ldrb	r3, [r7, #6]
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	79f9      	ldrb	r1, [r7, #7]
 8001f2c:	88bb      	ldrh	r3, [r7, #4]
 8001f2e:	9301      	str	r3, [sp, #4]
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	2301      	movs	r3, #1
 8001f36:	4804      	ldr	r0, [pc, #16]	; (8001f48 <SENSOR_IO_ReadMultiple+0x38>)
 8001f38:	f7ff ff3e 	bl	8001db8 <I2Cx_ReadMultiple>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	b29b      	uxth	r3, r3
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	200006b8 	.word	0x200006b8

08001f4c <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001f56:	2300      	movs	r3, #0
 8001f58:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001f5a:	4b19      	ldr	r3, [pc, #100]	; (8001fc0 <BSP_ACCELERO_Init+0x74>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	4798      	blx	r3
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b6a      	cmp	r3, #106	; 0x6a
 8001f64:	d002      	beq.n	8001f6c <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	73fb      	strb	r3, [r7, #15]
 8001f6a:	e024      	b.n	8001fb6 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001f6c:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <BSP_ACCELERO_Init+0x78>)
 8001f6e:	4a14      	ldr	r2, [pc, #80]	; (8001fc0 <BSP_ACCELERO_Init+0x74>)
 8001f70:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8001f72:	2330      	movs	r3, #48	; 0x30
 8001f74:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001f7e:	2340      	movs	r3, #64	; 0x40
 8001f80:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8001f8a:	797a      	ldrb	r2, [r7, #5]
 8001f8c:	7abb      	ldrb	r3, [r7, #10]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001f94:	7a3b      	ldrb	r3, [r7, #8]
 8001f96:	f043 0304 	orr.w	r3, r3, #4
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	021b      	lsls	r3, r3, #8
 8001f9e:	b21a      	sxth	r2, r3
 8001fa0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	b21b      	sxth	r3, r3
 8001fa8:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001faa:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <BSP_ACCELERO_Init+0x78>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	89ba      	ldrh	r2, [r7, #12]
 8001fb2:	4610      	mov	r0, r2
 8001fb4:	4798      	blx	r3
  }  

  return ret;
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20000060 	.word	0x20000060
 8001fc4:	2000070c 	.word	0x2000070c

08001fc8 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8001fd0:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d009      	beq.n	8001fec <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001fd8:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d004      	beq.n	8001fec <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8001fe2:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	4798      	blx	r3
    }
  }
}
 8001fec:	bf00      	nop
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	2000070c 	.word	0x2000070c

08001ff8 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002002:	2300      	movs	r3, #0
 8002004:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8002006:	4b1b      	ldr	r3, [pc, #108]	; (8002074 <BSP_GYRO_Init+0x7c>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	4798      	blx	r3
 800200c:	4603      	mov	r3, r0
 800200e:	2b6a      	cmp	r3, #106	; 0x6a
 8002010:	d002      	beq.n	8002018 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	73fb      	strb	r3, [r7, #15]
 8002016:	e028      	b.n	800206a <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8002018:	4b17      	ldr	r3, [pc, #92]	; (8002078 <BSP_GYRO_Init+0x80>)
 800201a:	4a16      	ldr	r2, [pc, #88]	; (8002074 <BSP_GYRO_Init+0x7c>)
 800201c:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 800201e:	2300      	movs	r3, #0
 8002020:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8002022:	2330      	movs	r3, #48	; 0x30
 8002024:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 800202a:	2300      	movs	r3, #0
 800202c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800202e:	2340      	movs	r3, #64	; 0x40
 8002030:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 8002036:	230c      	movs	r3, #12
 8002038:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 800203a:	7aba      	ldrb	r2, [r7, #10]
 800203c:	797b      	ldrb	r3, [r7, #5]
 800203e:	4313      	orrs	r3, r2
 8002040:	b2db      	uxtb	r3, r3
 8002042:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8002044:	7a3b      	ldrb	r3, [r7, #8]
 8002046:	f043 0304 	orr.w	r3, r3, #4
 800204a:	b2db      	uxtb	r3, r3
 800204c:	021b      	lsls	r3, r3, #8
 800204e:	b21a      	sxth	r2, r3
 8002050:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002054:	4313      	orrs	r3, r2
 8002056:	b21b      	sxth	r3, r3
 8002058:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 800205a:	4b07      	ldr	r3, [pc, #28]	; (8002078 <BSP_GYRO_Init+0x80>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	89ba      	ldrh	r2, [r7, #12]
 8002062:	4610      	mov	r0, r2
 8002064:	4798      	blx	r3
    
    ret = GYRO_OK;
 8002066:	2300      	movs	r3, #0
 8002068:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800206a:	7bfb      	ldrb	r3, [r7, #15]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000094 	.word	0x20000094
 8002078:	20000710 	.word	0x20000710

0800207c <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8002082:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <BSP_HSENSOR_Init+0x38>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	20be      	movs	r0, #190	; 0xbe
 8002088:	4798      	blx	r3
 800208a:	4603      	mov	r3, r0
 800208c:	2bbc      	cmp	r3, #188	; 0xbc
 800208e:	d002      	beq.n	8002096 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	607b      	str	r3, [r7, #4]
 8002094:	e009      	b.n	80020aa <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8002096:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <BSP_HSENSOR_Init+0x3c>)
 8002098:	4a06      	ldr	r2, [pc, #24]	; (80020b4 <BSP_HSENSOR_Init+0x38>)
 800209a:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <BSP_HSENSOR_Init+0x3c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	20be      	movs	r0, #190	; 0xbe
 80020a4:	4798      	blx	r3
    ret = HSENSOR_OK;
 80020a6:	2300      	movs	r3, #0
 80020a8:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80020aa:	687b      	ldr	r3, [r7, #4]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20000004 	.word	0x20000004
 80020b8:	20000714 	.word	0x20000714

080020bc <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80020c0:	4b04      	ldr	r3, [pc, #16]	; (80020d4 <BSP_HSENSOR_ReadHumidity+0x18>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	20be      	movs	r0, #190	; 0xbe
 80020c8:	4798      	blx	r3
 80020ca:	eef0 7a40 	vmov.f32	s15, s0
}
 80020ce:	eeb0 0a67 	vmov.f32	s0, s15
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20000714 	.word	0x20000714

080020d8 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 80020de:	2300      	movs	r3, #0
 80020e0:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 80020e2:	4b11      	ldr	r3, [pc, #68]	; (8002128 <BSP_MAGNETO_Init+0x50>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	4798      	blx	r3
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b3d      	cmp	r3, #61	; 0x3d
 80020ec:	d002      	beq.n	80020f4 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	71fb      	strb	r3, [r7, #7]
 80020f2:	e013      	b.n	800211c <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 80020f4:	4b0d      	ldr	r3, [pc, #52]	; (800212c <BSP_MAGNETO_Init+0x54>)
 80020f6:	4a0c      	ldr	r2, [pc, #48]	; (8002128 <BSP_MAGNETO_Init+0x50>)
 80020f8:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 80020fa:	2358      	movs	r3, #88	; 0x58
 80020fc:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 80020fe:	2300      	movs	r3, #0
 8002100:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8002102:	2300      	movs	r3, #0
 8002104:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8002106:	2308      	movs	r3, #8
 8002108:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 800210a:	2340      	movs	r3, #64	; 0x40
 800210c:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 800210e:	4b07      	ldr	r3, [pc, #28]	; (800212c <BSP_MAGNETO_Init+0x54>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	463a      	mov	r2, r7
 8002116:	e892 0003 	ldmia.w	r2, {r0, r1}
 800211a:	4798      	blx	r3
  } 

  return ret;  
 800211c:	79fb      	ldrb	r3, [r7, #7]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000020 	.word	0x20000020
 800212c:	20000718 	.word	0x20000718

08002130 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8002138:	4b08      	ldr	r3, [pc, #32]	; (800215c <BSP_MAGNETO_GetXYZ+0x2c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d009      	beq.n	8002154 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8002140:	4b06      	ldr	r3, [pc, #24]	; (800215c <BSP_MAGNETO_GetXYZ+0x2c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	2b00      	cmp	r3, #0
 8002148:	d004      	beq.n	8002154 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 800214a:	4b04      	ldr	r3, [pc, #16]	; (800215c <BSP_MAGNETO_GetXYZ+0x2c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	4798      	blx	r3
    }
  }
}
 8002154:	bf00      	nop
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	20000718 	.word	0x20000718

08002160 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8002166:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <BSP_PSENSOR_Init+0x38>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	20ba      	movs	r0, #186	; 0xba
 800216c:	4798      	blx	r3
 800216e:	4603      	mov	r3, r0
 8002170:	2bb1      	cmp	r3, #177	; 0xb1
 8002172:	d002      	beq.n	800217a <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	607b      	str	r3, [r7, #4]
 8002178:	e009      	b.n	800218e <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 800217a:	4b08      	ldr	r3, [pc, #32]	; (800219c <BSP_PSENSOR_Init+0x3c>)
 800217c:	4a06      	ldr	r2, [pc, #24]	; (8002198 <BSP_PSENSOR_Init+0x38>)
 800217e:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8002180:	4b06      	ldr	r3, [pc, #24]	; (800219c <BSP_PSENSOR_Init+0x3c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	20ba      	movs	r0, #186	; 0xba
 8002188:	4798      	blx	r3
    ret = PSENSOR_OK;
 800218a:	2300      	movs	r3, #0
 800218c:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800218e:	687b      	ldr	r3, [r7, #4]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20000054 	.word	0x20000054
 800219c:	2000071c 	.word	0x2000071c

080021a0 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 80021a4:	4b04      	ldr	r3, [pc, #16]	; (80021b8 <BSP_PSENSOR_ReadPressure+0x18>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	20ba      	movs	r0, #186	; 0xba
 80021ac:	4798      	blx	r3
 80021ae:	eef0 7a40 	vmov.f32	s15, s0
}
 80021b2:	eeb0 0a67 	vmov.f32	s0, s15
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	2000071c 	.word	0x2000071c

080021bc <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80021c6:	4b09      	ldr	r3, [pc, #36]	; (80021ec <BSP_TSENSOR_Init+0x30>)
 80021c8:	4a09      	ldr	r2, [pc, #36]	; (80021f0 <BSP_TSENSOR_Init+0x34>)
 80021ca:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80021cc:	f7ff fe5e 	bl	8001e8c <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <BSP_TSENSOR_Init+0x30>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2100      	movs	r1, #0
 80021d8:	20be      	movs	r0, #190	; 0xbe
 80021da:	4798      	blx	r3

  ret = TSENSOR_OK;
 80021dc:	2300      	movs	r3, #0
 80021de:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80021e0:	79fb      	ldrb	r3, [r7, #7]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20000720 	.word	0x20000720
 80021f0:	20000010 	.word	0x20000010

080021f4 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80021f8:	4b04      	ldr	r3, [pc, #16]	; (800220c <BSP_TSENSOR_ReadTemp+0x18>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	20be      	movs	r0, #190	; 0xbe
 8002200:	4798      	blx	r3
 8002202:	eef0 7a40 	vmov.f32	s15, s0
}
 8002206:	eeb0 0a67 	vmov.f32	s0, s15
 800220a:	bd80      	pop	{r7, pc}
 800220c:	20000720 	.word	0x20000720

08002210 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800221a:	88fb      	ldrh	r3, [r7, #6]
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2120      	movs	r1, #32
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff fe57 	bl	8001ed4 <SENSOR_IO_Read>
 8002226:	4603      	mov	r3, r0
 8002228:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800222a:	7bfb      	ldrb	r3, [r7, #15]
 800222c:	f023 0304 	bic.w	r3, r3, #4
 8002230:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002232:	7bfb      	ldrb	r3, [r7, #15]
 8002234:	f043 0304 	orr.w	r3, r3, #4
 8002238:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800223a:	7bfb      	ldrb	r3, [r7, #15]
 800223c:	f023 0303 	bic.w	r3, r3, #3
 8002240:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002242:	7bfb      	ldrb	r3, [r7, #15]
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002250:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002252:	88fb      	ldrh	r3, [r7, #6]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	7bfa      	ldrb	r2, [r7, #15]
 8002258:	2120      	movs	r1, #32
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff fe20 	bl	8001ea0 <SENSOR_IO_Write>
}
 8002260:	bf00      	nop
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002272:	2300      	movs	r3, #0
 8002274:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8002276:	f7ff fe09 	bl	8001e8c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 800227a:	88fb      	ldrh	r3, [r7, #6]
 800227c:	b2db      	uxtb	r3, r3
 800227e:	210f      	movs	r1, #15
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff fe27 	bl	8001ed4 <SENSOR_IO_Read>
 8002286:	4603      	mov	r3, r0
 8002288:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800228a:	7bfb      	ldrb	r3, [r7, #15]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b088      	sub	sp, #32
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 800229e:	88fb      	ldrh	r3, [r7, #6]
 80022a0:	b2d8      	uxtb	r0, r3
 80022a2:	f107 020c 	add.w	r2, r7, #12
 80022a6:	2302      	movs	r3, #2
 80022a8:	21b0      	movs	r1, #176	; 0xb0
 80022aa:	f7ff fe31 	bl	8001f10 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 80022ae:	7b3b      	ldrb	r3, [r7, #12]
 80022b0:	085b      	lsrs	r3, r3, #1
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 80022b6:	7b7b      	ldrb	r3, [r7, #13]
 80022b8:	085b      	lsrs	r3, r3, #1
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 80022be:	88fb      	ldrh	r3, [r7, #6]
 80022c0:	b2d8      	uxtb	r0, r3
 80022c2:	f107 020c 	add.w	r2, r7, #12
 80022c6:	2302      	movs	r3, #2
 80022c8:	21b6      	movs	r1, #182	; 0xb6
 80022ca:	f7ff fe21 	bl	8001f10 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80022ce:	7b7b      	ldrb	r3, [r7, #13]
 80022d0:	021b      	lsls	r3, r3, #8
 80022d2:	b21a      	sxth	r2, r3
 80022d4:	7b3b      	ldrb	r3, [r7, #12]
 80022d6:	b21b      	sxth	r3, r3
 80022d8:	4313      	orrs	r3, r2
 80022da:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 80022dc:	88fb      	ldrh	r3, [r7, #6]
 80022de:	b2d8      	uxtb	r0, r3
 80022e0:	f107 020c 	add.w	r2, r7, #12
 80022e4:	2302      	movs	r3, #2
 80022e6:	21ba      	movs	r1, #186	; 0xba
 80022e8:	f7ff fe12 	bl	8001f10 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80022ec:	7b7b      	ldrb	r3, [r7, #13]
 80022ee:	021b      	lsls	r3, r3, #8
 80022f0:	b21a      	sxth	r2, r3
 80022f2:	7b3b      	ldrb	r3, [r7, #12]
 80022f4:	b21b      	sxth	r3, r3
 80022f6:	4313      	orrs	r3, r2
 80022f8:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 80022fa:	88fb      	ldrh	r3, [r7, #6]
 80022fc:	b2d8      	uxtb	r0, r3
 80022fe:	f107 020c 	add.w	r2, r7, #12
 8002302:	2302      	movs	r3, #2
 8002304:	21a8      	movs	r1, #168	; 0xa8
 8002306:	f7ff fe03 	bl	8001f10 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800230a:	7b7b      	ldrb	r3, [r7, #13]
 800230c:	021b      	lsls	r3, r3, #8
 800230e:	b21a      	sxth	r2, r3
 8002310:	7b3b      	ldrb	r3, [r7, #12]
 8002312:	b21b      	sxth	r3, r3
 8002314:	4313      	orrs	r3, r2
 8002316:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8002318:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800231c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	ee07 3a90 	vmov	s15, r3
 8002326:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800232a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800232e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	ee07 3a90 	vmov	s15, r3
 8002338:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800233c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002340:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002344:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	ee07 3a90 	vmov	s15, r3
 800234e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002356:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800235a:	ee07 3a90 	vmov	s15, r3
 800235e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002362:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002366:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 800236a:	edd7 7a04 	vldr	s15, [r7, #16]
 800236e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002372:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002376:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 800237a:	edd7 7a04 	vldr	s15, [r7, #16]
 800237e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80023c4 <HTS221_H_ReadHumidity+0x130>
 8002382:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800238a:	dd01      	ble.n	8002390 <HTS221_H_ReadHumidity+0xfc>
 800238c:	4b0e      	ldr	r3, [pc, #56]	; (80023c8 <HTS221_H_ReadHumidity+0x134>)
 800238e:	e00a      	b.n	80023a6 <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8002390:	edd7 7a04 	vldr	s15, [r7, #16]
 8002394:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800239c:	d502      	bpl.n	80023a4 <HTS221_H_ReadHumidity+0x110>
 800239e:	f04f 0300 	mov.w	r3, #0
 80023a2:	e000      	b.n	80023a6 <HTS221_H_ReadHumidity+0x112>
 80023a4:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 80023a6:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 80023a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80023ac:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80023b0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80023b4:	eef0 7a66 	vmov.f32	s15, s13
}
 80023b8:	eeb0 0a67 	vmov.f32	s0, s15
 80023bc:	3720      	adds	r7, #32
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	447a0000 	.word	0x447a0000
 80023c8:	447a0000 	.word	0x447a0000

080023cc <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	6039      	str	r1, [r7, #0]
 80023d6:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80023d8:	88fb      	ldrh	r3, [r7, #6]
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2120      	movs	r1, #32
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff fd78 	bl	8001ed4 <SENSOR_IO_Read>
 80023e4:	4603      	mov	r3, r0
 80023e6:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
 80023ea:	f023 0304 	bic.w	r3, r3, #4
 80023ee:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
 80023f2:	f043 0304 	orr.w	r3, r3, #4
 80023f6:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
 80023fa:	f023 0303 	bic.w	r3, r3, #3
 80023fe:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002400:	7bfb      	ldrb	r3, [r7, #15]
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002408:	7bfb      	ldrb	r3, [r7, #15]
 800240a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800240e:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002410:	88fb      	ldrh	r3, [r7, #6]
 8002412:	b2db      	uxtb	r3, r3
 8002414:	7bfa      	ldrb	r2, [r7, #15]
 8002416:	2120      	movs	r1, #32
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff fd41 	bl	8001ea0 <SENSOR_IO_Write>
}
 800241e:	bf00      	nop
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b088      	sub	sp, #32
 800242a:	af00      	add	r7, sp, #0
 800242c:	4603      	mov	r3, r0
 800242e:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8002430:	88fb      	ldrh	r3, [r7, #6]
 8002432:	b2d8      	uxtb	r0, r3
 8002434:	f107 0208 	add.w	r2, r7, #8
 8002438:	2302      	movs	r3, #2
 800243a:	21b2      	movs	r1, #178	; 0xb2
 800243c:	f7ff fd68 	bl	8001f10 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8002440:	88fb      	ldrh	r3, [r7, #6]
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2135      	movs	r1, #53	; 0x35
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff fd44 	bl	8001ed4 <SENSOR_IO_Read>
 800244c:	4603      	mov	r3, r0
 800244e:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8002450:	7ffb      	ldrb	r3, [r7, #31]
 8002452:	021b      	lsls	r3, r3, #8
 8002454:	b21b      	sxth	r3, r3
 8002456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800245a:	b21a      	sxth	r2, r3
 800245c:	7a3b      	ldrb	r3, [r7, #8]
 800245e:	b21b      	sxth	r3, r3
 8002460:	4313      	orrs	r3, r2
 8002462:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8002464:	7ffb      	ldrb	r3, [r7, #31]
 8002466:	019b      	lsls	r3, r3, #6
 8002468:	b21b      	sxth	r3, r3
 800246a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800246e:	b21a      	sxth	r2, r3
 8002470:	7a7b      	ldrb	r3, [r7, #9]
 8002472:	b21b      	sxth	r3, r3
 8002474:	4313      	orrs	r3, r2
 8002476:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8002478:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800247c:	10db      	asrs	r3, r3, #3
 800247e:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8002480:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002484:	10db      	asrs	r3, r3, #3
 8002486:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002488:	88fb      	ldrh	r3, [r7, #6]
 800248a:	b2d8      	uxtb	r0, r3
 800248c:	f107 0208 	add.w	r2, r7, #8
 8002490:	2304      	movs	r3, #4
 8002492:	21bc      	movs	r1, #188	; 0xbc
 8002494:	f7ff fd3c 	bl	8001f10 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002498:	7a7b      	ldrb	r3, [r7, #9]
 800249a:	021b      	lsls	r3, r3, #8
 800249c:	b21a      	sxth	r2, r3
 800249e:	7a3b      	ldrb	r3, [r7, #8]
 80024a0:	b21b      	sxth	r3, r3
 80024a2:	4313      	orrs	r3, r2
 80024a4:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80024a6:	7afb      	ldrb	r3, [r7, #11]
 80024a8:	021b      	lsls	r3, r3, #8
 80024aa:	b21a      	sxth	r2, r3
 80024ac:	7abb      	ldrb	r3, [r7, #10]
 80024ae:	b21b      	sxth	r3, r3
 80024b0:	4313      	orrs	r3, r2
 80024b2:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80024b4:	88fb      	ldrh	r3, [r7, #6]
 80024b6:	b2d8      	uxtb	r0, r3
 80024b8:	f107 0208 	add.w	r2, r7, #8
 80024bc:	2302      	movs	r3, #2
 80024be:	21aa      	movs	r1, #170	; 0xaa
 80024c0:	f7ff fd26 	bl	8001f10 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80024c4:	7a7b      	ldrb	r3, [r7, #9]
 80024c6:	021b      	lsls	r3, r3, #8
 80024c8:	b21a      	sxth	r2, r3
 80024ca:	7a3b      	ldrb	r3, [r7, #8]
 80024cc:	b21b      	sxth	r3, r3
 80024ce:	4313      	orrs	r3, r2
 80024d0:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80024d2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80024d6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	ee07 3a90 	vmov	s15, r3
 80024e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80024e8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	ee07 3a90 	vmov	s15, r3
 80024f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024f6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80024fa:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80024fe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	ee07 3a90 	vmov	s15, r3
 8002508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800250c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002510:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002514:	ee07 3a90 	vmov	s15, r3
 8002518:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800251c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002520:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	ee07 3a90 	vmov	s15, r3
}
 800252a:	eeb0 0a67 	vmov.f32	s0, s15
 800252e:	3720      	adds	r7, #32
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	463b      	mov	r3, r7
 800253c:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8002540:	783b      	ldrb	r3, [r7, #0]
 8002542:	461a      	mov	r2, r3
 8002544:	2120      	movs	r1, #32
 8002546:	203c      	movs	r0, #60	; 0x3c
 8002548:	f7ff fcaa 	bl	8001ea0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 800254c:	787b      	ldrb	r3, [r7, #1]
 800254e:	461a      	mov	r2, r3
 8002550:	2121      	movs	r1, #33	; 0x21
 8002552:	203c      	movs	r0, #60	; 0x3c
 8002554:	f7ff fca4 	bl	8001ea0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8002558:	78bb      	ldrb	r3, [r7, #2]
 800255a:	461a      	mov	r2, r3
 800255c:	2122      	movs	r1, #34	; 0x22
 800255e:	203c      	movs	r0, #60	; 0x3c
 8002560:	f7ff fc9e 	bl	8001ea0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8002564:	78fb      	ldrb	r3, [r7, #3]
 8002566:	461a      	mov	r2, r3
 8002568:	2123      	movs	r1, #35	; 0x23
 800256a:	203c      	movs	r0, #60	; 0x3c
 800256c:	f7ff fc98 	bl	8001ea0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8002570:	793b      	ldrb	r3, [r7, #4]
 8002572:	461a      	mov	r2, r3
 8002574:	2124      	movs	r1, #36	; 0x24
 8002576:	203c      	movs	r0, #60	; 0x3c
 8002578:	f7ff fc92 	bl	8001ea0 <SENSOR_IO_Write>
}
 800257c:	bf00      	nop
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800258a:	2300      	movs	r3, #0
 800258c:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800258e:	2122      	movs	r1, #34	; 0x22
 8002590:	203c      	movs	r0, #60	; 0x3c
 8002592:	f7ff fc9f 	bl	8001ed4 <SENSOR_IO_Read>
 8002596:	4603      	mov	r3, r0
 8002598:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 800259a:	79fb      	ldrb	r3, [r7, #7]
 800259c:	f023 0303 	bic.w	r3, r3, #3
 80025a0:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	f043 0303 	orr.w	r3, r3, #3
 80025a8:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	461a      	mov	r2, r3
 80025ae:	2122      	movs	r1, #34	; 0x22
 80025b0:	203c      	movs	r0, #60	; 0x3c
 80025b2:	f7ff fc75 	bl	8001ea0 <SENSOR_IO_Write>
}
 80025b6:	bf00      	nop
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80025c2:	f7ff fc63 	bl	8001e8c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 80025c6:	210f      	movs	r1, #15
 80025c8:	203c      	movs	r0, #60	; 0x3c
 80025ca:	f7ff fc83 	bl	8001ed4 <SENSOR_IO_Read>
 80025ce:	4603      	mov	r3, r0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 80025de:	2300      	movs	r3, #0
 80025e0:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80025e2:	2122      	movs	r1, #34	; 0x22
 80025e4:	203c      	movs	r0, #60	; 0x3c
 80025e6:	f7ff fc75 	bl	8001ed4 <SENSOR_IO_Read>
 80025ea:	4603      	mov	r3, r0
 80025ec:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
 80025f0:	f023 0320 	bic.w	r3, r3, #32
 80025f4:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80025f6:	88fb      	ldrh	r3, [r7, #6]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	f043 0320 	orr.w	r3, r3, #32
 8002602:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8002604:	7bfb      	ldrb	r3, [r7, #15]
 8002606:	461a      	mov	r2, r3
 8002608:	2122      	movs	r1, #34	; 0x22
 800260a:	203c      	movs	r0, #60	; 0x3c
 800260c:	f7ff fc48 	bl	8001ea0 <SENSOR_IO_Write>
}
 8002610:	bf00      	nop
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b088      	sub	sp, #32
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8002620:	2300      	movs	r3, #0
 8002622:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002624:	2300      	movs	r3, #0
 8002626:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002628:	f04f 0300 	mov.w	r3, #0
 800262c:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 800262e:	2121      	movs	r1, #33	; 0x21
 8002630:	203c      	movs	r0, #60	; 0x3c
 8002632:	f7ff fc4f 	bl	8001ed4 <SENSOR_IO_Read>
 8002636:	4603      	mov	r3, r0
 8002638:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 800263a:	f107 0208 	add.w	r2, r7, #8
 800263e:	2306      	movs	r3, #6
 8002640:	21a8      	movs	r1, #168	; 0xa8
 8002642:	203c      	movs	r0, #60	; 0x3c
 8002644:	f7ff fc64 	bl	8001f10 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002648:	2300      	movs	r3, #0
 800264a:	77fb      	strb	r3, [r7, #31]
 800264c:	e01c      	b.n	8002688 <LIS3MDL_MagReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800264e:	7ffb      	ldrb	r3, [r7, #31]
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	3301      	adds	r3, #1
 8002654:	3320      	adds	r3, #32
 8002656:	443b      	add	r3, r7
 8002658:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800265c:	b29b      	uxth	r3, r3
 800265e:	021b      	lsls	r3, r3, #8
 8002660:	b29a      	uxth	r2, r3
 8002662:	7ffb      	ldrb	r3, [r7, #31]
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	3320      	adds	r3, #32
 8002668:	443b      	add	r3, r7
 800266a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800266e:	b29b      	uxth	r3, r3
 8002670:	4413      	add	r3, r2
 8002672:	b29a      	uxth	r2, r3
 8002674:	7ffb      	ldrb	r3, [r7, #31]
 8002676:	b212      	sxth	r2, r2
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	3320      	adds	r3, #32
 800267c:	443b      	add	r3, r7
 800267e:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002682:	7ffb      	ldrb	r3, [r7, #31]
 8002684:	3301      	adds	r3, #1
 8002686:	77fb      	strb	r3, [r7, #31]
 8002688:	7ffb      	ldrb	r3, [r7, #31]
 800268a:	2b02      	cmp	r3, #2
 800268c:	d9df      	bls.n	800264e <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 800268e:	7dfb      	ldrb	r3, [r7, #23]
 8002690:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002694:	2b60      	cmp	r3, #96	; 0x60
 8002696:	d013      	beq.n	80026c0 <LIS3MDL_MagReadXYZ+0xa8>
 8002698:	2b60      	cmp	r3, #96	; 0x60
 800269a:	dc14      	bgt.n	80026c6 <LIS3MDL_MagReadXYZ+0xae>
 800269c:	2b40      	cmp	r3, #64	; 0x40
 800269e:	d00c      	beq.n	80026ba <LIS3MDL_MagReadXYZ+0xa2>
 80026a0:	2b40      	cmp	r3, #64	; 0x40
 80026a2:	dc10      	bgt.n	80026c6 <LIS3MDL_MagReadXYZ+0xae>
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d002      	beq.n	80026ae <LIS3MDL_MagReadXYZ+0x96>
 80026a8:	2b20      	cmp	r3, #32
 80026aa:	d003      	beq.n	80026b4 <LIS3MDL_MagReadXYZ+0x9c>
 80026ac:	e00b      	b.n	80026c6 <LIS3MDL_MagReadXYZ+0xae>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 80026ae:	4b19      	ldr	r3, [pc, #100]	; (8002714 <LIS3MDL_MagReadXYZ+0xfc>)
 80026b0:	61bb      	str	r3, [r7, #24]
    break;
 80026b2:	e008      	b.n	80026c6 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 80026b4:	4b18      	ldr	r3, [pc, #96]	; (8002718 <LIS3MDL_MagReadXYZ+0x100>)
 80026b6:	61bb      	str	r3, [r7, #24]
    break;
 80026b8:	e005      	b.n	80026c6 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 80026ba:	4b18      	ldr	r3, [pc, #96]	; (800271c <LIS3MDL_MagReadXYZ+0x104>)
 80026bc:	61bb      	str	r3, [r7, #24]
    break;
 80026be:	e002      	b.n	80026c6 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 80026c0:	4b17      	ldr	r3, [pc, #92]	; (8002720 <LIS3MDL_MagReadXYZ+0x108>)
 80026c2:	61bb      	str	r3, [r7, #24]
    break;    
 80026c4:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 80026c6:	2300      	movs	r3, #0
 80026c8:	77fb      	strb	r3, [r7, #31]
 80026ca:	e01a      	b.n	8002702 <LIS3MDL_MagReadXYZ+0xea>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80026cc:	7ffb      	ldrb	r3, [r7, #31]
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	3320      	adds	r3, #32
 80026d2:	443b      	add	r3, r7
 80026d4:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80026d8:	ee07 3a90 	vmov	s15, r3
 80026dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80026e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026e8:	7ffb      	ldrb	r3, [r7, #31]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	4413      	add	r3, r2
 80026f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026f4:	ee17 2a90 	vmov	r2, s15
 80026f8:	b212      	sxth	r2, r2
 80026fa:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80026fc:	7ffb      	ldrb	r3, [r7, #31]
 80026fe:	3301      	adds	r3, #1
 8002700:	77fb      	strb	r3, [r7, #31]
 8002702:	7ffb      	ldrb	r3, [r7, #31]
 8002704:	2b02      	cmp	r3, #2
 8002706:	d9e1      	bls.n	80026cc <LIS3MDL_MagReadXYZ+0xb4>
  }
}
 8002708:	bf00      	nop
 800270a:	bf00      	nop
 800270c:	3720      	adds	r7, #32
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	3e0f5c29 	.word	0x3e0f5c29
 8002718:	3e947ae1 	.word	0x3e947ae1
 800271c:	3edc28f6 	.word	0x3edc28f6
 8002720:	3f147ae1 	.word	0x3f147ae1

08002724 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 800272e:	88fb      	ldrh	r3, [r7, #6]
 8002730:	4618      	mov	r0, r3
 8002732:	f000 f879 	bl	8002828 <LPS22HB_Init>
}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 800273e:	b580      	push	{r7, lr}
 8002740:	b084      	sub	sp, #16
 8002742:	af00      	add	r7, sp, #0
 8002744:	4603      	mov	r3, r0
 8002746:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002748:	2300      	movs	r3, #0
 800274a:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 800274c:	f7ff fb9e 	bl	8001e8c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8002750:	88fb      	ldrh	r3, [r7, #6]
 8002752:	b2db      	uxtb	r3, r3
 8002754:	210f      	movs	r1, #15
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff fbbc 	bl	8001ed4 <SENSOR_IO_Read>
 800275c:	4603      	mov	r3, r0
 800275e:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8002760:	7bfb      	ldrb	r3, [r7, #15]
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 800276c:	b590      	push	{r4, r7, lr}
 800276e:	b087      	sub	sp, #28
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 800277a:	2300      	movs	r3, #0
 800277c:	74fb      	strb	r3, [r7, #19]
 800277e:	e013      	b.n	80027a8 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8002780:	88fb      	ldrh	r3, [r7, #6]
 8002782:	b2da      	uxtb	r2, r3
 8002784:	7cfb      	ldrb	r3, [r7, #19]
 8002786:	3328      	adds	r3, #40	; 0x28
 8002788:	b2db      	uxtb	r3, r3
 800278a:	7cfc      	ldrb	r4, [r7, #19]
 800278c:	4619      	mov	r1, r3
 800278e:	4610      	mov	r0, r2
 8002790:	f7ff fba0 	bl	8001ed4 <SENSOR_IO_Read>
 8002794:	4603      	mov	r3, r0
 8002796:	461a      	mov	r2, r3
 8002798:	f104 0318 	add.w	r3, r4, #24
 800279c:	443b      	add	r3, r7
 800279e:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 80027a2:	7cfb      	ldrb	r3, [r7, #19]
 80027a4:	3301      	adds	r3, #1
 80027a6:	74fb      	strb	r3, [r7, #19]
 80027a8:	7cfb      	ldrb	r3, [r7, #19]
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d9e8      	bls.n	8002780 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 80027ae:	2300      	movs	r3, #0
 80027b0:	74fb      	strb	r3, [r7, #19]
 80027b2:	e00f      	b.n	80027d4 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 80027b4:	7cfb      	ldrb	r3, [r7, #19]
 80027b6:	3318      	adds	r3, #24
 80027b8:	443b      	add	r3, r7
 80027ba:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80027be:	461a      	mov	r2, r3
 80027c0:	7cfb      	ldrb	r3, [r7, #19]
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 80027ce:	7cfb      	ldrb	r3, [r7, #19]
 80027d0:	3301      	adds	r3, #1
 80027d2:	74fb      	strb	r3, [r7, #19]
 80027d4:	7cfb      	ldrb	r3, [r7, #19]
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d9ec      	bls.n	80027b4 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027ea:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2264      	movs	r2, #100	; 0x64
 80027f4:	fb02 f303 	mul.w	r3, r2, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	da01      	bge.n	8002800 <LPS22HB_P_ReadPressure+0x94>
 80027fc:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8002800:	131b      	asrs	r3, r3, #12
 8002802:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	ee07 3a90 	vmov	s15, r3
 800280a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800280e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002824 <LPS22HB_P_ReadPressure+0xb8>
 8002812:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002816:	eef0 7a66 	vmov.f32	s15, s13
}
 800281a:	eeb0 0a67 	vmov.f32	s0, s15
 800281e:	371c      	adds	r7, #28
 8002820:	46bd      	mov	sp, r7
 8002822:	bd90      	pop	{r4, r7, pc}
 8002824:	42c80000 	.word	0x42c80000

08002828 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8002832:	88fb      	ldrh	r3, [r7, #6]
 8002834:	b2db      	uxtb	r3, r3
 8002836:	211a      	movs	r1, #26
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff fb4b 	bl	8001ed4 <SENSOR_IO_Read>
 800283e:	4603      	mov	r3, r0
 8002840:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8002842:	7bfb      	ldrb	r3, [r7, #15]
 8002844:	f023 0301 	bic.w	r3, r3, #1
 8002848:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 800284a:	7bfb      	ldrb	r3, [r7, #15]
 800284c:	f043 0301 	orr.w	r3, r3, #1
 8002850:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8002852:	88fb      	ldrh	r3, [r7, #6]
 8002854:	b2db      	uxtb	r3, r3
 8002856:	7bfa      	ldrb	r2, [r7, #15]
 8002858:	211a      	movs	r1, #26
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff fb20 	bl	8001ea0 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8002860:	88fb      	ldrh	r3, [r7, #6]
 8002862:	b2db      	uxtb	r3, r3
 8002864:	2110      	movs	r1, #16
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff fb34 	bl	8001ed4 <SENSOR_IO_Read>
 800286c:	4603      	mov	r3, r0
 800286e:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8002870:	7bfb      	ldrb	r3, [r7, #15]
 8002872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002876:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8002878:	7bfb      	ldrb	r3, [r7, #15]
 800287a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800287e:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8002880:	7bfb      	ldrb	r3, [r7, #15]
 8002882:	f023 0302 	bic.w	r3, r3, #2
 8002886:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8002888:	7bfb      	ldrb	r3, [r7, #15]
 800288a:	f043 0302 	orr.w	r3, r3, #2
 800288e:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8002890:	88fb      	ldrh	r3, [r7, #6]
 8002892:	b2db      	uxtb	r3, r3
 8002894:	7bfa      	ldrb	r2, [r7, #15]
 8002896:	2110      	movs	r1, #16
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff fb01 	bl	8001ea0 <SENSOR_IO_Write>
}  
 800289e:	bf00      	nop
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b084      	sub	sp, #16
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	4603      	mov	r3, r0
 80028ae:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80028b0:	2300      	movs	r3, #0
 80028b2:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80028b4:	2110      	movs	r1, #16
 80028b6:	20d4      	movs	r0, #212	; 0xd4
 80028b8:	f7ff fb0c 	bl	8001ed4 <SENSOR_IO_Read>
 80028bc:	4603      	mov	r3, r0
 80028be:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80028c0:	88fb      	ldrh	r3, [r7, #6]
 80028c2:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80028c4:	7bbb      	ldrb	r3, [r7, #14]
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80028cc:	7bba      	ldrb	r2, [r7, #14]
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80028d4:	7bbb      	ldrb	r3, [r7, #14]
 80028d6:	461a      	mov	r2, r3
 80028d8:	2110      	movs	r1, #16
 80028da:	20d4      	movs	r0, #212	; 0xd4
 80028dc:	f7ff fae0 	bl	8001ea0 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80028e0:	2112      	movs	r1, #18
 80028e2:	20d4      	movs	r0, #212	; 0xd4
 80028e4:	f7ff faf6 	bl	8001ed4 <SENSOR_IO_Read>
 80028e8:	4603      	mov	r3, r0
 80028ea:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80028ec:	88fb      	ldrh	r3, [r7, #6]
 80028ee:	0a1b      	lsrs	r3, r3, #8
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80028f4:	7bbb      	ldrb	r3, [r7, #14]
 80028f6:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80028fa:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80028fc:	7bba      	ldrb	r2, [r7, #14]
 80028fe:	7bfb      	ldrb	r3, [r7, #15]
 8002900:	4313      	orrs	r3, r2
 8002902:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002904:	7bbb      	ldrb	r3, [r7, #14]
 8002906:	461a      	mov	r2, r3
 8002908:	2112      	movs	r1, #18
 800290a:	20d4      	movs	r0, #212	; 0xd4
 800290c:	f7ff fac8 	bl	8001ea0 <SENSOR_IO_Write>
}
 8002910:	bf00      	nop
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800291e:	2300      	movs	r3, #0
 8002920:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002922:	2110      	movs	r1, #16
 8002924:	20d4      	movs	r0, #212	; 0xd4
 8002926:	f7ff fad5 	bl	8001ed4 <SENSOR_IO_Read>
 800292a:	4603      	mov	r3, r0
 800292c:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800292e:	79fb      	ldrb	r3, [r7, #7]
 8002930:	f003 030f 	and.w	r3, r3, #15
 8002934:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8002936:	79fb      	ldrb	r3, [r7, #7]
 8002938:	461a      	mov	r2, r3
 800293a:	2110      	movs	r1, #16
 800293c:	20d4      	movs	r0, #212	; 0xd4
 800293e:	f7ff faaf 	bl	8001ea0 <SENSOR_IO_Write>
}
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 800294a:	b580      	push	{r7, lr}
 800294c:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 800294e:	f7ff fa9d 	bl	8001e8c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8002952:	210f      	movs	r1, #15
 8002954:	20d4      	movs	r0, #212	; 0xd4
 8002956:	f7ff fabd 	bl	8001ed4 <SENSOR_IO_Read>
 800295a:	4603      	mov	r3, r0
}
 800295c:	4618      	mov	r0, r3
 800295e:	bd80      	pop	{r7, pc}

08002960 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800296a:	2300      	movs	r3, #0
 800296c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 800296e:	2115      	movs	r1, #21
 8002970:	20d4      	movs	r0, #212	; 0xd4
 8002972:	f7ff faaf 	bl	8001ed4 <SENSOR_IO_Read>
 8002976:	4603      	mov	r3, r0
 8002978:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 800297a:	7bfb      	ldrb	r3, [r7, #15]
 800297c:	f023 0310 	bic.w	r3, r3, #16
 8002980:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002982:	88fb      	ldrh	r3, [r7, #6]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8002988:	7bfb      	ldrb	r3, [r7, #15]
 800298a:	f043 0310 	orr.w	r3, r3, #16
 800298e:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8002990:	7bfb      	ldrb	r3, [r7, #15]
 8002992:	461a      	mov	r2, r3
 8002994:	2115      	movs	r1, #21
 8002996:	20d4      	movs	r0, #212	; 0xd4
 8002998:	f7ff fa82 	bl	8001ea0 <SENSOR_IO_Write>
}
 800299c:	bf00      	nop
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b088      	sub	sp, #32
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80029b4:	f04f 0300 	mov.w	r3, #0
 80029b8:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80029ba:	2110      	movs	r1, #16
 80029bc:	20d4      	movs	r0, #212	; 0xd4
 80029be:	f7ff fa89 	bl	8001ed4 <SENSOR_IO_Read>
 80029c2:	4603      	mov	r3, r0
 80029c4:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80029c6:	f107 0208 	add.w	r2, r7, #8
 80029ca:	2306      	movs	r3, #6
 80029cc:	2128      	movs	r1, #40	; 0x28
 80029ce:	20d4      	movs	r0, #212	; 0xd4
 80029d0:	f7ff fa9e 	bl	8001f10 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80029d4:	2300      	movs	r3, #0
 80029d6:	77fb      	strb	r3, [r7, #31]
 80029d8:	e01c      	b.n	8002a14 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80029da:	7ffb      	ldrb	r3, [r7, #31]
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	3301      	adds	r3, #1
 80029e0:	3320      	adds	r3, #32
 80029e2:	443b      	add	r3, r7
 80029e4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	021b      	lsls	r3, r3, #8
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	7ffb      	ldrb	r3, [r7, #31]
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	3320      	adds	r3, #32
 80029f4:	443b      	add	r3, r7
 80029f6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	4413      	add	r3, r2
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	7ffb      	ldrb	r3, [r7, #31]
 8002a02:	b212      	sxth	r2, r2
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	3320      	adds	r3, #32
 8002a08:	443b      	add	r3, r7
 8002a0a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002a0e:	7ffb      	ldrb	r3, [r7, #31]
 8002a10:	3301      	adds	r3, #1
 8002a12:	77fb      	strb	r3, [r7, #31]
 8002a14:	7ffb      	ldrb	r3, [r7, #31]
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d9df      	bls.n	80029da <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8002a1a:	7dfb      	ldrb	r3, [r7, #23]
 8002a1c:	f003 030c 	and.w	r3, r3, #12
 8002a20:	2b0c      	cmp	r3, #12
 8002a22:	d829      	bhi.n	8002a78 <LSM6DSL_AccReadXYZ+0xd4>
 8002a24:	a201      	add	r2, pc, #4	; (adr r2, 8002a2c <LSM6DSL_AccReadXYZ+0x88>)
 8002a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2a:	bf00      	nop
 8002a2c:	08002a61 	.word	0x08002a61
 8002a30:	08002a79 	.word	0x08002a79
 8002a34:	08002a79 	.word	0x08002a79
 8002a38:	08002a79 	.word	0x08002a79
 8002a3c:	08002a73 	.word	0x08002a73
 8002a40:	08002a79 	.word	0x08002a79
 8002a44:	08002a79 	.word	0x08002a79
 8002a48:	08002a79 	.word	0x08002a79
 8002a4c:	08002a67 	.word	0x08002a67
 8002a50:	08002a79 	.word	0x08002a79
 8002a54:	08002a79 	.word	0x08002a79
 8002a58:	08002a79 	.word	0x08002a79
 8002a5c:	08002a6d 	.word	0x08002a6d
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8002a60:	4b18      	ldr	r3, [pc, #96]	; (8002ac4 <LSM6DSL_AccReadXYZ+0x120>)
 8002a62:	61bb      	str	r3, [r7, #24]
    break;
 8002a64:	e008      	b.n	8002a78 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8002a66:	4b18      	ldr	r3, [pc, #96]	; (8002ac8 <LSM6DSL_AccReadXYZ+0x124>)
 8002a68:	61bb      	str	r3, [r7, #24]
    break;
 8002a6a:	e005      	b.n	8002a78 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8002a6c:	4b17      	ldr	r3, [pc, #92]	; (8002acc <LSM6DSL_AccReadXYZ+0x128>)
 8002a6e:	61bb      	str	r3, [r7, #24]
    break;
 8002a70:	e002      	b.n	8002a78 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8002a72:	4b17      	ldr	r3, [pc, #92]	; (8002ad0 <LSM6DSL_AccReadXYZ+0x12c>)
 8002a74:	61bb      	str	r3, [r7, #24]
    break;    
 8002a76:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002a78:	2300      	movs	r3, #0
 8002a7a:	77fb      	strb	r3, [r7, #31]
 8002a7c:	e01a      	b.n	8002ab4 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002a7e:	7ffb      	ldrb	r3, [r7, #31]
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	3320      	adds	r3, #32
 8002a84:	443b      	add	r3, r7
 8002a86:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002a8a:	ee07 3a90 	vmov	s15, r3
 8002a8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a92:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a9a:	7ffb      	ldrb	r3, [r7, #31]
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002aa6:	ee17 2a90 	vmov	r2, s15
 8002aaa:	b212      	sxth	r2, r2
 8002aac:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002aae:	7ffb      	ldrb	r3, [r7, #31]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	77fb      	strb	r3, [r7, #31]
 8002ab4:	7ffb      	ldrb	r3, [r7, #31]
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d9e1      	bls.n	8002a7e <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8002aba:	bf00      	nop
 8002abc:	bf00      	nop
 8002abe:	3720      	adds	r7, #32
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	3d79db23 	.word	0x3d79db23
 8002ac8:	3df9db23 	.word	0x3df9db23
 8002acc:	3e79db23 	.word	0x3e79db23
 8002ad0:	3ef9db23 	.word	0x3ef9db23

08002ad4 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002ae2:	2111      	movs	r1, #17
 8002ae4:	20d4      	movs	r0, #212	; 0xd4
 8002ae6:	f7ff f9f5 	bl	8001ed4 <SENSOR_IO_Read>
 8002aea:	4603      	mov	r3, r0
 8002aec:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8002aee:	88fb      	ldrh	r3, [r7, #6]
 8002af0:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8002af2:	7bbb      	ldrb	r3, [r7, #14]
 8002af4:	f003 0303 	and.w	r3, r3, #3
 8002af8:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8002afa:	7bba      	ldrb	r2, [r7, #14]
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8002b02:	7bbb      	ldrb	r3, [r7, #14]
 8002b04:	461a      	mov	r2, r3
 8002b06:	2111      	movs	r1, #17
 8002b08:	20d4      	movs	r0, #212	; 0xd4
 8002b0a:	f7ff f9c9 	bl	8001ea0 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002b0e:	2112      	movs	r1, #18
 8002b10:	20d4      	movs	r0, #212	; 0xd4
 8002b12:	f7ff f9df 	bl	8001ed4 <SENSOR_IO_Read>
 8002b16:	4603      	mov	r3, r0
 8002b18:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002b1a:	88fb      	ldrh	r3, [r7, #6]
 8002b1c:	0a1b      	lsrs	r3, r3, #8
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8002b22:	7bbb      	ldrb	r3, [r7, #14]
 8002b24:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8002b28:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8002b2a:	7bba      	ldrb	r2, [r7, #14]
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002b32:	7bbb      	ldrb	r3, [r7, #14]
 8002b34:	461a      	mov	r2, r3
 8002b36:	2112      	movs	r1, #18
 8002b38:	20d4      	movs	r0, #212	; 0xd4
 8002b3a:	f7ff f9b1 	bl	8001ea0 <SENSOR_IO_Write>
}
 8002b3e:	bf00      	nop
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b082      	sub	sp, #8
 8002b4a:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002b50:	2111      	movs	r1, #17
 8002b52:	20d4      	movs	r0, #212	; 0xd4
 8002b54:	f7ff f9be 	bl	8001ed4 <SENSOR_IO_Read>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8002b64:	79fb      	ldrb	r3, [r7, #7]
 8002b66:	461a      	mov	r2, r3
 8002b68:	2111      	movs	r1, #17
 8002b6a:	20d4      	movs	r0, #212	; 0xd4
 8002b6c:	f7ff f998 	bl	8001ea0 <SENSOR_IO_Write>
}
 8002b70:	bf00      	nop
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002b7c:	f7ff f986 	bl	8001e8c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8002b80:	210f      	movs	r1, #15
 8002b82:	20d4      	movs	r0, #212	; 0xd4
 8002b84:	f7ff f9a6 	bl	8001ed4 <SENSOR_IO_Read>
 8002b88:	4603      	mov	r3, r0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b084      	sub	sp, #16
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	4603      	mov	r3, r0
 8002b96:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8002b9c:	2116      	movs	r1, #22
 8002b9e:	20d4      	movs	r0, #212	; 0xd4
 8002ba0:	f7ff f998 	bl	8001ed4 <SENSOR_IO_Read>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
 8002baa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bae:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002bb0:	88fb      	ldrh	r3, [r7, #6]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]
 8002bb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002bbc:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	2116      	movs	r1, #22
 8002bc4:	20d4      	movs	r0, #212	; 0xd4
 8002bc6:	f7ff f96b 	bl	8001ea0 <SENSOR_IO_Write>
}
 8002bca:	bf00      	nop
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
	...

08002bd4 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b088      	sub	sp, #32
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002be0:	2300      	movs	r3, #0
 8002be2:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002be4:	f04f 0300 	mov.w	r3, #0
 8002be8:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002bea:	2111      	movs	r1, #17
 8002bec:	20d4      	movs	r0, #212	; 0xd4
 8002bee:	f7ff f971 	bl	8001ed4 <SENSOR_IO_Read>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8002bf6:	f107 0208 	add.w	r2, r7, #8
 8002bfa:	2306      	movs	r3, #6
 8002bfc:	2122      	movs	r1, #34	; 0x22
 8002bfe:	20d4      	movs	r0, #212	; 0xd4
 8002c00:	f7ff f986 	bl	8001f10 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002c04:	2300      	movs	r3, #0
 8002c06:	77fb      	strb	r3, [r7, #31]
 8002c08:	e01c      	b.n	8002c44 <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002c0a:	7ffb      	ldrb	r3, [r7, #31]
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	3301      	adds	r3, #1
 8002c10:	3320      	adds	r3, #32
 8002c12:	443b      	add	r3, r7
 8002c14:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	021b      	lsls	r3, r3, #8
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	7ffb      	ldrb	r3, [r7, #31]
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	3320      	adds	r3, #32
 8002c24:	443b      	add	r3, r7
 8002c26:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	7ffb      	ldrb	r3, [r7, #31]
 8002c32:	b212      	sxth	r2, r2
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	3320      	adds	r3, #32
 8002c38:	443b      	add	r3, r7
 8002c3a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002c3e:	7ffb      	ldrb	r3, [r7, #31]
 8002c40:	3301      	adds	r3, #1
 8002c42:	77fb      	strb	r3, [r7, #31]
 8002c44:	7ffb      	ldrb	r3, [r7, #31]
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d9df      	bls.n	8002c0a <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8002c4a:	7dfb      	ldrb	r3, [r7, #23]
 8002c4c:	f003 030c 	and.w	r3, r3, #12
 8002c50:	2b0c      	cmp	r3, #12
 8002c52:	d829      	bhi.n	8002ca8 <LSM6DSL_GyroReadXYZAngRate+0xd4>
 8002c54:	a201      	add	r2, pc, #4	; (adr r2, 8002c5c <LSM6DSL_GyroReadXYZAngRate+0x88>)
 8002c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5a:	bf00      	nop
 8002c5c:	08002c91 	.word	0x08002c91
 8002c60:	08002ca9 	.word	0x08002ca9
 8002c64:	08002ca9 	.word	0x08002ca9
 8002c68:	08002ca9 	.word	0x08002ca9
 8002c6c:	08002c97 	.word	0x08002c97
 8002c70:	08002ca9 	.word	0x08002ca9
 8002c74:	08002ca9 	.word	0x08002ca9
 8002c78:	08002ca9 	.word	0x08002ca9
 8002c7c:	08002c9d 	.word	0x08002c9d
 8002c80:	08002ca9 	.word	0x08002ca9
 8002c84:	08002ca9 	.word	0x08002ca9
 8002c88:	08002ca9 	.word	0x08002ca9
 8002c8c:	08002ca3 	.word	0x08002ca3
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8002c90:	4b16      	ldr	r3, [pc, #88]	; (8002cec <LSM6DSL_GyroReadXYZAngRate+0x118>)
 8002c92:	61bb      	str	r3, [r7, #24]
    break;
 8002c94:	e008      	b.n	8002ca8 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8002c96:	4b16      	ldr	r3, [pc, #88]	; (8002cf0 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8002c98:	61bb      	str	r3, [r7, #24]
    break;
 8002c9a:	e005      	b.n	8002ca8 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8002c9c:	4b15      	ldr	r3, [pc, #84]	; (8002cf4 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8002c9e:	61bb      	str	r3, [r7, #24]
    break;
 8002ca0:	e002      	b.n	8002ca8 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8002ca2:	4b15      	ldr	r3, [pc, #84]	; (8002cf8 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 8002ca4:	61bb      	str	r3, [r7, #24]
    break;    
 8002ca6:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002ca8:	2300      	movs	r3, #0
 8002caa:	77fb      	strb	r3, [r7, #31]
 8002cac:	e016      	b.n	8002cdc <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8002cae:	7ffb      	ldrb	r3, [r7, #31]
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	3320      	adds	r3, #32
 8002cb4:	443b      	add	r3, r7
 8002cb6:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002cba:	ee07 3a90 	vmov	s15, r3
 8002cbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cc2:	7ffb      	ldrb	r3, [r7, #31]
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	4413      	add	r3, r2
 8002cca:	edd7 7a06 	vldr	s15, [r7, #24]
 8002cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cd2:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8002cd6:	7ffb      	ldrb	r3, [r7, #31]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	77fb      	strb	r3, [r7, #31]
 8002cdc:	7ffb      	ldrb	r3, [r7, #31]
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d9e5      	bls.n	8002cae <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 8002ce2:	bf00      	nop
 8002ce4:	bf00      	nop
 8002ce6:	3720      	adds	r7, #32
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	410c0000 	.word	0x410c0000
 8002cf0:	418c0000 	.word	0x418c0000
 8002cf4:	420c0000 	.word	0x420c0000
 8002cf8:	428c0000 	.word	0x428c0000

08002cfc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d06:	2003      	movs	r0, #3
 8002d08:	f000 f8dd 	bl	8002ec6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d0c:	200f      	movs	r0, #15
 8002d0e:	f7fe fe1d 	bl	800194c <HAL_InitTick>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d002      	beq.n	8002d1e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	71fb      	strb	r3, [r7, #7]
 8002d1c:	e001      	b.n	8002d22 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d1e:	f7fe fd0d 	bl	800173c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d22:	79fb      	ldrb	r3, [r7, #7]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d30:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <HAL_IncTick+0x20>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	461a      	mov	r2, r3
 8002d36:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <HAL_IncTick+0x24>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	4a04      	ldr	r2, [pc, #16]	; (8002d50 <HAL_IncTick+0x24>)
 8002d3e:	6013      	str	r3, [r2, #0]
}
 8002d40:	bf00      	nop
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	200000cc 	.word	0x200000cc
 8002d50:	20000724 	.word	0x20000724

08002d54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  return uwTick;
 8002d58:	4b03      	ldr	r3, [pc, #12]	; (8002d68 <HAL_GetTick+0x14>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	20000724 	.word	0x20000724

08002d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d7c:	4b0c      	ldr	r3, [pc, #48]	; (8002db0 <__NVIC_SetPriorityGrouping+0x44>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d88:	4013      	ands	r3, r2
 8002d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d9e:	4a04      	ldr	r2, [pc, #16]	; (8002db0 <__NVIC_SetPriorityGrouping+0x44>)
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	60d3      	str	r3, [r2, #12]
}
 8002da4:	bf00      	nop
 8002da6:	3714      	adds	r7, #20
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	e000ed00 	.word	0xe000ed00

08002db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002db8:	4b04      	ldr	r3, [pc, #16]	; (8002dcc <__NVIC_GetPriorityGrouping+0x18>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	0a1b      	lsrs	r3, r3, #8
 8002dbe:	f003 0307 	and.w	r3, r3, #7
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	e000ed00 	.word	0xe000ed00

08002dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	db0b      	blt.n	8002dfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002de2:	79fb      	ldrb	r3, [r7, #7]
 8002de4:	f003 021f 	and.w	r2, r3, #31
 8002de8:	4907      	ldr	r1, [pc, #28]	; (8002e08 <__NVIC_EnableIRQ+0x38>)
 8002dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dee:	095b      	lsrs	r3, r3, #5
 8002df0:	2001      	movs	r0, #1
 8002df2:	fa00 f202 	lsl.w	r2, r0, r2
 8002df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	e000e100 	.word	0xe000e100

08002e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	4603      	mov	r3, r0
 8002e14:	6039      	str	r1, [r7, #0]
 8002e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	db0a      	blt.n	8002e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	490c      	ldr	r1, [pc, #48]	; (8002e58 <__NVIC_SetPriority+0x4c>)
 8002e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2a:	0112      	lsls	r2, r2, #4
 8002e2c:	b2d2      	uxtb	r2, r2
 8002e2e:	440b      	add	r3, r1
 8002e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e34:	e00a      	b.n	8002e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	4908      	ldr	r1, [pc, #32]	; (8002e5c <__NVIC_SetPriority+0x50>)
 8002e3c:	79fb      	ldrb	r3, [r7, #7]
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	3b04      	subs	r3, #4
 8002e44:	0112      	lsls	r2, r2, #4
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	440b      	add	r3, r1
 8002e4a:	761a      	strb	r2, [r3, #24]
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	e000e100 	.word	0xe000e100
 8002e5c:	e000ed00 	.word	0xe000ed00

08002e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b089      	sub	sp, #36	; 0x24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	f1c3 0307 	rsb	r3, r3, #7
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	bf28      	it	cs
 8002e7e:	2304      	movcs	r3, #4
 8002e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	3304      	adds	r3, #4
 8002e86:	2b06      	cmp	r3, #6
 8002e88:	d902      	bls.n	8002e90 <NVIC_EncodePriority+0x30>
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	3b03      	subs	r3, #3
 8002e8e:	e000      	b.n	8002e92 <NVIC_EncodePriority+0x32>
 8002e90:	2300      	movs	r3, #0
 8002e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e94:	f04f 32ff 	mov.w	r2, #4294967295
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	43da      	mvns	r2, r3
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	401a      	ands	r2, r3
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb2:	43d9      	mvns	r1, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb8:	4313      	orrs	r3, r2
         );
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3724      	adds	r7, #36	; 0x24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b082      	sub	sp, #8
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f7ff ff4c 	bl	8002d6c <__NVIC_SetPriorityGrouping>
}
 8002ed4:	bf00      	nop
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
 8002ee8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002eea:	2300      	movs	r3, #0
 8002eec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002eee:	f7ff ff61 	bl	8002db4 <__NVIC_GetPriorityGrouping>
 8002ef2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	68b9      	ldr	r1, [r7, #8]
 8002ef8:	6978      	ldr	r0, [r7, #20]
 8002efa:	f7ff ffb1 	bl	8002e60 <NVIC_EncodePriority>
 8002efe:	4602      	mov	r2, r0
 8002f00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f04:	4611      	mov	r1, r2
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff ff80 	bl	8002e0c <__NVIC_SetPriority>
}
 8002f0c:	bf00      	nop
 8002f0e:	3718      	adds	r7, #24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff ff54 	bl	8002dd0 <__NVIC_EnableIRQ>
}
 8002f28:	bf00      	nop
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b087      	sub	sp, #28
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f3e:	e17f      	b.n	8003240 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	2101      	movs	r1, #1
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 8171 	beq.w	800323a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f003 0303 	and.w	r3, r3, #3
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d005      	beq.n	8002f70 <HAL_GPIO_Init+0x40>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 0303 	and.w	r3, r3, #3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d130      	bne.n	8002fd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	2203      	movs	r2, #3
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	4013      	ands	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	68da      	ldr	r2, [r3, #12]
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	091b      	lsrs	r3, r3, #4
 8002fbc:	f003 0201 	and.w	r2, r3, #1
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	2b03      	cmp	r3, #3
 8002fdc:	d118      	bne.n	8003010 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	43db      	mvns	r3, r3
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	08db      	lsrs	r3, r3, #3
 8002ffa:	f003 0201 	and.w	r2, r3, #1
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	4313      	orrs	r3, r2
 8003008:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f003 0303 	and.w	r3, r3, #3
 8003018:	2b03      	cmp	r3, #3
 800301a:	d017      	beq.n	800304c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	2203      	movs	r2, #3
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	43db      	mvns	r3, r3
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	4013      	ands	r3, r2
 8003032:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4313      	orrs	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f003 0303 	and.w	r3, r3, #3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d123      	bne.n	80030a0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	08da      	lsrs	r2, r3, #3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3208      	adds	r2, #8
 8003060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003064:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f003 0307 	and.w	r3, r3, #7
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	220f      	movs	r2, #15
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	43db      	mvns	r3, r3
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	4013      	ands	r3, r2
 800307a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	691a      	ldr	r2, [r3, #16]
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	4313      	orrs	r3, r2
 8003090:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	08da      	lsrs	r2, r3, #3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	3208      	adds	r2, #8
 800309a:	6939      	ldr	r1, [r7, #16]
 800309c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	2203      	movs	r2, #3
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	43db      	mvns	r3, r3
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	4013      	ands	r3, r2
 80030b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f003 0203 	and.w	r2, r3, #3
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 80ac 	beq.w	800323a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030e2:	4b5f      	ldr	r3, [pc, #380]	; (8003260 <HAL_GPIO_Init+0x330>)
 80030e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030e6:	4a5e      	ldr	r2, [pc, #376]	; (8003260 <HAL_GPIO_Init+0x330>)
 80030e8:	f043 0301 	orr.w	r3, r3, #1
 80030ec:	6613      	str	r3, [r2, #96]	; 0x60
 80030ee:	4b5c      	ldr	r3, [pc, #368]	; (8003260 <HAL_GPIO_Init+0x330>)
 80030f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	60bb      	str	r3, [r7, #8]
 80030f8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80030fa:	4a5a      	ldr	r2, [pc, #360]	; (8003264 <HAL_GPIO_Init+0x334>)
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	089b      	lsrs	r3, r3, #2
 8003100:	3302      	adds	r3, #2
 8003102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003106:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	220f      	movs	r2, #15
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43db      	mvns	r3, r3
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	4013      	ands	r3, r2
 800311c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003124:	d025      	beq.n	8003172 <HAL_GPIO_Init+0x242>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a4f      	ldr	r2, [pc, #316]	; (8003268 <HAL_GPIO_Init+0x338>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d01f      	beq.n	800316e <HAL_GPIO_Init+0x23e>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a4e      	ldr	r2, [pc, #312]	; (800326c <HAL_GPIO_Init+0x33c>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d019      	beq.n	800316a <HAL_GPIO_Init+0x23a>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a4d      	ldr	r2, [pc, #308]	; (8003270 <HAL_GPIO_Init+0x340>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d013      	beq.n	8003166 <HAL_GPIO_Init+0x236>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a4c      	ldr	r2, [pc, #304]	; (8003274 <HAL_GPIO_Init+0x344>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d00d      	beq.n	8003162 <HAL_GPIO_Init+0x232>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a4b      	ldr	r2, [pc, #300]	; (8003278 <HAL_GPIO_Init+0x348>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d007      	beq.n	800315e <HAL_GPIO_Init+0x22e>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a4a      	ldr	r2, [pc, #296]	; (800327c <HAL_GPIO_Init+0x34c>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d101      	bne.n	800315a <HAL_GPIO_Init+0x22a>
 8003156:	2306      	movs	r3, #6
 8003158:	e00c      	b.n	8003174 <HAL_GPIO_Init+0x244>
 800315a:	2307      	movs	r3, #7
 800315c:	e00a      	b.n	8003174 <HAL_GPIO_Init+0x244>
 800315e:	2305      	movs	r3, #5
 8003160:	e008      	b.n	8003174 <HAL_GPIO_Init+0x244>
 8003162:	2304      	movs	r3, #4
 8003164:	e006      	b.n	8003174 <HAL_GPIO_Init+0x244>
 8003166:	2303      	movs	r3, #3
 8003168:	e004      	b.n	8003174 <HAL_GPIO_Init+0x244>
 800316a:	2302      	movs	r3, #2
 800316c:	e002      	b.n	8003174 <HAL_GPIO_Init+0x244>
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <HAL_GPIO_Init+0x244>
 8003172:	2300      	movs	r3, #0
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	f002 0203 	and.w	r2, r2, #3
 800317a:	0092      	lsls	r2, r2, #2
 800317c:	4093      	lsls	r3, r2
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003184:	4937      	ldr	r1, [pc, #220]	; (8003264 <HAL_GPIO_Init+0x334>)
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	089b      	lsrs	r3, r3, #2
 800318a:	3302      	adds	r3, #2
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003192:	4b3b      	ldr	r3, [pc, #236]	; (8003280 <HAL_GPIO_Init+0x350>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	43db      	mvns	r3, r3
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	4013      	ands	r3, r2
 80031a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031b6:	4a32      	ldr	r2, [pc, #200]	; (8003280 <HAL_GPIO_Init+0x350>)
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031bc:	4b30      	ldr	r3, [pc, #192]	; (8003280 <HAL_GPIO_Init+0x350>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	43db      	mvns	r3, r3
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	4013      	ands	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	4313      	orrs	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031e0:	4a27      	ldr	r2, [pc, #156]	; (8003280 <HAL_GPIO_Init+0x350>)
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80031e6:	4b26      	ldr	r3, [pc, #152]	; (8003280 <HAL_GPIO_Init+0x350>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	43db      	mvns	r3, r3
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	4013      	ands	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4313      	orrs	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800320a:	4a1d      	ldr	r2, [pc, #116]	; (8003280 <HAL_GPIO_Init+0x350>)
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003210:	4b1b      	ldr	r3, [pc, #108]	; (8003280 <HAL_GPIO_Init+0x350>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	43db      	mvns	r3, r3
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	4013      	ands	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d003      	beq.n	8003234 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	4313      	orrs	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003234:	4a12      	ldr	r2, [pc, #72]	; (8003280 <HAL_GPIO_Init+0x350>)
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	3301      	adds	r3, #1
 800323e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	fa22 f303 	lsr.w	r3, r2, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	f47f ae78 	bne.w	8002f40 <HAL_GPIO_Init+0x10>
  }
}
 8003250:	bf00      	nop
 8003252:	bf00      	nop
 8003254:	371c      	adds	r7, #28
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	40021000 	.word	0x40021000
 8003264:	40010000 	.word	0x40010000
 8003268:	48000400 	.word	0x48000400
 800326c:	48000800 	.word	0x48000800
 8003270:	48000c00 	.word	0x48000c00
 8003274:	48001000 	.word	0x48001000
 8003278:	48001400 	.word	0x48001400
 800327c:	48001800 	.word	0x48001800
 8003280:	40010400 	.word	0x40010400

08003284 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003284:	b480      	push	{r7}
 8003286:	b087      	sub	sp, #28
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800328e:	2300      	movs	r3, #0
 8003290:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003292:	e0cd      	b.n	8003430 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003294:	2201      	movs	r2, #1
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	4013      	ands	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 80c0 	beq.w	800342a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80032aa:	4a68      	ldr	r2, [pc, #416]	; (800344c <HAL_GPIO_DeInit+0x1c8>)
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	089b      	lsrs	r3, r3, #2
 80032b0:	3302      	adds	r3, #2
 80032b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032b6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	f003 0303 	and.w	r3, r3, #3
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	220f      	movs	r2, #15
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	4013      	ands	r3, r2
 80032ca:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032d2:	d025      	beq.n	8003320 <HAL_GPIO_DeInit+0x9c>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a5e      	ldr	r2, [pc, #376]	; (8003450 <HAL_GPIO_DeInit+0x1cc>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d01f      	beq.n	800331c <HAL_GPIO_DeInit+0x98>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a5d      	ldr	r2, [pc, #372]	; (8003454 <HAL_GPIO_DeInit+0x1d0>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d019      	beq.n	8003318 <HAL_GPIO_DeInit+0x94>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a5c      	ldr	r2, [pc, #368]	; (8003458 <HAL_GPIO_DeInit+0x1d4>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d013      	beq.n	8003314 <HAL_GPIO_DeInit+0x90>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a5b      	ldr	r2, [pc, #364]	; (800345c <HAL_GPIO_DeInit+0x1d8>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d00d      	beq.n	8003310 <HAL_GPIO_DeInit+0x8c>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a5a      	ldr	r2, [pc, #360]	; (8003460 <HAL_GPIO_DeInit+0x1dc>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d007      	beq.n	800330c <HAL_GPIO_DeInit+0x88>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a59      	ldr	r2, [pc, #356]	; (8003464 <HAL_GPIO_DeInit+0x1e0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d101      	bne.n	8003308 <HAL_GPIO_DeInit+0x84>
 8003304:	2306      	movs	r3, #6
 8003306:	e00c      	b.n	8003322 <HAL_GPIO_DeInit+0x9e>
 8003308:	2307      	movs	r3, #7
 800330a:	e00a      	b.n	8003322 <HAL_GPIO_DeInit+0x9e>
 800330c:	2305      	movs	r3, #5
 800330e:	e008      	b.n	8003322 <HAL_GPIO_DeInit+0x9e>
 8003310:	2304      	movs	r3, #4
 8003312:	e006      	b.n	8003322 <HAL_GPIO_DeInit+0x9e>
 8003314:	2303      	movs	r3, #3
 8003316:	e004      	b.n	8003322 <HAL_GPIO_DeInit+0x9e>
 8003318:	2302      	movs	r3, #2
 800331a:	e002      	b.n	8003322 <HAL_GPIO_DeInit+0x9e>
 800331c:	2301      	movs	r3, #1
 800331e:	e000      	b.n	8003322 <HAL_GPIO_DeInit+0x9e>
 8003320:	2300      	movs	r3, #0
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	f002 0203 	and.w	r2, r2, #3
 8003328:	0092      	lsls	r2, r2, #2
 800332a:	4093      	lsls	r3, r2
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	429a      	cmp	r2, r3
 8003330:	d132      	bne.n	8003398 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003332:	4b4d      	ldr	r3, [pc, #308]	; (8003468 <HAL_GPIO_DeInit+0x1e4>)
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	43db      	mvns	r3, r3
 800333a:	494b      	ldr	r1, [pc, #300]	; (8003468 <HAL_GPIO_DeInit+0x1e4>)
 800333c:	4013      	ands	r3, r2
 800333e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003340:	4b49      	ldr	r3, [pc, #292]	; (8003468 <HAL_GPIO_DeInit+0x1e4>)
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	43db      	mvns	r3, r3
 8003348:	4947      	ldr	r1, [pc, #284]	; (8003468 <HAL_GPIO_DeInit+0x1e4>)
 800334a:	4013      	ands	r3, r2
 800334c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800334e:	4b46      	ldr	r3, [pc, #280]	; (8003468 <HAL_GPIO_DeInit+0x1e4>)
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	43db      	mvns	r3, r3
 8003356:	4944      	ldr	r1, [pc, #272]	; (8003468 <HAL_GPIO_DeInit+0x1e4>)
 8003358:	4013      	ands	r3, r2
 800335a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800335c:	4b42      	ldr	r3, [pc, #264]	; (8003468 <HAL_GPIO_DeInit+0x1e4>)
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	43db      	mvns	r3, r3
 8003364:	4940      	ldr	r1, [pc, #256]	; (8003468 <HAL_GPIO_DeInit+0x1e4>)
 8003366:	4013      	ands	r3, r2
 8003368:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f003 0303 	and.w	r3, r3, #3
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	220f      	movs	r2, #15
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800337a:	4a34      	ldr	r2, [pc, #208]	; (800344c <HAL_GPIO_DeInit+0x1c8>)
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	089b      	lsrs	r3, r3, #2
 8003380:	3302      	adds	r3, #2
 8003382:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	43da      	mvns	r2, r3
 800338a:	4830      	ldr	r0, [pc, #192]	; (800344c <HAL_GPIO_DeInit+0x1c8>)
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	089b      	lsrs	r3, r3, #2
 8003390:	400a      	ands	r2, r1
 8003392:	3302      	adds	r3, #2
 8003394:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	2103      	movs	r1, #3
 80033a2:	fa01 f303 	lsl.w	r3, r1, r3
 80033a6:	431a      	orrs	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	08da      	lsrs	r2, r3, #3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3208      	adds	r2, #8
 80033b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	220f      	movs	r2, #15
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	43db      	mvns	r3, r3
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	08d2      	lsrs	r2, r2, #3
 80033cc:	4019      	ands	r1, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	3208      	adds	r2, #8
 80033d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	2103      	movs	r1, #3
 80033e0:	fa01 f303 	lsl.w	r3, r1, r3
 80033e4:	43db      	mvns	r3, r3
 80033e6:	401a      	ands	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	2101      	movs	r1, #1
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	fa01 f303 	lsl.w	r3, r1, r3
 80033f8:	43db      	mvns	r3, r3
 80033fa:	401a      	ands	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	2103      	movs	r1, #3
 800340a:	fa01 f303 	lsl.w	r3, r1, r3
 800340e:	43db      	mvns	r3, r3
 8003410:	401a      	ands	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800341a:	2101      	movs	r1, #1
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	fa01 f303 	lsl.w	r3, r1, r3
 8003422:	43db      	mvns	r3, r3
 8003424:	401a      	ands	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	3301      	adds	r3, #1
 800342e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	fa22 f303 	lsr.w	r3, r2, r3
 8003438:	2b00      	cmp	r3, #0
 800343a:	f47f af2b 	bne.w	8003294 <HAL_GPIO_DeInit+0x10>
  }
}
 800343e:	bf00      	nop
 8003440:	bf00      	nop
 8003442:	371c      	adds	r7, #28
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	40010000 	.word	0x40010000
 8003450:	48000400 	.word	0x48000400
 8003454:	48000800 	.word	0x48000800
 8003458:	48000c00 	.word	0x48000c00
 800345c:	48001000 	.word	0x48001000
 8003460:	48001400 	.word	0x48001400
 8003464:	48001800 	.word	0x48001800
 8003468:	40010400 	.word	0x40010400

0800346c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	807b      	strh	r3, [r7, #2]
 8003478:	4613      	mov	r3, r2
 800347a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800347c:	787b      	ldrb	r3, [r7, #1]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003482:	887a      	ldrh	r2, [r7, #2]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003488:	e002      	b.n	8003490 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800348a:	887a      	ldrh	r2, [r7, #2]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	460b      	mov	r3, r1
 80034a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034ae:	887a      	ldrh	r2, [r7, #2]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4013      	ands	r3, r2
 80034b4:	041a      	lsls	r2, r3, #16
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	43d9      	mvns	r1, r3
 80034ba:	887b      	ldrh	r3, [r7, #2]
 80034bc:	400b      	ands	r3, r1
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	619a      	str	r2, [r3, #24]
}
 80034c4:	bf00      	nop
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80034da:	4b08      	ldr	r3, [pc, #32]	; (80034fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034dc:	695a      	ldr	r2, [r3, #20]
 80034de:	88fb      	ldrh	r3, [r7, #6]
 80034e0:	4013      	ands	r3, r2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d006      	beq.n	80034f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034e6:	4a05      	ldr	r2, [pc, #20]	; (80034fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034e8:	88fb      	ldrh	r3, [r7, #6]
 80034ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034ec:	88fb      	ldrh	r3, [r7, #6]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 f806 	bl	8003500 <HAL_GPIO_EXTI_Callback>
  }
}
 80034f4:	bf00      	nop
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40010400 	.word	0x40010400

08003500 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	4603      	mov	r3, r0
 8003508:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b082      	sub	sp, #8
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e081      	b.n	800362c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	d106      	bne.n	8003542 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7fe f925 	bl	800178c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2224      	movs	r2, #36	; 0x24
 8003546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 0201 	bic.w	r2, r2, #1
 8003558:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003566:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689a      	ldr	r2, [r3, #8]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003576:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d107      	bne.n	8003590 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800358c:	609a      	str	r2, [r3, #8]
 800358e:	e006      	b.n	800359e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689a      	ldr	r2, [r3, #8]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800359c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d104      	bne.n	80035b0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035ae:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	6812      	ldr	r2, [r2, #0]
 80035ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035c2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68da      	ldr	r2, [r3, #12]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035d2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691a      	ldr	r2, [r3, #16]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69d9      	ldr	r1, [r3, #28]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1a      	ldr	r2, [r3, #32]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f042 0201 	orr.w	r2, r2, #1
 800360c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2220      	movs	r2, #32
 8003618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e021      	b.n	800368a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2224      	movs	r2, #36	; 0x24
 800364a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 0201 	bic.w	r2, r2, #1
 800365c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7fe f8f2 	bl	8001848 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
	...

08003694 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b088      	sub	sp, #32
 8003698:	af02      	add	r7, sp, #8
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	4608      	mov	r0, r1
 800369e:	4611      	mov	r1, r2
 80036a0:	461a      	mov	r2, r3
 80036a2:	4603      	mov	r3, r0
 80036a4:	817b      	strh	r3, [r7, #10]
 80036a6:	460b      	mov	r3, r1
 80036a8:	813b      	strh	r3, [r7, #8]
 80036aa:	4613      	mov	r3, r2
 80036ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b20      	cmp	r3, #32
 80036b8:	f040 80f9 	bne.w	80038ae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036bc:	6a3b      	ldr	r3, [r7, #32]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d002      	beq.n	80036c8 <HAL_I2C_Mem_Write+0x34>
 80036c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d105      	bne.n	80036d4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036ce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e0ed      	b.n	80038b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d101      	bne.n	80036e2 <HAL_I2C_Mem_Write+0x4e>
 80036de:	2302      	movs	r3, #2
 80036e0:	e0e6      	b.n	80038b0 <HAL_I2C_Mem_Write+0x21c>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036ea:	f7ff fb33 	bl	8002d54 <HAL_GetTick>
 80036ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	2319      	movs	r3, #25
 80036f6:	2201      	movs	r2, #1
 80036f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f000 fac3 	bl	8003c88 <I2C_WaitOnFlagUntilTimeout>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e0d1      	b.n	80038b0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2221      	movs	r2, #33	; 0x21
 8003710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2240      	movs	r2, #64	; 0x40
 8003718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6a3a      	ldr	r2, [r7, #32]
 8003726:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800372c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003734:	88f8      	ldrh	r0, [r7, #6]
 8003736:	893a      	ldrh	r2, [r7, #8]
 8003738:	8979      	ldrh	r1, [r7, #10]
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	9301      	str	r3, [sp, #4]
 800373e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	4603      	mov	r3, r0
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 f9d3 	bl	8003af0 <I2C_RequestMemoryWrite>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d005      	beq.n	800375c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e0a9      	b.n	80038b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003760:	b29b      	uxth	r3, r3
 8003762:	2bff      	cmp	r3, #255	; 0xff
 8003764:	d90e      	bls.n	8003784 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	22ff      	movs	r2, #255	; 0xff
 800376a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003770:	b2da      	uxtb	r2, r3
 8003772:	8979      	ldrh	r1, [r7, #10]
 8003774:	2300      	movs	r3, #0
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f000 fc2b 	bl	8003fd8 <I2C_TransferConfig>
 8003782:	e00f      	b.n	80037a4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003788:	b29a      	uxth	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003792:	b2da      	uxtb	r2, r3
 8003794:	8979      	ldrh	r1, [r7, #10]
 8003796:	2300      	movs	r3, #0
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 fc1a 	bl	8003fd8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 faad 	bl	8003d08 <I2C_WaitOnTXISFlagUntilTimeout>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e07b      	b.n	80038b0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037bc:	781a      	ldrb	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	1c5a      	adds	r2, r3, #1
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	3b01      	subs	r3, #1
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e0:	3b01      	subs	r3, #1
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d034      	beq.n	800385c <HAL_I2C_Mem_Write+0x1c8>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d130      	bne.n	800385c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003800:	2200      	movs	r2, #0
 8003802:	2180      	movs	r1, #128	; 0x80
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 fa3f 	bl	8003c88 <I2C_WaitOnFlagUntilTimeout>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e04d      	b.n	80038b0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003818:	b29b      	uxth	r3, r3
 800381a:	2bff      	cmp	r3, #255	; 0xff
 800381c:	d90e      	bls.n	800383c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	22ff      	movs	r2, #255	; 0xff
 8003822:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003828:	b2da      	uxtb	r2, r3
 800382a:	8979      	ldrh	r1, [r7, #10]
 800382c:	2300      	movs	r3, #0
 800382e:	9300      	str	r3, [sp, #0]
 8003830:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 fbcf 	bl	8003fd8 <I2C_TransferConfig>
 800383a:	e00f      	b.n	800385c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003840:	b29a      	uxth	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800384a:	b2da      	uxtb	r2, r3
 800384c:	8979      	ldrh	r1, [r7, #10]
 800384e:	2300      	movs	r3, #0
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f000 fbbe 	bl	8003fd8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003860:	b29b      	uxth	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d19e      	bne.n	80037a4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 fa8c 	bl	8003d88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e01a      	b.n	80038b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2220      	movs	r2, #32
 8003880:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6859      	ldr	r1, [r3, #4]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <HAL_I2C_Mem_Write+0x224>)
 800388e:	400b      	ands	r3, r1
 8003890:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2220      	movs	r2, #32
 8003896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038aa:	2300      	movs	r3, #0
 80038ac:	e000      	b.n	80038b0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80038ae:	2302      	movs	r3, #2
  }
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	fe00e800 	.word	0xfe00e800

080038bc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b088      	sub	sp, #32
 80038c0:	af02      	add	r7, sp, #8
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	4608      	mov	r0, r1
 80038c6:	4611      	mov	r1, r2
 80038c8:	461a      	mov	r2, r3
 80038ca:	4603      	mov	r3, r0
 80038cc:	817b      	strh	r3, [r7, #10]
 80038ce:	460b      	mov	r3, r1
 80038d0:	813b      	strh	r3, [r7, #8]
 80038d2:	4613      	mov	r3, r2
 80038d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b20      	cmp	r3, #32
 80038e0:	f040 80fd 	bne.w	8003ade <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d002      	beq.n	80038f0 <HAL_I2C_Mem_Read+0x34>
 80038ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d105      	bne.n	80038fc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038f6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e0f1      	b.n	8003ae0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003902:	2b01      	cmp	r3, #1
 8003904:	d101      	bne.n	800390a <HAL_I2C_Mem_Read+0x4e>
 8003906:	2302      	movs	r3, #2
 8003908:	e0ea      	b.n	8003ae0 <HAL_I2C_Mem_Read+0x224>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003912:	f7ff fa1f 	bl	8002d54 <HAL_GetTick>
 8003916:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	2319      	movs	r3, #25
 800391e:	2201      	movs	r2, #1
 8003920:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f000 f9af 	bl	8003c88 <I2C_WaitOnFlagUntilTimeout>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e0d5      	b.n	8003ae0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2222      	movs	r2, #34	; 0x22
 8003938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2240      	movs	r2, #64	; 0x40
 8003940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6a3a      	ldr	r2, [r7, #32]
 800394e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003954:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800395c:	88f8      	ldrh	r0, [r7, #6]
 800395e:	893a      	ldrh	r2, [r7, #8]
 8003960:	8979      	ldrh	r1, [r7, #10]
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	9301      	str	r3, [sp, #4]
 8003966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	4603      	mov	r3, r0
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 f913 	bl	8003b98 <I2C_RequestMemoryRead>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d005      	beq.n	8003984 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e0ad      	b.n	8003ae0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003988:	b29b      	uxth	r3, r3
 800398a:	2bff      	cmp	r3, #255	; 0xff
 800398c:	d90e      	bls.n	80039ac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	22ff      	movs	r2, #255	; 0xff
 8003992:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003998:	b2da      	uxtb	r2, r3
 800399a:	8979      	ldrh	r1, [r7, #10]
 800399c:	4b52      	ldr	r3, [pc, #328]	; (8003ae8 <HAL_I2C_Mem_Read+0x22c>)
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f000 fb17 	bl	8003fd8 <I2C_TransferConfig>
 80039aa:	e00f      	b.n	80039cc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	8979      	ldrh	r1, [r7, #10]
 80039be:	4b4a      	ldr	r3, [pc, #296]	; (8003ae8 <HAL_I2C_Mem_Read+0x22c>)
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 fb06 	bl	8003fd8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	9300      	str	r3, [sp, #0]
 80039d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d2:	2200      	movs	r2, #0
 80039d4:	2104      	movs	r1, #4
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 f956 	bl	8003c88 <I2C_WaitOnFlagUntilTimeout>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e07c      	b.n	8003ae0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	b2d2      	uxtb	r2, r2
 80039f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	1c5a      	adds	r2, r3, #1
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a02:	3b01      	subs	r3, #1
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d034      	beq.n	8003a8c <HAL_I2C_Mem_Read+0x1d0>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d130      	bne.n	8003a8c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a30:	2200      	movs	r2, #0
 8003a32:	2180      	movs	r1, #128	; 0x80
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f000 f927 	bl	8003c88 <I2C_WaitOnFlagUntilTimeout>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e04d      	b.n	8003ae0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	2bff      	cmp	r3, #255	; 0xff
 8003a4c:	d90e      	bls.n	8003a6c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	22ff      	movs	r2, #255	; 0xff
 8003a52:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	8979      	ldrh	r1, [r7, #10]
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	9300      	str	r3, [sp, #0]
 8003a60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f000 fab7 	bl	8003fd8 <I2C_TransferConfig>
 8003a6a:	e00f      	b.n	8003a8c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a7a:	b2da      	uxtb	r2, r3
 8003a7c:	8979      	ldrh	r1, [r7, #10]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 faa6 	bl	8003fd8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d19a      	bne.n	80039cc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 f974 	bl	8003d88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e01a      	b.n	8003ae0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6859      	ldr	r1, [r3, #4]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <HAL_I2C_Mem_Read+0x230>)
 8003abe:	400b      	ands	r3, r1
 8003ac0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ada:	2300      	movs	r3, #0
 8003adc:	e000      	b.n	8003ae0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003ade:	2302      	movs	r3, #2
  }
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3718      	adds	r7, #24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	80002400 	.word	0x80002400
 8003aec:	fe00e800 	.word	0xfe00e800

08003af0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af02      	add	r7, sp, #8
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	4608      	mov	r0, r1
 8003afa:	4611      	mov	r1, r2
 8003afc:	461a      	mov	r2, r3
 8003afe:	4603      	mov	r3, r0
 8003b00:	817b      	strh	r3, [r7, #10]
 8003b02:	460b      	mov	r3, r1
 8003b04:	813b      	strh	r3, [r7, #8]
 8003b06:	4613      	mov	r3, r2
 8003b08:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003b0a:	88fb      	ldrh	r3, [r7, #6]
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	8979      	ldrh	r1, [r7, #10]
 8003b10:	4b20      	ldr	r3, [pc, #128]	; (8003b94 <I2C_RequestMemoryWrite+0xa4>)
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 fa5d 	bl	8003fd8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b1e:	69fa      	ldr	r2, [r7, #28]
 8003b20:	69b9      	ldr	r1, [r7, #24]
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 f8f0 	bl	8003d08 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e02c      	b.n	8003b8c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b32:	88fb      	ldrh	r3, [r7, #6]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d105      	bne.n	8003b44 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b38:	893b      	ldrh	r3, [r7, #8]
 8003b3a:	b2da      	uxtb	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	629a      	str	r2, [r3, #40]	; 0x28
 8003b42:	e015      	b.n	8003b70 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b44:	893b      	ldrh	r3, [r7, #8]
 8003b46:	0a1b      	lsrs	r3, r3, #8
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b52:	69fa      	ldr	r2, [r7, #28]
 8003b54:	69b9      	ldr	r1, [r7, #24]
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 f8d6 	bl	8003d08 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e012      	b.n	8003b8c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b66:	893b      	ldrh	r3, [r7, #8]
 8003b68:	b2da      	uxtb	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	2200      	movs	r2, #0
 8003b78:	2180      	movs	r1, #128	; 0x80
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f000 f884 	bl	8003c88 <I2C_WaitOnFlagUntilTimeout>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e000      	b.n	8003b8c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	80002000 	.word	0x80002000

08003b98 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af02      	add	r7, sp, #8
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	4608      	mov	r0, r1
 8003ba2:	4611      	mov	r1, r2
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	817b      	strh	r3, [r7, #10]
 8003baa:	460b      	mov	r3, r1
 8003bac:	813b      	strh	r3, [r7, #8]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003bb2:	88fb      	ldrh	r3, [r7, #6]
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	8979      	ldrh	r1, [r7, #10]
 8003bb8:	4b20      	ldr	r3, [pc, #128]	; (8003c3c <I2C_RequestMemoryRead+0xa4>)
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 fa0a 	bl	8003fd8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bc4:	69fa      	ldr	r2, [r7, #28]
 8003bc6:	69b9      	ldr	r1, [r7, #24]
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f000 f89d 	bl	8003d08 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e02c      	b.n	8003c32 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bd8:	88fb      	ldrh	r3, [r7, #6]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d105      	bne.n	8003bea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bde:	893b      	ldrh	r3, [r7, #8]
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	629a      	str	r2, [r3, #40]	; 0x28
 8003be8:	e015      	b.n	8003c16 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003bea:	893b      	ldrh	r3, [r7, #8]
 8003bec:	0a1b      	lsrs	r3, r3, #8
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bf8:	69fa      	ldr	r2, [r7, #28]
 8003bfa:	69b9      	ldr	r1, [r7, #24]
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 f883 	bl	8003d08 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e012      	b.n	8003c32 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c0c:	893b      	ldrh	r3, [r7, #8]
 8003c0e:	b2da      	uxtb	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	2140      	movs	r1, #64	; 0x40
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f000 f831 	bl	8003c88 <I2C_WaitOnFlagUntilTimeout>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e000      	b.n	8003c32 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	80002000 	.word	0x80002000

08003c40 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d103      	bne.n	8003c5e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d007      	beq.n	8003c7c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	699a      	ldr	r2, [r3, #24]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0201 	orr.w	r2, r2, #1
 8003c7a:	619a      	str	r2, [r3, #24]
  }
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	603b      	str	r3, [r7, #0]
 8003c94:	4613      	mov	r3, r2
 8003c96:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c98:	e022      	b.n	8003ce0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca0:	d01e      	beq.n	8003ce0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ca2:	f7ff f857 	bl	8002d54 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d302      	bcc.n	8003cb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d113      	bne.n	8003ce0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cbc:	f043 0220 	orr.w	r2, r3, #32
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e00f      	b.n	8003d00 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	699a      	ldr	r2, [r3, #24]
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	bf0c      	ite	eq
 8003cf0:	2301      	moveq	r3, #1
 8003cf2:	2300      	movne	r3, #0
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	79fb      	ldrb	r3, [r7, #7]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d0cd      	beq.n	8003c9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d14:	e02c      	b.n	8003d70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	68b9      	ldr	r1, [r7, #8]
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 f870 	bl	8003e00 <I2C_IsErrorOccurred>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e02a      	b.n	8003d80 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d30:	d01e      	beq.n	8003d70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d32:	f7ff f80f 	bl	8002d54 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d302      	bcc.n	8003d48 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d113      	bne.n	8003d70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4c:	f043 0220 	orr.w	r2, r3, #32
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2220      	movs	r2, #32
 8003d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e007      	b.n	8003d80 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d1cb      	bne.n	8003d16 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d94:	e028      	b.n	8003de8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	68b9      	ldr	r1, [r7, #8]
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 f830 	bl	8003e00 <I2C_IsErrorOccurred>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e026      	b.n	8003df8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003daa:	f7fe ffd3 	bl	8002d54 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	68ba      	ldr	r2, [r7, #8]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d302      	bcc.n	8003dc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d113      	bne.n	8003de8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc4:	f043 0220 	orr.w	r2, r3, #32
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e007      	b.n	8003df8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	f003 0320 	and.w	r3, r3, #32
 8003df2:	2b20      	cmp	r3, #32
 8003df4:	d1cf      	bne.n	8003d96 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b08a      	sub	sp, #40	; 0x28
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	f003 0310 	and.w	r3, r3, #16
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d075      	beq.n	8003f18 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2210      	movs	r2, #16
 8003e32:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e34:	e056      	b.n	8003ee4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3c:	d052      	beq.n	8003ee4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e3e:	f7fe ff89 	bl	8002d54 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d302      	bcc.n	8003e54 <I2C_IsErrorOccurred+0x54>
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d147      	bne.n	8003ee4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e5e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e66:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e76:	d12e      	bne.n	8003ed6 <I2C_IsErrorOccurred+0xd6>
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e7e:	d02a      	beq.n	8003ed6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003e80:	7cfb      	ldrb	r3, [r7, #19]
 8003e82:	2b20      	cmp	r3, #32
 8003e84:	d027      	beq.n	8003ed6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e94:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003e96:	f7fe ff5d 	bl	8002d54 <HAL_GetTick>
 8003e9a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e9c:	e01b      	b.n	8003ed6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003e9e:	f7fe ff59 	bl	8002d54 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b19      	cmp	r3, #25
 8003eaa:	d914      	bls.n	8003ed6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb0:	f043 0220 	orr.w	r2, r3, #32
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	f003 0320 	and.w	r3, r3, #32
 8003ee0:	2b20      	cmp	r3, #32
 8003ee2:	d1dc      	bne.n	8003e9e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	f003 0320 	and.w	r3, r3, #32
 8003eee:	2b20      	cmp	r3, #32
 8003ef0:	d003      	beq.n	8003efa <I2C_IsErrorOccurred+0xfa>
 8003ef2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d09d      	beq.n	8003e36 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003efa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d103      	bne.n	8003f0a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2220      	movs	r2, #32
 8003f08:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003f0a:	6a3b      	ldr	r3, [r7, #32]
 8003f0c:	f043 0304 	orr.w	r3, r3, #4
 8003f10:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00b      	beq.n	8003f42 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	f043 0301 	orr.w	r3, r3, #1
 8003f30:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f3a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00b      	beq.n	8003f64 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	f043 0308 	orr.w	r3, r3, #8
 8003f52:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f5c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00b      	beq.n	8003f86 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003f6e:	6a3b      	ldr	r3, [r7, #32]
 8003f70:	f043 0302 	orr.w	r3, r3, #2
 8003f74:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f7e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003f86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d01c      	beq.n	8003fc8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f7ff fe56 	bl	8003c40 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6859      	ldr	r1, [r3, #4]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	4b0d      	ldr	r3, [pc, #52]	; (8003fd4 <I2C_IsErrorOccurred+0x1d4>)
 8003fa0:	400b      	ands	r3, r1
 8003fa2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
 8003faa:	431a      	orrs	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003fc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3728      	adds	r7, #40	; 0x28
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	fe00e800 	.word	0xfe00e800

08003fd8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b087      	sub	sp, #28
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	607b      	str	r3, [r7, #4]
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	817b      	strh	r3, [r7, #10]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003fea:	897b      	ldrh	r3, [r7, #10]
 8003fec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ff0:	7a7b      	ldrb	r3, [r7, #9]
 8003ff2:	041b      	lsls	r3, r3, #16
 8003ff4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ff8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ffe:	6a3b      	ldr	r3, [r7, #32]
 8004000:	4313      	orrs	r3, r2
 8004002:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004006:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	6a3b      	ldr	r3, [r7, #32]
 8004010:	0d5b      	lsrs	r3, r3, #21
 8004012:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004016:	4b08      	ldr	r3, [pc, #32]	; (8004038 <I2C_TransferConfig+0x60>)
 8004018:	430b      	orrs	r3, r1
 800401a:	43db      	mvns	r3, r3
 800401c:	ea02 0103 	and.w	r1, r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	430a      	orrs	r2, r1
 8004028:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800402a:	bf00      	nop
 800402c:	371c      	adds	r7, #28
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	03ff63ff 	.word	0x03ff63ff

0800403c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b20      	cmp	r3, #32
 8004050:	d138      	bne.n	80040c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800405c:	2302      	movs	r3, #2
 800405e:	e032      	b.n	80040c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2224      	movs	r2, #36	; 0x24
 800406c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0201 	bic.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800408e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6819      	ldr	r1, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	430a      	orrs	r2, r1
 800409e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f042 0201 	orr.w	r2, r2, #1
 80040ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040c0:	2300      	movs	r3, #0
 80040c2:	e000      	b.n	80040c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80040c4:	2302      	movs	r3, #2
  }
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b085      	sub	sp, #20
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
 80040da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b20      	cmp	r3, #32
 80040e6:	d139      	bne.n	800415c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d101      	bne.n	80040f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80040f2:	2302      	movs	r3, #2
 80040f4:	e033      	b.n	800415e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2224      	movs	r2, #36	; 0x24
 8004102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 0201 	bic.w	r2, r2, #1
 8004114:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004124:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	021b      	lsls	r3, r3, #8
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	4313      	orrs	r3, r2
 800412e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f042 0201 	orr.w	r2, r2, #1
 8004146:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2220      	movs	r2, #32
 800414c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004158:	2300      	movs	r3, #0
 800415a:	e000      	b.n	800415e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800415c:	2302      	movs	r3, #2
  }
}
 800415e:	4618      	mov	r0, r3
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
	...

0800416c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004170:	4b05      	ldr	r3, [pc, #20]	; (8004188 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a04      	ldr	r2, [pc, #16]	; (8004188 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800417a:	6013      	str	r3, [r2, #0]
}
 800417c:	bf00      	nop
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	40007000 	.word	0x40007000

0800418c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004190:	4b04      	ldr	r3, [pc, #16]	; (80041a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004198:	4618      	mov	r0, r3
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	40007000 	.word	0x40007000

080041a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041b6:	d130      	bne.n	800421a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80041b8:	4b23      	ldr	r3, [pc, #140]	; (8004248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041c4:	d038      	beq.n	8004238 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041c6:	4b20      	ldr	r3, [pc, #128]	; (8004248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041ce:	4a1e      	ldr	r2, [pc, #120]	; (8004248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80041d6:	4b1d      	ldr	r3, [pc, #116]	; (800424c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2232      	movs	r2, #50	; 0x32
 80041dc:	fb02 f303 	mul.w	r3, r2, r3
 80041e0:	4a1b      	ldr	r2, [pc, #108]	; (8004250 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80041e2:	fba2 2303 	umull	r2, r3, r2, r3
 80041e6:	0c9b      	lsrs	r3, r3, #18
 80041e8:	3301      	adds	r3, #1
 80041ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041ec:	e002      	b.n	80041f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	3b01      	subs	r3, #1
 80041f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041f4:	4b14      	ldr	r3, [pc, #80]	; (8004248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004200:	d102      	bne.n	8004208 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1f2      	bne.n	80041ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004208:	4b0f      	ldr	r3, [pc, #60]	; (8004248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004214:	d110      	bne.n	8004238 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e00f      	b.n	800423a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800421a:	4b0b      	ldr	r3, [pc, #44]	; (8004248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004226:	d007      	beq.n	8004238 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004228:	4b07      	ldr	r3, [pc, #28]	; (8004248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004230:	4a05      	ldr	r2, [pc, #20]	; (8004248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004236:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3714      	adds	r7, #20
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	40007000 	.word	0x40007000
 800424c:	20000000 	.word	0x20000000
 8004250:	431bde83 	.word	0x431bde83

08004254 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b088      	sub	sp, #32
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e3ca      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004266:	4b97      	ldr	r3, [pc, #604]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f003 030c 	and.w	r3, r3, #12
 800426e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004270:	4b94      	ldr	r3, [pc, #592]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f003 0303 	and.w	r3, r3, #3
 8004278:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0310 	and.w	r3, r3, #16
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 80e4 	beq.w	8004450 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d007      	beq.n	800429e <HAL_RCC_OscConfig+0x4a>
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	2b0c      	cmp	r3, #12
 8004292:	f040 808b 	bne.w	80043ac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	2b01      	cmp	r3, #1
 800429a:	f040 8087 	bne.w	80043ac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800429e:	4b89      	ldr	r3, [pc, #548]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d005      	beq.n	80042b6 <HAL_RCC_OscConfig+0x62>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e3a2      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1a      	ldr	r2, [r3, #32]
 80042ba:	4b82      	ldr	r3, [pc, #520]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0308 	and.w	r3, r3, #8
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d004      	beq.n	80042d0 <HAL_RCC_OscConfig+0x7c>
 80042c6:	4b7f      	ldr	r3, [pc, #508]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042ce:	e005      	b.n	80042dc <HAL_RCC_OscConfig+0x88>
 80042d0:	4b7c      	ldr	r3, [pc, #496]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 80042d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042d6:	091b      	lsrs	r3, r3, #4
 80042d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042dc:	4293      	cmp	r3, r2
 80042de:	d223      	bcs.n	8004328 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f000 fd87 	bl	8004df8 <RCC_SetFlashLatencyFromMSIRange>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d001      	beq.n	80042f4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e383      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042f4:	4b73      	ldr	r3, [pc, #460]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a72      	ldr	r2, [pc, #456]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 80042fa:	f043 0308 	orr.w	r3, r3, #8
 80042fe:	6013      	str	r3, [r2, #0]
 8004300:	4b70      	ldr	r3, [pc, #448]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	496d      	ldr	r1, [pc, #436]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 800430e:	4313      	orrs	r3, r2
 8004310:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004312:	4b6c      	ldr	r3, [pc, #432]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	021b      	lsls	r3, r3, #8
 8004320:	4968      	ldr	r1, [pc, #416]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004322:	4313      	orrs	r3, r2
 8004324:	604b      	str	r3, [r1, #4]
 8004326:	e025      	b.n	8004374 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004328:	4b66      	ldr	r3, [pc, #408]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a65      	ldr	r2, [pc, #404]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 800432e:	f043 0308 	orr.w	r3, r3, #8
 8004332:	6013      	str	r3, [r2, #0]
 8004334:	4b63      	ldr	r3, [pc, #396]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	4960      	ldr	r1, [pc, #384]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004342:	4313      	orrs	r3, r2
 8004344:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004346:	4b5f      	ldr	r3, [pc, #380]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	021b      	lsls	r3, r3, #8
 8004354:	495b      	ldr	r1, [pc, #364]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004356:	4313      	orrs	r3, r2
 8004358:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d109      	bne.n	8004374 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	4618      	mov	r0, r3
 8004366:	f000 fd47 	bl	8004df8 <RCC_SetFlashLatencyFromMSIRange>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e343      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004374:	f000 fc4a 	bl	8004c0c <HAL_RCC_GetSysClockFreq>
 8004378:	4602      	mov	r2, r0
 800437a:	4b52      	ldr	r3, [pc, #328]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	091b      	lsrs	r3, r3, #4
 8004380:	f003 030f 	and.w	r3, r3, #15
 8004384:	4950      	ldr	r1, [pc, #320]	; (80044c8 <HAL_RCC_OscConfig+0x274>)
 8004386:	5ccb      	ldrb	r3, [r1, r3]
 8004388:	f003 031f 	and.w	r3, r3, #31
 800438c:	fa22 f303 	lsr.w	r3, r2, r3
 8004390:	4a4e      	ldr	r2, [pc, #312]	; (80044cc <HAL_RCC_OscConfig+0x278>)
 8004392:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004394:	4b4e      	ldr	r3, [pc, #312]	; (80044d0 <HAL_RCC_OscConfig+0x27c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4618      	mov	r0, r3
 800439a:	f7fd fad7 	bl	800194c <HAL_InitTick>
 800439e:	4603      	mov	r3, r0
 80043a0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80043a2:	7bfb      	ldrb	r3, [r7, #15]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d052      	beq.n	800444e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80043a8:	7bfb      	ldrb	r3, [r7, #15]
 80043aa:	e327      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d032      	beq.n	800441a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80043b4:	4b43      	ldr	r3, [pc, #268]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a42      	ldr	r2, [pc, #264]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 80043ba:	f043 0301 	orr.w	r3, r3, #1
 80043be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80043c0:	f7fe fcc8 	bl	8002d54 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043c8:	f7fe fcc4 	bl	8002d54 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e310      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043da:	4b3a      	ldr	r3, [pc, #232]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0f0      	beq.n	80043c8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043e6:	4b37      	ldr	r3, [pc, #220]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a36      	ldr	r2, [pc, #216]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 80043ec:	f043 0308 	orr.w	r3, r3, #8
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	4b34      	ldr	r3, [pc, #208]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	4931      	ldr	r1, [pc, #196]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004400:	4313      	orrs	r3, r2
 8004402:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004404:	4b2f      	ldr	r3, [pc, #188]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	021b      	lsls	r3, r3, #8
 8004412:	492c      	ldr	r1, [pc, #176]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004414:	4313      	orrs	r3, r2
 8004416:	604b      	str	r3, [r1, #4]
 8004418:	e01a      	b.n	8004450 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800441a:	4b2a      	ldr	r3, [pc, #168]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a29      	ldr	r2, [pc, #164]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004420:	f023 0301 	bic.w	r3, r3, #1
 8004424:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004426:	f7fe fc95 	bl	8002d54 <HAL_GetTick>
 800442a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800442c:	e008      	b.n	8004440 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800442e:	f7fe fc91 	bl	8002d54 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d901      	bls.n	8004440 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e2dd      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004440:	4b20      	ldr	r3, [pc, #128]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1f0      	bne.n	800442e <HAL_RCC_OscConfig+0x1da>
 800444c:	e000      	b.n	8004450 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800444e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b00      	cmp	r3, #0
 800445a:	d074      	beq.n	8004546 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	2b08      	cmp	r3, #8
 8004460:	d005      	beq.n	800446e <HAL_RCC_OscConfig+0x21a>
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	2b0c      	cmp	r3, #12
 8004466:	d10e      	bne.n	8004486 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	2b03      	cmp	r3, #3
 800446c:	d10b      	bne.n	8004486 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800446e:	4b15      	ldr	r3, [pc, #84]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d064      	beq.n	8004544 <HAL_RCC_OscConfig+0x2f0>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d160      	bne.n	8004544 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e2ba      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800448e:	d106      	bne.n	800449e <HAL_RCC_OscConfig+0x24a>
 8004490:	4b0c      	ldr	r3, [pc, #48]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a0b      	ldr	r2, [pc, #44]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 8004496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800449a:	6013      	str	r3, [r2, #0]
 800449c:	e026      	b.n	80044ec <HAL_RCC_OscConfig+0x298>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044a6:	d115      	bne.n	80044d4 <HAL_RCC_OscConfig+0x280>
 80044a8:	4b06      	ldr	r3, [pc, #24]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a05      	ldr	r2, [pc, #20]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 80044ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044b2:	6013      	str	r3, [r2, #0]
 80044b4:	4b03      	ldr	r3, [pc, #12]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a02      	ldr	r2, [pc, #8]	; (80044c4 <HAL_RCC_OscConfig+0x270>)
 80044ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044be:	6013      	str	r3, [r2, #0]
 80044c0:	e014      	b.n	80044ec <HAL_RCC_OscConfig+0x298>
 80044c2:	bf00      	nop
 80044c4:	40021000 	.word	0x40021000
 80044c8:	0800b294 	.word	0x0800b294
 80044cc:	20000000 	.word	0x20000000
 80044d0:	200000c8 	.word	0x200000c8
 80044d4:	4ba0      	ldr	r3, [pc, #640]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a9f      	ldr	r2, [pc, #636]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 80044da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044de:	6013      	str	r3, [r2, #0]
 80044e0:	4b9d      	ldr	r3, [pc, #628]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a9c      	ldr	r2, [pc, #624]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 80044e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d013      	beq.n	800451c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f4:	f7fe fc2e 	bl	8002d54 <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044fc:	f7fe fc2a 	bl	8002d54 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b64      	cmp	r3, #100	; 0x64
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e276      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800450e:	4b92      	ldr	r3, [pc, #584]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0f0      	beq.n	80044fc <HAL_RCC_OscConfig+0x2a8>
 800451a:	e014      	b.n	8004546 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451c:	f7fe fc1a 	bl	8002d54 <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004524:	f7fe fc16 	bl	8002d54 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b64      	cmp	r3, #100	; 0x64
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e262      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004536:	4b88      	ldr	r3, [pc, #544]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1f0      	bne.n	8004524 <HAL_RCC_OscConfig+0x2d0>
 8004542:	e000      	b.n	8004546 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d060      	beq.n	8004614 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	2b04      	cmp	r3, #4
 8004556:	d005      	beq.n	8004564 <HAL_RCC_OscConfig+0x310>
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	2b0c      	cmp	r3, #12
 800455c:	d119      	bne.n	8004592 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	2b02      	cmp	r3, #2
 8004562:	d116      	bne.n	8004592 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004564:	4b7c      	ldr	r3, [pc, #496]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800456c:	2b00      	cmp	r3, #0
 800456e:	d005      	beq.n	800457c <HAL_RCC_OscConfig+0x328>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e23f      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457c:	4b76      	ldr	r3, [pc, #472]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	061b      	lsls	r3, r3, #24
 800458a:	4973      	ldr	r1, [pc, #460]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 800458c:	4313      	orrs	r3, r2
 800458e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004590:	e040      	b.n	8004614 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d023      	beq.n	80045e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800459a:	4b6f      	ldr	r3, [pc, #444]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a6e      	ldr	r2, [pc, #440]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 80045a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a6:	f7fe fbd5 	bl	8002d54 <HAL_GetTick>
 80045aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045ac:	e008      	b.n	80045c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045ae:	f7fe fbd1 	bl	8002d54 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d901      	bls.n	80045c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e21d      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045c0:	4b65      	ldr	r3, [pc, #404]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0f0      	beq.n	80045ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045cc:	4b62      	ldr	r3, [pc, #392]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	061b      	lsls	r3, r3, #24
 80045da:	495f      	ldr	r1, [pc, #380]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	604b      	str	r3, [r1, #4]
 80045e0:	e018      	b.n	8004614 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045e2:	4b5d      	ldr	r3, [pc, #372]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a5c      	ldr	r2, [pc, #368]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 80045e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ee:	f7fe fbb1 	bl	8002d54 <HAL_GetTick>
 80045f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045f4:	e008      	b.n	8004608 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045f6:	f7fe fbad 	bl	8002d54 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d901      	bls.n	8004608 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e1f9      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004608:	4b53      	ldr	r3, [pc, #332]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1f0      	bne.n	80045f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0308 	and.w	r3, r3, #8
 800461c:	2b00      	cmp	r3, #0
 800461e:	d03c      	beq.n	800469a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d01c      	beq.n	8004662 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004628:	4b4b      	ldr	r3, [pc, #300]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 800462a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800462e:	4a4a      	ldr	r2, [pc, #296]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 8004630:	f043 0301 	orr.w	r3, r3, #1
 8004634:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004638:	f7fe fb8c 	bl	8002d54 <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004640:	f7fe fb88 	bl	8002d54 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e1d4      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004652:	4b41      	ldr	r3, [pc, #260]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 8004654:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0ef      	beq.n	8004640 <HAL_RCC_OscConfig+0x3ec>
 8004660:	e01b      	b.n	800469a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004662:	4b3d      	ldr	r3, [pc, #244]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 8004664:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004668:	4a3b      	ldr	r2, [pc, #236]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 800466a:	f023 0301 	bic.w	r3, r3, #1
 800466e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004672:	f7fe fb6f 	bl	8002d54 <HAL_GetTick>
 8004676:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004678:	e008      	b.n	800468c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800467a:	f7fe fb6b 	bl	8002d54 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e1b7      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800468c:	4b32      	ldr	r3, [pc, #200]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 800468e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1ef      	bne.n	800467a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0304 	and.w	r3, r3, #4
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f000 80a6 	beq.w	80047f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046a8:	2300      	movs	r3, #0
 80046aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80046ac:	4b2a      	ldr	r3, [pc, #168]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 80046ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10d      	bne.n	80046d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046b8:	4b27      	ldr	r3, [pc, #156]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 80046ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046bc:	4a26      	ldr	r2, [pc, #152]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 80046be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046c2:	6593      	str	r3, [r2, #88]	; 0x58
 80046c4:	4b24      	ldr	r3, [pc, #144]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 80046c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046cc:	60bb      	str	r3, [r7, #8]
 80046ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046d0:	2301      	movs	r3, #1
 80046d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046d4:	4b21      	ldr	r3, [pc, #132]	; (800475c <HAL_RCC_OscConfig+0x508>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d118      	bne.n	8004712 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046e0:	4b1e      	ldr	r3, [pc, #120]	; (800475c <HAL_RCC_OscConfig+0x508>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a1d      	ldr	r2, [pc, #116]	; (800475c <HAL_RCC_OscConfig+0x508>)
 80046e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ec:	f7fe fb32 	bl	8002d54 <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046f4:	f7fe fb2e 	bl	8002d54 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e17a      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004706:	4b15      	ldr	r3, [pc, #84]	; (800475c <HAL_RCC_OscConfig+0x508>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470e:	2b00      	cmp	r3, #0
 8004710:	d0f0      	beq.n	80046f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d108      	bne.n	800472c <HAL_RCC_OscConfig+0x4d8>
 800471a:	4b0f      	ldr	r3, [pc, #60]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 800471c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004720:	4a0d      	ldr	r2, [pc, #52]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 8004722:	f043 0301 	orr.w	r3, r3, #1
 8004726:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800472a:	e029      	b.n	8004780 <HAL_RCC_OscConfig+0x52c>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	2b05      	cmp	r3, #5
 8004732:	d115      	bne.n	8004760 <HAL_RCC_OscConfig+0x50c>
 8004734:	4b08      	ldr	r3, [pc, #32]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 8004736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800473a:	4a07      	ldr	r2, [pc, #28]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 800473c:	f043 0304 	orr.w	r3, r3, #4
 8004740:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004744:	4b04      	ldr	r3, [pc, #16]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 8004746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474a:	4a03      	ldr	r2, [pc, #12]	; (8004758 <HAL_RCC_OscConfig+0x504>)
 800474c:	f043 0301 	orr.w	r3, r3, #1
 8004750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004754:	e014      	b.n	8004780 <HAL_RCC_OscConfig+0x52c>
 8004756:	bf00      	nop
 8004758:	40021000 	.word	0x40021000
 800475c:	40007000 	.word	0x40007000
 8004760:	4b9c      	ldr	r3, [pc, #624]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 8004762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004766:	4a9b      	ldr	r2, [pc, #620]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 8004768:	f023 0301 	bic.w	r3, r3, #1
 800476c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004770:	4b98      	ldr	r3, [pc, #608]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 8004772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004776:	4a97      	ldr	r2, [pc, #604]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 8004778:	f023 0304 	bic.w	r3, r3, #4
 800477c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d016      	beq.n	80047b6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004788:	f7fe fae4 	bl	8002d54 <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800478e:	e00a      	b.n	80047a6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004790:	f7fe fae0 	bl	8002d54 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	f241 3288 	movw	r2, #5000	; 0x1388
 800479e:	4293      	cmp	r3, r2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e12a      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047a6:	4b8b      	ldr	r3, [pc, #556]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 80047a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d0ed      	beq.n	8004790 <HAL_RCC_OscConfig+0x53c>
 80047b4:	e015      	b.n	80047e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b6:	f7fe facd 	bl	8002d54 <HAL_GetTick>
 80047ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047bc:	e00a      	b.n	80047d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047be:	f7fe fac9 	bl	8002d54 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d901      	bls.n	80047d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e113      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047d4:	4b7f      	ldr	r3, [pc, #508]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 80047d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1ed      	bne.n	80047be <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047e2:	7ffb      	ldrb	r3, [r7, #31]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d105      	bne.n	80047f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047e8:	4b7a      	ldr	r3, [pc, #488]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 80047ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ec:	4a79      	ldr	r2, [pc, #484]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 80047ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047f2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 80fe 	beq.w	80049fa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004802:	2b02      	cmp	r3, #2
 8004804:	f040 80d0 	bne.w	80049a8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004808:	4b72      	ldr	r3, [pc, #456]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f003 0203 	and.w	r2, r3, #3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004818:	429a      	cmp	r2, r3
 800481a:	d130      	bne.n	800487e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004826:	3b01      	subs	r3, #1
 8004828:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800482a:	429a      	cmp	r2, r3
 800482c:	d127      	bne.n	800487e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004838:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800483a:	429a      	cmp	r2, r3
 800483c:	d11f      	bne.n	800487e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004848:	2a07      	cmp	r2, #7
 800484a:	bf14      	ite	ne
 800484c:	2201      	movne	r2, #1
 800484e:	2200      	moveq	r2, #0
 8004850:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004852:	4293      	cmp	r3, r2
 8004854:	d113      	bne.n	800487e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004860:	085b      	lsrs	r3, r3, #1
 8004862:	3b01      	subs	r3, #1
 8004864:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004866:	429a      	cmp	r2, r3
 8004868:	d109      	bne.n	800487e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004874:	085b      	lsrs	r3, r3, #1
 8004876:	3b01      	subs	r3, #1
 8004878:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800487a:	429a      	cmp	r2, r3
 800487c:	d06e      	beq.n	800495c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	2b0c      	cmp	r3, #12
 8004882:	d069      	beq.n	8004958 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004884:	4b53      	ldr	r3, [pc, #332]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d105      	bne.n	800489c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004890:	4b50      	ldr	r3, [pc, #320]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e0ad      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80048a0:	4b4c      	ldr	r3, [pc, #304]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a4b      	ldr	r2, [pc, #300]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 80048a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048aa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048ac:	f7fe fa52 	bl	8002d54 <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048b2:	e008      	b.n	80048c6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048b4:	f7fe fa4e 	bl	8002d54 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e09a      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048c6:	4b43      	ldr	r3, [pc, #268]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1f0      	bne.n	80048b4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048d2:	4b40      	ldr	r3, [pc, #256]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 80048d4:	68da      	ldr	r2, [r3, #12]
 80048d6:	4b40      	ldr	r3, [pc, #256]	; (80049d8 <HAL_RCC_OscConfig+0x784>)
 80048d8:	4013      	ands	r3, r2
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80048e2:	3a01      	subs	r2, #1
 80048e4:	0112      	lsls	r2, r2, #4
 80048e6:	4311      	orrs	r1, r2
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80048ec:	0212      	lsls	r2, r2, #8
 80048ee:	4311      	orrs	r1, r2
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80048f4:	0852      	lsrs	r2, r2, #1
 80048f6:	3a01      	subs	r2, #1
 80048f8:	0552      	lsls	r2, r2, #21
 80048fa:	4311      	orrs	r1, r2
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004900:	0852      	lsrs	r2, r2, #1
 8004902:	3a01      	subs	r2, #1
 8004904:	0652      	lsls	r2, r2, #25
 8004906:	4311      	orrs	r1, r2
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800490c:	0912      	lsrs	r2, r2, #4
 800490e:	0452      	lsls	r2, r2, #17
 8004910:	430a      	orrs	r2, r1
 8004912:	4930      	ldr	r1, [pc, #192]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 8004914:	4313      	orrs	r3, r2
 8004916:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004918:	4b2e      	ldr	r3, [pc, #184]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a2d      	ldr	r2, [pc, #180]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 800491e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004922:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004924:	4b2b      	ldr	r3, [pc, #172]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	4a2a      	ldr	r2, [pc, #168]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 800492a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800492e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004930:	f7fe fa10 	bl	8002d54 <HAL_GetTick>
 8004934:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004936:	e008      	b.n	800494a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004938:	f7fe fa0c 	bl	8002d54 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e058      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800494a:	4b22      	ldr	r3, [pc, #136]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d0f0      	beq.n	8004938 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004956:	e050      	b.n	80049fa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e04f      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800495c:	4b1d      	ldr	r3, [pc, #116]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d148      	bne.n	80049fa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004968:	4b1a      	ldr	r3, [pc, #104]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a19      	ldr	r2, [pc, #100]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 800496e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004972:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004974:	4b17      	ldr	r3, [pc, #92]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	4a16      	ldr	r2, [pc, #88]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 800497a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800497e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004980:	f7fe f9e8 	bl	8002d54 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004988:	f7fe f9e4 	bl	8002d54 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e030      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800499a:	4b0e      	ldr	r3, [pc, #56]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0f0      	beq.n	8004988 <HAL_RCC_OscConfig+0x734>
 80049a6:	e028      	b.n	80049fa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	2b0c      	cmp	r3, #12
 80049ac:	d023      	beq.n	80049f6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ae:	4b09      	ldr	r3, [pc, #36]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a08      	ldr	r2, [pc, #32]	; (80049d4 <HAL_RCC_OscConfig+0x780>)
 80049b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ba:	f7fe f9cb 	bl	8002d54 <HAL_GetTick>
 80049be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049c0:	e00c      	b.n	80049dc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049c2:	f7fe f9c7 	bl	8002d54 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d905      	bls.n	80049dc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e013      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
 80049d4:	40021000 	.word	0x40021000
 80049d8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049dc:	4b09      	ldr	r3, [pc, #36]	; (8004a04 <HAL_RCC_OscConfig+0x7b0>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1ec      	bne.n	80049c2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80049e8:	4b06      	ldr	r3, [pc, #24]	; (8004a04 <HAL_RCC_OscConfig+0x7b0>)
 80049ea:	68da      	ldr	r2, [r3, #12]
 80049ec:	4905      	ldr	r1, [pc, #20]	; (8004a04 <HAL_RCC_OscConfig+0x7b0>)
 80049ee:	4b06      	ldr	r3, [pc, #24]	; (8004a08 <HAL_RCC_OscConfig+0x7b4>)
 80049f0:	4013      	ands	r3, r2
 80049f2:	60cb      	str	r3, [r1, #12]
 80049f4:	e001      	b.n	80049fa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e000      	b.n	80049fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3720      	adds	r7, #32
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	40021000 	.word	0x40021000
 8004a08:	feeefffc 	.word	0xfeeefffc

08004a0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e0e7      	b.n	8004bf0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a20:	4b75      	ldr	r3, [pc, #468]	; (8004bf8 <HAL_RCC_ClockConfig+0x1ec>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0307 	and.w	r3, r3, #7
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d910      	bls.n	8004a50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a2e:	4b72      	ldr	r3, [pc, #456]	; (8004bf8 <HAL_RCC_ClockConfig+0x1ec>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f023 0207 	bic.w	r2, r3, #7
 8004a36:	4970      	ldr	r1, [pc, #448]	; (8004bf8 <HAL_RCC_ClockConfig+0x1ec>)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a3e:	4b6e      	ldr	r3, [pc, #440]	; (8004bf8 <HAL_RCC_ClockConfig+0x1ec>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0307 	and.w	r3, r3, #7
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d001      	beq.n	8004a50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e0cf      	b.n	8004bf0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d010      	beq.n	8004a7e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	4b66      	ldr	r3, [pc, #408]	; (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d908      	bls.n	8004a7e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a6c:	4b63      	ldr	r3, [pc, #396]	; (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	4960      	ldr	r1, [pc, #384]	; (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d04c      	beq.n	8004b24 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2b03      	cmp	r3, #3
 8004a90:	d107      	bne.n	8004aa2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a92:	4b5a      	ldr	r3, [pc, #360]	; (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d121      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e0a6      	b.n	8004bf0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d107      	bne.n	8004aba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aaa:	4b54      	ldr	r3, [pc, #336]	; (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d115      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e09a      	b.n	8004bf0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d107      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ac2:	4b4e      	ldr	r3, [pc, #312]	; (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d109      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e08e      	b.n	8004bf0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ad2:	4b4a      	ldr	r3, [pc, #296]	; (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e086      	b.n	8004bf0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ae2:	4b46      	ldr	r3, [pc, #280]	; (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f023 0203 	bic.w	r2, r3, #3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	4943      	ldr	r1, [pc, #268]	; (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004af4:	f7fe f92e 	bl	8002d54 <HAL_GetTick>
 8004af8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004afa:	e00a      	b.n	8004b12 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004afc:	f7fe f92a 	bl	8002d54 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e06e      	b.n	8004bf0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b12:	4b3a      	ldr	r3, [pc, #232]	; (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 020c 	and.w	r2, r3, #12
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d1eb      	bne.n	8004afc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d010      	beq.n	8004b52 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689a      	ldr	r2, [r3, #8]
 8004b34:	4b31      	ldr	r3, [pc, #196]	; (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d208      	bcs.n	8004b52 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b40:	4b2e      	ldr	r3, [pc, #184]	; (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	492b      	ldr	r1, [pc, #172]	; (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b52:	4b29      	ldr	r3, [pc, #164]	; (8004bf8 <HAL_RCC_ClockConfig+0x1ec>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0307 	and.w	r3, r3, #7
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d210      	bcs.n	8004b82 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b60:	4b25      	ldr	r3, [pc, #148]	; (8004bf8 <HAL_RCC_ClockConfig+0x1ec>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f023 0207 	bic.w	r2, r3, #7
 8004b68:	4923      	ldr	r1, [pc, #140]	; (8004bf8 <HAL_RCC_ClockConfig+0x1ec>)
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b70:	4b21      	ldr	r3, [pc, #132]	; (8004bf8 <HAL_RCC_ClockConfig+0x1ec>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d001      	beq.n	8004b82 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e036      	b.n	8004bf0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0304 	and.w	r3, r3, #4
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d008      	beq.n	8004ba0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b8e:	4b1b      	ldr	r3, [pc, #108]	; (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	4918      	ldr	r1, [pc, #96]	; (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0308 	and.w	r3, r3, #8
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d009      	beq.n	8004bc0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bac:	4b13      	ldr	r3, [pc, #76]	; (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	00db      	lsls	r3, r3, #3
 8004bba:	4910      	ldr	r1, [pc, #64]	; (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004bc0:	f000 f824 	bl	8004c0c <HAL_RCC_GetSysClockFreq>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	4b0d      	ldr	r3, [pc, #52]	; (8004bfc <HAL_RCC_ClockConfig+0x1f0>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	091b      	lsrs	r3, r3, #4
 8004bcc:	f003 030f 	and.w	r3, r3, #15
 8004bd0:	490b      	ldr	r1, [pc, #44]	; (8004c00 <HAL_RCC_ClockConfig+0x1f4>)
 8004bd2:	5ccb      	ldrb	r3, [r1, r3]
 8004bd4:	f003 031f 	and.w	r3, r3, #31
 8004bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bdc:	4a09      	ldr	r2, [pc, #36]	; (8004c04 <HAL_RCC_ClockConfig+0x1f8>)
 8004bde:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004be0:	4b09      	ldr	r3, [pc, #36]	; (8004c08 <HAL_RCC_ClockConfig+0x1fc>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7fc feb1 	bl	800194c <HAL_InitTick>
 8004bea:	4603      	mov	r3, r0
 8004bec:	72fb      	strb	r3, [r7, #11]

  return status;
 8004bee:	7afb      	ldrb	r3, [r7, #11]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	40022000 	.word	0x40022000
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	0800b294 	.word	0x0800b294
 8004c04:	20000000 	.word	0x20000000
 8004c08:	200000c8 	.word	0x200000c8

08004c0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b089      	sub	sp, #36	; 0x24
 8004c10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004c12:	2300      	movs	r3, #0
 8004c14:	61fb      	str	r3, [r7, #28]
 8004c16:	2300      	movs	r3, #0
 8004c18:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c1a:	4b3e      	ldr	r3, [pc, #248]	; (8004d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f003 030c 	and.w	r3, r3, #12
 8004c22:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c24:	4b3b      	ldr	r3, [pc, #236]	; (8004d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f003 0303 	and.w	r3, r3, #3
 8004c2c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d005      	beq.n	8004c40 <HAL_RCC_GetSysClockFreq+0x34>
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	2b0c      	cmp	r3, #12
 8004c38:	d121      	bne.n	8004c7e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d11e      	bne.n	8004c7e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c40:	4b34      	ldr	r3, [pc, #208]	; (8004d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0308 	and.w	r3, r3, #8
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d107      	bne.n	8004c5c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c4c:	4b31      	ldr	r3, [pc, #196]	; (8004d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c52:	0a1b      	lsrs	r3, r3, #8
 8004c54:	f003 030f 	and.w	r3, r3, #15
 8004c58:	61fb      	str	r3, [r7, #28]
 8004c5a:	e005      	b.n	8004c68 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c5c:	4b2d      	ldr	r3, [pc, #180]	; (8004d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	091b      	lsrs	r3, r3, #4
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c68:	4a2b      	ldr	r2, [pc, #172]	; (8004d18 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c70:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10d      	bne.n	8004c94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c7c:	e00a      	b.n	8004c94 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	d102      	bne.n	8004c8a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c84:	4b25      	ldr	r3, [pc, #148]	; (8004d1c <HAL_RCC_GetSysClockFreq+0x110>)
 8004c86:	61bb      	str	r3, [r7, #24]
 8004c88:	e004      	b.n	8004c94 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d101      	bne.n	8004c94 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c90:	4b23      	ldr	r3, [pc, #140]	; (8004d20 <HAL_RCC_GetSysClockFreq+0x114>)
 8004c92:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	2b0c      	cmp	r3, #12
 8004c98:	d134      	bne.n	8004d04 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c9a:	4b1e      	ldr	r3, [pc, #120]	; (8004d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f003 0303 	and.w	r3, r3, #3
 8004ca2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d003      	beq.n	8004cb2 <HAL_RCC_GetSysClockFreq+0xa6>
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	2b03      	cmp	r3, #3
 8004cae:	d003      	beq.n	8004cb8 <HAL_RCC_GetSysClockFreq+0xac>
 8004cb0:	e005      	b.n	8004cbe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004cb2:	4b1a      	ldr	r3, [pc, #104]	; (8004d1c <HAL_RCC_GetSysClockFreq+0x110>)
 8004cb4:	617b      	str	r3, [r7, #20]
      break;
 8004cb6:	e005      	b.n	8004cc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004cb8:	4b19      	ldr	r3, [pc, #100]	; (8004d20 <HAL_RCC_GetSysClockFreq+0x114>)
 8004cba:	617b      	str	r3, [r7, #20]
      break;
 8004cbc:	e002      	b.n	8004cc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	617b      	str	r3, [r7, #20]
      break;
 8004cc2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004cc4:	4b13      	ldr	r3, [pc, #76]	; (8004d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	091b      	lsrs	r3, r3, #4
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	3301      	adds	r3, #1
 8004cd0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004cd2:	4b10      	ldr	r3, [pc, #64]	; (8004d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	0a1b      	lsrs	r3, r3, #8
 8004cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	fb03 f202 	mul.w	r2, r3, r2
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004cea:	4b0a      	ldr	r3, [pc, #40]	; (8004d14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	0e5b      	lsrs	r3, r3, #25
 8004cf0:	f003 0303 	and.w	r3, r3, #3
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	005b      	lsls	r3, r3, #1
 8004cf8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d02:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004d04:	69bb      	ldr	r3, [r7, #24]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3724      	adds	r7, #36	; 0x24
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	40021000 	.word	0x40021000
 8004d18:	0800b2ac 	.word	0x0800b2ac
 8004d1c:	00f42400 	.word	0x00f42400
 8004d20:	007a1200 	.word	0x007a1200

08004d24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d28:	4b03      	ldr	r3, [pc, #12]	; (8004d38 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	20000000 	.word	0x20000000

08004d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d40:	f7ff fff0 	bl	8004d24 <HAL_RCC_GetHCLKFreq>
 8004d44:	4602      	mov	r2, r0
 8004d46:	4b06      	ldr	r3, [pc, #24]	; (8004d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	0a1b      	lsrs	r3, r3, #8
 8004d4c:	f003 0307 	and.w	r3, r3, #7
 8004d50:	4904      	ldr	r1, [pc, #16]	; (8004d64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d52:	5ccb      	ldrb	r3, [r1, r3]
 8004d54:	f003 031f 	and.w	r3, r3, #31
 8004d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	40021000 	.word	0x40021000
 8004d64:	0800b2a4 	.word	0x0800b2a4

08004d68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d6c:	f7ff ffda 	bl	8004d24 <HAL_RCC_GetHCLKFreq>
 8004d70:	4602      	mov	r2, r0
 8004d72:	4b06      	ldr	r3, [pc, #24]	; (8004d8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	0adb      	lsrs	r3, r3, #11
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	4904      	ldr	r1, [pc, #16]	; (8004d90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d7e:	5ccb      	ldrb	r3, [r1, r3]
 8004d80:	f003 031f 	and.w	r3, r3, #31
 8004d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	0800b2a4 	.word	0x0800b2a4

08004d94 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	220f      	movs	r2, #15
 8004da2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004da4:	4b12      	ldr	r3, [pc, #72]	; (8004df0 <HAL_RCC_GetClockConfig+0x5c>)
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f003 0203 	and.w	r2, r3, #3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004db0:	4b0f      	ldr	r3, [pc, #60]	; (8004df0 <HAL_RCC_GetClockConfig+0x5c>)
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004dbc:	4b0c      	ldr	r3, [pc, #48]	; (8004df0 <HAL_RCC_GetClockConfig+0x5c>)
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004dc8:	4b09      	ldr	r3, [pc, #36]	; (8004df0 <HAL_RCC_GetClockConfig+0x5c>)
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	08db      	lsrs	r3, r3, #3
 8004dce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004dd6:	4b07      	ldr	r3, [pc, #28]	; (8004df4 <HAL_RCC_GetClockConfig+0x60>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0207 	and.w	r2, r3, #7
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	601a      	str	r2, [r3, #0]
}
 8004de2:	bf00      	nop
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	40021000 	.word	0x40021000
 8004df4:	40022000 	.word	0x40022000

08004df8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e00:	2300      	movs	r3, #0
 8004e02:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e04:	4b2a      	ldr	r3, [pc, #168]	; (8004eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d003      	beq.n	8004e18 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004e10:	f7ff f9bc 	bl	800418c <HAL_PWREx_GetVoltageRange>
 8004e14:	6178      	str	r0, [r7, #20]
 8004e16:	e014      	b.n	8004e42 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e18:	4b25      	ldr	r3, [pc, #148]	; (8004eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e1c:	4a24      	ldr	r2, [pc, #144]	; (8004eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e22:	6593      	str	r3, [r2, #88]	; 0x58
 8004e24:	4b22      	ldr	r3, [pc, #136]	; (8004eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e2c:	60fb      	str	r3, [r7, #12]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004e30:	f7ff f9ac 	bl	800418c <HAL_PWREx_GetVoltageRange>
 8004e34:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004e36:	4b1e      	ldr	r3, [pc, #120]	; (8004eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e3a:	4a1d      	ldr	r2, [pc, #116]	; (8004eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e40:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e48:	d10b      	bne.n	8004e62 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2b80      	cmp	r3, #128	; 0x80
 8004e4e:	d919      	bls.n	8004e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2ba0      	cmp	r3, #160	; 0xa0
 8004e54:	d902      	bls.n	8004e5c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e56:	2302      	movs	r3, #2
 8004e58:	613b      	str	r3, [r7, #16]
 8004e5a:	e013      	b.n	8004e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	613b      	str	r3, [r7, #16]
 8004e60:	e010      	b.n	8004e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2b80      	cmp	r3, #128	; 0x80
 8004e66:	d902      	bls.n	8004e6e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004e68:	2303      	movs	r3, #3
 8004e6a:	613b      	str	r3, [r7, #16]
 8004e6c:	e00a      	b.n	8004e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2b80      	cmp	r3, #128	; 0x80
 8004e72:	d102      	bne.n	8004e7a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e74:	2302      	movs	r3, #2
 8004e76:	613b      	str	r3, [r7, #16]
 8004e78:	e004      	b.n	8004e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2b70      	cmp	r3, #112	; 0x70
 8004e7e:	d101      	bne.n	8004e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e80:	2301      	movs	r3, #1
 8004e82:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e84:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f023 0207 	bic.w	r2, r3, #7
 8004e8c:	4909      	ldr	r1, [pc, #36]	; (8004eb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e94:	4b07      	ldr	r3, [pc, #28]	; (8004eb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d001      	beq.n	8004ea6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e000      	b.n	8004ea8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3718      	adds	r7, #24
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	40022000 	.word	0x40022000

08004eb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d041      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ed8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004edc:	d02a      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004ede:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ee2:	d824      	bhi.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ee4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ee8:	d008      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004eea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004eee:	d81e      	bhi.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00a      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004ef4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ef8:	d010      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004efa:	e018      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004efc:	4b86      	ldr	r3, [pc, #536]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	4a85      	ldr	r2, [pc, #532]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f06:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f08:	e015      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	3304      	adds	r3, #4
 8004f0e:	2100      	movs	r1, #0
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 facb 	bl	80054ac <RCCEx_PLLSAI1_Config>
 8004f16:	4603      	mov	r3, r0
 8004f18:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f1a:	e00c      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	3320      	adds	r3, #32
 8004f20:	2100      	movs	r1, #0
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 fbb6 	bl	8005694 <RCCEx_PLLSAI2_Config>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f2c:	e003      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	74fb      	strb	r3, [r7, #19]
      break;
 8004f32:	e000      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004f34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f36:	7cfb      	ldrb	r3, [r7, #19]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d10b      	bne.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f3c:	4b76      	ldr	r3, [pc, #472]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f42:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f4a:	4973      	ldr	r1, [pc, #460]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004f52:	e001      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f54:	7cfb      	ldrb	r3, [r7, #19]
 8004f56:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d041      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f68:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f6c:	d02a      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004f6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f72:	d824      	bhi.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f78:	d008      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f7e:	d81e      	bhi.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00a      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004f84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f88:	d010      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f8a:	e018      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f8c:	4b62      	ldr	r3, [pc, #392]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	4a61      	ldr	r2, [pc, #388]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f96:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f98:	e015      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 fa83 	bl	80054ac <RCCEx_PLLSAI1_Config>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004faa:	e00c      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	3320      	adds	r3, #32
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f000 fb6e 	bl	8005694 <RCCEx_PLLSAI2_Config>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004fbc:	e003      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	74fb      	strb	r3, [r7, #19]
      break;
 8004fc2:	e000      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004fc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fc6:	7cfb      	ldrb	r3, [r7, #19]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10b      	bne.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004fcc:	4b52      	ldr	r3, [pc, #328]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fda:	494f      	ldr	r1, [pc, #316]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004fe2:	e001      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe4:	7cfb      	ldrb	r3, [r7, #19]
 8004fe6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 80a0 	beq.w	8005136 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ffa:	4b47      	ldr	r3, [pc, #284]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800500a:	2300      	movs	r3, #0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00d      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005010:	4b41      	ldr	r3, [pc, #260]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005014:	4a40      	ldr	r2, [pc, #256]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800501a:	6593      	str	r3, [r2, #88]	; 0x58
 800501c:	4b3e      	ldr	r3, [pc, #248]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800501e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005024:	60bb      	str	r3, [r7, #8]
 8005026:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005028:	2301      	movs	r3, #1
 800502a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800502c:	4b3b      	ldr	r3, [pc, #236]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a3a      	ldr	r2, [pc, #232]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005036:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005038:	f7fd fe8c 	bl	8002d54 <HAL_GetTick>
 800503c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800503e:	e009      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005040:	f7fd fe88 	bl	8002d54 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b02      	cmp	r3, #2
 800504c:	d902      	bls.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	74fb      	strb	r3, [r7, #19]
        break;
 8005052:	e005      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005054:	4b31      	ldr	r3, [pc, #196]	; (800511c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505c:	2b00      	cmp	r3, #0
 800505e:	d0ef      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005060:	7cfb      	ldrb	r3, [r7, #19]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d15c      	bne.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005066:	4b2c      	ldr	r3, [pc, #176]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005070:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d01f      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	429a      	cmp	r2, r3
 8005082:	d019      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005084:	4b24      	ldr	r3, [pc, #144]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800508a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800508e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005090:	4b21      	ldr	r3, [pc, #132]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005096:	4a20      	ldr	r2, [pc, #128]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800509c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050a0:	4b1d      	ldr	r3, [pc, #116]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a6:	4a1c      	ldr	r2, [pc, #112]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80050b0:	4a19      	ldr	r2, [pc, #100]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d016      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c2:	f7fd fe47 	bl	8002d54 <HAL_GetTick>
 80050c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050c8:	e00b      	b.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ca:	f7fd fe43 	bl	8002d54 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d8:	4293      	cmp	r3, r2
 80050da:	d902      	bls.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	74fb      	strb	r3, [r7, #19]
            break;
 80050e0:	e006      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050e2:	4b0d      	ldr	r3, [pc, #52]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e8:	f003 0302 	and.w	r3, r3, #2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d0ec      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80050f0:	7cfb      	ldrb	r3, [r7, #19]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10c      	bne.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050f6:	4b08      	ldr	r3, [pc, #32]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005106:	4904      	ldr	r1, [pc, #16]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005108:	4313      	orrs	r3, r2
 800510a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800510e:	e009      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005110:	7cfb      	ldrb	r3, [r7, #19]
 8005112:	74bb      	strb	r3, [r7, #18]
 8005114:	e006      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005116:	bf00      	nop
 8005118:	40021000 	.word	0x40021000
 800511c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005120:	7cfb      	ldrb	r3, [r7, #19]
 8005122:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005124:	7c7b      	ldrb	r3, [r7, #17]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d105      	bne.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800512a:	4b9e      	ldr	r3, [pc, #632]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800512c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800512e:	4a9d      	ldr	r2, [pc, #628]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005130:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005134:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00a      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005142:	4b98      	ldr	r3, [pc, #608]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005148:	f023 0203 	bic.w	r2, r3, #3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005150:	4994      	ldr	r1, [pc, #592]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005152:	4313      	orrs	r3, r2
 8005154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00a      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005164:	4b8f      	ldr	r3, [pc, #572]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800516a:	f023 020c 	bic.w	r2, r3, #12
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005172:	498c      	ldr	r1, [pc, #560]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005174:	4313      	orrs	r3, r2
 8005176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0304 	and.w	r3, r3, #4
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00a      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005186:	4b87      	ldr	r3, [pc, #540]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800518c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005194:	4983      	ldr	r1, [pc, #524]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005196:	4313      	orrs	r3, r2
 8005198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0308 	and.w	r3, r3, #8
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00a      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80051a8:	4b7e      	ldr	r3, [pc, #504]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b6:	497b      	ldr	r1, [pc, #492]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0310 	and.w	r3, r3, #16
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00a      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80051ca:	4b76      	ldr	r3, [pc, #472]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051d8:	4972      	ldr	r1, [pc, #456]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0320 	and.w	r3, r3, #32
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00a      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051ec:	4b6d      	ldr	r3, [pc, #436]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051fa:	496a      	ldr	r1, [pc, #424]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00a      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800520e:	4b65      	ldr	r3, [pc, #404]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005214:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800521c:	4961      	ldr	r1, [pc, #388]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800521e:	4313      	orrs	r3, r2
 8005220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00a      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005230:	4b5c      	ldr	r3, [pc, #368]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005236:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800523e:	4959      	ldr	r1, [pc, #356]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005240:	4313      	orrs	r3, r2
 8005242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00a      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005252:	4b54      	ldr	r3, [pc, #336]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005258:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005260:	4950      	ldr	r1, [pc, #320]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005262:	4313      	orrs	r3, r2
 8005264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00a      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005274:	4b4b      	ldr	r3, [pc, #300]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800527a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005282:	4948      	ldr	r1, [pc, #288]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005284:	4313      	orrs	r3, r2
 8005286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00a      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005296:	4b43      	ldr	r3, [pc, #268]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a4:	493f      	ldr	r1, [pc, #252]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d028      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052b8:	4b3a      	ldr	r3, [pc, #232]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052c6:	4937      	ldr	r1, [pc, #220]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052d6:	d106      	bne.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052d8:	4b32      	ldr	r3, [pc, #200]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	4a31      	ldr	r2, [pc, #196]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052e2:	60d3      	str	r3, [r2, #12]
 80052e4:	e011      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052ee:	d10c      	bne.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	3304      	adds	r3, #4
 80052f4:	2101      	movs	r1, #1
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 f8d8 	bl	80054ac <RCCEx_PLLSAI1_Config>
 80052fc:	4603      	mov	r3, r0
 80052fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005300:	7cfb      	ldrb	r3, [r7, #19]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005306:	7cfb      	ldrb	r3, [r7, #19]
 8005308:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d028      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005316:	4b23      	ldr	r3, [pc, #140]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800531c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005324:	491f      	ldr	r1, [pc, #124]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005326:	4313      	orrs	r3, r2
 8005328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005330:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005334:	d106      	bne.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005336:	4b1b      	ldr	r3, [pc, #108]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	4a1a      	ldr	r2, [pc, #104]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800533c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005340:	60d3      	str	r3, [r2, #12]
 8005342:	e011      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005348:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800534c:	d10c      	bne.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	3304      	adds	r3, #4
 8005352:	2101      	movs	r1, #1
 8005354:	4618      	mov	r0, r3
 8005356:	f000 f8a9 	bl	80054ac <RCCEx_PLLSAI1_Config>
 800535a:	4603      	mov	r3, r0
 800535c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800535e:	7cfb      	ldrb	r3, [r7, #19]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005364:	7cfb      	ldrb	r3, [r7, #19]
 8005366:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d02b      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005374:	4b0b      	ldr	r3, [pc, #44]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800537a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005382:	4908      	ldr	r1, [pc, #32]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005384:	4313      	orrs	r3, r2
 8005386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800538e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005392:	d109      	bne.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005394:	4b03      	ldr	r3, [pc, #12]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	4a02      	ldr	r2, [pc, #8]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800539a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800539e:	60d3      	str	r3, [r2, #12]
 80053a0:	e014      	b.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80053a2:	bf00      	nop
 80053a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053b0:	d10c      	bne.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	3304      	adds	r3, #4
 80053b6:	2101      	movs	r1, #1
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 f877 	bl	80054ac <RCCEx_PLLSAI1_Config>
 80053be:	4603      	mov	r3, r0
 80053c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053c2:	7cfb      	ldrb	r3, [r7, #19]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d001      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80053c8:	7cfb      	ldrb	r3, [r7, #19]
 80053ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d02f      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053d8:	4b2b      	ldr	r3, [pc, #172]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053e6:	4928      	ldr	r1, [pc, #160]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053f6:	d10d      	bne.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	3304      	adds	r3, #4
 80053fc:	2102      	movs	r1, #2
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 f854 	bl	80054ac <RCCEx_PLLSAI1_Config>
 8005404:	4603      	mov	r3, r0
 8005406:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005408:	7cfb      	ldrb	r3, [r7, #19]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d014      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800540e:	7cfb      	ldrb	r3, [r7, #19]
 8005410:	74bb      	strb	r3, [r7, #18]
 8005412:	e011      	b.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005418:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800541c:	d10c      	bne.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	3320      	adds	r3, #32
 8005422:	2102      	movs	r1, #2
 8005424:	4618      	mov	r0, r3
 8005426:	f000 f935 	bl	8005694 <RCCEx_PLLSAI2_Config>
 800542a:	4603      	mov	r3, r0
 800542c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800542e:	7cfb      	ldrb	r3, [r7, #19]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d001      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005434:	7cfb      	ldrb	r3, [r7, #19]
 8005436:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00a      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005444:	4b10      	ldr	r3, [pc, #64]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800544a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005452:	490d      	ldr	r1, [pc, #52]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005454:	4313      	orrs	r3, r2
 8005456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00b      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005466:	4b08      	ldr	r3, [pc, #32]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800546c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005476:	4904      	ldr	r1, [pc, #16]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005478:	4313      	orrs	r3, r2
 800547a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800547e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005480:	4618      	mov	r0, r3
 8005482:	3718      	adds	r7, #24
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	40021000 	.word	0x40021000

0800548c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005490:	4b05      	ldr	r3, [pc, #20]	; (80054a8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a04      	ldr	r2, [pc, #16]	; (80054a8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005496:	f043 0304 	orr.w	r3, r3, #4
 800549a:	6013      	str	r3, [r2, #0]
}
 800549c:	bf00      	nop
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	40021000 	.word	0x40021000

080054ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054b6:	2300      	movs	r3, #0
 80054b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054ba:	4b75      	ldr	r3, [pc, #468]	; (8005690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	f003 0303 	and.w	r3, r3, #3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d018      	beq.n	80054f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80054c6:	4b72      	ldr	r3, [pc, #456]	; (8005690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	f003 0203 	and.w	r2, r3, #3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d10d      	bne.n	80054f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
       ||
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d009      	beq.n	80054f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80054de:	4b6c      	ldr	r3, [pc, #432]	; (8005690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	091b      	lsrs	r3, r3, #4
 80054e4:	f003 0307 	and.w	r3, r3, #7
 80054e8:	1c5a      	adds	r2, r3, #1
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
       ||
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d047      	beq.n	8005582 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	73fb      	strb	r3, [r7, #15]
 80054f6:	e044      	b.n	8005582 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b03      	cmp	r3, #3
 80054fe:	d018      	beq.n	8005532 <RCCEx_PLLSAI1_Config+0x86>
 8005500:	2b03      	cmp	r3, #3
 8005502:	d825      	bhi.n	8005550 <RCCEx_PLLSAI1_Config+0xa4>
 8005504:	2b01      	cmp	r3, #1
 8005506:	d002      	beq.n	800550e <RCCEx_PLLSAI1_Config+0x62>
 8005508:	2b02      	cmp	r3, #2
 800550a:	d009      	beq.n	8005520 <RCCEx_PLLSAI1_Config+0x74>
 800550c:	e020      	b.n	8005550 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800550e:	4b60      	ldr	r3, [pc, #384]	; (8005690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d11d      	bne.n	8005556 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800551e:	e01a      	b.n	8005556 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005520:	4b5b      	ldr	r3, [pc, #364]	; (8005690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005528:	2b00      	cmp	r3, #0
 800552a:	d116      	bne.n	800555a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005530:	e013      	b.n	800555a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005532:	4b57      	ldr	r3, [pc, #348]	; (8005690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10f      	bne.n	800555e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800553e:	4b54      	ldr	r3, [pc, #336]	; (8005690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d109      	bne.n	800555e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800554e:	e006      	b.n	800555e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	73fb      	strb	r3, [r7, #15]
      break;
 8005554:	e004      	b.n	8005560 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005556:	bf00      	nop
 8005558:	e002      	b.n	8005560 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800555a:	bf00      	nop
 800555c:	e000      	b.n	8005560 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800555e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005560:	7bfb      	ldrb	r3, [r7, #15]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10d      	bne.n	8005582 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005566:	4b4a      	ldr	r3, [pc, #296]	; (8005690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6819      	ldr	r1, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	3b01      	subs	r3, #1
 8005578:	011b      	lsls	r3, r3, #4
 800557a:	430b      	orrs	r3, r1
 800557c:	4944      	ldr	r1, [pc, #272]	; (8005690 <RCCEx_PLLSAI1_Config+0x1e4>)
 800557e:	4313      	orrs	r3, r2
 8005580:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005582:	7bfb      	ldrb	r3, [r7, #15]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d17d      	bne.n	8005684 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005588:	4b41      	ldr	r3, [pc, #260]	; (8005690 <RCCEx_PLLSAI1_Config+0x1e4>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a40      	ldr	r2, [pc, #256]	; (8005690 <RCCEx_PLLSAI1_Config+0x1e4>)
 800558e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005592:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005594:	f7fd fbde 	bl	8002d54 <HAL_GetTick>
 8005598:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800559a:	e009      	b.n	80055b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800559c:	f7fd fbda 	bl	8002d54 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d902      	bls.n	80055b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	73fb      	strb	r3, [r7, #15]
        break;
 80055ae:	e005      	b.n	80055bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80055b0:	4b37      	ldr	r3, [pc, #220]	; (8005690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1ef      	bne.n	800559c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80055bc:	7bfb      	ldrb	r3, [r7, #15]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d160      	bne.n	8005684 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d111      	bne.n	80055ec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055c8:	4b31      	ldr	r3, [pc, #196]	; (8005690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80055d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	6892      	ldr	r2, [r2, #8]
 80055d8:	0211      	lsls	r1, r2, #8
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	68d2      	ldr	r2, [r2, #12]
 80055de:	0912      	lsrs	r2, r2, #4
 80055e0:	0452      	lsls	r2, r2, #17
 80055e2:	430a      	orrs	r2, r1
 80055e4:	492a      	ldr	r1, [pc, #168]	; (8005690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	610b      	str	r3, [r1, #16]
 80055ea:	e027      	b.n	800563c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d112      	bne.n	8005618 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055f2:	4b27      	ldr	r3, [pc, #156]	; (8005690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80055fa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	6892      	ldr	r2, [r2, #8]
 8005602:	0211      	lsls	r1, r2, #8
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	6912      	ldr	r2, [r2, #16]
 8005608:	0852      	lsrs	r2, r2, #1
 800560a:	3a01      	subs	r2, #1
 800560c:	0552      	lsls	r2, r2, #21
 800560e:	430a      	orrs	r2, r1
 8005610:	491f      	ldr	r1, [pc, #124]	; (8005690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005612:	4313      	orrs	r3, r2
 8005614:	610b      	str	r3, [r1, #16]
 8005616:	e011      	b.n	800563c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005618:	4b1d      	ldr	r3, [pc, #116]	; (8005690 <RCCEx_PLLSAI1_Config+0x1e4>)
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005620:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	6892      	ldr	r2, [r2, #8]
 8005628:	0211      	lsls	r1, r2, #8
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	6952      	ldr	r2, [r2, #20]
 800562e:	0852      	lsrs	r2, r2, #1
 8005630:	3a01      	subs	r2, #1
 8005632:	0652      	lsls	r2, r2, #25
 8005634:	430a      	orrs	r2, r1
 8005636:	4916      	ldr	r1, [pc, #88]	; (8005690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005638:	4313      	orrs	r3, r2
 800563a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800563c:	4b14      	ldr	r3, [pc, #80]	; (8005690 <RCCEx_PLLSAI1_Config+0x1e4>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a13      	ldr	r2, [pc, #76]	; (8005690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005642:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005646:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005648:	f7fd fb84 	bl	8002d54 <HAL_GetTick>
 800564c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800564e:	e009      	b.n	8005664 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005650:	f7fd fb80 	bl	8002d54 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	2b02      	cmp	r3, #2
 800565c:	d902      	bls.n	8005664 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	73fb      	strb	r3, [r7, #15]
          break;
 8005662:	e005      	b.n	8005670 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005664:	4b0a      	ldr	r3, [pc, #40]	; (8005690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d0ef      	beq.n	8005650 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005670:	7bfb      	ldrb	r3, [r7, #15]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d106      	bne.n	8005684 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005676:	4b06      	ldr	r3, [pc, #24]	; (8005690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005678:	691a      	ldr	r2, [r3, #16]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	4904      	ldr	r1, [pc, #16]	; (8005690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005680:	4313      	orrs	r3, r2
 8005682:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005684:	7bfb      	ldrb	r3, [r7, #15]
}
 8005686:	4618      	mov	r0, r3
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	40021000 	.word	0x40021000

08005694 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800569e:	2300      	movs	r3, #0
 80056a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80056a2:	4b6a      	ldr	r3, [pc, #424]	; (800584c <RCCEx_PLLSAI2_Config+0x1b8>)
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	f003 0303 	and.w	r3, r3, #3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d018      	beq.n	80056e0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80056ae:	4b67      	ldr	r3, [pc, #412]	; (800584c <RCCEx_PLLSAI2_Config+0x1b8>)
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	f003 0203 	and.w	r2, r3, #3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d10d      	bne.n	80056da <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
       ||
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d009      	beq.n	80056da <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80056c6:	4b61      	ldr	r3, [pc, #388]	; (800584c <RCCEx_PLLSAI2_Config+0x1b8>)
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	091b      	lsrs	r3, r3, #4
 80056cc:	f003 0307 	and.w	r3, r3, #7
 80056d0:	1c5a      	adds	r2, r3, #1
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
       ||
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d047      	beq.n	800576a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	73fb      	strb	r3, [r7, #15]
 80056de:	e044      	b.n	800576a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2b03      	cmp	r3, #3
 80056e6:	d018      	beq.n	800571a <RCCEx_PLLSAI2_Config+0x86>
 80056e8:	2b03      	cmp	r3, #3
 80056ea:	d825      	bhi.n	8005738 <RCCEx_PLLSAI2_Config+0xa4>
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d002      	beq.n	80056f6 <RCCEx_PLLSAI2_Config+0x62>
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d009      	beq.n	8005708 <RCCEx_PLLSAI2_Config+0x74>
 80056f4:	e020      	b.n	8005738 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056f6:	4b55      	ldr	r3, [pc, #340]	; (800584c <RCCEx_PLLSAI2_Config+0x1b8>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0302 	and.w	r3, r3, #2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d11d      	bne.n	800573e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005706:	e01a      	b.n	800573e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005708:	4b50      	ldr	r3, [pc, #320]	; (800584c <RCCEx_PLLSAI2_Config+0x1b8>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005710:	2b00      	cmp	r3, #0
 8005712:	d116      	bne.n	8005742 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005718:	e013      	b.n	8005742 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800571a:	4b4c      	ldr	r3, [pc, #304]	; (800584c <RCCEx_PLLSAI2_Config+0x1b8>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10f      	bne.n	8005746 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005726:	4b49      	ldr	r3, [pc, #292]	; (800584c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d109      	bne.n	8005746 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005736:	e006      	b.n	8005746 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	73fb      	strb	r3, [r7, #15]
      break;
 800573c:	e004      	b.n	8005748 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800573e:	bf00      	nop
 8005740:	e002      	b.n	8005748 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005742:	bf00      	nop
 8005744:	e000      	b.n	8005748 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005746:	bf00      	nop
    }

    if(status == HAL_OK)
 8005748:	7bfb      	ldrb	r3, [r7, #15]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10d      	bne.n	800576a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800574e:	4b3f      	ldr	r3, [pc, #252]	; (800584c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6819      	ldr	r1, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	3b01      	subs	r3, #1
 8005760:	011b      	lsls	r3, r3, #4
 8005762:	430b      	orrs	r3, r1
 8005764:	4939      	ldr	r1, [pc, #228]	; (800584c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005766:	4313      	orrs	r3, r2
 8005768:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800576a:	7bfb      	ldrb	r3, [r7, #15]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d167      	bne.n	8005840 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005770:	4b36      	ldr	r3, [pc, #216]	; (800584c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a35      	ldr	r2, [pc, #212]	; (800584c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005776:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800577a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800577c:	f7fd faea 	bl	8002d54 <HAL_GetTick>
 8005780:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005782:	e009      	b.n	8005798 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005784:	f7fd fae6 	bl	8002d54 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d902      	bls.n	8005798 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	73fb      	strb	r3, [r7, #15]
        break;
 8005796:	e005      	b.n	80057a4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005798:	4b2c      	ldr	r3, [pc, #176]	; (800584c <RCCEx_PLLSAI2_Config+0x1b8>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1ef      	bne.n	8005784 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80057a4:	7bfb      	ldrb	r3, [r7, #15]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d14a      	bne.n	8005840 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d111      	bne.n	80057d4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057b0:	4b26      	ldr	r3, [pc, #152]	; (800584c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80057b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	6892      	ldr	r2, [r2, #8]
 80057c0:	0211      	lsls	r1, r2, #8
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	68d2      	ldr	r2, [r2, #12]
 80057c6:	0912      	lsrs	r2, r2, #4
 80057c8:	0452      	lsls	r2, r2, #17
 80057ca:	430a      	orrs	r2, r1
 80057cc:	491f      	ldr	r1, [pc, #124]	; (800584c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	614b      	str	r3, [r1, #20]
 80057d2:	e011      	b.n	80057f8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057d4:	4b1d      	ldr	r3, [pc, #116]	; (800584c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80057dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	6892      	ldr	r2, [r2, #8]
 80057e4:	0211      	lsls	r1, r2, #8
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	6912      	ldr	r2, [r2, #16]
 80057ea:	0852      	lsrs	r2, r2, #1
 80057ec:	3a01      	subs	r2, #1
 80057ee:	0652      	lsls	r2, r2, #25
 80057f0:	430a      	orrs	r2, r1
 80057f2:	4916      	ldr	r1, [pc, #88]	; (800584c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80057f8:	4b14      	ldr	r3, [pc, #80]	; (800584c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a13      	ldr	r2, [pc, #76]	; (800584c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005802:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005804:	f7fd faa6 	bl	8002d54 <HAL_GetTick>
 8005808:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800580a:	e009      	b.n	8005820 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800580c:	f7fd faa2 	bl	8002d54 <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	2b02      	cmp	r3, #2
 8005818:	d902      	bls.n	8005820 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	73fb      	strb	r3, [r7, #15]
          break;
 800581e:	e005      	b.n	800582c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005820:	4b0a      	ldr	r3, [pc, #40]	; (800584c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d0ef      	beq.n	800580c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800582c:	7bfb      	ldrb	r3, [r7, #15]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d106      	bne.n	8005840 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005832:	4b06      	ldr	r3, [pc, #24]	; (800584c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005834:	695a      	ldr	r2, [r3, #20]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	4904      	ldr	r1, [pc, #16]	; (800584c <RCCEx_PLLSAI2_Config+0x1b8>)
 800583c:	4313      	orrs	r3, r2
 800583e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005840:	7bfb      	ldrb	r3, [r7, #15]
}
 8005842:	4618      	mov	r0, r3
 8005844:	3710      	adds	r7, #16
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	40021000 	.word	0x40021000

08005850 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e049      	b.n	80058f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d106      	bne.n	800587c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f841 	bl	80058fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2202      	movs	r2, #2
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	3304      	adds	r3, #4
 800588c:	4619      	mov	r1, r3
 800588e:	4610      	mov	r0, r2
 8005890:	f000 f9f8 	bl	8005c84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80058fe:	b480      	push	{r7}
 8005900:	b083      	sub	sp, #12
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005906:	bf00      	nop
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
	...

08005914 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005922:	b2db      	uxtb	r3, r3
 8005924:	2b01      	cmp	r3, #1
 8005926:	d001      	beq.n	800592c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e04f      	b.n	80059cc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68da      	ldr	r2, [r3, #12]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f042 0201 	orr.w	r2, r2, #1
 8005942:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a23      	ldr	r2, [pc, #140]	; (80059d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d01d      	beq.n	800598a <HAL_TIM_Base_Start_IT+0x76>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005956:	d018      	beq.n	800598a <HAL_TIM_Base_Start_IT+0x76>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a1f      	ldr	r2, [pc, #124]	; (80059dc <HAL_TIM_Base_Start_IT+0xc8>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d013      	beq.n	800598a <HAL_TIM_Base_Start_IT+0x76>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a1e      	ldr	r2, [pc, #120]	; (80059e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d00e      	beq.n	800598a <HAL_TIM_Base_Start_IT+0x76>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a1c      	ldr	r2, [pc, #112]	; (80059e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d009      	beq.n	800598a <HAL_TIM_Base_Start_IT+0x76>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a1b      	ldr	r2, [pc, #108]	; (80059e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d004      	beq.n	800598a <HAL_TIM_Base_Start_IT+0x76>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a19      	ldr	r2, [pc, #100]	; (80059ec <HAL_TIM_Base_Start_IT+0xd8>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d115      	bne.n	80059b6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	689a      	ldr	r2, [r3, #8]
 8005990:	4b17      	ldr	r3, [pc, #92]	; (80059f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005992:	4013      	ands	r3, r2
 8005994:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2b06      	cmp	r3, #6
 800599a:	d015      	beq.n	80059c8 <HAL_TIM_Base_Start_IT+0xb4>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059a2:	d011      	beq.n	80059c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f042 0201 	orr.w	r2, r2, #1
 80059b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059b4:	e008      	b.n	80059c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f042 0201 	orr.w	r2, r2, #1
 80059c4:	601a      	str	r2, [r3, #0]
 80059c6:	e000      	b.n	80059ca <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3714      	adds	r7, #20
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr
 80059d8:	40012c00 	.word	0x40012c00
 80059dc:	40000400 	.word	0x40000400
 80059e0:	40000800 	.word	0x40000800
 80059e4:	40000c00 	.word	0x40000c00
 80059e8:	40013400 	.word	0x40013400
 80059ec:	40014000 	.word	0x40014000
 80059f0:	00010007 	.word	0x00010007

080059f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d122      	bne.n	8005a50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	f003 0302 	and.w	r3, r3, #2
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d11b      	bne.n	8005a50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f06f 0202 	mvn.w	r2, #2
 8005a20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2201      	movs	r2, #1
 8005a26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	f003 0303 	and.w	r3, r3, #3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d003      	beq.n	8005a3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f905 	bl	8005c46 <HAL_TIM_IC_CaptureCallback>
 8005a3c:	e005      	b.n	8005a4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f8f7 	bl	8005c32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 f908 	bl	8005c5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	f003 0304 	and.w	r3, r3, #4
 8005a5a:	2b04      	cmp	r3, #4
 8005a5c:	d122      	bne.n	8005aa4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	f003 0304 	and.w	r3, r3, #4
 8005a68:	2b04      	cmp	r3, #4
 8005a6a:	d11b      	bne.n	8005aa4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f06f 0204 	mvn.w	r2, #4
 8005a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2202      	movs	r2, #2
 8005a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d003      	beq.n	8005a92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f8db 	bl	8005c46 <HAL_TIM_IC_CaptureCallback>
 8005a90:	e005      	b.n	8005a9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f8cd 	bl	8005c32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 f8de 	bl	8005c5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	f003 0308 	and.w	r3, r3, #8
 8005aae:	2b08      	cmp	r3, #8
 8005ab0:	d122      	bne.n	8005af8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	f003 0308 	and.w	r3, r3, #8
 8005abc:	2b08      	cmp	r3, #8
 8005abe:	d11b      	bne.n	8005af8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f06f 0208 	mvn.w	r2, #8
 8005ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2204      	movs	r2, #4
 8005ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	f003 0303 	and.w	r3, r3, #3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f8b1 	bl	8005c46 <HAL_TIM_IC_CaptureCallback>
 8005ae4:	e005      	b.n	8005af2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f8a3 	bl	8005c32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 f8b4 	bl	8005c5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	f003 0310 	and.w	r3, r3, #16
 8005b02:	2b10      	cmp	r3, #16
 8005b04:	d122      	bne.n	8005b4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	f003 0310 	and.w	r3, r3, #16
 8005b10:	2b10      	cmp	r3, #16
 8005b12:	d11b      	bne.n	8005b4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f06f 0210 	mvn.w	r2, #16
 8005b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2208      	movs	r2, #8
 8005b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	69db      	ldr	r3, [r3, #28]
 8005b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d003      	beq.n	8005b3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f887 	bl	8005c46 <HAL_TIM_IC_CaptureCallback>
 8005b38:	e005      	b.n	8005b46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f879 	bl	8005c32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 f88a 	bl	8005c5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d10e      	bne.n	8005b78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d107      	bne.n	8005b78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f06f 0201 	mvn.w	r2, #1
 8005b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7fb fd20 	bl	80015b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b82:	2b80      	cmp	r3, #128	; 0x80
 8005b84:	d10e      	bne.n	8005ba4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b90:	2b80      	cmp	r3, #128	; 0x80
 8005b92:	d107      	bne.n	8005ba4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f914 	bl	8005dcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bb2:	d10e      	bne.n	8005bd2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bbe:	2b80      	cmp	r3, #128	; 0x80
 8005bc0:	d107      	bne.n	8005bd2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005bca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 f907 	bl	8005de0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bdc:	2b40      	cmp	r3, #64	; 0x40
 8005bde:	d10e      	bne.n	8005bfe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bea:	2b40      	cmp	r3, #64	; 0x40
 8005bec:	d107      	bne.n	8005bfe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 f838 	bl	8005c6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	f003 0320 	and.w	r3, r3, #32
 8005c08:	2b20      	cmp	r3, #32
 8005c0a:	d10e      	bne.n	8005c2a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	f003 0320 	and.w	r3, r3, #32
 8005c16:	2b20      	cmp	r3, #32
 8005c18:	d107      	bne.n	8005c2a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f06f 0220 	mvn.w	r2, #32
 8005c22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 f8c7 	bl	8005db8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c2a:	bf00      	nop
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b083      	sub	sp, #12
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c3a:	bf00      	nop
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b083      	sub	sp, #12
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c4e:	bf00      	nop
 8005c50:	370c      	adds	r7, #12
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr

08005c5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b083      	sub	sp, #12
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c62:	bf00      	nop
 8005c64:	370c      	adds	r7, #12
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c6e:	b480      	push	{r7}
 8005c70:	b083      	sub	sp, #12
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c76:	bf00      	nop
 8005c78:	370c      	adds	r7, #12
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
	...

08005c84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a40      	ldr	r2, [pc, #256]	; (8005d98 <TIM_Base_SetConfig+0x114>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d013      	beq.n	8005cc4 <TIM_Base_SetConfig+0x40>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ca2:	d00f      	beq.n	8005cc4 <TIM_Base_SetConfig+0x40>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a3d      	ldr	r2, [pc, #244]	; (8005d9c <TIM_Base_SetConfig+0x118>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d00b      	beq.n	8005cc4 <TIM_Base_SetConfig+0x40>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a3c      	ldr	r2, [pc, #240]	; (8005da0 <TIM_Base_SetConfig+0x11c>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d007      	beq.n	8005cc4 <TIM_Base_SetConfig+0x40>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a3b      	ldr	r2, [pc, #236]	; (8005da4 <TIM_Base_SetConfig+0x120>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d003      	beq.n	8005cc4 <TIM_Base_SetConfig+0x40>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a3a      	ldr	r2, [pc, #232]	; (8005da8 <TIM_Base_SetConfig+0x124>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d108      	bne.n	8005cd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a2f      	ldr	r2, [pc, #188]	; (8005d98 <TIM_Base_SetConfig+0x114>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d01f      	beq.n	8005d1e <TIM_Base_SetConfig+0x9a>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ce4:	d01b      	beq.n	8005d1e <TIM_Base_SetConfig+0x9a>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a2c      	ldr	r2, [pc, #176]	; (8005d9c <TIM_Base_SetConfig+0x118>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d017      	beq.n	8005d1e <TIM_Base_SetConfig+0x9a>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a2b      	ldr	r2, [pc, #172]	; (8005da0 <TIM_Base_SetConfig+0x11c>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d013      	beq.n	8005d1e <TIM_Base_SetConfig+0x9a>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a2a      	ldr	r2, [pc, #168]	; (8005da4 <TIM_Base_SetConfig+0x120>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d00f      	beq.n	8005d1e <TIM_Base_SetConfig+0x9a>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a29      	ldr	r2, [pc, #164]	; (8005da8 <TIM_Base_SetConfig+0x124>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d00b      	beq.n	8005d1e <TIM_Base_SetConfig+0x9a>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a28      	ldr	r2, [pc, #160]	; (8005dac <TIM_Base_SetConfig+0x128>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d007      	beq.n	8005d1e <TIM_Base_SetConfig+0x9a>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a27      	ldr	r2, [pc, #156]	; (8005db0 <TIM_Base_SetConfig+0x12c>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d003      	beq.n	8005d1e <TIM_Base_SetConfig+0x9a>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a26      	ldr	r2, [pc, #152]	; (8005db4 <TIM_Base_SetConfig+0x130>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d108      	bne.n	8005d30 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	689a      	ldr	r2, [r3, #8]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a10      	ldr	r2, [pc, #64]	; (8005d98 <TIM_Base_SetConfig+0x114>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d00f      	beq.n	8005d7c <TIM_Base_SetConfig+0xf8>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a12      	ldr	r2, [pc, #72]	; (8005da8 <TIM_Base_SetConfig+0x124>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d00b      	beq.n	8005d7c <TIM_Base_SetConfig+0xf8>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a11      	ldr	r2, [pc, #68]	; (8005dac <TIM_Base_SetConfig+0x128>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d007      	beq.n	8005d7c <TIM_Base_SetConfig+0xf8>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a10      	ldr	r2, [pc, #64]	; (8005db0 <TIM_Base_SetConfig+0x12c>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d003      	beq.n	8005d7c <TIM_Base_SetConfig+0xf8>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a0f      	ldr	r2, [pc, #60]	; (8005db4 <TIM_Base_SetConfig+0x130>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d103      	bne.n	8005d84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	691a      	ldr	r2, [r3, #16]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	615a      	str	r2, [r3, #20]
}
 8005d8a:	bf00      	nop
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	40012c00 	.word	0x40012c00
 8005d9c:	40000400 	.word	0x40000400
 8005da0:	40000800 	.word	0x40000800
 8005da4:	40000c00 	.word	0x40000c00
 8005da8:	40013400 	.word	0x40013400
 8005dac:	40014000 	.word	0x40014000
 8005db0:	40014400 	.word	0x40014400
 8005db4:	40014800 	.word	0x40014800

08005db8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d101      	bne.n	8005e06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e040      	b.n	8005e88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d106      	bne.n	8005e1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f7fb fd3a 	bl	8001890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2224      	movs	r2, #36	; 0x24
 8005e20:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f022 0201 	bic.w	r2, r2, #1
 8005e30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f8c0 	bl	8005fb8 <UART_SetConfig>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d101      	bne.n	8005e42 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e022      	b.n	8005e88 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d002      	beq.n	8005e50 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 fb6c 	bl	8006528 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	685a      	ldr	r2, [r3, #4]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689a      	ldr	r2, [r3, #8]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f042 0201 	orr.w	r2, r2, #1
 8005e7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 fbf3 	bl	800666c <UART_CheckIdleState>
 8005e86:	4603      	mov	r3, r0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3708      	adds	r7, #8
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b08a      	sub	sp, #40	; 0x28
 8005e94:	af02      	add	r7, sp, #8
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	603b      	str	r3, [r7, #0]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ea4:	2b20      	cmp	r3, #32
 8005ea6:	f040 8082 	bne.w	8005fae <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d002      	beq.n	8005eb6 <HAL_UART_Transmit+0x26>
 8005eb0:	88fb      	ldrh	r3, [r7, #6]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d101      	bne.n	8005eba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e07a      	b.n	8005fb0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d101      	bne.n	8005ec8 <HAL_UART_Transmit+0x38>
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	e073      	b.n	8005fb0 <HAL_UART_Transmit+0x120>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2221      	movs	r2, #33	; 0x21
 8005edc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ede:	f7fc ff39 	bl	8002d54 <HAL_GetTick>
 8005ee2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	88fa      	ldrh	r2, [r7, #6]
 8005ee8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	88fa      	ldrh	r2, [r7, #6]
 8005ef0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005efc:	d108      	bne.n	8005f10 <HAL_UART_Transmit+0x80>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d104      	bne.n	8005f10 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005f06:	2300      	movs	r3, #0
 8005f08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	61bb      	str	r3, [r7, #24]
 8005f0e:	e003      	b.n	8005f18 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f14:	2300      	movs	r3, #0
 8005f16:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005f20:	e02d      	b.n	8005f7e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	9300      	str	r3, [sp, #0]
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	2180      	movs	r1, #128	; 0x80
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	f000 fbe6 	bl	80066fe <UART_WaitOnFlagUntilTimeout>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d001      	beq.n	8005f3c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e039      	b.n	8005fb0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10b      	bne.n	8005f5a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	881a      	ldrh	r2, [r3, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f4e:	b292      	uxth	r2, r2
 8005f50:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	3302      	adds	r3, #2
 8005f56:	61bb      	str	r3, [r7, #24]
 8005f58:	e008      	b.n	8005f6c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	781a      	ldrb	r2, [r3, #0]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	b292      	uxth	r2, r2
 8005f64:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	3b01      	subs	r3, #1
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1cb      	bne.n	8005f22 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	9300      	str	r3, [sp, #0]
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	2200      	movs	r2, #0
 8005f92:	2140      	movs	r1, #64	; 0x40
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f000 fbb2 	bl	80066fe <UART_WaitOnFlagUntilTimeout>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d001      	beq.n	8005fa4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	e005      	b.n	8005fb0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2220      	movs	r2, #32
 8005fa8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005faa:	2300      	movs	r3, #0
 8005fac:	e000      	b.n	8005fb0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005fae:	2302      	movs	r3, #2
  }
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3720      	adds	r7, #32
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fbc:	b08a      	sub	sp, #40	; 0x28
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	689a      	ldr	r2, [r3, #8]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	431a      	orrs	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	69db      	ldr	r3, [r3, #28]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	4ba4      	ldr	r3, [pc, #656]	; (8006278 <UART_SetConfig+0x2c0>)
 8005fe8:	4013      	ands	r3, r2
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	6812      	ldr	r2, [r2, #0]
 8005fee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ff0:	430b      	orrs	r3, r1
 8005ff2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	68da      	ldr	r2, [r3, #12]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	430a      	orrs	r2, r1
 8006008:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a99      	ldr	r2, [pc, #612]	; (800627c <UART_SetConfig+0x2c4>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d004      	beq.n	8006024 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006020:	4313      	orrs	r3, r2
 8006022:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006034:	430a      	orrs	r2, r1
 8006036:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a90      	ldr	r2, [pc, #576]	; (8006280 <UART_SetConfig+0x2c8>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d126      	bne.n	8006090 <UART_SetConfig+0xd8>
 8006042:	4b90      	ldr	r3, [pc, #576]	; (8006284 <UART_SetConfig+0x2cc>)
 8006044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006048:	f003 0303 	and.w	r3, r3, #3
 800604c:	2b03      	cmp	r3, #3
 800604e:	d81b      	bhi.n	8006088 <UART_SetConfig+0xd0>
 8006050:	a201      	add	r2, pc, #4	; (adr r2, 8006058 <UART_SetConfig+0xa0>)
 8006052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006056:	bf00      	nop
 8006058:	08006069 	.word	0x08006069
 800605c:	08006079 	.word	0x08006079
 8006060:	08006071 	.word	0x08006071
 8006064:	08006081 	.word	0x08006081
 8006068:	2301      	movs	r3, #1
 800606a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800606e:	e116      	b.n	800629e <UART_SetConfig+0x2e6>
 8006070:	2302      	movs	r3, #2
 8006072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006076:	e112      	b.n	800629e <UART_SetConfig+0x2e6>
 8006078:	2304      	movs	r3, #4
 800607a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800607e:	e10e      	b.n	800629e <UART_SetConfig+0x2e6>
 8006080:	2308      	movs	r3, #8
 8006082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006086:	e10a      	b.n	800629e <UART_SetConfig+0x2e6>
 8006088:	2310      	movs	r3, #16
 800608a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800608e:	e106      	b.n	800629e <UART_SetConfig+0x2e6>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a7c      	ldr	r2, [pc, #496]	; (8006288 <UART_SetConfig+0x2d0>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d138      	bne.n	800610c <UART_SetConfig+0x154>
 800609a:	4b7a      	ldr	r3, [pc, #488]	; (8006284 <UART_SetConfig+0x2cc>)
 800609c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a0:	f003 030c 	and.w	r3, r3, #12
 80060a4:	2b0c      	cmp	r3, #12
 80060a6:	d82d      	bhi.n	8006104 <UART_SetConfig+0x14c>
 80060a8:	a201      	add	r2, pc, #4	; (adr r2, 80060b0 <UART_SetConfig+0xf8>)
 80060aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ae:	bf00      	nop
 80060b0:	080060e5 	.word	0x080060e5
 80060b4:	08006105 	.word	0x08006105
 80060b8:	08006105 	.word	0x08006105
 80060bc:	08006105 	.word	0x08006105
 80060c0:	080060f5 	.word	0x080060f5
 80060c4:	08006105 	.word	0x08006105
 80060c8:	08006105 	.word	0x08006105
 80060cc:	08006105 	.word	0x08006105
 80060d0:	080060ed 	.word	0x080060ed
 80060d4:	08006105 	.word	0x08006105
 80060d8:	08006105 	.word	0x08006105
 80060dc:	08006105 	.word	0x08006105
 80060e0:	080060fd 	.word	0x080060fd
 80060e4:	2300      	movs	r3, #0
 80060e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060ea:	e0d8      	b.n	800629e <UART_SetConfig+0x2e6>
 80060ec:	2302      	movs	r3, #2
 80060ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060f2:	e0d4      	b.n	800629e <UART_SetConfig+0x2e6>
 80060f4:	2304      	movs	r3, #4
 80060f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80060fa:	e0d0      	b.n	800629e <UART_SetConfig+0x2e6>
 80060fc:	2308      	movs	r3, #8
 80060fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006102:	e0cc      	b.n	800629e <UART_SetConfig+0x2e6>
 8006104:	2310      	movs	r3, #16
 8006106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800610a:	e0c8      	b.n	800629e <UART_SetConfig+0x2e6>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a5e      	ldr	r2, [pc, #376]	; (800628c <UART_SetConfig+0x2d4>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d125      	bne.n	8006162 <UART_SetConfig+0x1aa>
 8006116:	4b5b      	ldr	r3, [pc, #364]	; (8006284 <UART_SetConfig+0x2cc>)
 8006118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800611c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006120:	2b30      	cmp	r3, #48	; 0x30
 8006122:	d016      	beq.n	8006152 <UART_SetConfig+0x19a>
 8006124:	2b30      	cmp	r3, #48	; 0x30
 8006126:	d818      	bhi.n	800615a <UART_SetConfig+0x1a2>
 8006128:	2b20      	cmp	r3, #32
 800612a:	d00a      	beq.n	8006142 <UART_SetConfig+0x18a>
 800612c:	2b20      	cmp	r3, #32
 800612e:	d814      	bhi.n	800615a <UART_SetConfig+0x1a2>
 8006130:	2b00      	cmp	r3, #0
 8006132:	d002      	beq.n	800613a <UART_SetConfig+0x182>
 8006134:	2b10      	cmp	r3, #16
 8006136:	d008      	beq.n	800614a <UART_SetConfig+0x192>
 8006138:	e00f      	b.n	800615a <UART_SetConfig+0x1a2>
 800613a:	2300      	movs	r3, #0
 800613c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006140:	e0ad      	b.n	800629e <UART_SetConfig+0x2e6>
 8006142:	2302      	movs	r3, #2
 8006144:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006148:	e0a9      	b.n	800629e <UART_SetConfig+0x2e6>
 800614a:	2304      	movs	r3, #4
 800614c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006150:	e0a5      	b.n	800629e <UART_SetConfig+0x2e6>
 8006152:	2308      	movs	r3, #8
 8006154:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006158:	e0a1      	b.n	800629e <UART_SetConfig+0x2e6>
 800615a:	2310      	movs	r3, #16
 800615c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006160:	e09d      	b.n	800629e <UART_SetConfig+0x2e6>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a4a      	ldr	r2, [pc, #296]	; (8006290 <UART_SetConfig+0x2d8>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d125      	bne.n	80061b8 <UART_SetConfig+0x200>
 800616c:	4b45      	ldr	r3, [pc, #276]	; (8006284 <UART_SetConfig+0x2cc>)
 800616e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006172:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006176:	2bc0      	cmp	r3, #192	; 0xc0
 8006178:	d016      	beq.n	80061a8 <UART_SetConfig+0x1f0>
 800617a:	2bc0      	cmp	r3, #192	; 0xc0
 800617c:	d818      	bhi.n	80061b0 <UART_SetConfig+0x1f8>
 800617e:	2b80      	cmp	r3, #128	; 0x80
 8006180:	d00a      	beq.n	8006198 <UART_SetConfig+0x1e0>
 8006182:	2b80      	cmp	r3, #128	; 0x80
 8006184:	d814      	bhi.n	80061b0 <UART_SetConfig+0x1f8>
 8006186:	2b00      	cmp	r3, #0
 8006188:	d002      	beq.n	8006190 <UART_SetConfig+0x1d8>
 800618a:	2b40      	cmp	r3, #64	; 0x40
 800618c:	d008      	beq.n	80061a0 <UART_SetConfig+0x1e8>
 800618e:	e00f      	b.n	80061b0 <UART_SetConfig+0x1f8>
 8006190:	2300      	movs	r3, #0
 8006192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006196:	e082      	b.n	800629e <UART_SetConfig+0x2e6>
 8006198:	2302      	movs	r3, #2
 800619a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800619e:	e07e      	b.n	800629e <UART_SetConfig+0x2e6>
 80061a0:	2304      	movs	r3, #4
 80061a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061a6:	e07a      	b.n	800629e <UART_SetConfig+0x2e6>
 80061a8:	2308      	movs	r3, #8
 80061aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061ae:	e076      	b.n	800629e <UART_SetConfig+0x2e6>
 80061b0:	2310      	movs	r3, #16
 80061b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061b6:	e072      	b.n	800629e <UART_SetConfig+0x2e6>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a35      	ldr	r2, [pc, #212]	; (8006294 <UART_SetConfig+0x2dc>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d12a      	bne.n	8006218 <UART_SetConfig+0x260>
 80061c2:	4b30      	ldr	r3, [pc, #192]	; (8006284 <UART_SetConfig+0x2cc>)
 80061c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061d0:	d01a      	beq.n	8006208 <UART_SetConfig+0x250>
 80061d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061d6:	d81b      	bhi.n	8006210 <UART_SetConfig+0x258>
 80061d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061dc:	d00c      	beq.n	80061f8 <UART_SetConfig+0x240>
 80061de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061e2:	d815      	bhi.n	8006210 <UART_SetConfig+0x258>
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d003      	beq.n	80061f0 <UART_SetConfig+0x238>
 80061e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061ec:	d008      	beq.n	8006200 <UART_SetConfig+0x248>
 80061ee:	e00f      	b.n	8006210 <UART_SetConfig+0x258>
 80061f0:	2300      	movs	r3, #0
 80061f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061f6:	e052      	b.n	800629e <UART_SetConfig+0x2e6>
 80061f8:	2302      	movs	r3, #2
 80061fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061fe:	e04e      	b.n	800629e <UART_SetConfig+0x2e6>
 8006200:	2304      	movs	r3, #4
 8006202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006206:	e04a      	b.n	800629e <UART_SetConfig+0x2e6>
 8006208:	2308      	movs	r3, #8
 800620a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800620e:	e046      	b.n	800629e <UART_SetConfig+0x2e6>
 8006210:	2310      	movs	r3, #16
 8006212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006216:	e042      	b.n	800629e <UART_SetConfig+0x2e6>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a17      	ldr	r2, [pc, #92]	; (800627c <UART_SetConfig+0x2c4>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d13a      	bne.n	8006298 <UART_SetConfig+0x2e0>
 8006222:	4b18      	ldr	r3, [pc, #96]	; (8006284 <UART_SetConfig+0x2cc>)
 8006224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006228:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800622c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006230:	d01a      	beq.n	8006268 <UART_SetConfig+0x2b0>
 8006232:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006236:	d81b      	bhi.n	8006270 <UART_SetConfig+0x2b8>
 8006238:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800623c:	d00c      	beq.n	8006258 <UART_SetConfig+0x2a0>
 800623e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006242:	d815      	bhi.n	8006270 <UART_SetConfig+0x2b8>
 8006244:	2b00      	cmp	r3, #0
 8006246:	d003      	beq.n	8006250 <UART_SetConfig+0x298>
 8006248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800624c:	d008      	beq.n	8006260 <UART_SetConfig+0x2a8>
 800624e:	e00f      	b.n	8006270 <UART_SetConfig+0x2b8>
 8006250:	2300      	movs	r3, #0
 8006252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006256:	e022      	b.n	800629e <UART_SetConfig+0x2e6>
 8006258:	2302      	movs	r3, #2
 800625a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800625e:	e01e      	b.n	800629e <UART_SetConfig+0x2e6>
 8006260:	2304      	movs	r3, #4
 8006262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006266:	e01a      	b.n	800629e <UART_SetConfig+0x2e6>
 8006268:	2308      	movs	r3, #8
 800626a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800626e:	e016      	b.n	800629e <UART_SetConfig+0x2e6>
 8006270:	2310      	movs	r3, #16
 8006272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006276:	e012      	b.n	800629e <UART_SetConfig+0x2e6>
 8006278:	efff69f3 	.word	0xefff69f3
 800627c:	40008000 	.word	0x40008000
 8006280:	40013800 	.word	0x40013800
 8006284:	40021000 	.word	0x40021000
 8006288:	40004400 	.word	0x40004400
 800628c:	40004800 	.word	0x40004800
 8006290:	40004c00 	.word	0x40004c00
 8006294:	40005000 	.word	0x40005000
 8006298:	2310      	movs	r3, #16
 800629a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a9f      	ldr	r2, [pc, #636]	; (8006520 <UART_SetConfig+0x568>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d17a      	bne.n	800639e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80062ac:	2b08      	cmp	r3, #8
 80062ae:	d824      	bhi.n	80062fa <UART_SetConfig+0x342>
 80062b0:	a201      	add	r2, pc, #4	; (adr r2, 80062b8 <UART_SetConfig+0x300>)
 80062b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b6:	bf00      	nop
 80062b8:	080062dd 	.word	0x080062dd
 80062bc:	080062fb 	.word	0x080062fb
 80062c0:	080062e5 	.word	0x080062e5
 80062c4:	080062fb 	.word	0x080062fb
 80062c8:	080062eb 	.word	0x080062eb
 80062cc:	080062fb 	.word	0x080062fb
 80062d0:	080062fb 	.word	0x080062fb
 80062d4:	080062fb 	.word	0x080062fb
 80062d8:	080062f3 	.word	0x080062f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062dc:	f7fe fd2e 	bl	8004d3c <HAL_RCC_GetPCLK1Freq>
 80062e0:	61f8      	str	r0, [r7, #28]
        break;
 80062e2:	e010      	b.n	8006306 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062e4:	4b8f      	ldr	r3, [pc, #572]	; (8006524 <UART_SetConfig+0x56c>)
 80062e6:	61fb      	str	r3, [r7, #28]
        break;
 80062e8:	e00d      	b.n	8006306 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062ea:	f7fe fc8f 	bl	8004c0c <HAL_RCC_GetSysClockFreq>
 80062ee:	61f8      	str	r0, [r7, #28]
        break;
 80062f0:	e009      	b.n	8006306 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062f6:	61fb      	str	r3, [r7, #28]
        break;
 80062f8:	e005      	b.n	8006306 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80062fa:	2300      	movs	r3, #0
 80062fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006304:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	2b00      	cmp	r3, #0
 800630a:	f000 80fb 	beq.w	8006504 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	685a      	ldr	r2, [r3, #4]
 8006312:	4613      	mov	r3, r2
 8006314:	005b      	lsls	r3, r3, #1
 8006316:	4413      	add	r3, r2
 8006318:	69fa      	ldr	r2, [r7, #28]
 800631a:	429a      	cmp	r2, r3
 800631c:	d305      	bcc.n	800632a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006324:	69fa      	ldr	r2, [r7, #28]
 8006326:	429a      	cmp	r2, r3
 8006328:	d903      	bls.n	8006332 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006330:	e0e8      	b.n	8006504 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	2200      	movs	r2, #0
 8006336:	461c      	mov	r4, r3
 8006338:	4615      	mov	r5, r2
 800633a:	f04f 0200 	mov.w	r2, #0
 800633e:	f04f 0300 	mov.w	r3, #0
 8006342:	022b      	lsls	r3, r5, #8
 8006344:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006348:	0222      	lsls	r2, r4, #8
 800634a:	68f9      	ldr	r1, [r7, #12]
 800634c:	6849      	ldr	r1, [r1, #4]
 800634e:	0849      	lsrs	r1, r1, #1
 8006350:	2000      	movs	r0, #0
 8006352:	4688      	mov	r8, r1
 8006354:	4681      	mov	r9, r0
 8006356:	eb12 0a08 	adds.w	sl, r2, r8
 800635a:	eb43 0b09 	adc.w	fp, r3, r9
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	603b      	str	r3, [r7, #0]
 8006366:	607a      	str	r2, [r7, #4]
 8006368:	e9d7 2300 	ldrd	r2, r3, [r7]
 800636c:	4650      	mov	r0, sl
 800636e:	4659      	mov	r1, fp
 8006370:	f7fa fc1a 	bl	8000ba8 <__aeabi_uldivmod>
 8006374:	4602      	mov	r2, r0
 8006376:	460b      	mov	r3, r1
 8006378:	4613      	mov	r3, r2
 800637a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006382:	d308      	bcc.n	8006396 <UART_SetConfig+0x3de>
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800638a:	d204      	bcs.n	8006396 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	69ba      	ldr	r2, [r7, #24]
 8006392:	60da      	str	r2, [r3, #12]
 8006394:	e0b6      	b.n	8006504 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800639c:	e0b2      	b.n	8006504 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	69db      	ldr	r3, [r3, #28]
 80063a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063a6:	d15e      	bne.n	8006466 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80063a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80063ac:	2b08      	cmp	r3, #8
 80063ae:	d828      	bhi.n	8006402 <UART_SetConfig+0x44a>
 80063b0:	a201      	add	r2, pc, #4	; (adr r2, 80063b8 <UART_SetConfig+0x400>)
 80063b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b6:	bf00      	nop
 80063b8:	080063dd 	.word	0x080063dd
 80063bc:	080063e5 	.word	0x080063e5
 80063c0:	080063ed 	.word	0x080063ed
 80063c4:	08006403 	.word	0x08006403
 80063c8:	080063f3 	.word	0x080063f3
 80063cc:	08006403 	.word	0x08006403
 80063d0:	08006403 	.word	0x08006403
 80063d4:	08006403 	.word	0x08006403
 80063d8:	080063fb 	.word	0x080063fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063dc:	f7fe fcae 	bl	8004d3c <HAL_RCC_GetPCLK1Freq>
 80063e0:	61f8      	str	r0, [r7, #28]
        break;
 80063e2:	e014      	b.n	800640e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063e4:	f7fe fcc0 	bl	8004d68 <HAL_RCC_GetPCLK2Freq>
 80063e8:	61f8      	str	r0, [r7, #28]
        break;
 80063ea:	e010      	b.n	800640e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063ec:	4b4d      	ldr	r3, [pc, #308]	; (8006524 <UART_SetConfig+0x56c>)
 80063ee:	61fb      	str	r3, [r7, #28]
        break;
 80063f0:	e00d      	b.n	800640e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063f2:	f7fe fc0b 	bl	8004c0c <HAL_RCC_GetSysClockFreq>
 80063f6:	61f8      	str	r0, [r7, #28]
        break;
 80063f8:	e009      	b.n	800640e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063fe:	61fb      	str	r3, [r7, #28]
        break;
 8006400:	e005      	b.n	800640e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006402:	2300      	movs	r3, #0
 8006404:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800640c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d077      	beq.n	8006504 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	005a      	lsls	r2, r3, #1
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	085b      	lsrs	r3, r3, #1
 800641e:	441a      	add	r2, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	fbb2 f3f3 	udiv	r3, r2, r3
 8006428:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	2b0f      	cmp	r3, #15
 800642e:	d916      	bls.n	800645e <UART_SetConfig+0x4a6>
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006436:	d212      	bcs.n	800645e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	b29b      	uxth	r3, r3
 800643c:	f023 030f 	bic.w	r3, r3, #15
 8006440:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	085b      	lsrs	r3, r3, #1
 8006446:	b29b      	uxth	r3, r3
 8006448:	f003 0307 	and.w	r3, r3, #7
 800644c:	b29a      	uxth	r2, r3
 800644e:	8afb      	ldrh	r3, [r7, #22]
 8006450:	4313      	orrs	r3, r2
 8006452:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	8afa      	ldrh	r2, [r7, #22]
 800645a:	60da      	str	r2, [r3, #12]
 800645c:	e052      	b.n	8006504 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006464:	e04e      	b.n	8006504 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006466:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800646a:	2b08      	cmp	r3, #8
 800646c:	d827      	bhi.n	80064be <UART_SetConfig+0x506>
 800646e:	a201      	add	r2, pc, #4	; (adr r2, 8006474 <UART_SetConfig+0x4bc>)
 8006470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006474:	08006499 	.word	0x08006499
 8006478:	080064a1 	.word	0x080064a1
 800647c:	080064a9 	.word	0x080064a9
 8006480:	080064bf 	.word	0x080064bf
 8006484:	080064af 	.word	0x080064af
 8006488:	080064bf 	.word	0x080064bf
 800648c:	080064bf 	.word	0x080064bf
 8006490:	080064bf 	.word	0x080064bf
 8006494:	080064b7 	.word	0x080064b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006498:	f7fe fc50 	bl	8004d3c <HAL_RCC_GetPCLK1Freq>
 800649c:	61f8      	str	r0, [r7, #28]
        break;
 800649e:	e014      	b.n	80064ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064a0:	f7fe fc62 	bl	8004d68 <HAL_RCC_GetPCLK2Freq>
 80064a4:	61f8      	str	r0, [r7, #28]
        break;
 80064a6:	e010      	b.n	80064ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064a8:	4b1e      	ldr	r3, [pc, #120]	; (8006524 <UART_SetConfig+0x56c>)
 80064aa:	61fb      	str	r3, [r7, #28]
        break;
 80064ac:	e00d      	b.n	80064ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064ae:	f7fe fbad 	bl	8004c0c <HAL_RCC_GetSysClockFreq>
 80064b2:	61f8      	str	r0, [r7, #28]
        break;
 80064b4:	e009      	b.n	80064ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064ba:	61fb      	str	r3, [r7, #28]
        break;
 80064bc:	e005      	b.n	80064ca <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80064be:	2300      	movs	r3, #0
 80064c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80064c8:	bf00      	nop
    }

    if (pclk != 0U)
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d019      	beq.n	8006504 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	085a      	lsrs	r2, r3, #1
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	441a      	add	r2, r3
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	fbb2 f3f3 	udiv	r3, r2, r3
 80064e2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	2b0f      	cmp	r3, #15
 80064e8:	d909      	bls.n	80064fe <UART_SetConfig+0x546>
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064f0:	d205      	bcs.n	80064fe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	b29a      	uxth	r2, r3
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	60da      	str	r2, [r3, #12]
 80064fc:	e002      	b.n	8006504 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006510:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006514:	4618      	mov	r0, r3
 8006516:	3728      	adds	r7, #40	; 0x28
 8006518:	46bd      	mov	sp, r7
 800651a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800651e:	bf00      	nop
 8006520:	40008000 	.word	0x40008000
 8006524:	00f42400 	.word	0x00f42400

08006528 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006534:	f003 0301 	and.w	r3, r3, #1
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00a      	beq.n	8006552 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	430a      	orrs	r2, r1
 8006550:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006556:	f003 0302 	and.w	r3, r3, #2
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00a      	beq.n	8006574 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	430a      	orrs	r2, r1
 8006572:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006578:	f003 0304 	and.w	r3, r3, #4
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00a      	beq.n	8006596 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	430a      	orrs	r2, r1
 8006594:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659a:	f003 0308 	and.w	r3, r3, #8
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00a      	beq.n	80065b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	430a      	orrs	r2, r1
 80065b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065bc:	f003 0310 	and.w	r3, r3, #16
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00a      	beq.n	80065da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	430a      	orrs	r2, r1
 80065d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065de:	f003 0320 	and.w	r3, r3, #32
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00a      	beq.n	80065fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	430a      	orrs	r2, r1
 80065fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006604:	2b00      	cmp	r3, #0
 8006606:	d01a      	beq.n	800663e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006622:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006626:	d10a      	bne.n	800663e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	430a      	orrs	r2, r1
 800663c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00a      	beq.n	8006660 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	430a      	orrs	r2, r1
 800665e:	605a      	str	r2, [r3, #4]
  }
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b086      	sub	sp, #24
 8006670:	af02      	add	r7, sp, #8
 8006672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800667c:	f7fc fb6a 	bl	8002d54 <HAL_GetTick>
 8006680:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0308 	and.w	r3, r3, #8
 800668c:	2b08      	cmp	r3, #8
 800668e:	d10e      	bne.n	80066ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006690:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006694:	9300      	str	r3, [sp, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f82d 	bl	80066fe <UART_WaitOnFlagUntilTimeout>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d001      	beq.n	80066ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e023      	b.n	80066f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 0304 	and.w	r3, r3, #4
 80066b8:	2b04      	cmp	r3, #4
 80066ba:	d10e      	bne.n	80066da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066c0:	9300      	str	r3, [sp, #0]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 f817 	bl	80066fe <UART_WaitOnFlagUntilTimeout>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d001      	beq.n	80066da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066d6:	2303      	movs	r3, #3
 80066d8:	e00d      	b.n	80066f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2220      	movs	r2, #32
 80066de:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2220      	movs	r2, #32
 80066e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066fe:	b580      	push	{r7, lr}
 8006700:	b09c      	sub	sp, #112	; 0x70
 8006702:	af00      	add	r7, sp, #0
 8006704:	60f8      	str	r0, [r7, #12]
 8006706:	60b9      	str	r1, [r7, #8]
 8006708:	603b      	str	r3, [r7, #0]
 800670a:	4613      	mov	r3, r2
 800670c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800670e:	e0a5      	b.n	800685c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006710:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006716:	f000 80a1 	beq.w	800685c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800671a:	f7fc fb1b 	bl	8002d54 <HAL_GetTick>
 800671e:	4602      	mov	r2, r0
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006726:	429a      	cmp	r2, r3
 8006728:	d302      	bcc.n	8006730 <UART_WaitOnFlagUntilTimeout+0x32>
 800672a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800672c:	2b00      	cmp	r3, #0
 800672e:	d13e      	bne.n	80067ae <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006738:	e853 3f00 	ldrex	r3, [r3]
 800673c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800673e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006740:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006744:	667b      	str	r3, [r7, #100]	; 0x64
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	461a      	mov	r2, r3
 800674c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800674e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006750:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006752:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006754:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006756:	e841 2300 	strex	r3, r2, [r1]
 800675a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800675c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1e6      	bne.n	8006730 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	3308      	adds	r3, #8
 8006768:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800676c:	e853 3f00 	ldrex	r3, [r3]
 8006770:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006774:	f023 0301 	bic.w	r3, r3, #1
 8006778:	663b      	str	r3, [r7, #96]	; 0x60
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	3308      	adds	r3, #8
 8006780:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006782:	64ba      	str	r2, [r7, #72]	; 0x48
 8006784:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006786:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006788:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800678a:	e841 2300 	strex	r3, r2, [r1]
 800678e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1e5      	bne.n	8006762 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2220      	movs	r2, #32
 800679a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2220      	movs	r2, #32
 80067a0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e067      	b.n	800687e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0304 	and.w	r3, r3, #4
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d04f      	beq.n	800685c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	69db      	ldr	r3, [r3, #28]
 80067c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067ca:	d147      	bne.n	800685c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067d4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067de:	e853 3f00 	ldrex	r3, [r3]
 80067e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	461a      	mov	r2, r3
 80067f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067f4:	637b      	str	r3, [r7, #52]	; 0x34
 80067f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067fc:	e841 2300 	strex	r3, r2, [r1]
 8006800:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1e6      	bne.n	80067d6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	3308      	adds	r3, #8
 800680e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	e853 3f00 	ldrex	r3, [r3]
 8006816:	613b      	str	r3, [r7, #16]
   return(result);
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	f023 0301 	bic.w	r3, r3, #1
 800681e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	3308      	adds	r3, #8
 8006826:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006828:	623a      	str	r2, [r7, #32]
 800682a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682c:	69f9      	ldr	r1, [r7, #28]
 800682e:	6a3a      	ldr	r2, [r7, #32]
 8006830:	e841 2300 	strex	r3, r2, [r1]
 8006834:	61bb      	str	r3, [r7, #24]
   return(result);
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1e5      	bne.n	8006808 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2220      	movs	r2, #32
 8006840:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2220      	movs	r2, #32
 8006846:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2220      	movs	r2, #32
 800684c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2200      	movs	r2, #0
 8006854:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006858:	2303      	movs	r3, #3
 800685a:	e010      	b.n	800687e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	69da      	ldr	r2, [r3, #28]
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	4013      	ands	r3, r2
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	429a      	cmp	r2, r3
 800686a:	bf0c      	ite	eq
 800686c:	2301      	moveq	r3, #1
 800686e:	2300      	movne	r3, #0
 8006870:	b2db      	uxtb	r3, r3
 8006872:	461a      	mov	r2, r3
 8006874:	79fb      	ldrb	r3, [r7, #7]
 8006876:	429a      	cmp	r2, r3
 8006878:	f43f af4a 	beq.w	8006710 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3770      	adds	r7, #112	; 0x70
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006886:	b480      	push	{r7}
 8006888:	b085      	sub	sp, #20
 800688a:	af00      	add	r7, sp, #0
 800688c:	4603      	mov	r3, r0
 800688e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006890:	2300      	movs	r3, #0
 8006892:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006894:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006898:	2b84      	cmp	r3, #132	; 0x84
 800689a:	d005      	beq.n	80068a8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800689c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	4413      	add	r3, r2
 80068a4:	3303      	adds	r3, #3
 80068a6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80068a8:	68fb      	ldr	r3, [r7, #12]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3714      	adds	r7, #20
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr

080068b6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80068ba:	f000 fcf3 	bl	80072a4 <vTaskStartScheduler>
  
  return osOK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80068c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068c6:	b089      	sub	sp, #36	; 0x24
 80068c8:	af04      	add	r7, sp, #16
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	695b      	ldr	r3, [r3, #20]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d020      	beq.n	8006918 <osThreadCreate+0x54>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d01c      	beq.n	8006918 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	685c      	ldr	r4, [r3, #4]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681d      	ldr	r5, [r3, #0]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	691e      	ldr	r6, [r3, #16]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80068f0:	4618      	mov	r0, r3
 80068f2:	f7ff ffc8 	bl	8006886 <makeFreeRtosPriority>
 80068f6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	695b      	ldr	r3, [r3, #20]
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006900:	9202      	str	r2, [sp, #8]
 8006902:	9301      	str	r3, [sp, #4]
 8006904:	9100      	str	r1, [sp, #0]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	4632      	mov	r2, r6
 800690a:	4629      	mov	r1, r5
 800690c:	4620      	mov	r0, r4
 800690e:	f000 f8d9 	bl	8006ac4 <xTaskCreateStatic>
 8006912:	4603      	mov	r3, r0
 8006914:	60fb      	str	r3, [r7, #12]
 8006916:	e01c      	b.n	8006952 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	685c      	ldr	r4, [r3, #4]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006924:	b29e      	uxth	r6, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800692c:	4618      	mov	r0, r3
 800692e:	f7ff ffaa 	bl	8006886 <makeFreeRtosPriority>
 8006932:	4602      	mov	r2, r0
 8006934:	f107 030c 	add.w	r3, r7, #12
 8006938:	9301      	str	r3, [sp, #4]
 800693a:	9200      	str	r2, [sp, #0]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	4632      	mov	r2, r6
 8006940:	4629      	mov	r1, r5
 8006942:	4620      	mov	r0, r4
 8006944:	f000 f91b 	bl	8006b7e <xTaskCreate>
 8006948:	4603      	mov	r3, r0
 800694a:	2b01      	cmp	r3, #1
 800694c:	d001      	beq.n	8006952 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800694e:	2300      	movs	r3, #0
 8006950:	e000      	b.n	8006954 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006952:	68fb      	ldr	r3, [r7, #12]
}
 8006954:	4618      	mov	r0, r3
 8006956:	3714      	adds	r7, #20
 8006958:	46bd      	mov	sp, r7
 800695a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800695c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f103 0208 	add.w	r2, r3, #8
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f04f 32ff 	mov.w	r2, #4294967295
 8006974:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f103 0208 	add.w	r2, r3, #8
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f103 0208 	add.w	r2, r3, #8
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80069aa:	bf00      	nop
 80069ac:	370c      	adds	r7, #12
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80069b6:	b480      	push	{r7}
 80069b8:	b085      	sub	sp, #20
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
 80069be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	689a      	ldr	r2, [r3, #8]
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	683a      	ldr	r2, [r7, #0]
 80069da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	1c5a      	adds	r2, r3, #1
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	601a      	str	r2, [r3, #0]
}
 80069f2:	bf00      	nop
 80069f4:	3714      	adds	r7, #20
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80069fe:	b480      	push	{r7}
 8006a00:	b085      	sub	sp, #20
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
 8006a06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a14:	d103      	bne.n	8006a1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	60fb      	str	r3, [r7, #12]
 8006a1c:	e00c      	b.n	8006a38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	3308      	adds	r3, #8
 8006a22:	60fb      	str	r3, [r7, #12]
 8006a24:	e002      	b.n	8006a2c <vListInsert+0x2e>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	60fb      	str	r3, [r7, #12]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68ba      	ldr	r2, [r7, #8]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d2f6      	bcs.n	8006a26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	685a      	ldr	r2, [r3, #4]
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	683a      	ldr	r2, [r7, #0]
 8006a46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	683a      	ldr	r2, [r7, #0]
 8006a52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	1c5a      	adds	r2, r3, #1
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	601a      	str	r2, [r3, #0]
}
 8006a64:	bf00      	nop
 8006a66:	3714      	adds	r7, #20
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	6892      	ldr	r2, [r2, #8]
 8006a86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	6852      	ldr	r2, [r2, #4]
 8006a90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d103      	bne.n	8006aa4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	689a      	ldr	r2, [r3, #8]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	1e5a      	subs	r2, r3, #1
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3714      	adds	r7, #20
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b08e      	sub	sp, #56	; 0x38
 8006ac8:	af04      	add	r7, sp, #16
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	607a      	str	r2, [r7, #4]
 8006ad0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d10a      	bne.n	8006aee <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006adc:	f383 8811 	msr	BASEPRI, r3
 8006ae0:	f3bf 8f6f 	isb	sy
 8006ae4:	f3bf 8f4f 	dsb	sy
 8006ae8:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006aea:	bf00      	nop
 8006aec:	e7fe      	b.n	8006aec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d10a      	bne.n	8006b0a <xTaskCreateStatic+0x46>
	__asm volatile
 8006af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af8:	f383 8811 	msr	BASEPRI, r3
 8006afc:	f3bf 8f6f 	isb	sy
 8006b00:	f3bf 8f4f 	dsb	sy
 8006b04:	61fb      	str	r3, [r7, #28]
}
 8006b06:	bf00      	nop
 8006b08:	e7fe      	b.n	8006b08 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b0a:	23b4      	movs	r3, #180	; 0xb4
 8006b0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	2bb4      	cmp	r3, #180	; 0xb4
 8006b12:	d00a      	beq.n	8006b2a <xTaskCreateStatic+0x66>
	__asm volatile
 8006b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b18:	f383 8811 	msr	BASEPRI, r3
 8006b1c:	f3bf 8f6f 	isb	sy
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	61bb      	str	r3, [r7, #24]
}
 8006b26:	bf00      	nop
 8006b28:	e7fe      	b.n	8006b28 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b2a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d01e      	beq.n	8006b70 <xTaskCreateStatic+0xac>
 8006b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d01b      	beq.n	8006b70 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b40:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b44:	2202      	movs	r2, #2
 8006b46:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	9303      	str	r3, [sp, #12]
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b50:	9302      	str	r3, [sp, #8]
 8006b52:	f107 0314 	add.w	r3, r7, #20
 8006b56:	9301      	str	r3, [sp, #4]
 8006b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5a:	9300      	str	r3, [sp, #0]
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	68b9      	ldr	r1, [r7, #8]
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	f000 f850 	bl	8006c08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b6a:	f000 f8eb 	bl	8006d44 <prvAddNewTaskToReadyList>
 8006b6e:	e001      	b.n	8006b74 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006b70:	2300      	movs	r3, #0
 8006b72:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006b74:	697b      	ldr	r3, [r7, #20]
	}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3728      	adds	r7, #40	; 0x28
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b08c      	sub	sp, #48	; 0x30
 8006b82:	af04      	add	r7, sp, #16
 8006b84:	60f8      	str	r0, [r7, #12]
 8006b86:	60b9      	str	r1, [r7, #8]
 8006b88:	603b      	str	r3, [r7, #0]
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006b8e:	88fb      	ldrh	r3, [r7, #6]
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	4618      	mov	r0, r3
 8006b94:	f001 f950 	bl	8007e38 <pvPortMalloc>
 8006b98:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00e      	beq.n	8006bbe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006ba0:	20b4      	movs	r0, #180	; 0xb4
 8006ba2:	f001 f949 	bl	8007e38 <pvPortMalloc>
 8006ba6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d003      	beq.n	8006bb6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	631a      	str	r2, [r3, #48]	; 0x30
 8006bb4:	e005      	b.n	8006bc2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006bb6:	6978      	ldr	r0, [r7, #20]
 8006bb8:	f001 fa0a 	bl	8007fd0 <vPortFree>
 8006bbc:	e001      	b.n	8006bc2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d017      	beq.n	8006bf8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006bd0:	88fa      	ldrh	r2, [r7, #6]
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	9303      	str	r3, [sp, #12]
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	9302      	str	r3, [sp, #8]
 8006bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bdc:	9301      	str	r3, [sp, #4]
 8006bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be0:	9300      	str	r3, [sp, #0]
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	68b9      	ldr	r1, [r7, #8]
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f000 f80e 	bl	8006c08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bec:	69f8      	ldr	r0, [r7, #28]
 8006bee:	f000 f8a9 	bl	8006d44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	61bb      	str	r3, [r7, #24]
 8006bf6:	e002      	b.n	8006bfe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8006bfc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006bfe:	69bb      	ldr	r3, [r7, #24]
	}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3720      	adds	r7, #32
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b088      	sub	sp, #32
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
 8006c14:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006c20:	3b01      	subs	r3, #1
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4413      	add	r3, r2
 8006c26:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	f023 0307 	bic.w	r3, r3, #7
 8006c2e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	f003 0307 	and.w	r3, r3, #7
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00a      	beq.n	8006c50 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3e:	f383 8811 	msr	BASEPRI, r3
 8006c42:	f3bf 8f6f 	isb	sy
 8006c46:	f3bf 8f4f 	dsb	sy
 8006c4a:	617b      	str	r3, [r7, #20]
}
 8006c4c:	bf00      	nop
 8006c4e:	e7fe      	b.n	8006c4e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d01f      	beq.n	8006c96 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c56:	2300      	movs	r3, #0
 8006c58:	61fb      	str	r3, [r7, #28]
 8006c5a:	e012      	b.n	8006c82 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c5c:	68ba      	ldr	r2, [r7, #8]
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	4413      	add	r3, r2
 8006c62:	7819      	ldrb	r1, [r3, #0]
 8006c64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	4413      	add	r3, r2
 8006c6a:	3334      	adds	r3, #52	; 0x34
 8006c6c:	460a      	mov	r2, r1
 8006c6e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006c70:	68ba      	ldr	r2, [r7, #8]
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	4413      	add	r3, r2
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d006      	beq.n	8006c8a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	61fb      	str	r3, [r7, #28]
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	2b0f      	cmp	r3, #15
 8006c86:	d9e9      	bls.n	8006c5c <prvInitialiseNewTask+0x54>
 8006c88:	e000      	b.n	8006c8c <prvInitialiseNewTask+0x84>
			{
				break;
 8006c8a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c94:	e003      	b.n	8006c9e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca0:	2b06      	cmp	r3, #6
 8006ca2:	d901      	bls.n	8006ca8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006ca4:	2306      	movs	r3, #6
 8006ca6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006caa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cb2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cbc:	3304      	adds	r3, #4
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7ff fe6c 	bl	800699c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc6:	3318      	adds	r3, #24
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f7ff fe67 	bl	800699c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cd2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd6:	f1c3 0207 	rsb	r2, r3, #7
 8006cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cdc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ce2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf6:	334c      	adds	r3, #76	; 0x4c
 8006cf8:	2260      	movs	r2, #96	; 0x60
 8006cfa:	2100      	movs	r1, #0
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f001 fbb6 	bl	800846e <memset>
 8006d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d04:	4a0c      	ldr	r2, [pc, #48]	; (8006d38 <prvInitialiseNewTask+0x130>)
 8006d06:	651a      	str	r2, [r3, #80]	; 0x50
 8006d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0a:	4a0c      	ldr	r2, [pc, #48]	; (8006d3c <prvInitialiseNewTask+0x134>)
 8006d0c:	655a      	str	r2, [r3, #84]	; 0x54
 8006d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d10:	4a0b      	ldr	r2, [pc, #44]	; (8006d40 <prvInitialiseNewTask+0x138>)
 8006d12:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d14:	683a      	ldr	r2, [r7, #0]
 8006d16:	68f9      	ldr	r1, [r7, #12]
 8006d18:	69b8      	ldr	r0, [r7, #24]
 8006d1a:	f000 fe41 	bl	80079a0 <pxPortInitialiseStack>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d22:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d002      	beq.n	8006d30 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d2e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d30:	bf00      	nop
 8006d32:	3720      	adds	r7, #32
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	0800b2fc 	.word	0x0800b2fc
 8006d3c:	0800b31c 	.word	0x0800b31c
 8006d40:	0800b2dc 	.word	0x0800b2dc

08006d44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d4c:	f000 ff52 	bl	8007bf4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d50:	4b2a      	ldr	r3, [pc, #168]	; (8006dfc <prvAddNewTaskToReadyList+0xb8>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	3301      	adds	r3, #1
 8006d56:	4a29      	ldr	r2, [pc, #164]	; (8006dfc <prvAddNewTaskToReadyList+0xb8>)
 8006d58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d5a:	4b29      	ldr	r3, [pc, #164]	; (8006e00 <prvAddNewTaskToReadyList+0xbc>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d109      	bne.n	8006d76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006d62:	4a27      	ldr	r2, [pc, #156]	; (8006e00 <prvAddNewTaskToReadyList+0xbc>)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006d68:	4b24      	ldr	r3, [pc, #144]	; (8006dfc <prvAddNewTaskToReadyList+0xb8>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d110      	bne.n	8006d92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006d70:	f000 fcee 	bl	8007750 <prvInitialiseTaskLists>
 8006d74:	e00d      	b.n	8006d92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006d76:	4b23      	ldr	r3, [pc, #140]	; (8006e04 <prvAddNewTaskToReadyList+0xc0>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d109      	bne.n	8006d92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006d7e:	4b20      	ldr	r3, [pc, #128]	; (8006e00 <prvAddNewTaskToReadyList+0xbc>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d802      	bhi.n	8006d92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006d8c:	4a1c      	ldr	r2, [pc, #112]	; (8006e00 <prvAddNewTaskToReadyList+0xbc>)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006d92:	4b1d      	ldr	r3, [pc, #116]	; (8006e08 <prvAddNewTaskToReadyList+0xc4>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	3301      	adds	r3, #1
 8006d98:	4a1b      	ldr	r2, [pc, #108]	; (8006e08 <prvAddNewTaskToReadyList+0xc4>)
 8006d9a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da0:	2201      	movs	r2, #1
 8006da2:	409a      	lsls	r2, r3
 8006da4:	4b19      	ldr	r3, [pc, #100]	; (8006e0c <prvAddNewTaskToReadyList+0xc8>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	4a18      	ldr	r2, [pc, #96]	; (8006e0c <prvAddNewTaskToReadyList+0xc8>)
 8006dac:	6013      	str	r3, [r2, #0]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006db2:	4613      	mov	r3, r2
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	4413      	add	r3, r2
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	4a15      	ldr	r2, [pc, #84]	; (8006e10 <prvAddNewTaskToReadyList+0xcc>)
 8006dbc:	441a      	add	r2, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	3304      	adds	r3, #4
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	4610      	mov	r0, r2
 8006dc6:	f7ff fdf6 	bl	80069b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006dca:	f000 ff43 	bl	8007c54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006dce:	4b0d      	ldr	r3, [pc, #52]	; (8006e04 <prvAddNewTaskToReadyList+0xc0>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00e      	beq.n	8006df4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006dd6:	4b0a      	ldr	r3, [pc, #40]	; (8006e00 <prvAddNewTaskToReadyList+0xbc>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d207      	bcs.n	8006df4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006de4:	4b0b      	ldr	r3, [pc, #44]	; (8006e14 <prvAddNewTaskToReadyList+0xd0>)
 8006de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dea:	601a      	str	r2, [r3, #0]
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006df4:	bf00      	nop
 8006df6:	3708      	adds	r7, #8
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	20000828 	.word	0x20000828
 8006e00:	20000728 	.word	0x20000728
 8006e04:	20000834 	.word	0x20000834
 8006e08:	20000844 	.word	0x20000844
 8006e0c:	20000830 	.word	0x20000830
 8006e10:	2000072c 	.word	0x2000072c
 8006e14:	e000ed04 	.word	0xe000ed04

08006e18 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b08a      	sub	sp, #40	; 0x28
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006e22:	2300      	movs	r3, #0
 8006e24:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10a      	bne.n	8006e42 <vTaskDelayUntil+0x2a>
	__asm volatile
 8006e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e30:	f383 8811 	msr	BASEPRI, r3
 8006e34:	f3bf 8f6f 	isb	sy
 8006e38:	f3bf 8f4f 	dsb	sy
 8006e3c:	617b      	str	r3, [r7, #20]
}
 8006e3e:	bf00      	nop
 8006e40:	e7fe      	b.n	8006e40 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10a      	bne.n	8006e5e <vTaskDelayUntil+0x46>
	__asm volatile
 8006e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4c:	f383 8811 	msr	BASEPRI, r3
 8006e50:	f3bf 8f6f 	isb	sy
 8006e54:	f3bf 8f4f 	dsb	sy
 8006e58:	613b      	str	r3, [r7, #16]
}
 8006e5a:	bf00      	nop
 8006e5c:	e7fe      	b.n	8006e5c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8006e5e:	4b2a      	ldr	r3, [pc, #168]	; (8006f08 <vTaskDelayUntil+0xf0>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00a      	beq.n	8006e7c <vTaskDelayUntil+0x64>
	__asm volatile
 8006e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6a:	f383 8811 	msr	BASEPRI, r3
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	f3bf 8f4f 	dsb	sy
 8006e76:	60fb      	str	r3, [r7, #12]
}
 8006e78:	bf00      	nop
 8006e7a:	e7fe      	b.n	8006e7a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8006e7c:	f000 fa7c 	bl	8007378 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006e80:	4b22      	ldr	r3, [pc, #136]	; (8006f0c <vTaskDelayUntil+0xf4>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	683a      	ldr	r2, [r7, #0]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	6a3a      	ldr	r2, [r7, #32]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d20b      	bcs.n	8006eb2 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	69fa      	ldr	r2, [r7, #28]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d211      	bcs.n	8006ec8 <vTaskDelayUntil+0xb0>
 8006ea4:	69fa      	ldr	r2, [r7, #28]
 8006ea6:	6a3b      	ldr	r3, [r7, #32]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d90d      	bls.n	8006ec8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8006eac:	2301      	movs	r3, #1
 8006eae:	627b      	str	r3, [r7, #36]	; 0x24
 8006eb0:	e00a      	b.n	8006ec8 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	69fa      	ldr	r2, [r7, #28]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d303      	bcc.n	8006ec4 <vTaskDelayUntil+0xac>
 8006ebc:	69fa      	ldr	r2, [r7, #28]
 8006ebe:	6a3b      	ldr	r3, [r7, #32]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d901      	bls.n	8006ec8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	69fa      	ldr	r2, [r7, #28]
 8006ecc:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d006      	beq.n	8006ee2 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006ed4:	69fa      	ldr	r2, [r7, #28]
 8006ed6:	6a3b      	ldr	r3, [r7, #32]
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	2100      	movs	r1, #0
 8006edc:	4618      	mov	r0, r3
 8006ede:	f000 fcf9 	bl	80078d4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006ee2:	f000 fa57 	bl	8007394 <xTaskResumeAll>
 8006ee6:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d107      	bne.n	8006efe <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8006eee:	4b08      	ldr	r3, [pc, #32]	; (8006f10 <vTaskDelayUntil+0xf8>)
 8006ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ef4:	601a      	str	r2, [r3, #0]
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006efe:	bf00      	nop
 8006f00:	3728      	adds	r7, #40	; 0x28
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	20000850 	.word	0x20000850
 8006f0c:	2000082c 	.word	0x2000082c
 8006f10:	e000ed04 	.word	0xe000ed04

08006f14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d017      	beq.n	8006f56 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006f26:	4b13      	ldr	r3, [pc, #76]	; (8006f74 <vTaskDelay+0x60>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d00a      	beq.n	8006f44 <vTaskDelay+0x30>
	__asm volatile
 8006f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f32:	f383 8811 	msr	BASEPRI, r3
 8006f36:	f3bf 8f6f 	isb	sy
 8006f3a:	f3bf 8f4f 	dsb	sy
 8006f3e:	60bb      	str	r3, [r7, #8]
}
 8006f40:	bf00      	nop
 8006f42:	e7fe      	b.n	8006f42 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006f44:	f000 fa18 	bl	8007378 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006f48:	2100      	movs	r1, #0
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fcc2 	bl	80078d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006f50:	f000 fa20 	bl	8007394 <xTaskResumeAll>
 8006f54:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d107      	bne.n	8006f6c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006f5c:	4b06      	ldr	r3, [pc, #24]	; (8006f78 <vTaskDelay+0x64>)
 8006f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f62:	601a      	str	r2, [r3, #0]
 8006f64:	f3bf 8f4f 	dsb	sy
 8006f68:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f6c:	bf00      	nop
 8006f6e:	3710      	adds	r7, #16
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	20000850 	.word	0x20000850
 8006f78:	e000ed04 	.word	0xe000ed04

08006f7c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006f84:	f000 fe36 	bl	8007bf4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d102      	bne.n	8006f94 <vTaskSuspend+0x18>
 8006f8e:	4b3c      	ldr	r3, [pc, #240]	; (8007080 <vTaskSuspend+0x104>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	e000      	b.n	8006f96 <vTaskSuspend+0x1a>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	3304      	adds	r3, #4
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7ff fd67 	bl	8006a70 <uxListRemove>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d115      	bne.n	8006fd4 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fac:	4935      	ldr	r1, [pc, #212]	; (8007084 <vTaskSuspend+0x108>)
 8006fae:	4613      	mov	r3, r2
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	4413      	add	r3, r2
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	440b      	add	r3, r1
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d10a      	bne.n	8006fd4 <vTaskSuspend+0x58>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc2:	2201      	movs	r2, #1
 8006fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc8:	43da      	mvns	r2, r3
 8006fca:	4b2f      	ldr	r3, [pc, #188]	; (8007088 <vTaskSuspend+0x10c>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4013      	ands	r3, r2
 8006fd0:	4a2d      	ldr	r2, [pc, #180]	; (8007088 <vTaskSuspend+0x10c>)
 8006fd2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d004      	beq.n	8006fe6 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	3318      	adds	r3, #24
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f7ff fd45 	bl	8006a70 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	3304      	adds	r3, #4
 8006fea:	4619      	mov	r1, r3
 8006fec:	4827      	ldr	r0, [pc, #156]	; (800708c <vTaskSuspend+0x110>)
 8006fee:	f7ff fce2 	bl	80069b6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d103      	bne.n	8007006 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8007006:	f000 fe25 	bl	8007c54 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800700a:	4b21      	ldr	r3, [pc, #132]	; (8007090 <vTaskSuspend+0x114>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d005      	beq.n	800701e <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8007012:	f000 fdef 	bl	8007bf4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8007016:	f000 fc3d 	bl	8007894 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800701a:	f000 fe1b 	bl	8007c54 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800701e:	4b18      	ldr	r3, [pc, #96]	; (8007080 <vTaskSuspend+0x104>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	429a      	cmp	r2, r3
 8007026:	d127      	bne.n	8007078 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8007028:	4b19      	ldr	r3, [pc, #100]	; (8007090 <vTaskSuspend+0x114>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d017      	beq.n	8007060 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8007030:	4b18      	ldr	r3, [pc, #96]	; (8007094 <vTaskSuspend+0x118>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d00a      	beq.n	800704e <vTaskSuspend+0xd2>
	__asm volatile
 8007038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703c:	f383 8811 	msr	BASEPRI, r3
 8007040:	f3bf 8f6f 	isb	sy
 8007044:	f3bf 8f4f 	dsb	sy
 8007048:	60bb      	str	r3, [r7, #8]
}
 800704a:	bf00      	nop
 800704c:	e7fe      	b.n	800704c <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800704e:	4b12      	ldr	r3, [pc, #72]	; (8007098 <vTaskSuspend+0x11c>)
 8007050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007054:	601a      	str	r2, [r3, #0]
 8007056:	f3bf 8f4f 	dsb	sy
 800705a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800705e:	e00b      	b.n	8007078 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8007060:	4b0a      	ldr	r3, [pc, #40]	; (800708c <vTaskSuspend+0x110>)
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	4b0d      	ldr	r3, [pc, #52]	; (800709c <vTaskSuspend+0x120>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	429a      	cmp	r2, r3
 800706a:	d103      	bne.n	8007074 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 800706c:	4b04      	ldr	r3, [pc, #16]	; (8007080 <vTaskSuspend+0x104>)
 800706e:	2200      	movs	r2, #0
 8007070:	601a      	str	r2, [r3, #0]
	}
 8007072:	e001      	b.n	8007078 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8007074:	f000 faf2 	bl	800765c <vTaskSwitchContext>
	}
 8007078:	bf00      	nop
 800707a:	3710      	adds	r7, #16
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	20000728 	.word	0x20000728
 8007084:	2000072c 	.word	0x2000072c
 8007088:	20000830 	.word	0x20000830
 800708c:	20000814 	.word	0x20000814
 8007090:	20000834 	.word	0x20000834
 8007094:	20000850 	.word	0x20000850
 8007098:	e000ed04 	.word	0xe000ed04
 800709c:	20000828 	.word	0x20000828

080070a0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80070a0:	b480      	push	{r7}
 80070a2:	b087      	sub	sp, #28
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80070a8:	2300      	movs	r3, #0
 80070aa:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d10a      	bne.n	80070cc <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 80070b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ba:	f383 8811 	msr	BASEPRI, r3
 80070be:	f3bf 8f6f 	isb	sy
 80070c2:	f3bf 8f4f 	dsb	sy
 80070c6:	60fb      	str	r3, [r7, #12]
}
 80070c8:	bf00      	nop
 80070ca:	e7fe      	b.n	80070ca <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	695b      	ldr	r3, [r3, #20]
 80070d0:	4a0a      	ldr	r2, [pc, #40]	; (80070fc <prvTaskIsTaskSuspended+0x5c>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d10a      	bne.n	80070ec <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070da:	4a09      	ldr	r2, [pc, #36]	; (8007100 <prvTaskIsTaskSuspended+0x60>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d005      	beq.n	80070ec <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d101      	bne.n	80070ec <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80070e8:	2301      	movs	r3, #1
 80070ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070ec:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80070ee:	4618      	mov	r0, r3
 80070f0:	371c      	adds	r7, #28
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	20000814 	.word	0x20000814
 8007100:	200007e8 	.word	0x200007e8

08007104 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d10a      	bne.n	800712c <vTaskResume+0x28>
	__asm volatile
 8007116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711a:	f383 8811 	msr	BASEPRI, r3
 800711e:	f3bf 8f6f 	isb	sy
 8007122:	f3bf 8f4f 	dsb	sy
 8007126:	60bb      	str	r3, [r7, #8]
}
 8007128:	bf00      	nop
 800712a:	e7fe      	b.n	800712a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800712c:	4b20      	ldr	r3, [pc, #128]	; (80071b0 <vTaskResume+0xac>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	429a      	cmp	r2, r3
 8007134:	d037      	beq.n	80071a6 <vTaskResume+0xa2>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d034      	beq.n	80071a6 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 800713c:	f000 fd5a 	bl	8007bf4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8007140:	68f8      	ldr	r0, [r7, #12]
 8007142:	f7ff ffad 	bl	80070a0 <prvTaskIsTaskSuspended>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d02a      	beq.n	80071a2 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	3304      	adds	r3, #4
 8007150:	4618      	mov	r0, r3
 8007152:	f7ff fc8d 	bl	8006a70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715a:	2201      	movs	r2, #1
 800715c:	409a      	lsls	r2, r3
 800715e:	4b15      	ldr	r3, [pc, #84]	; (80071b4 <vTaskResume+0xb0>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4313      	orrs	r3, r2
 8007164:	4a13      	ldr	r2, [pc, #76]	; (80071b4 <vTaskResume+0xb0>)
 8007166:	6013      	str	r3, [r2, #0]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800716c:	4613      	mov	r3, r2
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	4413      	add	r3, r2
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	4a10      	ldr	r2, [pc, #64]	; (80071b8 <vTaskResume+0xb4>)
 8007176:	441a      	add	r2, r3
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	3304      	adds	r3, #4
 800717c:	4619      	mov	r1, r3
 800717e:	4610      	mov	r0, r2
 8007180:	f7ff fc19 	bl	80069b6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007188:	4b09      	ldr	r3, [pc, #36]	; (80071b0 <vTaskResume+0xac>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718e:	429a      	cmp	r2, r3
 8007190:	d307      	bcc.n	80071a2 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8007192:	4b0a      	ldr	r3, [pc, #40]	; (80071bc <vTaskResume+0xb8>)
 8007194:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007198:	601a      	str	r2, [r3, #0]
 800719a:	f3bf 8f4f 	dsb	sy
 800719e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80071a2:	f000 fd57 	bl	8007c54 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80071a6:	bf00      	nop
 80071a8:	3710      	adds	r7, #16
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	20000728 	.word	0x20000728
 80071b4:	20000830 	.word	0x20000830
 80071b8:	2000072c 	.word	0x2000072c
 80071bc:	e000ed04 	.word	0xe000ed04

080071c0 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b08a      	sub	sp, #40	; 0x28
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 80071c8:	2300      	movs	r3, #0
 80071ca:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d10a      	bne.n	80071ec <xTaskResumeFromISR+0x2c>
	__asm volatile
 80071d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071da:	f383 8811 	msr	BASEPRI, r3
 80071de:	f3bf 8f6f 	isb	sy
 80071e2:	f3bf 8f4f 	dsb	sy
 80071e6:	61bb      	str	r3, [r7, #24]
}
 80071e8:	bf00      	nop
 80071ea:	e7fe      	b.n	80071ea <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80071ec:	f000 fde4 	bl	8007db8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80071f0:	f3ef 8211 	mrs	r2, BASEPRI
 80071f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f8:	f383 8811 	msr	BASEPRI, r3
 80071fc:	f3bf 8f6f 	isb	sy
 8007200:	f3bf 8f4f 	dsb	sy
 8007204:	617a      	str	r2, [r7, #20]
 8007206:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007208:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800720a:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800720c:	6a38      	ldr	r0, [r7, #32]
 800720e:	f7ff ff47 	bl	80070a0 <prvTaskIsTaskSuspended>
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d02f      	beq.n	8007278 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007218:	4b1d      	ldr	r3, [pc, #116]	; (8007290 <xTaskResumeFromISR+0xd0>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d125      	bne.n	800726c <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007220:	6a3b      	ldr	r3, [r7, #32]
 8007222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007224:	4b1b      	ldr	r3, [pc, #108]	; (8007294 <xTaskResumeFromISR+0xd4>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722a:	429a      	cmp	r2, r3
 800722c:	d301      	bcc.n	8007232 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 800722e:	2301      	movs	r3, #1
 8007230:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007232:	6a3b      	ldr	r3, [r7, #32]
 8007234:	3304      	adds	r3, #4
 8007236:	4618      	mov	r0, r3
 8007238:	f7ff fc1a 	bl	8006a70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800723c:	6a3b      	ldr	r3, [r7, #32]
 800723e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007240:	2201      	movs	r2, #1
 8007242:	409a      	lsls	r2, r3
 8007244:	4b14      	ldr	r3, [pc, #80]	; (8007298 <xTaskResumeFromISR+0xd8>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4313      	orrs	r3, r2
 800724a:	4a13      	ldr	r2, [pc, #76]	; (8007298 <xTaskResumeFromISR+0xd8>)
 800724c:	6013      	str	r3, [r2, #0]
 800724e:	6a3b      	ldr	r3, [r7, #32]
 8007250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007252:	4613      	mov	r3, r2
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	4413      	add	r3, r2
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	4a10      	ldr	r2, [pc, #64]	; (800729c <xTaskResumeFromISR+0xdc>)
 800725c:	441a      	add	r2, r3
 800725e:	6a3b      	ldr	r3, [r7, #32]
 8007260:	3304      	adds	r3, #4
 8007262:	4619      	mov	r1, r3
 8007264:	4610      	mov	r0, r2
 8007266:	f7ff fba6 	bl	80069b6 <vListInsertEnd>
 800726a:	e005      	b.n	8007278 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800726c:	6a3b      	ldr	r3, [r7, #32]
 800726e:	3318      	adds	r3, #24
 8007270:	4619      	mov	r1, r3
 8007272:	480b      	ldr	r0, [pc, #44]	; (80072a0 <xTaskResumeFromISR+0xe0>)
 8007274:	f7ff fb9f 	bl	80069b6 <vListInsertEnd>
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007282:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8007284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007286:	4618      	mov	r0, r3
 8007288:	3728      	adds	r7, #40	; 0x28
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	20000850 	.word	0x20000850
 8007294:	20000728 	.word	0x20000728
 8007298:	20000830 	.word	0x20000830
 800729c:	2000072c 	.word	0x2000072c
 80072a0:	200007e8 	.word	0x200007e8

080072a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b08a      	sub	sp, #40	; 0x28
 80072a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80072aa:	2300      	movs	r3, #0
 80072ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80072ae:	2300      	movs	r3, #0
 80072b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80072b2:	463a      	mov	r2, r7
 80072b4:	1d39      	adds	r1, r7, #4
 80072b6:	f107 0308 	add.w	r3, r7, #8
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7f9 fdf6 	bl	8000eac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80072c0:	6839      	ldr	r1, [r7, #0]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	68ba      	ldr	r2, [r7, #8]
 80072c6:	9202      	str	r2, [sp, #8]
 80072c8:	9301      	str	r3, [sp, #4]
 80072ca:	2300      	movs	r3, #0
 80072cc:	9300      	str	r3, [sp, #0]
 80072ce:	2300      	movs	r3, #0
 80072d0:	460a      	mov	r2, r1
 80072d2:	4921      	ldr	r1, [pc, #132]	; (8007358 <vTaskStartScheduler+0xb4>)
 80072d4:	4821      	ldr	r0, [pc, #132]	; (800735c <vTaskStartScheduler+0xb8>)
 80072d6:	f7ff fbf5 	bl	8006ac4 <xTaskCreateStatic>
 80072da:	4603      	mov	r3, r0
 80072dc:	4a20      	ldr	r2, [pc, #128]	; (8007360 <vTaskStartScheduler+0xbc>)
 80072de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80072e0:	4b1f      	ldr	r3, [pc, #124]	; (8007360 <vTaskStartScheduler+0xbc>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d002      	beq.n	80072ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80072e8:	2301      	movs	r3, #1
 80072ea:	617b      	str	r3, [r7, #20]
 80072ec:	e001      	b.n	80072f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80072ee:	2300      	movs	r3, #0
 80072f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d11b      	bne.n	8007330 <vTaskStartScheduler+0x8c>
	__asm volatile
 80072f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fc:	f383 8811 	msr	BASEPRI, r3
 8007300:	f3bf 8f6f 	isb	sy
 8007304:	f3bf 8f4f 	dsb	sy
 8007308:	613b      	str	r3, [r7, #16]
}
 800730a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800730c:	4b15      	ldr	r3, [pc, #84]	; (8007364 <vTaskStartScheduler+0xc0>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	334c      	adds	r3, #76	; 0x4c
 8007312:	4a15      	ldr	r2, [pc, #84]	; (8007368 <vTaskStartScheduler+0xc4>)
 8007314:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007316:	4b15      	ldr	r3, [pc, #84]	; (800736c <vTaskStartScheduler+0xc8>)
 8007318:	f04f 32ff 	mov.w	r2, #4294967295
 800731c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800731e:	4b14      	ldr	r3, [pc, #80]	; (8007370 <vTaskStartScheduler+0xcc>)
 8007320:	2201      	movs	r2, #1
 8007322:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007324:	4b13      	ldr	r3, [pc, #76]	; (8007374 <vTaskStartScheduler+0xd0>)
 8007326:	2200      	movs	r2, #0
 8007328:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800732a:	f000 fbc1 	bl	8007ab0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800732e:	e00e      	b.n	800734e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007336:	d10a      	bne.n	800734e <vTaskStartScheduler+0xaa>
	__asm volatile
 8007338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733c:	f383 8811 	msr	BASEPRI, r3
 8007340:	f3bf 8f6f 	isb	sy
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	60fb      	str	r3, [r7, #12]
}
 800734a:	bf00      	nop
 800734c:	e7fe      	b.n	800734c <vTaskStartScheduler+0xa8>
}
 800734e:	bf00      	nop
 8007350:	3718      	adds	r7, #24
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	0800b28c 	.word	0x0800b28c
 800735c:	08007721 	.word	0x08007721
 8007360:	2000084c 	.word	0x2000084c
 8007364:	20000728 	.word	0x20000728
 8007368:	200000d4 	.word	0x200000d4
 800736c:	20000848 	.word	0x20000848
 8007370:	20000834 	.word	0x20000834
 8007374:	2000082c 	.word	0x2000082c

08007378 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007378:	b480      	push	{r7}
 800737a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800737c:	4b04      	ldr	r3, [pc, #16]	; (8007390 <vTaskSuspendAll+0x18>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	3301      	adds	r3, #1
 8007382:	4a03      	ldr	r2, [pc, #12]	; (8007390 <vTaskSuspendAll+0x18>)
 8007384:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007386:	bf00      	nop
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr
 8007390:	20000850 	.word	0x20000850

08007394 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800739a:	2300      	movs	r3, #0
 800739c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800739e:	2300      	movs	r3, #0
 80073a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80073a2:	4b41      	ldr	r3, [pc, #260]	; (80074a8 <xTaskResumeAll+0x114>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d10a      	bne.n	80073c0 <xTaskResumeAll+0x2c>
	__asm volatile
 80073aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ae:	f383 8811 	msr	BASEPRI, r3
 80073b2:	f3bf 8f6f 	isb	sy
 80073b6:	f3bf 8f4f 	dsb	sy
 80073ba:	603b      	str	r3, [r7, #0]
}
 80073bc:	bf00      	nop
 80073be:	e7fe      	b.n	80073be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80073c0:	f000 fc18 	bl	8007bf4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80073c4:	4b38      	ldr	r3, [pc, #224]	; (80074a8 <xTaskResumeAll+0x114>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	3b01      	subs	r3, #1
 80073ca:	4a37      	ldr	r2, [pc, #220]	; (80074a8 <xTaskResumeAll+0x114>)
 80073cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073ce:	4b36      	ldr	r3, [pc, #216]	; (80074a8 <xTaskResumeAll+0x114>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d161      	bne.n	800749a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80073d6:	4b35      	ldr	r3, [pc, #212]	; (80074ac <xTaskResumeAll+0x118>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d05d      	beq.n	800749a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073de:	e02e      	b.n	800743e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073e0:	4b33      	ldr	r3, [pc, #204]	; (80074b0 <xTaskResumeAll+0x11c>)
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	3318      	adds	r3, #24
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7ff fb3f 	bl	8006a70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	3304      	adds	r3, #4
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7ff fb3a 	bl	8006a70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007400:	2201      	movs	r2, #1
 8007402:	409a      	lsls	r2, r3
 8007404:	4b2b      	ldr	r3, [pc, #172]	; (80074b4 <xTaskResumeAll+0x120>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4313      	orrs	r3, r2
 800740a:	4a2a      	ldr	r2, [pc, #168]	; (80074b4 <xTaskResumeAll+0x120>)
 800740c:	6013      	str	r3, [r2, #0]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007412:	4613      	mov	r3, r2
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	4413      	add	r3, r2
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	4a27      	ldr	r2, [pc, #156]	; (80074b8 <xTaskResumeAll+0x124>)
 800741c:	441a      	add	r2, r3
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	3304      	adds	r3, #4
 8007422:	4619      	mov	r1, r3
 8007424:	4610      	mov	r0, r2
 8007426:	f7ff fac6 	bl	80069b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800742e:	4b23      	ldr	r3, [pc, #140]	; (80074bc <xTaskResumeAll+0x128>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007434:	429a      	cmp	r2, r3
 8007436:	d302      	bcc.n	800743e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007438:	4b21      	ldr	r3, [pc, #132]	; (80074c0 <xTaskResumeAll+0x12c>)
 800743a:	2201      	movs	r2, #1
 800743c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800743e:	4b1c      	ldr	r3, [pc, #112]	; (80074b0 <xTaskResumeAll+0x11c>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1cc      	bne.n	80073e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d001      	beq.n	8007450 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800744c:	f000 fa22 	bl	8007894 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007450:	4b1c      	ldr	r3, [pc, #112]	; (80074c4 <xTaskResumeAll+0x130>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d010      	beq.n	800747e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800745c:	f000 f846 	bl	80074ec <xTaskIncrementTick>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d002      	beq.n	800746c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007466:	4b16      	ldr	r3, [pc, #88]	; (80074c0 <xTaskResumeAll+0x12c>)
 8007468:	2201      	movs	r2, #1
 800746a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	3b01      	subs	r3, #1
 8007470:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d1f1      	bne.n	800745c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007478:	4b12      	ldr	r3, [pc, #72]	; (80074c4 <xTaskResumeAll+0x130>)
 800747a:	2200      	movs	r2, #0
 800747c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800747e:	4b10      	ldr	r3, [pc, #64]	; (80074c0 <xTaskResumeAll+0x12c>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d009      	beq.n	800749a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007486:	2301      	movs	r3, #1
 8007488:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800748a:	4b0f      	ldr	r3, [pc, #60]	; (80074c8 <xTaskResumeAll+0x134>)
 800748c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007490:	601a      	str	r2, [r3, #0]
 8007492:	f3bf 8f4f 	dsb	sy
 8007496:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800749a:	f000 fbdb 	bl	8007c54 <vPortExitCritical>

	return xAlreadyYielded;
 800749e:	68bb      	ldr	r3, [r7, #8]
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	20000850 	.word	0x20000850
 80074ac:	20000828 	.word	0x20000828
 80074b0:	200007e8 	.word	0x200007e8
 80074b4:	20000830 	.word	0x20000830
 80074b8:	2000072c 	.word	0x2000072c
 80074bc:	20000728 	.word	0x20000728
 80074c0:	2000083c 	.word	0x2000083c
 80074c4:	20000838 	.word	0x20000838
 80074c8:	e000ed04 	.word	0xe000ed04

080074cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80074d2:	4b05      	ldr	r3, [pc, #20]	; (80074e8 <xTaskGetTickCount+0x1c>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80074d8:	687b      	ldr	r3, [r7, #4]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	370c      	adds	r7, #12
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	2000082c 	.word	0x2000082c

080074ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b086      	sub	sp, #24
 80074f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80074f2:	2300      	movs	r3, #0
 80074f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074f6:	4b4e      	ldr	r3, [pc, #312]	; (8007630 <xTaskIncrementTick+0x144>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	f040 808e 	bne.w	800761c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007500:	4b4c      	ldr	r3, [pc, #304]	; (8007634 <xTaskIncrementTick+0x148>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	3301      	adds	r3, #1
 8007506:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007508:	4a4a      	ldr	r2, [pc, #296]	; (8007634 <xTaskIncrementTick+0x148>)
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d120      	bne.n	8007556 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007514:	4b48      	ldr	r3, [pc, #288]	; (8007638 <xTaskIncrementTick+0x14c>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00a      	beq.n	8007534 <xTaskIncrementTick+0x48>
	__asm volatile
 800751e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007522:	f383 8811 	msr	BASEPRI, r3
 8007526:	f3bf 8f6f 	isb	sy
 800752a:	f3bf 8f4f 	dsb	sy
 800752e:	603b      	str	r3, [r7, #0]
}
 8007530:	bf00      	nop
 8007532:	e7fe      	b.n	8007532 <xTaskIncrementTick+0x46>
 8007534:	4b40      	ldr	r3, [pc, #256]	; (8007638 <xTaskIncrementTick+0x14c>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	60fb      	str	r3, [r7, #12]
 800753a:	4b40      	ldr	r3, [pc, #256]	; (800763c <xTaskIncrementTick+0x150>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a3e      	ldr	r2, [pc, #248]	; (8007638 <xTaskIncrementTick+0x14c>)
 8007540:	6013      	str	r3, [r2, #0]
 8007542:	4a3e      	ldr	r2, [pc, #248]	; (800763c <xTaskIncrementTick+0x150>)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6013      	str	r3, [r2, #0]
 8007548:	4b3d      	ldr	r3, [pc, #244]	; (8007640 <xTaskIncrementTick+0x154>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	3301      	adds	r3, #1
 800754e:	4a3c      	ldr	r2, [pc, #240]	; (8007640 <xTaskIncrementTick+0x154>)
 8007550:	6013      	str	r3, [r2, #0]
 8007552:	f000 f99f 	bl	8007894 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007556:	4b3b      	ldr	r3, [pc, #236]	; (8007644 <xTaskIncrementTick+0x158>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	693a      	ldr	r2, [r7, #16]
 800755c:	429a      	cmp	r2, r3
 800755e:	d348      	bcc.n	80075f2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007560:	4b35      	ldr	r3, [pc, #212]	; (8007638 <xTaskIncrementTick+0x14c>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d104      	bne.n	8007574 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800756a:	4b36      	ldr	r3, [pc, #216]	; (8007644 <xTaskIncrementTick+0x158>)
 800756c:	f04f 32ff 	mov.w	r2, #4294967295
 8007570:	601a      	str	r2, [r3, #0]
					break;
 8007572:	e03e      	b.n	80075f2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007574:	4b30      	ldr	r3, [pc, #192]	; (8007638 <xTaskIncrementTick+0x14c>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007584:	693a      	ldr	r2, [r7, #16]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	429a      	cmp	r2, r3
 800758a:	d203      	bcs.n	8007594 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800758c:	4a2d      	ldr	r2, [pc, #180]	; (8007644 <xTaskIncrementTick+0x158>)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007592:	e02e      	b.n	80075f2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	3304      	adds	r3, #4
 8007598:	4618      	mov	r0, r3
 800759a:	f7ff fa69 	bl	8006a70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d004      	beq.n	80075b0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	3318      	adds	r3, #24
 80075aa:	4618      	mov	r0, r3
 80075ac:	f7ff fa60 	bl	8006a70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b4:	2201      	movs	r2, #1
 80075b6:	409a      	lsls	r2, r3
 80075b8:	4b23      	ldr	r3, [pc, #140]	; (8007648 <xTaskIncrementTick+0x15c>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4313      	orrs	r3, r2
 80075be:	4a22      	ldr	r2, [pc, #136]	; (8007648 <xTaskIncrementTick+0x15c>)
 80075c0:	6013      	str	r3, [r2, #0]
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075c6:	4613      	mov	r3, r2
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	4413      	add	r3, r2
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	4a1f      	ldr	r2, [pc, #124]	; (800764c <xTaskIncrementTick+0x160>)
 80075d0:	441a      	add	r2, r3
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	3304      	adds	r3, #4
 80075d6:	4619      	mov	r1, r3
 80075d8:	4610      	mov	r0, r2
 80075da:	f7ff f9ec 	bl	80069b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075e2:	4b1b      	ldr	r3, [pc, #108]	; (8007650 <xTaskIncrementTick+0x164>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d3b9      	bcc.n	8007560 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80075ec:	2301      	movs	r3, #1
 80075ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075f0:	e7b6      	b.n	8007560 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80075f2:	4b17      	ldr	r3, [pc, #92]	; (8007650 <xTaskIncrementTick+0x164>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f8:	4914      	ldr	r1, [pc, #80]	; (800764c <xTaskIncrementTick+0x160>)
 80075fa:	4613      	mov	r3, r2
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	4413      	add	r3, r2
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	440b      	add	r3, r1
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2b01      	cmp	r3, #1
 8007608:	d901      	bls.n	800760e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800760a:	2301      	movs	r3, #1
 800760c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800760e:	4b11      	ldr	r3, [pc, #68]	; (8007654 <xTaskIncrementTick+0x168>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d007      	beq.n	8007626 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007616:	2301      	movs	r3, #1
 8007618:	617b      	str	r3, [r7, #20]
 800761a:	e004      	b.n	8007626 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800761c:	4b0e      	ldr	r3, [pc, #56]	; (8007658 <xTaskIncrementTick+0x16c>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	3301      	adds	r3, #1
 8007622:	4a0d      	ldr	r2, [pc, #52]	; (8007658 <xTaskIncrementTick+0x16c>)
 8007624:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007626:	697b      	ldr	r3, [r7, #20]
}
 8007628:	4618      	mov	r0, r3
 800762a:	3718      	adds	r7, #24
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	20000850 	.word	0x20000850
 8007634:	2000082c 	.word	0x2000082c
 8007638:	200007e0 	.word	0x200007e0
 800763c:	200007e4 	.word	0x200007e4
 8007640:	20000840 	.word	0x20000840
 8007644:	20000848 	.word	0x20000848
 8007648:	20000830 	.word	0x20000830
 800764c:	2000072c 	.word	0x2000072c
 8007650:	20000728 	.word	0x20000728
 8007654:	2000083c 	.word	0x2000083c
 8007658:	20000838 	.word	0x20000838

0800765c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800765c:	b480      	push	{r7}
 800765e:	b087      	sub	sp, #28
 8007660:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007662:	4b29      	ldr	r3, [pc, #164]	; (8007708 <vTaskSwitchContext+0xac>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d003      	beq.n	8007672 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800766a:	4b28      	ldr	r3, [pc, #160]	; (800770c <vTaskSwitchContext+0xb0>)
 800766c:	2201      	movs	r2, #1
 800766e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007670:	e044      	b.n	80076fc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007672:	4b26      	ldr	r3, [pc, #152]	; (800770c <vTaskSwitchContext+0xb0>)
 8007674:	2200      	movs	r2, #0
 8007676:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007678:	4b25      	ldr	r3, [pc, #148]	; (8007710 <vTaskSwitchContext+0xb4>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	fab3 f383 	clz	r3, r3
 8007684:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007686:	7afb      	ldrb	r3, [r7, #11]
 8007688:	f1c3 031f 	rsb	r3, r3, #31
 800768c:	617b      	str	r3, [r7, #20]
 800768e:	4921      	ldr	r1, [pc, #132]	; (8007714 <vTaskSwitchContext+0xb8>)
 8007690:	697a      	ldr	r2, [r7, #20]
 8007692:	4613      	mov	r3, r2
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	4413      	add	r3, r2
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	440b      	add	r3, r1
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d10a      	bne.n	80076b8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80076a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a6:	f383 8811 	msr	BASEPRI, r3
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	607b      	str	r3, [r7, #4]
}
 80076b4:	bf00      	nop
 80076b6:	e7fe      	b.n	80076b6 <vTaskSwitchContext+0x5a>
 80076b8:	697a      	ldr	r2, [r7, #20]
 80076ba:	4613      	mov	r3, r2
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	4413      	add	r3, r2
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	4a14      	ldr	r2, [pc, #80]	; (8007714 <vTaskSwitchContext+0xb8>)
 80076c4:	4413      	add	r3, r2
 80076c6:	613b      	str	r3, [r7, #16]
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	685a      	ldr	r2, [r3, #4]
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	605a      	str	r2, [r3, #4]
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	685a      	ldr	r2, [r3, #4]
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	3308      	adds	r3, #8
 80076da:	429a      	cmp	r2, r3
 80076dc:	d104      	bne.n	80076e8 <vTaskSwitchContext+0x8c>
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	685a      	ldr	r2, [r3, #4]
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	605a      	str	r2, [r3, #4]
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	4a0a      	ldr	r2, [pc, #40]	; (8007718 <vTaskSwitchContext+0xbc>)
 80076f0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80076f2:	4b09      	ldr	r3, [pc, #36]	; (8007718 <vTaskSwitchContext+0xbc>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	334c      	adds	r3, #76	; 0x4c
 80076f8:	4a08      	ldr	r2, [pc, #32]	; (800771c <vTaskSwitchContext+0xc0>)
 80076fa:	6013      	str	r3, [r2, #0]
}
 80076fc:	bf00      	nop
 80076fe:	371c      	adds	r7, #28
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr
 8007708:	20000850 	.word	0x20000850
 800770c:	2000083c 	.word	0x2000083c
 8007710:	20000830 	.word	0x20000830
 8007714:	2000072c 	.word	0x2000072c
 8007718:	20000728 	.word	0x20000728
 800771c:	200000d4 	.word	0x200000d4

08007720 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007728:	f000 f852 	bl	80077d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800772c:	4b06      	ldr	r3, [pc, #24]	; (8007748 <prvIdleTask+0x28>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d9f9      	bls.n	8007728 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007734:	4b05      	ldr	r3, [pc, #20]	; (800774c <prvIdleTask+0x2c>)
 8007736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800773a:	601a      	str	r2, [r3, #0]
 800773c:	f3bf 8f4f 	dsb	sy
 8007740:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007744:	e7f0      	b.n	8007728 <prvIdleTask+0x8>
 8007746:	bf00      	nop
 8007748:	2000072c 	.word	0x2000072c
 800774c:	e000ed04 	.word	0xe000ed04

08007750 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b082      	sub	sp, #8
 8007754:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007756:	2300      	movs	r3, #0
 8007758:	607b      	str	r3, [r7, #4]
 800775a:	e00c      	b.n	8007776 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	4613      	mov	r3, r2
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	4413      	add	r3, r2
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	4a12      	ldr	r2, [pc, #72]	; (80077b0 <prvInitialiseTaskLists+0x60>)
 8007768:	4413      	add	r3, r2
 800776a:	4618      	mov	r0, r3
 800776c:	f7ff f8f6 	bl	800695c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	3301      	adds	r3, #1
 8007774:	607b      	str	r3, [r7, #4]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2b06      	cmp	r3, #6
 800777a:	d9ef      	bls.n	800775c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800777c:	480d      	ldr	r0, [pc, #52]	; (80077b4 <prvInitialiseTaskLists+0x64>)
 800777e:	f7ff f8ed 	bl	800695c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007782:	480d      	ldr	r0, [pc, #52]	; (80077b8 <prvInitialiseTaskLists+0x68>)
 8007784:	f7ff f8ea 	bl	800695c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007788:	480c      	ldr	r0, [pc, #48]	; (80077bc <prvInitialiseTaskLists+0x6c>)
 800778a:	f7ff f8e7 	bl	800695c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800778e:	480c      	ldr	r0, [pc, #48]	; (80077c0 <prvInitialiseTaskLists+0x70>)
 8007790:	f7ff f8e4 	bl	800695c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007794:	480b      	ldr	r0, [pc, #44]	; (80077c4 <prvInitialiseTaskLists+0x74>)
 8007796:	f7ff f8e1 	bl	800695c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800779a:	4b0b      	ldr	r3, [pc, #44]	; (80077c8 <prvInitialiseTaskLists+0x78>)
 800779c:	4a05      	ldr	r2, [pc, #20]	; (80077b4 <prvInitialiseTaskLists+0x64>)
 800779e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80077a0:	4b0a      	ldr	r3, [pc, #40]	; (80077cc <prvInitialiseTaskLists+0x7c>)
 80077a2:	4a05      	ldr	r2, [pc, #20]	; (80077b8 <prvInitialiseTaskLists+0x68>)
 80077a4:	601a      	str	r2, [r3, #0]
}
 80077a6:	bf00      	nop
 80077a8:	3708      	adds	r7, #8
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	2000072c 	.word	0x2000072c
 80077b4:	200007b8 	.word	0x200007b8
 80077b8:	200007cc 	.word	0x200007cc
 80077bc:	200007e8 	.word	0x200007e8
 80077c0:	200007fc 	.word	0x200007fc
 80077c4:	20000814 	.word	0x20000814
 80077c8:	200007e0 	.word	0x200007e0
 80077cc:	200007e4 	.word	0x200007e4

080077d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077d6:	e019      	b.n	800780c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80077d8:	f000 fa0c 	bl	8007bf4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077dc:	4b10      	ldr	r3, [pc, #64]	; (8007820 <prvCheckTasksWaitingTermination+0x50>)
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	3304      	adds	r3, #4
 80077e8:	4618      	mov	r0, r3
 80077ea:	f7ff f941 	bl	8006a70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80077ee:	4b0d      	ldr	r3, [pc, #52]	; (8007824 <prvCheckTasksWaitingTermination+0x54>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	3b01      	subs	r3, #1
 80077f4:	4a0b      	ldr	r2, [pc, #44]	; (8007824 <prvCheckTasksWaitingTermination+0x54>)
 80077f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80077f8:	4b0b      	ldr	r3, [pc, #44]	; (8007828 <prvCheckTasksWaitingTermination+0x58>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	3b01      	subs	r3, #1
 80077fe:	4a0a      	ldr	r2, [pc, #40]	; (8007828 <prvCheckTasksWaitingTermination+0x58>)
 8007800:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007802:	f000 fa27 	bl	8007c54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 f810 	bl	800782c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800780c:	4b06      	ldr	r3, [pc, #24]	; (8007828 <prvCheckTasksWaitingTermination+0x58>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d1e1      	bne.n	80077d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007814:	bf00      	nop
 8007816:	bf00      	nop
 8007818:	3708      	adds	r7, #8
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	200007fc 	.word	0x200007fc
 8007824:	20000828 	.word	0x20000828
 8007828:	20000810 	.word	0x20000810

0800782c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	334c      	adds	r3, #76	; 0x4c
 8007838:	4618      	mov	r0, r3
 800783a:	f001 fb2d 	bl	8008e98 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007844:	2b00      	cmp	r3, #0
 8007846:	d108      	bne.n	800785a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800784c:	4618      	mov	r0, r3
 800784e:	f000 fbbf 	bl	8007fd0 <vPortFree>
				vPortFree( pxTCB );
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 fbbc 	bl	8007fd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007858:	e018      	b.n	800788c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007860:	2b01      	cmp	r3, #1
 8007862:	d103      	bne.n	800786c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 fbb3 	bl	8007fd0 <vPortFree>
	}
 800786a:	e00f      	b.n	800788c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007872:	2b02      	cmp	r3, #2
 8007874:	d00a      	beq.n	800788c <prvDeleteTCB+0x60>
	__asm volatile
 8007876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787a:	f383 8811 	msr	BASEPRI, r3
 800787e:	f3bf 8f6f 	isb	sy
 8007882:	f3bf 8f4f 	dsb	sy
 8007886:	60fb      	str	r3, [r7, #12]
}
 8007888:	bf00      	nop
 800788a:	e7fe      	b.n	800788a <prvDeleteTCB+0x5e>
	}
 800788c:	bf00      	nop
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800789a:	4b0c      	ldr	r3, [pc, #48]	; (80078cc <prvResetNextTaskUnblockTime+0x38>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d104      	bne.n	80078ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80078a4:	4b0a      	ldr	r3, [pc, #40]	; (80078d0 <prvResetNextTaskUnblockTime+0x3c>)
 80078a6:	f04f 32ff 	mov.w	r2, #4294967295
 80078aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80078ac:	e008      	b.n	80078c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078ae:	4b07      	ldr	r3, [pc, #28]	; (80078cc <prvResetNextTaskUnblockTime+0x38>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	4a04      	ldr	r2, [pc, #16]	; (80078d0 <prvResetNextTaskUnblockTime+0x3c>)
 80078be:	6013      	str	r3, [r2, #0]
}
 80078c0:	bf00      	nop
 80078c2:	370c      	adds	r7, #12
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr
 80078cc:	200007e0 	.word	0x200007e0
 80078d0:	20000848 	.word	0x20000848

080078d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80078de:	4b29      	ldr	r3, [pc, #164]	; (8007984 <prvAddCurrentTaskToDelayedList+0xb0>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078e4:	4b28      	ldr	r3, [pc, #160]	; (8007988 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	3304      	adds	r3, #4
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7ff f8c0 	bl	8006a70 <uxListRemove>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d10b      	bne.n	800790e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80078f6:	4b24      	ldr	r3, [pc, #144]	; (8007988 <prvAddCurrentTaskToDelayedList+0xb4>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fc:	2201      	movs	r2, #1
 80078fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007902:	43da      	mvns	r2, r3
 8007904:	4b21      	ldr	r3, [pc, #132]	; (800798c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4013      	ands	r3, r2
 800790a:	4a20      	ldr	r2, [pc, #128]	; (800798c <prvAddCurrentTaskToDelayedList+0xb8>)
 800790c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007914:	d10a      	bne.n	800792c <prvAddCurrentTaskToDelayedList+0x58>
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d007      	beq.n	800792c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800791c:	4b1a      	ldr	r3, [pc, #104]	; (8007988 <prvAddCurrentTaskToDelayedList+0xb4>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	3304      	adds	r3, #4
 8007922:	4619      	mov	r1, r3
 8007924:	481a      	ldr	r0, [pc, #104]	; (8007990 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007926:	f7ff f846 	bl	80069b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800792a:	e026      	b.n	800797a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4413      	add	r3, r2
 8007932:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007934:	4b14      	ldr	r3, [pc, #80]	; (8007988 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	68ba      	ldr	r2, [r7, #8]
 800793a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800793c:	68ba      	ldr	r2, [r7, #8]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	429a      	cmp	r2, r3
 8007942:	d209      	bcs.n	8007958 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007944:	4b13      	ldr	r3, [pc, #76]	; (8007994 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	4b0f      	ldr	r3, [pc, #60]	; (8007988 <prvAddCurrentTaskToDelayedList+0xb4>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	3304      	adds	r3, #4
 800794e:	4619      	mov	r1, r3
 8007950:	4610      	mov	r0, r2
 8007952:	f7ff f854 	bl	80069fe <vListInsert>
}
 8007956:	e010      	b.n	800797a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007958:	4b0f      	ldr	r3, [pc, #60]	; (8007998 <prvAddCurrentTaskToDelayedList+0xc4>)
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	4b0a      	ldr	r3, [pc, #40]	; (8007988 <prvAddCurrentTaskToDelayedList+0xb4>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	3304      	adds	r3, #4
 8007962:	4619      	mov	r1, r3
 8007964:	4610      	mov	r0, r2
 8007966:	f7ff f84a 	bl	80069fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800796a:	4b0c      	ldr	r3, [pc, #48]	; (800799c <prvAddCurrentTaskToDelayedList+0xc8>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	68ba      	ldr	r2, [r7, #8]
 8007970:	429a      	cmp	r2, r3
 8007972:	d202      	bcs.n	800797a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007974:	4a09      	ldr	r2, [pc, #36]	; (800799c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	6013      	str	r3, [r2, #0]
}
 800797a:	bf00      	nop
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	2000082c 	.word	0x2000082c
 8007988:	20000728 	.word	0x20000728
 800798c:	20000830 	.word	0x20000830
 8007990:	20000814 	.word	0x20000814
 8007994:	200007e4 	.word	0x200007e4
 8007998:	200007e0 	.word	0x200007e0
 800799c:	20000848 	.word	0x20000848

080079a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80079a0:	b480      	push	{r7}
 80079a2:	b085      	sub	sp, #20
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	3b04      	subs	r3, #4
 80079b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80079b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	3b04      	subs	r3, #4
 80079be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	f023 0201 	bic.w	r2, r3, #1
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	3b04      	subs	r3, #4
 80079ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80079d0:	4a0c      	ldr	r2, [pc, #48]	; (8007a04 <pxPortInitialiseStack+0x64>)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	3b14      	subs	r3, #20
 80079da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	3b04      	subs	r3, #4
 80079e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f06f 0202 	mvn.w	r2, #2
 80079ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	3b20      	subs	r3, #32
 80079f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80079f6:	68fb      	ldr	r3, [r7, #12]
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3714      	adds	r7, #20
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr
 8007a04:	08007a09 	.word	0x08007a09

08007a08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007a12:	4b12      	ldr	r3, [pc, #72]	; (8007a5c <prvTaskExitError+0x54>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a1a:	d00a      	beq.n	8007a32 <prvTaskExitError+0x2a>
	__asm volatile
 8007a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a20:	f383 8811 	msr	BASEPRI, r3
 8007a24:	f3bf 8f6f 	isb	sy
 8007a28:	f3bf 8f4f 	dsb	sy
 8007a2c:	60fb      	str	r3, [r7, #12]
}
 8007a2e:	bf00      	nop
 8007a30:	e7fe      	b.n	8007a30 <prvTaskExitError+0x28>
	__asm volatile
 8007a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a36:	f383 8811 	msr	BASEPRI, r3
 8007a3a:	f3bf 8f6f 	isb	sy
 8007a3e:	f3bf 8f4f 	dsb	sy
 8007a42:	60bb      	str	r3, [r7, #8]
}
 8007a44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007a46:	bf00      	nop
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d0fc      	beq.n	8007a48 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007a4e:	bf00      	nop
 8007a50:	bf00      	nop
 8007a52:	3714      	adds	r7, #20
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr
 8007a5c:	200000d0 	.word	0x200000d0

08007a60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007a60:	4b07      	ldr	r3, [pc, #28]	; (8007a80 <pxCurrentTCBConst2>)
 8007a62:	6819      	ldr	r1, [r3, #0]
 8007a64:	6808      	ldr	r0, [r1, #0]
 8007a66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a6a:	f380 8809 	msr	PSP, r0
 8007a6e:	f3bf 8f6f 	isb	sy
 8007a72:	f04f 0000 	mov.w	r0, #0
 8007a76:	f380 8811 	msr	BASEPRI, r0
 8007a7a:	4770      	bx	lr
 8007a7c:	f3af 8000 	nop.w

08007a80 <pxCurrentTCBConst2>:
 8007a80:	20000728 	.word	0x20000728
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007a84:	bf00      	nop
 8007a86:	bf00      	nop

08007a88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007a88:	4808      	ldr	r0, [pc, #32]	; (8007aac <prvPortStartFirstTask+0x24>)
 8007a8a:	6800      	ldr	r0, [r0, #0]
 8007a8c:	6800      	ldr	r0, [r0, #0]
 8007a8e:	f380 8808 	msr	MSP, r0
 8007a92:	f04f 0000 	mov.w	r0, #0
 8007a96:	f380 8814 	msr	CONTROL, r0
 8007a9a:	b662      	cpsie	i
 8007a9c:	b661      	cpsie	f
 8007a9e:	f3bf 8f4f 	dsb	sy
 8007aa2:	f3bf 8f6f 	isb	sy
 8007aa6:	df00      	svc	0
 8007aa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007aaa:	bf00      	nop
 8007aac:	e000ed08 	.word	0xe000ed08

08007ab0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007ab6:	4b46      	ldr	r3, [pc, #280]	; (8007bd0 <xPortStartScheduler+0x120>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a46      	ldr	r2, [pc, #280]	; (8007bd4 <xPortStartScheduler+0x124>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d10a      	bne.n	8007ad6 <xPortStartScheduler+0x26>
	__asm volatile
 8007ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac4:	f383 8811 	msr	BASEPRI, r3
 8007ac8:	f3bf 8f6f 	isb	sy
 8007acc:	f3bf 8f4f 	dsb	sy
 8007ad0:	613b      	str	r3, [r7, #16]
}
 8007ad2:	bf00      	nop
 8007ad4:	e7fe      	b.n	8007ad4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007ad6:	4b3e      	ldr	r3, [pc, #248]	; (8007bd0 <xPortStartScheduler+0x120>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a3f      	ldr	r2, [pc, #252]	; (8007bd8 <xPortStartScheduler+0x128>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d10a      	bne.n	8007af6 <xPortStartScheduler+0x46>
	__asm volatile
 8007ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae4:	f383 8811 	msr	BASEPRI, r3
 8007ae8:	f3bf 8f6f 	isb	sy
 8007aec:	f3bf 8f4f 	dsb	sy
 8007af0:	60fb      	str	r3, [r7, #12]
}
 8007af2:	bf00      	nop
 8007af4:	e7fe      	b.n	8007af4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007af6:	4b39      	ldr	r3, [pc, #228]	; (8007bdc <xPortStartScheduler+0x12c>)
 8007af8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	22ff      	movs	r2, #255	; 0xff
 8007b06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007b10:	78fb      	ldrb	r3, [r7, #3]
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007b18:	b2da      	uxtb	r2, r3
 8007b1a:	4b31      	ldr	r3, [pc, #196]	; (8007be0 <xPortStartScheduler+0x130>)
 8007b1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007b1e:	4b31      	ldr	r3, [pc, #196]	; (8007be4 <xPortStartScheduler+0x134>)
 8007b20:	2207      	movs	r2, #7
 8007b22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b24:	e009      	b.n	8007b3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007b26:	4b2f      	ldr	r3, [pc, #188]	; (8007be4 <xPortStartScheduler+0x134>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	4a2d      	ldr	r2, [pc, #180]	; (8007be4 <xPortStartScheduler+0x134>)
 8007b2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007b30:	78fb      	ldrb	r3, [r7, #3]
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	005b      	lsls	r3, r3, #1
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b3a:	78fb      	ldrb	r3, [r7, #3]
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b42:	2b80      	cmp	r3, #128	; 0x80
 8007b44:	d0ef      	beq.n	8007b26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b46:	4b27      	ldr	r3, [pc, #156]	; (8007be4 <xPortStartScheduler+0x134>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f1c3 0307 	rsb	r3, r3, #7
 8007b4e:	2b04      	cmp	r3, #4
 8007b50:	d00a      	beq.n	8007b68 <xPortStartScheduler+0xb8>
	__asm volatile
 8007b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b56:	f383 8811 	msr	BASEPRI, r3
 8007b5a:	f3bf 8f6f 	isb	sy
 8007b5e:	f3bf 8f4f 	dsb	sy
 8007b62:	60bb      	str	r3, [r7, #8]
}
 8007b64:	bf00      	nop
 8007b66:	e7fe      	b.n	8007b66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b68:	4b1e      	ldr	r3, [pc, #120]	; (8007be4 <xPortStartScheduler+0x134>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	021b      	lsls	r3, r3, #8
 8007b6e:	4a1d      	ldr	r2, [pc, #116]	; (8007be4 <xPortStartScheduler+0x134>)
 8007b70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b72:	4b1c      	ldr	r3, [pc, #112]	; (8007be4 <xPortStartScheduler+0x134>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b7a:	4a1a      	ldr	r2, [pc, #104]	; (8007be4 <xPortStartScheduler+0x134>)
 8007b7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	b2da      	uxtb	r2, r3
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007b86:	4b18      	ldr	r3, [pc, #96]	; (8007be8 <xPortStartScheduler+0x138>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a17      	ldr	r2, [pc, #92]	; (8007be8 <xPortStartScheduler+0x138>)
 8007b8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007b90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007b92:	4b15      	ldr	r3, [pc, #84]	; (8007be8 <xPortStartScheduler+0x138>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a14      	ldr	r2, [pc, #80]	; (8007be8 <xPortStartScheduler+0x138>)
 8007b98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007b9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007b9e:	f000 f8dd 	bl	8007d5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ba2:	4b12      	ldr	r3, [pc, #72]	; (8007bec <xPortStartScheduler+0x13c>)
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007ba8:	f000 f8fc 	bl	8007da4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007bac:	4b10      	ldr	r3, [pc, #64]	; (8007bf0 <xPortStartScheduler+0x140>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a0f      	ldr	r2, [pc, #60]	; (8007bf0 <xPortStartScheduler+0x140>)
 8007bb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007bb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007bb8:	f7ff ff66 	bl	8007a88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007bbc:	f7ff fd4e 	bl	800765c <vTaskSwitchContext>
	prvTaskExitError();
 8007bc0:	f7ff ff22 	bl	8007a08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3718      	adds	r7, #24
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	e000ed00 	.word	0xe000ed00
 8007bd4:	410fc271 	.word	0x410fc271
 8007bd8:	410fc270 	.word	0x410fc270
 8007bdc:	e000e400 	.word	0xe000e400
 8007be0:	20000854 	.word	0x20000854
 8007be4:	20000858 	.word	0x20000858
 8007be8:	e000ed20 	.word	0xe000ed20
 8007bec:	200000d0 	.word	0x200000d0
 8007bf0:	e000ef34 	.word	0xe000ef34

08007bf4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
	__asm volatile
 8007bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bfe:	f383 8811 	msr	BASEPRI, r3
 8007c02:	f3bf 8f6f 	isb	sy
 8007c06:	f3bf 8f4f 	dsb	sy
 8007c0a:	607b      	str	r3, [r7, #4]
}
 8007c0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007c0e:	4b0f      	ldr	r3, [pc, #60]	; (8007c4c <vPortEnterCritical+0x58>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	3301      	adds	r3, #1
 8007c14:	4a0d      	ldr	r2, [pc, #52]	; (8007c4c <vPortEnterCritical+0x58>)
 8007c16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007c18:	4b0c      	ldr	r3, [pc, #48]	; (8007c4c <vPortEnterCritical+0x58>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d10f      	bne.n	8007c40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007c20:	4b0b      	ldr	r3, [pc, #44]	; (8007c50 <vPortEnterCritical+0x5c>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00a      	beq.n	8007c40 <vPortEnterCritical+0x4c>
	__asm volatile
 8007c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2e:	f383 8811 	msr	BASEPRI, r3
 8007c32:	f3bf 8f6f 	isb	sy
 8007c36:	f3bf 8f4f 	dsb	sy
 8007c3a:	603b      	str	r3, [r7, #0]
}
 8007c3c:	bf00      	nop
 8007c3e:	e7fe      	b.n	8007c3e <vPortEnterCritical+0x4a>
	}
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr
 8007c4c:	200000d0 	.word	0x200000d0
 8007c50:	e000ed04 	.word	0xe000ed04

08007c54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c5a:	4b12      	ldr	r3, [pc, #72]	; (8007ca4 <vPortExitCritical+0x50>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10a      	bne.n	8007c78 <vPortExitCritical+0x24>
	__asm volatile
 8007c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c66:	f383 8811 	msr	BASEPRI, r3
 8007c6a:	f3bf 8f6f 	isb	sy
 8007c6e:	f3bf 8f4f 	dsb	sy
 8007c72:	607b      	str	r3, [r7, #4]
}
 8007c74:	bf00      	nop
 8007c76:	e7fe      	b.n	8007c76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007c78:	4b0a      	ldr	r3, [pc, #40]	; (8007ca4 <vPortExitCritical+0x50>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	4a09      	ldr	r2, [pc, #36]	; (8007ca4 <vPortExitCritical+0x50>)
 8007c80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c82:	4b08      	ldr	r3, [pc, #32]	; (8007ca4 <vPortExitCritical+0x50>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d105      	bne.n	8007c96 <vPortExitCritical+0x42>
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	f383 8811 	msr	BASEPRI, r3
}
 8007c94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007c96:	bf00      	nop
 8007c98:	370c      	adds	r7, #12
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr
 8007ca2:	bf00      	nop
 8007ca4:	200000d0 	.word	0x200000d0
	...

08007cb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007cb0:	f3ef 8009 	mrs	r0, PSP
 8007cb4:	f3bf 8f6f 	isb	sy
 8007cb8:	4b15      	ldr	r3, [pc, #84]	; (8007d10 <pxCurrentTCBConst>)
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	f01e 0f10 	tst.w	lr, #16
 8007cc0:	bf08      	it	eq
 8007cc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007cc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cca:	6010      	str	r0, [r2, #0]
 8007ccc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007cd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007cd4:	f380 8811 	msr	BASEPRI, r0
 8007cd8:	f3bf 8f4f 	dsb	sy
 8007cdc:	f3bf 8f6f 	isb	sy
 8007ce0:	f7ff fcbc 	bl	800765c <vTaskSwitchContext>
 8007ce4:	f04f 0000 	mov.w	r0, #0
 8007ce8:	f380 8811 	msr	BASEPRI, r0
 8007cec:	bc09      	pop	{r0, r3}
 8007cee:	6819      	ldr	r1, [r3, #0]
 8007cf0:	6808      	ldr	r0, [r1, #0]
 8007cf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf6:	f01e 0f10 	tst.w	lr, #16
 8007cfa:	bf08      	it	eq
 8007cfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007d00:	f380 8809 	msr	PSP, r0
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	4770      	bx	lr
 8007d0a:	bf00      	nop
 8007d0c:	f3af 8000 	nop.w

08007d10 <pxCurrentTCBConst>:
 8007d10:	20000728 	.word	0x20000728
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007d14:	bf00      	nop
 8007d16:	bf00      	nop

08007d18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d22:	f383 8811 	msr	BASEPRI, r3
 8007d26:	f3bf 8f6f 	isb	sy
 8007d2a:	f3bf 8f4f 	dsb	sy
 8007d2e:	607b      	str	r3, [r7, #4]
}
 8007d30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007d32:	f7ff fbdb 	bl	80074ec <xTaskIncrementTick>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d003      	beq.n	8007d44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d3c:	4b06      	ldr	r3, [pc, #24]	; (8007d58 <SysTick_Handler+0x40>)
 8007d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d42:	601a      	str	r2, [r3, #0]
 8007d44:	2300      	movs	r3, #0
 8007d46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	f383 8811 	msr	BASEPRI, r3
}
 8007d4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007d50:	bf00      	nop
 8007d52:	3708      	adds	r7, #8
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	e000ed04 	.word	0xe000ed04

08007d5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d60:	4b0b      	ldr	r3, [pc, #44]	; (8007d90 <vPortSetupTimerInterrupt+0x34>)
 8007d62:	2200      	movs	r2, #0
 8007d64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d66:	4b0b      	ldr	r3, [pc, #44]	; (8007d94 <vPortSetupTimerInterrupt+0x38>)
 8007d68:	2200      	movs	r2, #0
 8007d6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d6c:	4b0a      	ldr	r3, [pc, #40]	; (8007d98 <vPortSetupTimerInterrupt+0x3c>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a0a      	ldr	r2, [pc, #40]	; (8007d9c <vPortSetupTimerInterrupt+0x40>)
 8007d72:	fba2 2303 	umull	r2, r3, r2, r3
 8007d76:	099b      	lsrs	r3, r3, #6
 8007d78:	4a09      	ldr	r2, [pc, #36]	; (8007da0 <vPortSetupTimerInterrupt+0x44>)
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d7e:	4b04      	ldr	r3, [pc, #16]	; (8007d90 <vPortSetupTimerInterrupt+0x34>)
 8007d80:	2207      	movs	r2, #7
 8007d82:	601a      	str	r2, [r3, #0]
}
 8007d84:	bf00      	nop
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	e000e010 	.word	0xe000e010
 8007d94:	e000e018 	.word	0xe000e018
 8007d98:	20000000 	.word	0x20000000
 8007d9c:	10624dd3 	.word	0x10624dd3
 8007da0:	e000e014 	.word	0xe000e014

08007da4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007da4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007db4 <vPortEnableVFP+0x10>
 8007da8:	6801      	ldr	r1, [r0, #0]
 8007daa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007dae:	6001      	str	r1, [r0, #0]
 8007db0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007db2:	bf00      	nop
 8007db4:	e000ed88 	.word	0xe000ed88

08007db8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007dbe:	f3ef 8305 	mrs	r3, IPSR
 8007dc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2b0f      	cmp	r3, #15
 8007dc8:	d914      	bls.n	8007df4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007dca:	4a17      	ldr	r2, [pc, #92]	; (8007e28 <vPortValidateInterruptPriority+0x70>)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	4413      	add	r3, r2
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007dd4:	4b15      	ldr	r3, [pc, #84]	; (8007e2c <vPortValidateInterruptPriority+0x74>)
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	7afa      	ldrb	r2, [r7, #11]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d20a      	bcs.n	8007df4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de2:	f383 8811 	msr	BASEPRI, r3
 8007de6:	f3bf 8f6f 	isb	sy
 8007dea:	f3bf 8f4f 	dsb	sy
 8007dee:	607b      	str	r3, [r7, #4]
}
 8007df0:	bf00      	nop
 8007df2:	e7fe      	b.n	8007df2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007df4:	4b0e      	ldr	r3, [pc, #56]	; (8007e30 <vPortValidateInterruptPriority+0x78>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007dfc:	4b0d      	ldr	r3, [pc, #52]	; (8007e34 <vPortValidateInterruptPriority+0x7c>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d90a      	bls.n	8007e1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e08:	f383 8811 	msr	BASEPRI, r3
 8007e0c:	f3bf 8f6f 	isb	sy
 8007e10:	f3bf 8f4f 	dsb	sy
 8007e14:	603b      	str	r3, [r7, #0]
}
 8007e16:	bf00      	nop
 8007e18:	e7fe      	b.n	8007e18 <vPortValidateInterruptPriority+0x60>
	}
 8007e1a:	bf00      	nop
 8007e1c:	3714      	adds	r7, #20
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop
 8007e28:	e000e3f0 	.word	0xe000e3f0
 8007e2c:	20000854 	.word	0x20000854
 8007e30:	e000ed0c 	.word	0xe000ed0c
 8007e34:	20000858 	.word	0x20000858

08007e38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b08a      	sub	sp, #40	; 0x28
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007e40:	2300      	movs	r3, #0
 8007e42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007e44:	f7ff fa98 	bl	8007378 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007e48:	4b5b      	ldr	r3, [pc, #364]	; (8007fb8 <pvPortMalloc+0x180>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d101      	bne.n	8007e54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007e50:	f000 f920 	bl	8008094 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007e54:	4b59      	ldr	r3, [pc, #356]	; (8007fbc <pvPortMalloc+0x184>)
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4013      	ands	r3, r2
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	f040 8093 	bne.w	8007f88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d01d      	beq.n	8007ea4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007e68:	2208      	movs	r2, #8
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f003 0307 	and.w	r3, r3, #7
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d014      	beq.n	8007ea4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f023 0307 	bic.w	r3, r3, #7
 8007e80:	3308      	adds	r3, #8
 8007e82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f003 0307 	and.w	r3, r3, #7
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d00a      	beq.n	8007ea4 <pvPortMalloc+0x6c>
	__asm volatile
 8007e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e92:	f383 8811 	msr	BASEPRI, r3
 8007e96:	f3bf 8f6f 	isb	sy
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	617b      	str	r3, [r7, #20]
}
 8007ea0:	bf00      	nop
 8007ea2:	e7fe      	b.n	8007ea2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d06e      	beq.n	8007f88 <pvPortMalloc+0x150>
 8007eaa:	4b45      	ldr	r3, [pc, #276]	; (8007fc0 <pvPortMalloc+0x188>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d869      	bhi.n	8007f88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007eb4:	4b43      	ldr	r3, [pc, #268]	; (8007fc4 <pvPortMalloc+0x18c>)
 8007eb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007eb8:	4b42      	ldr	r3, [pc, #264]	; (8007fc4 <pvPortMalloc+0x18c>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ebe:	e004      	b.n	8007eca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d903      	bls.n	8007edc <pvPortMalloc+0xa4>
 8007ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1f1      	bne.n	8007ec0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007edc:	4b36      	ldr	r3, [pc, #216]	; (8007fb8 <pvPortMalloc+0x180>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d050      	beq.n	8007f88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ee6:	6a3b      	ldr	r3, [r7, #32]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	2208      	movs	r2, #8
 8007eec:	4413      	add	r3, r2
 8007eee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	6a3b      	ldr	r3, [r7, #32]
 8007ef6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efa:	685a      	ldr	r2, [r3, #4]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	1ad2      	subs	r2, r2, r3
 8007f00:	2308      	movs	r3, #8
 8007f02:	005b      	lsls	r3, r3, #1
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d91f      	bls.n	8007f48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	f003 0307 	and.w	r3, r3, #7
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00a      	beq.n	8007f30 <pvPortMalloc+0xf8>
	__asm volatile
 8007f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1e:	f383 8811 	msr	BASEPRI, r3
 8007f22:	f3bf 8f6f 	isb	sy
 8007f26:	f3bf 8f4f 	dsb	sy
 8007f2a:	613b      	str	r3, [r7, #16]
}
 8007f2c:	bf00      	nop
 8007f2e:	e7fe      	b.n	8007f2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f32:	685a      	ldr	r2, [r3, #4]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	1ad2      	subs	r2, r2, r3
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f42:	69b8      	ldr	r0, [r7, #24]
 8007f44:	f000 f908 	bl	8008158 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f48:	4b1d      	ldr	r3, [pc, #116]	; (8007fc0 <pvPortMalloc+0x188>)
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	1ad3      	subs	r3, r2, r3
 8007f52:	4a1b      	ldr	r2, [pc, #108]	; (8007fc0 <pvPortMalloc+0x188>)
 8007f54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f56:	4b1a      	ldr	r3, [pc, #104]	; (8007fc0 <pvPortMalloc+0x188>)
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	4b1b      	ldr	r3, [pc, #108]	; (8007fc8 <pvPortMalloc+0x190>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d203      	bcs.n	8007f6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f62:	4b17      	ldr	r3, [pc, #92]	; (8007fc0 <pvPortMalloc+0x188>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a18      	ldr	r2, [pc, #96]	; (8007fc8 <pvPortMalloc+0x190>)
 8007f68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6c:	685a      	ldr	r2, [r3, #4]
 8007f6e:	4b13      	ldr	r3, [pc, #76]	; (8007fbc <pvPortMalloc+0x184>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	431a      	orrs	r2, r3
 8007f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007f7e:	4b13      	ldr	r3, [pc, #76]	; (8007fcc <pvPortMalloc+0x194>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	3301      	adds	r3, #1
 8007f84:	4a11      	ldr	r2, [pc, #68]	; (8007fcc <pvPortMalloc+0x194>)
 8007f86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007f88:	f7ff fa04 	bl	8007394 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	f003 0307 	and.w	r3, r3, #7
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00a      	beq.n	8007fac <pvPortMalloc+0x174>
	__asm volatile
 8007f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9a:	f383 8811 	msr	BASEPRI, r3
 8007f9e:	f3bf 8f6f 	isb	sy
 8007fa2:	f3bf 8f4f 	dsb	sy
 8007fa6:	60fb      	str	r3, [r7, #12]
}
 8007fa8:	bf00      	nop
 8007faa:	e7fe      	b.n	8007faa <pvPortMalloc+0x172>
	return pvReturn;
 8007fac:	69fb      	ldr	r3, [r7, #28]
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3728      	adds	r7, #40	; 0x28
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	20001bec 	.word	0x20001bec
 8007fbc:	20001c00 	.word	0x20001c00
 8007fc0:	20001bf0 	.word	0x20001bf0
 8007fc4:	20001be4 	.word	0x20001be4
 8007fc8:	20001bf4 	.word	0x20001bf4
 8007fcc:	20001bf8 	.word	0x20001bf8

08007fd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b086      	sub	sp, #24
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d04d      	beq.n	800807e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007fe2:	2308      	movs	r3, #8
 8007fe4:	425b      	negs	r3, r3
 8007fe6:	697a      	ldr	r2, [r7, #20]
 8007fe8:	4413      	add	r3, r2
 8007fea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	685a      	ldr	r2, [r3, #4]
 8007ff4:	4b24      	ldr	r3, [pc, #144]	; (8008088 <vPortFree+0xb8>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4013      	ands	r3, r2
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d10a      	bne.n	8008014 <vPortFree+0x44>
	__asm volatile
 8007ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008002:	f383 8811 	msr	BASEPRI, r3
 8008006:	f3bf 8f6f 	isb	sy
 800800a:	f3bf 8f4f 	dsb	sy
 800800e:	60fb      	str	r3, [r7, #12]
}
 8008010:	bf00      	nop
 8008012:	e7fe      	b.n	8008012 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00a      	beq.n	8008032 <vPortFree+0x62>
	__asm volatile
 800801c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008020:	f383 8811 	msr	BASEPRI, r3
 8008024:	f3bf 8f6f 	isb	sy
 8008028:	f3bf 8f4f 	dsb	sy
 800802c:	60bb      	str	r3, [r7, #8]
}
 800802e:	bf00      	nop
 8008030:	e7fe      	b.n	8008030 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	685a      	ldr	r2, [r3, #4]
 8008036:	4b14      	ldr	r3, [pc, #80]	; (8008088 <vPortFree+0xb8>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4013      	ands	r3, r2
 800803c:	2b00      	cmp	r3, #0
 800803e:	d01e      	beq.n	800807e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d11a      	bne.n	800807e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	685a      	ldr	r2, [r3, #4]
 800804c:	4b0e      	ldr	r3, [pc, #56]	; (8008088 <vPortFree+0xb8>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	43db      	mvns	r3, r3
 8008052:	401a      	ands	r2, r3
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008058:	f7ff f98e 	bl	8007378 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	685a      	ldr	r2, [r3, #4]
 8008060:	4b0a      	ldr	r3, [pc, #40]	; (800808c <vPortFree+0xbc>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4413      	add	r3, r2
 8008066:	4a09      	ldr	r2, [pc, #36]	; (800808c <vPortFree+0xbc>)
 8008068:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800806a:	6938      	ldr	r0, [r7, #16]
 800806c:	f000 f874 	bl	8008158 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008070:	4b07      	ldr	r3, [pc, #28]	; (8008090 <vPortFree+0xc0>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	3301      	adds	r3, #1
 8008076:	4a06      	ldr	r2, [pc, #24]	; (8008090 <vPortFree+0xc0>)
 8008078:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800807a:	f7ff f98b 	bl	8007394 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800807e:	bf00      	nop
 8008080:	3718      	adds	r7, #24
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	20001c00 	.word	0x20001c00
 800808c:	20001bf0 	.word	0x20001bf0
 8008090:	20001bfc 	.word	0x20001bfc

08008094 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008094:	b480      	push	{r7}
 8008096:	b085      	sub	sp, #20
 8008098:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800809a:	f241 3388 	movw	r3, #5000	; 0x1388
 800809e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80080a0:	4b27      	ldr	r3, [pc, #156]	; (8008140 <prvHeapInit+0xac>)
 80080a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f003 0307 	and.w	r3, r3, #7
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d00c      	beq.n	80080c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	3307      	adds	r3, #7
 80080b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f023 0307 	bic.w	r3, r3, #7
 80080ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80080bc:	68ba      	ldr	r2, [r7, #8]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	1ad3      	subs	r3, r2, r3
 80080c2:	4a1f      	ldr	r2, [pc, #124]	; (8008140 <prvHeapInit+0xac>)
 80080c4:	4413      	add	r3, r2
 80080c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80080cc:	4a1d      	ldr	r2, [pc, #116]	; (8008144 <prvHeapInit+0xb0>)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80080d2:	4b1c      	ldr	r3, [pc, #112]	; (8008144 <prvHeapInit+0xb0>)
 80080d4:	2200      	movs	r2, #0
 80080d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	4413      	add	r3, r2
 80080de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80080e0:	2208      	movs	r2, #8
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	1a9b      	subs	r3, r3, r2
 80080e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f023 0307 	bic.w	r3, r3, #7
 80080ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	4a15      	ldr	r2, [pc, #84]	; (8008148 <prvHeapInit+0xb4>)
 80080f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80080f6:	4b14      	ldr	r3, [pc, #80]	; (8008148 <prvHeapInit+0xb4>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2200      	movs	r2, #0
 80080fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80080fe:	4b12      	ldr	r3, [pc, #72]	; (8008148 <prvHeapInit+0xb4>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2200      	movs	r2, #0
 8008104:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	1ad2      	subs	r2, r2, r3
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008114:	4b0c      	ldr	r3, [pc, #48]	; (8008148 <prvHeapInit+0xb4>)
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	4a0a      	ldr	r2, [pc, #40]	; (800814c <prvHeapInit+0xb8>)
 8008122:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	4a09      	ldr	r2, [pc, #36]	; (8008150 <prvHeapInit+0xbc>)
 800812a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800812c:	4b09      	ldr	r3, [pc, #36]	; (8008154 <prvHeapInit+0xc0>)
 800812e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008132:	601a      	str	r2, [r3, #0]
}
 8008134:	bf00      	nop
 8008136:	3714      	adds	r7, #20
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr
 8008140:	2000085c 	.word	0x2000085c
 8008144:	20001be4 	.word	0x20001be4
 8008148:	20001bec 	.word	0x20001bec
 800814c:	20001bf4 	.word	0x20001bf4
 8008150:	20001bf0 	.word	0x20001bf0
 8008154:	20001c00 	.word	0x20001c00

08008158 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008160:	4b28      	ldr	r3, [pc, #160]	; (8008204 <prvInsertBlockIntoFreeList+0xac>)
 8008162:	60fb      	str	r3, [r7, #12]
 8008164:	e002      	b.n	800816c <prvInsertBlockIntoFreeList+0x14>
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	60fb      	str	r3, [r7, #12]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	429a      	cmp	r2, r3
 8008174:	d8f7      	bhi.n	8008166 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	4413      	add	r3, r2
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	429a      	cmp	r2, r3
 8008186:	d108      	bne.n	800819a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	685a      	ldr	r2, [r3, #4]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	441a      	add	r2, r3
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	68ba      	ldr	r2, [r7, #8]
 80081a4:	441a      	add	r2, r3
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d118      	bne.n	80081e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	4b15      	ldr	r3, [pc, #84]	; (8008208 <prvInsertBlockIntoFreeList+0xb0>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d00d      	beq.n	80081d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	685a      	ldr	r2, [r3, #4]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	441a      	add	r2, r3
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	601a      	str	r2, [r3, #0]
 80081d4:	e008      	b.n	80081e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80081d6:	4b0c      	ldr	r3, [pc, #48]	; (8008208 <prvInsertBlockIntoFreeList+0xb0>)
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	601a      	str	r2, [r3, #0]
 80081de:	e003      	b.n	80081e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d002      	beq.n	80081f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081f6:	bf00      	nop
 80081f8:	3714      	adds	r7, #20
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr
 8008202:	bf00      	nop
 8008204:	20001be4 	.word	0x20001be4
 8008208:	20001bec 	.word	0x20001bec

0800820c <__errno>:
 800820c:	4b01      	ldr	r3, [pc, #4]	; (8008214 <__errno+0x8>)
 800820e:	6818      	ldr	r0, [r3, #0]
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop
 8008214:	200000d4 	.word	0x200000d4

08008218 <std>:
 8008218:	2300      	movs	r3, #0
 800821a:	b510      	push	{r4, lr}
 800821c:	4604      	mov	r4, r0
 800821e:	e9c0 3300 	strd	r3, r3, [r0]
 8008222:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008226:	6083      	str	r3, [r0, #8]
 8008228:	8181      	strh	r1, [r0, #12]
 800822a:	6643      	str	r3, [r0, #100]	; 0x64
 800822c:	81c2      	strh	r2, [r0, #14]
 800822e:	6183      	str	r3, [r0, #24]
 8008230:	4619      	mov	r1, r3
 8008232:	2208      	movs	r2, #8
 8008234:	305c      	adds	r0, #92	; 0x5c
 8008236:	f000 f91a 	bl	800846e <memset>
 800823a:	4b05      	ldr	r3, [pc, #20]	; (8008250 <std+0x38>)
 800823c:	6263      	str	r3, [r4, #36]	; 0x24
 800823e:	4b05      	ldr	r3, [pc, #20]	; (8008254 <std+0x3c>)
 8008240:	62a3      	str	r3, [r4, #40]	; 0x28
 8008242:	4b05      	ldr	r3, [pc, #20]	; (8008258 <std+0x40>)
 8008244:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008246:	4b05      	ldr	r3, [pc, #20]	; (800825c <std+0x44>)
 8008248:	6224      	str	r4, [r4, #32]
 800824a:	6323      	str	r3, [r4, #48]	; 0x30
 800824c:	bd10      	pop	{r4, pc}
 800824e:	bf00      	nop
 8008250:	08008fb1 	.word	0x08008fb1
 8008254:	08008fd3 	.word	0x08008fd3
 8008258:	0800900b 	.word	0x0800900b
 800825c:	0800902f 	.word	0x0800902f

08008260 <_cleanup_r>:
 8008260:	4901      	ldr	r1, [pc, #4]	; (8008268 <_cleanup_r+0x8>)
 8008262:	f000 b8af 	b.w	80083c4 <_fwalk_reent>
 8008266:	bf00      	nop
 8008268:	0800a039 	.word	0x0800a039

0800826c <__sfmoreglue>:
 800826c:	b570      	push	{r4, r5, r6, lr}
 800826e:	2268      	movs	r2, #104	; 0x68
 8008270:	1e4d      	subs	r5, r1, #1
 8008272:	4355      	muls	r5, r2
 8008274:	460e      	mov	r6, r1
 8008276:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800827a:	f000 f921 	bl	80084c0 <_malloc_r>
 800827e:	4604      	mov	r4, r0
 8008280:	b140      	cbz	r0, 8008294 <__sfmoreglue+0x28>
 8008282:	2100      	movs	r1, #0
 8008284:	e9c0 1600 	strd	r1, r6, [r0]
 8008288:	300c      	adds	r0, #12
 800828a:	60a0      	str	r0, [r4, #8]
 800828c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008290:	f000 f8ed 	bl	800846e <memset>
 8008294:	4620      	mov	r0, r4
 8008296:	bd70      	pop	{r4, r5, r6, pc}

08008298 <__sfp_lock_acquire>:
 8008298:	4801      	ldr	r0, [pc, #4]	; (80082a0 <__sfp_lock_acquire+0x8>)
 800829a:	f000 b8d8 	b.w	800844e <__retarget_lock_acquire_recursive>
 800829e:	bf00      	nop
 80082a0:	20001c05 	.word	0x20001c05

080082a4 <__sfp_lock_release>:
 80082a4:	4801      	ldr	r0, [pc, #4]	; (80082ac <__sfp_lock_release+0x8>)
 80082a6:	f000 b8d3 	b.w	8008450 <__retarget_lock_release_recursive>
 80082aa:	bf00      	nop
 80082ac:	20001c05 	.word	0x20001c05

080082b0 <__sinit_lock_acquire>:
 80082b0:	4801      	ldr	r0, [pc, #4]	; (80082b8 <__sinit_lock_acquire+0x8>)
 80082b2:	f000 b8cc 	b.w	800844e <__retarget_lock_acquire_recursive>
 80082b6:	bf00      	nop
 80082b8:	20001c06 	.word	0x20001c06

080082bc <__sinit_lock_release>:
 80082bc:	4801      	ldr	r0, [pc, #4]	; (80082c4 <__sinit_lock_release+0x8>)
 80082be:	f000 b8c7 	b.w	8008450 <__retarget_lock_release_recursive>
 80082c2:	bf00      	nop
 80082c4:	20001c06 	.word	0x20001c06

080082c8 <__sinit>:
 80082c8:	b510      	push	{r4, lr}
 80082ca:	4604      	mov	r4, r0
 80082cc:	f7ff fff0 	bl	80082b0 <__sinit_lock_acquire>
 80082d0:	69a3      	ldr	r3, [r4, #24]
 80082d2:	b11b      	cbz	r3, 80082dc <__sinit+0x14>
 80082d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082d8:	f7ff bff0 	b.w	80082bc <__sinit_lock_release>
 80082dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80082e0:	6523      	str	r3, [r4, #80]	; 0x50
 80082e2:	4b13      	ldr	r3, [pc, #76]	; (8008330 <__sinit+0x68>)
 80082e4:	4a13      	ldr	r2, [pc, #76]	; (8008334 <__sinit+0x6c>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80082ea:	42a3      	cmp	r3, r4
 80082ec:	bf04      	itt	eq
 80082ee:	2301      	moveq	r3, #1
 80082f0:	61a3      	streq	r3, [r4, #24]
 80082f2:	4620      	mov	r0, r4
 80082f4:	f000 f820 	bl	8008338 <__sfp>
 80082f8:	6060      	str	r0, [r4, #4]
 80082fa:	4620      	mov	r0, r4
 80082fc:	f000 f81c 	bl	8008338 <__sfp>
 8008300:	60a0      	str	r0, [r4, #8]
 8008302:	4620      	mov	r0, r4
 8008304:	f000 f818 	bl	8008338 <__sfp>
 8008308:	2200      	movs	r2, #0
 800830a:	60e0      	str	r0, [r4, #12]
 800830c:	2104      	movs	r1, #4
 800830e:	6860      	ldr	r0, [r4, #4]
 8008310:	f7ff ff82 	bl	8008218 <std>
 8008314:	68a0      	ldr	r0, [r4, #8]
 8008316:	2201      	movs	r2, #1
 8008318:	2109      	movs	r1, #9
 800831a:	f7ff ff7d 	bl	8008218 <std>
 800831e:	68e0      	ldr	r0, [r4, #12]
 8008320:	2202      	movs	r2, #2
 8008322:	2112      	movs	r1, #18
 8008324:	f7ff ff78 	bl	8008218 <std>
 8008328:	2301      	movs	r3, #1
 800832a:	61a3      	str	r3, [r4, #24]
 800832c:	e7d2      	b.n	80082d4 <__sinit+0xc>
 800832e:	bf00      	nop
 8008330:	0800b33c 	.word	0x0800b33c
 8008334:	08008261 	.word	0x08008261

08008338 <__sfp>:
 8008338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833a:	4607      	mov	r7, r0
 800833c:	f7ff ffac 	bl	8008298 <__sfp_lock_acquire>
 8008340:	4b1e      	ldr	r3, [pc, #120]	; (80083bc <__sfp+0x84>)
 8008342:	681e      	ldr	r6, [r3, #0]
 8008344:	69b3      	ldr	r3, [r6, #24]
 8008346:	b913      	cbnz	r3, 800834e <__sfp+0x16>
 8008348:	4630      	mov	r0, r6
 800834a:	f7ff ffbd 	bl	80082c8 <__sinit>
 800834e:	3648      	adds	r6, #72	; 0x48
 8008350:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008354:	3b01      	subs	r3, #1
 8008356:	d503      	bpl.n	8008360 <__sfp+0x28>
 8008358:	6833      	ldr	r3, [r6, #0]
 800835a:	b30b      	cbz	r3, 80083a0 <__sfp+0x68>
 800835c:	6836      	ldr	r6, [r6, #0]
 800835e:	e7f7      	b.n	8008350 <__sfp+0x18>
 8008360:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008364:	b9d5      	cbnz	r5, 800839c <__sfp+0x64>
 8008366:	4b16      	ldr	r3, [pc, #88]	; (80083c0 <__sfp+0x88>)
 8008368:	60e3      	str	r3, [r4, #12]
 800836a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800836e:	6665      	str	r5, [r4, #100]	; 0x64
 8008370:	f000 f86c 	bl	800844c <__retarget_lock_init_recursive>
 8008374:	f7ff ff96 	bl	80082a4 <__sfp_lock_release>
 8008378:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800837c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008380:	6025      	str	r5, [r4, #0]
 8008382:	61a5      	str	r5, [r4, #24]
 8008384:	2208      	movs	r2, #8
 8008386:	4629      	mov	r1, r5
 8008388:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800838c:	f000 f86f 	bl	800846e <memset>
 8008390:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008394:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008398:	4620      	mov	r0, r4
 800839a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800839c:	3468      	adds	r4, #104	; 0x68
 800839e:	e7d9      	b.n	8008354 <__sfp+0x1c>
 80083a0:	2104      	movs	r1, #4
 80083a2:	4638      	mov	r0, r7
 80083a4:	f7ff ff62 	bl	800826c <__sfmoreglue>
 80083a8:	4604      	mov	r4, r0
 80083aa:	6030      	str	r0, [r6, #0]
 80083ac:	2800      	cmp	r0, #0
 80083ae:	d1d5      	bne.n	800835c <__sfp+0x24>
 80083b0:	f7ff ff78 	bl	80082a4 <__sfp_lock_release>
 80083b4:	230c      	movs	r3, #12
 80083b6:	603b      	str	r3, [r7, #0]
 80083b8:	e7ee      	b.n	8008398 <__sfp+0x60>
 80083ba:	bf00      	nop
 80083bc:	0800b33c 	.word	0x0800b33c
 80083c0:	ffff0001 	.word	0xffff0001

080083c4 <_fwalk_reent>:
 80083c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083c8:	4606      	mov	r6, r0
 80083ca:	4688      	mov	r8, r1
 80083cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80083d0:	2700      	movs	r7, #0
 80083d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80083d6:	f1b9 0901 	subs.w	r9, r9, #1
 80083da:	d505      	bpl.n	80083e8 <_fwalk_reent+0x24>
 80083dc:	6824      	ldr	r4, [r4, #0]
 80083de:	2c00      	cmp	r4, #0
 80083e0:	d1f7      	bne.n	80083d2 <_fwalk_reent+0xe>
 80083e2:	4638      	mov	r0, r7
 80083e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083e8:	89ab      	ldrh	r3, [r5, #12]
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d907      	bls.n	80083fe <_fwalk_reent+0x3a>
 80083ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80083f2:	3301      	adds	r3, #1
 80083f4:	d003      	beq.n	80083fe <_fwalk_reent+0x3a>
 80083f6:	4629      	mov	r1, r5
 80083f8:	4630      	mov	r0, r6
 80083fa:	47c0      	blx	r8
 80083fc:	4307      	orrs	r7, r0
 80083fe:	3568      	adds	r5, #104	; 0x68
 8008400:	e7e9      	b.n	80083d6 <_fwalk_reent+0x12>
	...

08008404 <__libc_init_array>:
 8008404:	b570      	push	{r4, r5, r6, lr}
 8008406:	4d0d      	ldr	r5, [pc, #52]	; (800843c <__libc_init_array+0x38>)
 8008408:	4c0d      	ldr	r4, [pc, #52]	; (8008440 <__libc_init_array+0x3c>)
 800840a:	1b64      	subs	r4, r4, r5
 800840c:	10a4      	asrs	r4, r4, #2
 800840e:	2600      	movs	r6, #0
 8008410:	42a6      	cmp	r6, r4
 8008412:	d109      	bne.n	8008428 <__libc_init_array+0x24>
 8008414:	4d0b      	ldr	r5, [pc, #44]	; (8008444 <__libc_init_array+0x40>)
 8008416:	4c0c      	ldr	r4, [pc, #48]	; (8008448 <__libc_init_array+0x44>)
 8008418:	f002 fe7a 	bl	800b110 <_init>
 800841c:	1b64      	subs	r4, r4, r5
 800841e:	10a4      	asrs	r4, r4, #2
 8008420:	2600      	movs	r6, #0
 8008422:	42a6      	cmp	r6, r4
 8008424:	d105      	bne.n	8008432 <__libc_init_array+0x2e>
 8008426:	bd70      	pop	{r4, r5, r6, pc}
 8008428:	f855 3b04 	ldr.w	r3, [r5], #4
 800842c:	4798      	blx	r3
 800842e:	3601      	adds	r6, #1
 8008430:	e7ee      	b.n	8008410 <__libc_init_array+0xc>
 8008432:	f855 3b04 	ldr.w	r3, [r5], #4
 8008436:	4798      	blx	r3
 8008438:	3601      	adds	r6, #1
 800843a:	e7f2      	b.n	8008422 <__libc_init_array+0x1e>
 800843c:	0800b6c0 	.word	0x0800b6c0
 8008440:	0800b6c0 	.word	0x0800b6c0
 8008444:	0800b6c0 	.word	0x0800b6c0
 8008448:	0800b6c4 	.word	0x0800b6c4

0800844c <__retarget_lock_init_recursive>:
 800844c:	4770      	bx	lr

0800844e <__retarget_lock_acquire_recursive>:
 800844e:	4770      	bx	lr

08008450 <__retarget_lock_release_recursive>:
 8008450:	4770      	bx	lr

08008452 <memcpy>:
 8008452:	440a      	add	r2, r1
 8008454:	4291      	cmp	r1, r2
 8008456:	f100 33ff 	add.w	r3, r0, #4294967295
 800845a:	d100      	bne.n	800845e <memcpy+0xc>
 800845c:	4770      	bx	lr
 800845e:	b510      	push	{r4, lr}
 8008460:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008464:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008468:	4291      	cmp	r1, r2
 800846a:	d1f9      	bne.n	8008460 <memcpy+0xe>
 800846c:	bd10      	pop	{r4, pc}

0800846e <memset>:
 800846e:	4402      	add	r2, r0
 8008470:	4603      	mov	r3, r0
 8008472:	4293      	cmp	r3, r2
 8008474:	d100      	bne.n	8008478 <memset+0xa>
 8008476:	4770      	bx	lr
 8008478:	f803 1b01 	strb.w	r1, [r3], #1
 800847c:	e7f9      	b.n	8008472 <memset+0x4>
	...

08008480 <sbrk_aligned>:
 8008480:	b570      	push	{r4, r5, r6, lr}
 8008482:	4e0e      	ldr	r6, [pc, #56]	; (80084bc <sbrk_aligned+0x3c>)
 8008484:	460c      	mov	r4, r1
 8008486:	6831      	ldr	r1, [r6, #0]
 8008488:	4605      	mov	r5, r0
 800848a:	b911      	cbnz	r1, 8008492 <sbrk_aligned+0x12>
 800848c:	f000 fd60 	bl	8008f50 <_sbrk_r>
 8008490:	6030      	str	r0, [r6, #0]
 8008492:	4621      	mov	r1, r4
 8008494:	4628      	mov	r0, r5
 8008496:	f000 fd5b 	bl	8008f50 <_sbrk_r>
 800849a:	1c43      	adds	r3, r0, #1
 800849c:	d00a      	beq.n	80084b4 <sbrk_aligned+0x34>
 800849e:	1cc4      	adds	r4, r0, #3
 80084a0:	f024 0403 	bic.w	r4, r4, #3
 80084a4:	42a0      	cmp	r0, r4
 80084a6:	d007      	beq.n	80084b8 <sbrk_aligned+0x38>
 80084a8:	1a21      	subs	r1, r4, r0
 80084aa:	4628      	mov	r0, r5
 80084ac:	f000 fd50 	bl	8008f50 <_sbrk_r>
 80084b0:	3001      	adds	r0, #1
 80084b2:	d101      	bne.n	80084b8 <sbrk_aligned+0x38>
 80084b4:	f04f 34ff 	mov.w	r4, #4294967295
 80084b8:	4620      	mov	r0, r4
 80084ba:	bd70      	pop	{r4, r5, r6, pc}
 80084bc:	20001c0c 	.word	0x20001c0c

080084c0 <_malloc_r>:
 80084c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084c4:	1ccd      	adds	r5, r1, #3
 80084c6:	f025 0503 	bic.w	r5, r5, #3
 80084ca:	3508      	adds	r5, #8
 80084cc:	2d0c      	cmp	r5, #12
 80084ce:	bf38      	it	cc
 80084d0:	250c      	movcc	r5, #12
 80084d2:	2d00      	cmp	r5, #0
 80084d4:	4607      	mov	r7, r0
 80084d6:	db01      	blt.n	80084dc <_malloc_r+0x1c>
 80084d8:	42a9      	cmp	r1, r5
 80084da:	d905      	bls.n	80084e8 <_malloc_r+0x28>
 80084dc:	230c      	movs	r3, #12
 80084de:	603b      	str	r3, [r7, #0]
 80084e0:	2600      	movs	r6, #0
 80084e2:	4630      	mov	r0, r6
 80084e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084e8:	4e2e      	ldr	r6, [pc, #184]	; (80085a4 <_malloc_r+0xe4>)
 80084ea:	f001 fe77 	bl	800a1dc <__malloc_lock>
 80084ee:	6833      	ldr	r3, [r6, #0]
 80084f0:	461c      	mov	r4, r3
 80084f2:	bb34      	cbnz	r4, 8008542 <_malloc_r+0x82>
 80084f4:	4629      	mov	r1, r5
 80084f6:	4638      	mov	r0, r7
 80084f8:	f7ff ffc2 	bl	8008480 <sbrk_aligned>
 80084fc:	1c43      	adds	r3, r0, #1
 80084fe:	4604      	mov	r4, r0
 8008500:	d14d      	bne.n	800859e <_malloc_r+0xde>
 8008502:	6834      	ldr	r4, [r6, #0]
 8008504:	4626      	mov	r6, r4
 8008506:	2e00      	cmp	r6, #0
 8008508:	d140      	bne.n	800858c <_malloc_r+0xcc>
 800850a:	6823      	ldr	r3, [r4, #0]
 800850c:	4631      	mov	r1, r6
 800850e:	4638      	mov	r0, r7
 8008510:	eb04 0803 	add.w	r8, r4, r3
 8008514:	f000 fd1c 	bl	8008f50 <_sbrk_r>
 8008518:	4580      	cmp	r8, r0
 800851a:	d13a      	bne.n	8008592 <_malloc_r+0xd2>
 800851c:	6821      	ldr	r1, [r4, #0]
 800851e:	3503      	adds	r5, #3
 8008520:	1a6d      	subs	r5, r5, r1
 8008522:	f025 0503 	bic.w	r5, r5, #3
 8008526:	3508      	adds	r5, #8
 8008528:	2d0c      	cmp	r5, #12
 800852a:	bf38      	it	cc
 800852c:	250c      	movcc	r5, #12
 800852e:	4629      	mov	r1, r5
 8008530:	4638      	mov	r0, r7
 8008532:	f7ff ffa5 	bl	8008480 <sbrk_aligned>
 8008536:	3001      	adds	r0, #1
 8008538:	d02b      	beq.n	8008592 <_malloc_r+0xd2>
 800853a:	6823      	ldr	r3, [r4, #0]
 800853c:	442b      	add	r3, r5
 800853e:	6023      	str	r3, [r4, #0]
 8008540:	e00e      	b.n	8008560 <_malloc_r+0xa0>
 8008542:	6822      	ldr	r2, [r4, #0]
 8008544:	1b52      	subs	r2, r2, r5
 8008546:	d41e      	bmi.n	8008586 <_malloc_r+0xc6>
 8008548:	2a0b      	cmp	r2, #11
 800854a:	d916      	bls.n	800857a <_malloc_r+0xba>
 800854c:	1961      	adds	r1, r4, r5
 800854e:	42a3      	cmp	r3, r4
 8008550:	6025      	str	r5, [r4, #0]
 8008552:	bf18      	it	ne
 8008554:	6059      	strne	r1, [r3, #4]
 8008556:	6863      	ldr	r3, [r4, #4]
 8008558:	bf08      	it	eq
 800855a:	6031      	streq	r1, [r6, #0]
 800855c:	5162      	str	r2, [r4, r5]
 800855e:	604b      	str	r3, [r1, #4]
 8008560:	4638      	mov	r0, r7
 8008562:	f104 060b 	add.w	r6, r4, #11
 8008566:	f001 fe3f 	bl	800a1e8 <__malloc_unlock>
 800856a:	f026 0607 	bic.w	r6, r6, #7
 800856e:	1d23      	adds	r3, r4, #4
 8008570:	1af2      	subs	r2, r6, r3
 8008572:	d0b6      	beq.n	80084e2 <_malloc_r+0x22>
 8008574:	1b9b      	subs	r3, r3, r6
 8008576:	50a3      	str	r3, [r4, r2]
 8008578:	e7b3      	b.n	80084e2 <_malloc_r+0x22>
 800857a:	6862      	ldr	r2, [r4, #4]
 800857c:	42a3      	cmp	r3, r4
 800857e:	bf0c      	ite	eq
 8008580:	6032      	streq	r2, [r6, #0]
 8008582:	605a      	strne	r2, [r3, #4]
 8008584:	e7ec      	b.n	8008560 <_malloc_r+0xa0>
 8008586:	4623      	mov	r3, r4
 8008588:	6864      	ldr	r4, [r4, #4]
 800858a:	e7b2      	b.n	80084f2 <_malloc_r+0x32>
 800858c:	4634      	mov	r4, r6
 800858e:	6876      	ldr	r6, [r6, #4]
 8008590:	e7b9      	b.n	8008506 <_malloc_r+0x46>
 8008592:	230c      	movs	r3, #12
 8008594:	603b      	str	r3, [r7, #0]
 8008596:	4638      	mov	r0, r7
 8008598:	f001 fe26 	bl	800a1e8 <__malloc_unlock>
 800859c:	e7a1      	b.n	80084e2 <_malloc_r+0x22>
 800859e:	6025      	str	r5, [r4, #0]
 80085a0:	e7de      	b.n	8008560 <_malloc_r+0xa0>
 80085a2:	bf00      	nop
 80085a4:	20001c08 	.word	0x20001c08

080085a8 <__cvt>:
 80085a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085ac:	ec55 4b10 	vmov	r4, r5, d0
 80085b0:	2d00      	cmp	r5, #0
 80085b2:	460e      	mov	r6, r1
 80085b4:	4619      	mov	r1, r3
 80085b6:	462b      	mov	r3, r5
 80085b8:	bfbb      	ittet	lt
 80085ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80085be:	461d      	movlt	r5, r3
 80085c0:	2300      	movge	r3, #0
 80085c2:	232d      	movlt	r3, #45	; 0x2d
 80085c4:	700b      	strb	r3, [r1, #0]
 80085c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80085cc:	4691      	mov	r9, r2
 80085ce:	f023 0820 	bic.w	r8, r3, #32
 80085d2:	bfbc      	itt	lt
 80085d4:	4622      	movlt	r2, r4
 80085d6:	4614      	movlt	r4, r2
 80085d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80085dc:	d005      	beq.n	80085ea <__cvt+0x42>
 80085de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80085e2:	d100      	bne.n	80085e6 <__cvt+0x3e>
 80085e4:	3601      	adds	r6, #1
 80085e6:	2102      	movs	r1, #2
 80085e8:	e000      	b.n	80085ec <__cvt+0x44>
 80085ea:	2103      	movs	r1, #3
 80085ec:	ab03      	add	r3, sp, #12
 80085ee:	9301      	str	r3, [sp, #4]
 80085f0:	ab02      	add	r3, sp, #8
 80085f2:	9300      	str	r3, [sp, #0]
 80085f4:	ec45 4b10 	vmov	d0, r4, r5
 80085f8:	4653      	mov	r3, sl
 80085fa:	4632      	mov	r2, r6
 80085fc:	f000 fea8 	bl	8009350 <_dtoa_r>
 8008600:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008604:	4607      	mov	r7, r0
 8008606:	d102      	bne.n	800860e <__cvt+0x66>
 8008608:	f019 0f01 	tst.w	r9, #1
 800860c:	d022      	beq.n	8008654 <__cvt+0xac>
 800860e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008612:	eb07 0906 	add.w	r9, r7, r6
 8008616:	d110      	bne.n	800863a <__cvt+0x92>
 8008618:	783b      	ldrb	r3, [r7, #0]
 800861a:	2b30      	cmp	r3, #48	; 0x30
 800861c:	d10a      	bne.n	8008634 <__cvt+0x8c>
 800861e:	2200      	movs	r2, #0
 8008620:	2300      	movs	r3, #0
 8008622:	4620      	mov	r0, r4
 8008624:	4629      	mov	r1, r5
 8008626:	f7f8 fa4f 	bl	8000ac8 <__aeabi_dcmpeq>
 800862a:	b918      	cbnz	r0, 8008634 <__cvt+0x8c>
 800862c:	f1c6 0601 	rsb	r6, r6, #1
 8008630:	f8ca 6000 	str.w	r6, [sl]
 8008634:	f8da 3000 	ldr.w	r3, [sl]
 8008638:	4499      	add	r9, r3
 800863a:	2200      	movs	r2, #0
 800863c:	2300      	movs	r3, #0
 800863e:	4620      	mov	r0, r4
 8008640:	4629      	mov	r1, r5
 8008642:	f7f8 fa41 	bl	8000ac8 <__aeabi_dcmpeq>
 8008646:	b108      	cbz	r0, 800864c <__cvt+0xa4>
 8008648:	f8cd 900c 	str.w	r9, [sp, #12]
 800864c:	2230      	movs	r2, #48	; 0x30
 800864e:	9b03      	ldr	r3, [sp, #12]
 8008650:	454b      	cmp	r3, r9
 8008652:	d307      	bcc.n	8008664 <__cvt+0xbc>
 8008654:	9b03      	ldr	r3, [sp, #12]
 8008656:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008658:	1bdb      	subs	r3, r3, r7
 800865a:	4638      	mov	r0, r7
 800865c:	6013      	str	r3, [r2, #0]
 800865e:	b004      	add	sp, #16
 8008660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008664:	1c59      	adds	r1, r3, #1
 8008666:	9103      	str	r1, [sp, #12]
 8008668:	701a      	strb	r2, [r3, #0]
 800866a:	e7f0      	b.n	800864e <__cvt+0xa6>

0800866c <__exponent>:
 800866c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800866e:	4603      	mov	r3, r0
 8008670:	2900      	cmp	r1, #0
 8008672:	bfb8      	it	lt
 8008674:	4249      	neglt	r1, r1
 8008676:	f803 2b02 	strb.w	r2, [r3], #2
 800867a:	bfb4      	ite	lt
 800867c:	222d      	movlt	r2, #45	; 0x2d
 800867e:	222b      	movge	r2, #43	; 0x2b
 8008680:	2909      	cmp	r1, #9
 8008682:	7042      	strb	r2, [r0, #1]
 8008684:	dd2a      	ble.n	80086dc <__exponent+0x70>
 8008686:	f10d 0407 	add.w	r4, sp, #7
 800868a:	46a4      	mov	ip, r4
 800868c:	270a      	movs	r7, #10
 800868e:	46a6      	mov	lr, r4
 8008690:	460a      	mov	r2, r1
 8008692:	fb91 f6f7 	sdiv	r6, r1, r7
 8008696:	fb07 1516 	mls	r5, r7, r6, r1
 800869a:	3530      	adds	r5, #48	; 0x30
 800869c:	2a63      	cmp	r2, #99	; 0x63
 800869e:	f104 34ff 	add.w	r4, r4, #4294967295
 80086a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80086a6:	4631      	mov	r1, r6
 80086a8:	dcf1      	bgt.n	800868e <__exponent+0x22>
 80086aa:	3130      	adds	r1, #48	; 0x30
 80086ac:	f1ae 0502 	sub.w	r5, lr, #2
 80086b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80086b4:	1c44      	adds	r4, r0, #1
 80086b6:	4629      	mov	r1, r5
 80086b8:	4561      	cmp	r1, ip
 80086ba:	d30a      	bcc.n	80086d2 <__exponent+0x66>
 80086bc:	f10d 0209 	add.w	r2, sp, #9
 80086c0:	eba2 020e 	sub.w	r2, r2, lr
 80086c4:	4565      	cmp	r5, ip
 80086c6:	bf88      	it	hi
 80086c8:	2200      	movhi	r2, #0
 80086ca:	4413      	add	r3, r2
 80086cc:	1a18      	subs	r0, r3, r0
 80086ce:	b003      	add	sp, #12
 80086d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80086da:	e7ed      	b.n	80086b8 <__exponent+0x4c>
 80086dc:	2330      	movs	r3, #48	; 0x30
 80086de:	3130      	adds	r1, #48	; 0x30
 80086e0:	7083      	strb	r3, [r0, #2]
 80086e2:	70c1      	strb	r1, [r0, #3]
 80086e4:	1d03      	adds	r3, r0, #4
 80086e6:	e7f1      	b.n	80086cc <__exponent+0x60>

080086e8 <_printf_float>:
 80086e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ec:	ed2d 8b02 	vpush	{d8}
 80086f0:	b08d      	sub	sp, #52	; 0x34
 80086f2:	460c      	mov	r4, r1
 80086f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80086f8:	4616      	mov	r6, r2
 80086fa:	461f      	mov	r7, r3
 80086fc:	4605      	mov	r5, r0
 80086fe:	f001 fce9 	bl	800a0d4 <_localeconv_r>
 8008702:	f8d0 a000 	ldr.w	sl, [r0]
 8008706:	4650      	mov	r0, sl
 8008708:	f7f7 fd62 	bl	80001d0 <strlen>
 800870c:	2300      	movs	r3, #0
 800870e:	930a      	str	r3, [sp, #40]	; 0x28
 8008710:	6823      	ldr	r3, [r4, #0]
 8008712:	9305      	str	r3, [sp, #20]
 8008714:	f8d8 3000 	ldr.w	r3, [r8]
 8008718:	f894 b018 	ldrb.w	fp, [r4, #24]
 800871c:	3307      	adds	r3, #7
 800871e:	f023 0307 	bic.w	r3, r3, #7
 8008722:	f103 0208 	add.w	r2, r3, #8
 8008726:	f8c8 2000 	str.w	r2, [r8]
 800872a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008732:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008736:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800873a:	9307      	str	r3, [sp, #28]
 800873c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008740:	ee08 0a10 	vmov	s16, r0
 8008744:	4b9f      	ldr	r3, [pc, #636]	; (80089c4 <_printf_float+0x2dc>)
 8008746:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800874a:	f04f 32ff 	mov.w	r2, #4294967295
 800874e:	f7f8 f9ed 	bl	8000b2c <__aeabi_dcmpun>
 8008752:	bb88      	cbnz	r0, 80087b8 <_printf_float+0xd0>
 8008754:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008758:	4b9a      	ldr	r3, [pc, #616]	; (80089c4 <_printf_float+0x2dc>)
 800875a:	f04f 32ff 	mov.w	r2, #4294967295
 800875e:	f7f8 f9c7 	bl	8000af0 <__aeabi_dcmple>
 8008762:	bb48      	cbnz	r0, 80087b8 <_printf_float+0xd0>
 8008764:	2200      	movs	r2, #0
 8008766:	2300      	movs	r3, #0
 8008768:	4640      	mov	r0, r8
 800876a:	4649      	mov	r1, r9
 800876c:	f7f8 f9b6 	bl	8000adc <__aeabi_dcmplt>
 8008770:	b110      	cbz	r0, 8008778 <_printf_float+0x90>
 8008772:	232d      	movs	r3, #45	; 0x2d
 8008774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008778:	4b93      	ldr	r3, [pc, #588]	; (80089c8 <_printf_float+0x2e0>)
 800877a:	4894      	ldr	r0, [pc, #592]	; (80089cc <_printf_float+0x2e4>)
 800877c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008780:	bf94      	ite	ls
 8008782:	4698      	movls	r8, r3
 8008784:	4680      	movhi	r8, r0
 8008786:	2303      	movs	r3, #3
 8008788:	6123      	str	r3, [r4, #16]
 800878a:	9b05      	ldr	r3, [sp, #20]
 800878c:	f023 0204 	bic.w	r2, r3, #4
 8008790:	6022      	str	r2, [r4, #0]
 8008792:	f04f 0900 	mov.w	r9, #0
 8008796:	9700      	str	r7, [sp, #0]
 8008798:	4633      	mov	r3, r6
 800879a:	aa0b      	add	r2, sp, #44	; 0x2c
 800879c:	4621      	mov	r1, r4
 800879e:	4628      	mov	r0, r5
 80087a0:	f000 f9d8 	bl	8008b54 <_printf_common>
 80087a4:	3001      	adds	r0, #1
 80087a6:	f040 8090 	bne.w	80088ca <_printf_float+0x1e2>
 80087aa:	f04f 30ff 	mov.w	r0, #4294967295
 80087ae:	b00d      	add	sp, #52	; 0x34
 80087b0:	ecbd 8b02 	vpop	{d8}
 80087b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087b8:	4642      	mov	r2, r8
 80087ba:	464b      	mov	r3, r9
 80087bc:	4640      	mov	r0, r8
 80087be:	4649      	mov	r1, r9
 80087c0:	f7f8 f9b4 	bl	8000b2c <__aeabi_dcmpun>
 80087c4:	b140      	cbz	r0, 80087d8 <_printf_float+0xf0>
 80087c6:	464b      	mov	r3, r9
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	bfbc      	itt	lt
 80087cc:	232d      	movlt	r3, #45	; 0x2d
 80087ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80087d2:	487f      	ldr	r0, [pc, #508]	; (80089d0 <_printf_float+0x2e8>)
 80087d4:	4b7f      	ldr	r3, [pc, #508]	; (80089d4 <_printf_float+0x2ec>)
 80087d6:	e7d1      	b.n	800877c <_printf_float+0x94>
 80087d8:	6863      	ldr	r3, [r4, #4]
 80087da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80087de:	9206      	str	r2, [sp, #24]
 80087e0:	1c5a      	adds	r2, r3, #1
 80087e2:	d13f      	bne.n	8008864 <_printf_float+0x17c>
 80087e4:	2306      	movs	r3, #6
 80087e6:	6063      	str	r3, [r4, #4]
 80087e8:	9b05      	ldr	r3, [sp, #20]
 80087ea:	6861      	ldr	r1, [r4, #4]
 80087ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80087f0:	2300      	movs	r3, #0
 80087f2:	9303      	str	r3, [sp, #12]
 80087f4:	ab0a      	add	r3, sp, #40	; 0x28
 80087f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80087fa:	ab09      	add	r3, sp, #36	; 0x24
 80087fc:	ec49 8b10 	vmov	d0, r8, r9
 8008800:	9300      	str	r3, [sp, #0]
 8008802:	6022      	str	r2, [r4, #0]
 8008804:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008808:	4628      	mov	r0, r5
 800880a:	f7ff fecd 	bl	80085a8 <__cvt>
 800880e:	9b06      	ldr	r3, [sp, #24]
 8008810:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008812:	2b47      	cmp	r3, #71	; 0x47
 8008814:	4680      	mov	r8, r0
 8008816:	d108      	bne.n	800882a <_printf_float+0x142>
 8008818:	1cc8      	adds	r0, r1, #3
 800881a:	db02      	blt.n	8008822 <_printf_float+0x13a>
 800881c:	6863      	ldr	r3, [r4, #4]
 800881e:	4299      	cmp	r1, r3
 8008820:	dd41      	ble.n	80088a6 <_printf_float+0x1be>
 8008822:	f1ab 0b02 	sub.w	fp, fp, #2
 8008826:	fa5f fb8b 	uxtb.w	fp, fp
 800882a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800882e:	d820      	bhi.n	8008872 <_printf_float+0x18a>
 8008830:	3901      	subs	r1, #1
 8008832:	465a      	mov	r2, fp
 8008834:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008838:	9109      	str	r1, [sp, #36]	; 0x24
 800883a:	f7ff ff17 	bl	800866c <__exponent>
 800883e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008840:	1813      	adds	r3, r2, r0
 8008842:	2a01      	cmp	r2, #1
 8008844:	4681      	mov	r9, r0
 8008846:	6123      	str	r3, [r4, #16]
 8008848:	dc02      	bgt.n	8008850 <_printf_float+0x168>
 800884a:	6822      	ldr	r2, [r4, #0]
 800884c:	07d2      	lsls	r2, r2, #31
 800884e:	d501      	bpl.n	8008854 <_printf_float+0x16c>
 8008850:	3301      	adds	r3, #1
 8008852:	6123      	str	r3, [r4, #16]
 8008854:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008858:	2b00      	cmp	r3, #0
 800885a:	d09c      	beq.n	8008796 <_printf_float+0xae>
 800885c:	232d      	movs	r3, #45	; 0x2d
 800885e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008862:	e798      	b.n	8008796 <_printf_float+0xae>
 8008864:	9a06      	ldr	r2, [sp, #24]
 8008866:	2a47      	cmp	r2, #71	; 0x47
 8008868:	d1be      	bne.n	80087e8 <_printf_float+0x100>
 800886a:	2b00      	cmp	r3, #0
 800886c:	d1bc      	bne.n	80087e8 <_printf_float+0x100>
 800886e:	2301      	movs	r3, #1
 8008870:	e7b9      	b.n	80087e6 <_printf_float+0xfe>
 8008872:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008876:	d118      	bne.n	80088aa <_printf_float+0x1c2>
 8008878:	2900      	cmp	r1, #0
 800887a:	6863      	ldr	r3, [r4, #4]
 800887c:	dd0b      	ble.n	8008896 <_printf_float+0x1ae>
 800887e:	6121      	str	r1, [r4, #16]
 8008880:	b913      	cbnz	r3, 8008888 <_printf_float+0x1a0>
 8008882:	6822      	ldr	r2, [r4, #0]
 8008884:	07d0      	lsls	r0, r2, #31
 8008886:	d502      	bpl.n	800888e <_printf_float+0x1a6>
 8008888:	3301      	adds	r3, #1
 800888a:	440b      	add	r3, r1
 800888c:	6123      	str	r3, [r4, #16]
 800888e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008890:	f04f 0900 	mov.w	r9, #0
 8008894:	e7de      	b.n	8008854 <_printf_float+0x16c>
 8008896:	b913      	cbnz	r3, 800889e <_printf_float+0x1b6>
 8008898:	6822      	ldr	r2, [r4, #0]
 800889a:	07d2      	lsls	r2, r2, #31
 800889c:	d501      	bpl.n	80088a2 <_printf_float+0x1ba>
 800889e:	3302      	adds	r3, #2
 80088a0:	e7f4      	b.n	800888c <_printf_float+0x1a4>
 80088a2:	2301      	movs	r3, #1
 80088a4:	e7f2      	b.n	800888c <_printf_float+0x1a4>
 80088a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80088aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088ac:	4299      	cmp	r1, r3
 80088ae:	db05      	blt.n	80088bc <_printf_float+0x1d4>
 80088b0:	6823      	ldr	r3, [r4, #0]
 80088b2:	6121      	str	r1, [r4, #16]
 80088b4:	07d8      	lsls	r0, r3, #31
 80088b6:	d5ea      	bpl.n	800888e <_printf_float+0x1a6>
 80088b8:	1c4b      	adds	r3, r1, #1
 80088ba:	e7e7      	b.n	800888c <_printf_float+0x1a4>
 80088bc:	2900      	cmp	r1, #0
 80088be:	bfd4      	ite	le
 80088c0:	f1c1 0202 	rsble	r2, r1, #2
 80088c4:	2201      	movgt	r2, #1
 80088c6:	4413      	add	r3, r2
 80088c8:	e7e0      	b.n	800888c <_printf_float+0x1a4>
 80088ca:	6823      	ldr	r3, [r4, #0]
 80088cc:	055a      	lsls	r2, r3, #21
 80088ce:	d407      	bmi.n	80088e0 <_printf_float+0x1f8>
 80088d0:	6923      	ldr	r3, [r4, #16]
 80088d2:	4642      	mov	r2, r8
 80088d4:	4631      	mov	r1, r6
 80088d6:	4628      	mov	r0, r5
 80088d8:	47b8      	blx	r7
 80088da:	3001      	adds	r0, #1
 80088dc:	d12c      	bne.n	8008938 <_printf_float+0x250>
 80088de:	e764      	b.n	80087aa <_printf_float+0xc2>
 80088e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80088e4:	f240 80e0 	bls.w	8008aa8 <_printf_float+0x3c0>
 80088e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80088ec:	2200      	movs	r2, #0
 80088ee:	2300      	movs	r3, #0
 80088f0:	f7f8 f8ea 	bl	8000ac8 <__aeabi_dcmpeq>
 80088f4:	2800      	cmp	r0, #0
 80088f6:	d034      	beq.n	8008962 <_printf_float+0x27a>
 80088f8:	4a37      	ldr	r2, [pc, #220]	; (80089d8 <_printf_float+0x2f0>)
 80088fa:	2301      	movs	r3, #1
 80088fc:	4631      	mov	r1, r6
 80088fe:	4628      	mov	r0, r5
 8008900:	47b8      	blx	r7
 8008902:	3001      	adds	r0, #1
 8008904:	f43f af51 	beq.w	80087aa <_printf_float+0xc2>
 8008908:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800890c:	429a      	cmp	r2, r3
 800890e:	db02      	blt.n	8008916 <_printf_float+0x22e>
 8008910:	6823      	ldr	r3, [r4, #0]
 8008912:	07d8      	lsls	r0, r3, #31
 8008914:	d510      	bpl.n	8008938 <_printf_float+0x250>
 8008916:	ee18 3a10 	vmov	r3, s16
 800891a:	4652      	mov	r2, sl
 800891c:	4631      	mov	r1, r6
 800891e:	4628      	mov	r0, r5
 8008920:	47b8      	blx	r7
 8008922:	3001      	adds	r0, #1
 8008924:	f43f af41 	beq.w	80087aa <_printf_float+0xc2>
 8008928:	f04f 0800 	mov.w	r8, #0
 800892c:	f104 091a 	add.w	r9, r4, #26
 8008930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008932:	3b01      	subs	r3, #1
 8008934:	4543      	cmp	r3, r8
 8008936:	dc09      	bgt.n	800894c <_printf_float+0x264>
 8008938:	6823      	ldr	r3, [r4, #0]
 800893a:	079b      	lsls	r3, r3, #30
 800893c:	f100 8105 	bmi.w	8008b4a <_printf_float+0x462>
 8008940:	68e0      	ldr	r0, [r4, #12]
 8008942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008944:	4298      	cmp	r0, r3
 8008946:	bfb8      	it	lt
 8008948:	4618      	movlt	r0, r3
 800894a:	e730      	b.n	80087ae <_printf_float+0xc6>
 800894c:	2301      	movs	r3, #1
 800894e:	464a      	mov	r2, r9
 8008950:	4631      	mov	r1, r6
 8008952:	4628      	mov	r0, r5
 8008954:	47b8      	blx	r7
 8008956:	3001      	adds	r0, #1
 8008958:	f43f af27 	beq.w	80087aa <_printf_float+0xc2>
 800895c:	f108 0801 	add.w	r8, r8, #1
 8008960:	e7e6      	b.n	8008930 <_printf_float+0x248>
 8008962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008964:	2b00      	cmp	r3, #0
 8008966:	dc39      	bgt.n	80089dc <_printf_float+0x2f4>
 8008968:	4a1b      	ldr	r2, [pc, #108]	; (80089d8 <_printf_float+0x2f0>)
 800896a:	2301      	movs	r3, #1
 800896c:	4631      	mov	r1, r6
 800896e:	4628      	mov	r0, r5
 8008970:	47b8      	blx	r7
 8008972:	3001      	adds	r0, #1
 8008974:	f43f af19 	beq.w	80087aa <_printf_float+0xc2>
 8008978:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800897c:	4313      	orrs	r3, r2
 800897e:	d102      	bne.n	8008986 <_printf_float+0x29e>
 8008980:	6823      	ldr	r3, [r4, #0]
 8008982:	07d9      	lsls	r1, r3, #31
 8008984:	d5d8      	bpl.n	8008938 <_printf_float+0x250>
 8008986:	ee18 3a10 	vmov	r3, s16
 800898a:	4652      	mov	r2, sl
 800898c:	4631      	mov	r1, r6
 800898e:	4628      	mov	r0, r5
 8008990:	47b8      	blx	r7
 8008992:	3001      	adds	r0, #1
 8008994:	f43f af09 	beq.w	80087aa <_printf_float+0xc2>
 8008998:	f04f 0900 	mov.w	r9, #0
 800899c:	f104 0a1a 	add.w	sl, r4, #26
 80089a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089a2:	425b      	negs	r3, r3
 80089a4:	454b      	cmp	r3, r9
 80089a6:	dc01      	bgt.n	80089ac <_printf_float+0x2c4>
 80089a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089aa:	e792      	b.n	80088d2 <_printf_float+0x1ea>
 80089ac:	2301      	movs	r3, #1
 80089ae:	4652      	mov	r2, sl
 80089b0:	4631      	mov	r1, r6
 80089b2:	4628      	mov	r0, r5
 80089b4:	47b8      	blx	r7
 80089b6:	3001      	adds	r0, #1
 80089b8:	f43f aef7 	beq.w	80087aa <_printf_float+0xc2>
 80089bc:	f109 0901 	add.w	r9, r9, #1
 80089c0:	e7ee      	b.n	80089a0 <_printf_float+0x2b8>
 80089c2:	bf00      	nop
 80089c4:	7fefffff 	.word	0x7fefffff
 80089c8:	0800b340 	.word	0x0800b340
 80089cc:	0800b344 	.word	0x0800b344
 80089d0:	0800b34c 	.word	0x0800b34c
 80089d4:	0800b348 	.word	0x0800b348
 80089d8:	0800b350 	.word	0x0800b350
 80089dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089e0:	429a      	cmp	r2, r3
 80089e2:	bfa8      	it	ge
 80089e4:	461a      	movge	r2, r3
 80089e6:	2a00      	cmp	r2, #0
 80089e8:	4691      	mov	r9, r2
 80089ea:	dc37      	bgt.n	8008a5c <_printf_float+0x374>
 80089ec:	f04f 0b00 	mov.w	fp, #0
 80089f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089f4:	f104 021a 	add.w	r2, r4, #26
 80089f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089fa:	9305      	str	r3, [sp, #20]
 80089fc:	eba3 0309 	sub.w	r3, r3, r9
 8008a00:	455b      	cmp	r3, fp
 8008a02:	dc33      	bgt.n	8008a6c <_printf_float+0x384>
 8008a04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	db3b      	blt.n	8008a84 <_printf_float+0x39c>
 8008a0c:	6823      	ldr	r3, [r4, #0]
 8008a0e:	07da      	lsls	r2, r3, #31
 8008a10:	d438      	bmi.n	8008a84 <_printf_float+0x39c>
 8008a12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a14:	9a05      	ldr	r2, [sp, #20]
 8008a16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a18:	1a9a      	subs	r2, r3, r2
 8008a1a:	eba3 0901 	sub.w	r9, r3, r1
 8008a1e:	4591      	cmp	r9, r2
 8008a20:	bfa8      	it	ge
 8008a22:	4691      	movge	r9, r2
 8008a24:	f1b9 0f00 	cmp.w	r9, #0
 8008a28:	dc35      	bgt.n	8008a96 <_printf_float+0x3ae>
 8008a2a:	f04f 0800 	mov.w	r8, #0
 8008a2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a32:	f104 0a1a 	add.w	sl, r4, #26
 8008a36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a3a:	1a9b      	subs	r3, r3, r2
 8008a3c:	eba3 0309 	sub.w	r3, r3, r9
 8008a40:	4543      	cmp	r3, r8
 8008a42:	f77f af79 	ble.w	8008938 <_printf_float+0x250>
 8008a46:	2301      	movs	r3, #1
 8008a48:	4652      	mov	r2, sl
 8008a4a:	4631      	mov	r1, r6
 8008a4c:	4628      	mov	r0, r5
 8008a4e:	47b8      	blx	r7
 8008a50:	3001      	adds	r0, #1
 8008a52:	f43f aeaa 	beq.w	80087aa <_printf_float+0xc2>
 8008a56:	f108 0801 	add.w	r8, r8, #1
 8008a5a:	e7ec      	b.n	8008a36 <_printf_float+0x34e>
 8008a5c:	4613      	mov	r3, r2
 8008a5e:	4631      	mov	r1, r6
 8008a60:	4642      	mov	r2, r8
 8008a62:	4628      	mov	r0, r5
 8008a64:	47b8      	blx	r7
 8008a66:	3001      	adds	r0, #1
 8008a68:	d1c0      	bne.n	80089ec <_printf_float+0x304>
 8008a6a:	e69e      	b.n	80087aa <_printf_float+0xc2>
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	4631      	mov	r1, r6
 8008a70:	4628      	mov	r0, r5
 8008a72:	9205      	str	r2, [sp, #20]
 8008a74:	47b8      	blx	r7
 8008a76:	3001      	adds	r0, #1
 8008a78:	f43f ae97 	beq.w	80087aa <_printf_float+0xc2>
 8008a7c:	9a05      	ldr	r2, [sp, #20]
 8008a7e:	f10b 0b01 	add.w	fp, fp, #1
 8008a82:	e7b9      	b.n	80089f8 <_printf_float+0x310>
 8008a84:	ee18 3a10 	vmov	r3, s16
 8008a88:	4652      	mov	r2, sl
 8008a8a:	4631      	mov	r1, r6
 8008a8c:	4628      	mov	r0, r5
 8008a8e:	47b8      	blx	r7
 8008a90:	3001      	adds	r0, #1
 8008a92:	d1be      	bne.n	8008a12 <_printf_float+0x32a>
 8008a94:	e689      	b.n	80087aa <_printf_float+0xc2>
 8008a96:	9a05      	ldr	r2, [sp, #20]
 8008a98:	464b      	mov	r3, r9
 8008a9a:	4442      	add	r2, r8
 8008a9c:	4631      	mov	r1, r6
 8008a9e:	4628      	mov	r0, r5
 8008aa0:	47b8      	blx	r7
 8008aa2:	3001      	adds	r0, #1
 8008aa4:	d1c1      	bne.n	8008a2a <_printf_float+0x342>
 8008aa6:	e680      	b.n	80087aa <_printf_float+0xc2>
 8008aa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008aaa:	2a01      	cmp	r2, #1
 8008aac:	dc01      	bgt.n	8008ab2 <_printf_float+0x3ca>
 8008aae:	07db      	lsls	r3, r3, #31
 8008ab0:	d538      	bpl.n	8008b24 <_printf_float+0x43c>
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	4642      	mov	r2, r8
 8008ab6:	4631      	mov	r1, r6
 8008ab8:	4628      	mov	r0, r5
 8008aba:	47b8      	blx	r7
 8008abc:	3001      	adds	r0, #1
 8008abe:	f43f ae74 	beq.w	80087aa <_printf_float+0xc2>
 8008ac2:	ee18 3a10 	vmov	r3, s16
 8008ac6:	4652      	mov	r2, sl
 8008ac8:	4631      	mov	r1, r6
 8008aca:	4628      	mov	r0, r5
 8008acc:	47b8      	blx	r7
 8008ace:	3001      	adds	r0, #1
 8008ad0:	f43f ae6b 	beq.w	80087aa <_printf_float+0xc2>
 8008ad4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ad8:	2200      	movs	r2, #0
 8008ada:	2300      	movs	r3, #0
 8008adc:	f7f7 fff4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ae0:	b9d8      	cbnz	r0, 8008b1a <_printf_float+0x432>
 8008ae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ae4:	f108 0201 	add.w	r2, r8, #1
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	4631      	mov	r1, r6
 8008aec:	4628      	mov	r0, r5
 8008aee:	47b8      	blx	r7
 8008af0:	3001      	adds	r0, #1
 8008af2:	d10e      	bne.n	8008b12 <_printf_float+0x42a>
 8008af4:	e659      	b.n	80087aa <_printf_float+0xc2>
 8008af6:	2301      	movs	r3, #1
 8008af8:	4652      	mov	r2, sl
 8008afa:	4631      	mov	r1, r6
 8008afc:	4628      	mov	r0, r5
 8008afe:	47b8      	blx	r7
 8008b00:	3001      	adds	r0, #1
 8008b02:	f43f ae52 	beq.w	80087aa <_printf_float+0xc2>
 8008b06:	f108 0801 	add.w	r8, r8, #1
 8008b0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	4543      	cmp	r3, r8
 8008b10:	dcf1      	bgt.n	8008af6 <_printf_float+0x40e>
 8008b12:	464b      	mov	r3, r9
 8008b14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008b18:	e6dc      	b.n	80088d4 <_printf_float+0x1ec>
 8008b1a:	f04f 0800 	mov.w	r8, #0
 8008b1e:	f104 0a1a 	add.w	sl, r4, #26
 8008b22:	e7f2      	b.n	8008b0a <_printf_float+0x422>
 8008b24:	2301      	movs	r3, #1
 8008b26:	4642      	mov	r2, r8
 8008b28:	e7df      	b.n	8008aea <_printf_float+0x402>
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	464a      	mov	r2, r9
 8008b2e:	4631      	mov	r1, r6
 8008b30:	4628      	mov	r0, r5
 8008b32:	47b8      	blx	r7
 8008b34:	3001      	adds	r0, #1
 8008b36:	f43f ae38 	beq.w	80087aa <_printf_float+0xc2>
 8008b3a:	f108 0801 	add.w	r8, r8, #1
 8008b3e:	68e3      	ldr	r3, [r4, #12]
 8008b40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b42:	1a5b      	subs	r3, r3, r1
 8008b44:	4543      	cmp	r3, r8
 8008b46:	dcf0      	bgt.n	8008b2a <_printf_float+0x442>
 8008b48:	e6fa      	b.n	8008940 <_printf_float+0x258>
 8008b4a:	f04f 0800 	mov.w	r8, #0
 8008b4e:	f104 0919 	add.w	r9, r4, #25
 8008b52:	e7f4      	b.n	8008b3e <_printf_float+0x456>

08008b54 <_printf_common>:
 8008b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b58:	4616      	mov	r6, r2
 8008b5a:	4699      	mov	r9, r3
 8008b5c:	688a      	ldr	r2, [r1, #8]
 8008b5e:	690b      	ldr	r3, [r1, #16]
 8008b60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b64:	4293      	cmp	r3, r2
 8008b66:	bfb8      	it	lt
 8008b68:	4613      	movlt	r3, r2
 8008b6a:	6033      	str	r3, [r6, #0]
 8008b6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b70:	4607      	mov	r7, r0
 8008b72:	460c      	mov	r4, r1
 8008b74:	b10a      	cbz	r2, 8008b7a <_printf_common+0x26>
 8008b76:	3301      	adds	r3, #1
 8008b78:	6033      	str	r3, [r6, #0]
 8008b7a:	6823      	ldr	r3, [r4, #0]
 8008b7c:	0699      	lsls	r1, r3, #26
 8008b7e:	bf42      	ittt	mi
 8008b80:	6833      	ldrmi	r3, [r6, #0]
 8008b82:	3302      	addmi	r3, #2
 8008b84:	6033      	strmi	r3, [r6, #0]
 8008b86:	6825      	ldr	r5, [r4, #0]
 8008b88:	f015 0506 	ands.w	r5, r5, #6
 8008b8c:	d106      	bne.n	8008b9c <_printf_common+0x48>
 8008b8e:	f104 0a19 	add.w	sl, r4, #25
 8008b92:	68e3      	ldr	r3, [r4, #12]
 8008b94:	6832      	ldr	r2, [r6, #0]
 8008b96:	1a9b      	subs	r3, r3, r2
 8008b98:	42ab      	cmp	r3, r5
 8008b9a:	dc26      	bgt.n	8008bea <_printf_common+0x96>
 8008b9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ba0:	1e13      	subs	r3, r2, #0
 8008ba2:	6822      	ldr	r2, [r4, #0]
 8008ba4:	bf18      	it	ne
 8008ba6:	2301      	movne	r3, #1
 8008ba8:	0692      	lsls	r2, r2, #26
 8008baa:	d42b      	bmi.n	8008c04 <_printf_common+0xb0>
 8008bac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bb0:	4649      	mov	r1, r9
 8008bb2:	4638      	mov	r0, r7
 8008bb4:	47c0      	blx	r8
 8008bb6:	3001      	adds	r0, #1
 8008bb8:	d01e      	beq.n	8008bf8 <_printf_common+0xa4>
 8008bba:	6823      	ldr	r3, [r4, #0]
 8008bbc:	68e5      	ldr	r5, [r4, #12]
 8008bbe:	6832      	ldr	r2, [r6, #0]
 8008bc0:	f003 0306 	and.w	r3, r3, #6
 8008bc4:	2b04      	cmp	r3, #4
 8008bc6:	bf08      	it	eq
 8008bc8:	1aad      	subeq	r5, r5, r2
 8008bca:	68a3      	ldr	r3, [r4, #8]
 8008bcc:	6922      	ldr	r2, [r4, #16]
 8008bce:	bf0c      	ite	eq
 8008bd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008bd4:	2500      	movne	r5, #0
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	bfc4      	itt	gt
 8008bda:	1a9b      	subgt	r3, r3, r2
 8008bdc:	18ed      	addgt	r5, r5, r3
 8008bde:	2600      	movs	r6, #0
 8008be0:	341a      	adds	r4, #26
 8008be2:	42b5      	cmp	r5, r6
 8008be4:	d11a      	bne.n	8008c1c <_printf_common+0xc8>
 8008be6:	2000      	movs	r0, #0
 8008be8:	e008      	b.n	8008bfc <_printf_common+0xa8>
 8008bea:	2301      	movs	r3, #1
 8008bec:	4652      	mov	r2, sl
 8008bee:	4649      	mov	r1, r9
 8008bf0:	4638      	mov	r0, r7
 8008bf2:	47c0      	blx	r8
 8008bf4:	3001      	adds	r0, #1
 8008bf6:	d103      	bne.n	8008c00 <_printf_common+0xac>
 8008bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c00:	3501      	adds	r5, #1
 8008c02:	e7c6      	b.n	8008b92 <_printf_common+0x3e>
 8008c04:	18e1      	adds	r1, r4, r3
 8008c06:	1c5a      	adds	r2, r3, #1
 8008c08:	2030      	movs	r0, #48	; 0x30
 8008c0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c0e:	4422      	add	r2, r4
 8008c10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c18:	3302      	adds	r3, #2
 8008c1a:	e7c7      	b.n	8008bac <_printf_common+0x58>
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	4622      	mov	r2, r4
 8008c20:	4649      	mov	r1, r9
 8008c22:	4638      	mov	r0, r7
 8008c24:	47c0      	blx	r8
 8008c26:	3001      	adds	r0, #1
 8008c28:	d0e6      	beq.n	8008bf8 <_printf_common+0xa4>
 8008c2a:	3601      	adds	r6, #1
 8008c2c:	e7d9      	b.n	8008be2 <_printf_common+0x8e>
	...

08008c30 <_printf_i>:
 8008c30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c34:	7e0f      	ldrb	r7, [r1, #24]
 8008c36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c38:	2f78      	cmp	r7, #120	; 0x78
 8008c3a:	4691      	mov	r9, r2
 8008c3c:	4680      	mov	r8, r0
 8008c3e:	460c      	mov	r4, r1
 8008c40:	469a      	mov	sl, r3
 8008c42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c46:	d807      	bhi.n	8008c58 <_printf_i+0x28>
 8008c48:	2f62      	cmp	r7, #98	; 0x62
 8008c4a:	d80a      	bhi.n	8008c62 <_printf_i+0x32>
 8008c4c:	2f00      	cmp	r7, #0
 8008c4e:	f000 80d8 	beq.w	8008e02 <_printf_i+0x1d2>
 8008c52:	2f58      	cmp	r7, #88	; 0x58
 8008c54:	f000 80a3 	beq.w	8008d9e <_printf_i+0x16e>
 8008c58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c60:	e03a      	b.n	8008cd8 <_printf_i+0xa8>
 8008c62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c66:	2b15      	cmp	r3, #21
 8008c68:	d8f6      	bhi.n	8008c58 <_printf_i+0x28>
 8008c6a:	a101      	add	r1, pc, #4	; (adr r1, 8008c70 <_printf_i+0x40>)
 8008c6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c70:	08008cc9 	.word	0x08008cc9
 8008c74:	08008cdd 	.word	0x08008cdd
 8008c78:	08008c59 	.word	0x08008c59
 8008c7c:	08008c59 	.word	0x08008c59
 8008c80:	08008c59 	.word	0x08008c59
 8008c84:	08008c59 	.word	0x08008c59
 8008c88:	08008cdd 	.word	0x08008cdd
 8008c8c:	08008c59 	.word	0x08008c59
 8008c90:	08008c59 	.word	0x08008c59
 8008c94:	08008c59 	.word	0x08008c59
 8008c98:	08008c59 	.word	0x08008c59
 8008c9c:	08008de9 	.word	0x08008de9
 8008ca0:	08008d0d 	.word	0x08008d0d
 8008ca4:	08008dcb 	.word	0x08008dcb
 8008ca8:	08008c59 	.word	0x08008c59
 8008cac:	08008c59 	.word	0x08008c59
 8008cb0:	08008e0b 	.word	0x08008e0b
 8008cb4:	08008c59 	.word	0x08008c59
 8008cb8:	08008d0d 	.word	0x08008d0d
 8008cbc:	08008c59 	.word	0x08008c59
 8008cc0:	08008c59 	.word	0x08008c59
 8008cc4:	08008dd3 	.word	0x08008dd3
 8008cc8:	682b      	ldr	r3, [r5, #0]
 8008cca:	1d1a      	adds	r2, r3, #4
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	602a      	str	r2, [r5, #0]
 8008cd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e0a3      	b.n	8008e24 <_printf_i+0x1f4>
 8008cdc:	6820      	ldr	r0, [r4, #0]
 8008cde:	6829      	ldr	r1, [r5, #0]
 8008ce0:	0606      	lsls	r6, r0, #24
 8008ce2:	f101 0304 	add.w	r3, r1, #4
 8008ce6:	d50a      	bpl.n	8008cfe <_printf_i+0xce>
 8008ce8:	680e      	ldr	r6, [r1, #0]
 8008cea:	602b      	str	r3, [r5, #0]
 8008cec:	2e00      	cmp	r6, #0
 8008cee:	da03      	bge.n	8008cf8 <_printf_i+0xc8>
 8008cf0:	232d      	movs	r3, #45	; 0x2d
 8008cf2:	4276      	negs	r6, r6
 8008cf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cf8:	485e      	ldr	r0, [pc, #376]	; (8008e74 <_printf_i+0x244>)
 8008cfa:	230a      	movs	r3, #10
 8008cfc:	e019      	b.n	8008d32 <_printf_i+0x102>
 8008cfe:	680e      	ldr	r6, [r1, #0]
 8008d00:	602b      	str	r3, [r5, #0]
 8008d02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008d06:	bf18      	it	ne
 8008d08:	b236      	sxthne	r6, r6
 8008d0a:	e7ef      	b.n	8008cec <_printf_i+0xbc>
 8008d0c:	682b      	ldr	r3, [r5, #0]
 8008d0e:	6820      	ldr	r0, [r4, #0]
 8008d10:	1d19      	adds	r1, r3, #4
 8008d12:	6029      	str	r1, [r5, #0]
 8008d14:	0601      	lsls	r1, r0, #24
 8008d16:	d501      	bpl.n	8008d1c <_printf_i+0xec>
 8008d18:	681e      	ldr	r6, [r3, #0]
 8008d1a:	e002      	b.n	8008d22 <_printf_i+0xf2>
 8008d1c:	0646      	lsls	r6, r0, #25
 8008d1e:	d5fb      	bpl.n	8008d18 <_printf_i+0xe8>
 8008d20:	881e      	ldrh	r6, [r3, #0]
 8008d22:	4854      	ldr	r0, [pc, #336]	; (8008e74 <_printf_i+0x244>)
 8008d24:	2f6f      	cmp	r7, #111	; 0x6f
 8008d26:	bf0c      	ite	eq
 8008d28:	2308      	moveq	r3, #8
 8008d2a:	230a      	movne	r3, #10
 8008d2c:	2100      	movs	r1, #0
 8008d2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d32:	6865      	ldr	r5, [r4, #4]
 8008d34:	60a5      	str	r5, [r4, #8]
 8008d36:	2d00      	cmp	r5, #0
 8008d38:	bfa2      	ittt	ge
 8008d3a:	6821      	ldrge	r1, [r4, #0]
 8008d3c:	f021 0104 	bicge.w	r1, r1, #4
 8008d40:	6021      	strge	r1, [r4, #0]
 8008d42:	b90e      	cbnz	r6, 8008d48 <_printf_i+0x118>
 8008d44:	2d00      	cmp	r5, #0
 8008d46:	d04d      	beq.n	8008de4 <_printf_i+0x1b4>
 8008d48:	4615      	mov	r5, r2
 8008d4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d4e:	fb03 6711 	mls	r7, r3, r1, r6
 8008d52:	5dc7      	ldrb	r7, [r0, r7]
 8008d54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d58:	4637      	mov	r7, r6
 8008d5a:	42bb      	cmp	r3, r7
 8008d5c:	460e      	mov	r6, r1
 8008d5e:	d9f4      	bls.n	8008d4a <_printf_i+0x11a>
 8008d60:	2b08      	cmp	r3, #8
 8008d62:	d10b      	bne.n	8008d7c <_printf_i+0x14c>
 8008d64:	6823      	ldr	r3, [r4, #0]
 8008d66:	07de      	lsls	r6, r3, #31
 8008d68:	d508      	bpl.n	8008d7c <_printf_i+0x14c>
 8008d6a:	6923      	ldr	r3, [r4, #16]
 8008d6c:	6861      	ldr	r1, [r4, #4]
 8008d6e:	4299      	cmp	r1, r3
 8008d70:	bfde      	ittt	le
 8008d72:	2330      	movle	r3, #48	; 0x30
 8008d74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d7c:	1b52      	subs	r2, r2, r5
 8008d7e:	6122      	str	r2, [r4, #16]
 8008d80:	f8cd a000 	str.w	sl, [sp]
 8008d84:	464b      	mov	r3, r9
 8008d86:	aa03      	add	r2, sp, #12
 8008d88:	4621      	mov	r1, r4
 8008d8a:	4640      	mov	r0, r8
 8008d8c:	f7ff fee2 	bl	8008b54 <_printf_common>
 8008d90:	3001      	adds	r0, #1
 8008d92:	d14c      	bne.n	8008e2e <_printf_i+0x1fe>
 8008d94:	f04f 30ff 	mov.w	r0, #4294967295
 8008d98:	b004      	add	sp, #16
 8008d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d9e:	4835      	ldr	r0, [pc, #212]	; (8008e74 <_printf_i+0x244>)
 8008da0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008da4:	6829      	ldr	r1, [r5, #0]
 8008da6:	6823      	ldr	r3, [r4, #0]
 8008da8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008dac:	6029      	str	r1, [r5, #0]
 8008dae:	061d      	lsls	r5, r3, #24
 8008db0:	d514      	bpl.n	8008ddc <_printf_i+0x1ac>
 8008db2:	07df      	lsls	r7, r3, #31
 8008db4:	bf44      	itt	mi
 8008db6:	f043 0320 	orrmi.w	r3, r3, #32
 8008dba:	6023      	strmi	r3, [r4, #0]
 8008dbc:	b91e      	cbnz	r6, 8008dc6 <_printf_i+0x196>
 8008dbe:	6823      	ldr	r3, [r4, #0]
 8008dc0:	f023 0320 	bic.w	r3, r3, #32
 8008dc4:	6023      	str	r3, [r4, #0]
 8008dc6:	2310      	movs	r3, #16
 8008dc8:	e7b0      	b.n	8008d2c <_printf_i+0xfc>
 8008dca:	6823      	ldr	r3, [r4, #0]
 8008dcc:	f043 0320 	orr.w	r3, r3, #32
 8008dd0:	6023      	str	r3, [r4, #0]
 8008dd2:	2378      	movs	r3, #120	; 0x78
 8008dd4:	4828      	ldr	r0, [pc, #160]	; (8008e78 <_printf_i+0x248>)
 8008dd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008dda:	e7e3      	b.n	8008da4 <_printf_i+0x174>
 8008ddc:	0659      	lsls	r1, r3, #25
 8008dde:	bf48      	it	mi
 8008de0:	b2b6      	uxthmi	r6, r6
 8008de2:	e7e6      	b.n	8008db2 <_printf_i+0x182>
 8008de4:	4615      	mov	r5, r2
 8008de6:	e7bb      	b.n	8008d60 <_printf_i+0x130>
 8008de8:	682b      	ldr	r3, [r5, #0]
 8008dea:	6826      	ldr	r6, [r4, #0]
 8008dec:	6961      	ldr	r1, [r4, #20]
 8008dee:	1d18      	adds	r0, r3, #4
 8008df0:	6028      	str	r0, [r5, #0]
 8008df2:	0635      	lsls	r5, r6, #24
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	d501      	bpl.n	8008dfc <_printf_i+0x1cc>
 8008df8:	6019      	str	r1, [r3, #0]
 8008dfa:	e002      	b.n	8008e02 <_printf_i+0x1d2>
 8008dfc:	0670      	lsls	r0, r6, #25
 8008dfe:	d5fb      	bpl.n	8008df8 <_printf_i+0x1c8>
 8008e00:	8019      	strh	r1, [r3, #0]
 8008e02:	2300      	movs	r3, #0
 8008e04:	6123      	str	r3, [r4, #16]
 8008e06:	4615      	mov	r5, r2
 8008e08:	e7ba      	b.n	8008d80 <_printf_i+0x150>
 8008e0a:	682b      	ldr	r3, [r5, #0]
 8008e0c:	1d1a      	adds	r2, r3, #4
 8008e0e:	602a      	str	r2, [r5, #0]
 8008e10:	681d      	ldr	r5, [r3, #0]
 8008e12:	6862      	ldr	r2, [r4, #4]
 8008e14:	2100      	movs	r1, #0
 8008e16:	4628      	mov	r0, r5
 8008e18:	f7f7 f9e2 	bl	80001e0 <memchr>
 8008e1c:	b108      	cbz	r0, 8008e22 <_printf_i+0x1f2>
 8008e1e:	1b40      	subs	r0, r0, r5
 8008e20:	6060      	str	r0, [r4, #4]
 8008e22:	6863      	ldr	r3, [r4, #4]
 8008e24:	6123      	str	r3, [r4, #16]
 8008e26:	2300      	movs	r3, #0
 8008e28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e2c:	e7a8      	b.n	8008d80 <_printf_i+0x150>
 8008e2e:	6923      	ldr	r3, [r4, #16]
 8008e30:	462a      	mov	r2, r5
 8008e32:	4649      	mov	r1, r9
 8008e34:	4640      	mov	r0, r8
 8008e36:	47d0      	blx	sl
 8008e38:	3001      	adds	r0, #1
 8008e3a:	d0ab      	beq.n	8008d94 <_printf_i+0x164>
 8008e3c:	6823      	ldr	r3, [r4, #0]
 8008e3e:	079b      	lsls	r3, r3, #30
 8008e40:	d413      	bmi.n	8008e6a <_printf_i+0x23a>
 8008e42:	68e0      	ldr	r0, [r4, #12]
 8008e44:	9b03      	ldr	r3, [sp, #12]
 8008e46:	4298      	cmp	r0, r3
 8008e48:	bfb8      	it	lt
 8008e4a:	4618      	movlt	r0, r3
 8008e4c:	e7a4      	b.n	8008d98 <_printf_i+0x168>
 8008e4e:	2301      	movs	r3, #1
 8008e50:	4632      	mov	r2, r6
 8008e52:	4649      	mov	r1, r9
 8008e54:	4640      	mov	r0, r8
 8008e56:	47d0      	blx	sl
 8008e58:	3001      	adds	r0, #1
 8008e5a:	d09b      	beq.n	8008d94 <_printf_i+0x164>
 8008e5c:	3501      	adds	r5, #1
 8008e5e:	68e3      	ldr	r3, [r4, #12]
 8008e60:	9903      	ldr	r1, [sp, #12]
 8008e62:	1a5b      	subs	r3, r3, r1
 8008e64:	42ab      	cmp	r3, r5
 8008e66:	dcf2      	bgt.n	8008e4e <_printf_i+0x21e>
 8008e68:	e7eb      	b.n	8008e42 <_printf_i+0x212>
 8008e6a:	2500      	movs	r5, #0
 8008e6c:	f104 0619 	add.w	r6, r4, #25
 8008e70:	e7f5      	b.n	8008e5e <_printf_i+0x22e>
 8008e72:	bf00      	nop
 8008e74:	0800b352 	.word	0x0800b352
 8008e78:	0800b363 	.word	0x0800b363

08008e7c <cleanup_glue>:
 8008e7c:	b538      	push	{r3, r4, r5, lr}
 8008e7e:	460c      	mov	r4, r1
 8008e80:	6809      	ldr	r1, [r1, #0]
 8008e82:	4605      	mov	r5, r0
 8008e84:	b109      	cbz	r1, 8008e8a <cleanup_glue+0xe>
 8008e86:	f7ff fff9 	bl	8008e7c <cleanup_glue>
 8008e8a:	4621      	mov	r1, r4
 8008e8c:	4628      	mov	r0, r5
 8008e8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e92:	f001 bd49 	b.w	800a928 <_free_r>
	...

08008e98 <_reclaim_reent>:
 8008e98:	4b2c      	ldr	r3, [pc, #176]	; (8008f4c <_reclaim_reent+0xb4>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4283      	cmp	r3, r0
 8008e9e:	b570      	push	{r4, r5, r6, lr}
 8008ea0:	4604      	mov	r4, r0
 8008ea2:	d051      	beq.n	8008f48 <_reclaim_reent+0xb0>
 8008ea4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008ea6:	b143      	cbz	r3, 8008eba <_reclaim_reent+0x22>
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d14a      	bne.n	8008f44 <_reclaim_reent+0xac>
 8008eae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008eb0:	6819      	ldr	r1, [r3, #0]
 8008eb2:	b111      	cbz	r1, 8008eba <_reclaim_reent+0x22>
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	f001 fd37 	bl	800a928 <_free_r>
 8008eba:	6961      	ldr	r1, [r4, #20]
 8008ebc:	b111      	cbz	r1, 8008ec4 <_reclaim_reent+0x2c>
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	f001 fd32 	bl	800a928 <_free_r>
 8008ec4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008ec6:	b111      	cbz	r1, 8008ece <_reclaim_reent+0x36>
 8008ec8:	4620      	mov	r0, r4
 8008eca:	f001 fd2d 	bl	800a928 <_free_r>
 8008ece:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008ed0:	b111      	cbz	r1, 8008ed8 <_reclaim_reent+0x40>
 8008ed2:	4620      	mov	r0, r4
 8008ed4:	f001 fd28 	bl	800a928 <_free_r>
 8008ed8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008eda:	b111      	cbz	r1, 8008ee2 <_reclaim_reent+0x4a>
 8008edc:	4620      	mov	r0, r4
 8008ede:	f001 fd23 	bl	800a928 <_free_r>
 8008ee2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008ee4:	b111      	cbz	r1, 8008eec <_reclaim_reent+0x54>
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	f001 fd1e 	bl	800a928 <_free_r>
 8008eec:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008eee:	b111      	cbz	r1, 8008ef6 <_reclaim_reent+0x5e>
 8008ef0:	4620      	mov	r0, r4
 8008ef2:	f001 fd19 	bl	800a928 <_free_r>
 8008ef6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008ef8:	b111      	cbz	r1, 8008f00 <_reclaim_reent+0x68>
 8008efa:	4620      	mov	r0, r4
 8008efc:	f001 fd14 	bl	800a928 <_free_r>
 8008f00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f02:	b111      	cbz	r1, 8008f0a <_reclaim_reent+0x72>
 8008f04:	4620      	mov	r0, r4
 8008f06:	f001 fd0f 	bl	800a928 <_free_r>
 8008f0a:	69a3      	ldr	r3, [r4, #24]
 8008f0c:	b1e3      	cbz	r3, 8008f48 <_reclaim_reent+0xb0>
 8008f0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008f10:	4620      	mov	r0, r4
 8008f12:	4798      	blx	r3
 8008f14:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008f16:	b1b9      	cbz	r1, 8008f48 <_reclaim_reent+0xb0>
 8008f18:	4620      	mov	r0, r4
 8008f1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008f1e:	f7ff bfad 	b.w	8008e7c <cleanup_glue>
 8008f22:	5949      	ldr	r1, [r1, r5]
 8008f24:	b941      	cbnz	r1, 8008f38 <_reclaim_reent+0xa0>
 8008f26:	3504      	adds	r5, #4
 8008f28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f2a:	2d80      	cmp	r5, #128	; 0x80
 8008f2c:	68d9      	ldr	r1, [r3, #12]
 8008f2e:	d1f8      	bne.n	8008f22 <_reclaim_reent+0x8a>
 8008f30:	4620      	mov	r0, r4
 8008f32:	f001 fcf9 	bl	800a928 <_free_r>
 8008f36:	e7ba      	b.n	8008eae <_reclaim_reent+0x16>
 8008f38:	680e      	ldr	r6, [r1, #0]
 8008f3a:	4620      	mov	r0, r4
 8008f3c:	f001 fcf4 	bl	800a928 <_free_r>
 8008f40:	4631      	mov	r1, r6
 8008f42:	e7ef      	b.n	8008f24 <_reclaim_reent+0x8c>
 8008f44:	2500      	movs	r5, #0
 8008f46:	e7ef      	b.n	8008f28 <_reclaim_reent+0x90>
 8008f48:	bd70      	pop	{r4, r5, r6, pc}
 8008f4a:	bf00      	nop
 8008f4c:	200000d4 	.word	0x200000d4

08008f50 <_sbrk_r>:
 8008f50:	b538      	push	{r3, r4, r5, lr}
 8008f52:	4d06      	ldr	r5, [pc, #24]	; (8008f6c <_sbrk_r+0x1c>)
 8008f54:	2300      	movs	r3, #0
 8008f56:	4604      	mov	r4, r0
 8008f58:	4608      	mov	r0, r1
 8008f5a:	602b      	str	r3, [r5, #0]
 8008f5c:	f7f8 fe34 	bl	8001bc8 <_sbrk>
 8008f60:	1c43      	adds	r3, r0, #1
 8008f62:	d102      	bne.n	8008f6a <_sbrk_r+0x1a>
 8008f64:	682b      	ldr	r3, [r5, #0]
 8008f66:	b103      	cbz	r3, 8008f6a <_sbrk_r+0x1a>
 8008f68:	6023      	str	r3, [r4, #0]
 8008f6a:	bd38      	pop	{r3, r4, r5, pc}
 8008f6c:	20001c10 	.word	0x20001c10

08008f70 <siprintf>:
 8008f70:	b40e      	push	{r1, r2, r3}
 8008f72:	b500      	push	{lr}
 8008f74:	b09c      	sub	sp, #112	; 0x70
 8008f76:	ab1d      	add	r3, sp, #116	; 0x74
 8008f78:	9002      	str	r0, [sp, #8]
 8008f7a:	9006      	str	r0, [sp, #24]
 8008f7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f80:	4809      	ldr	r0, [pc, #36]	; (8008fa8 <siprintf+0x38>)
 8008f82:	9107      	str	r1, [sp, #28]
 8008f84:	9104      	str	r1, [sp, #16]
 8008f86:	4909      	ldr	r1, [pc, #36]	; (8008fac <siprintf+0x3c>)
 8008f88:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f8c:	9105      	str	r1, [sp, #20]
 8008f8e:	6800      	ldr	r0, [r0, #0]
 8008f90:	9301      	str	r3, [sp, #4]
 8008f92:	a902      	add	r1, sp, #8
 8008f94:	f001 fd70 	bl	800aa78 <_svfiprintf_r>
 8008f98:	9b02      	ldr	r3, [sp, #8]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	701a      	strb	r2, [r3, #0]
 8008f9e:	b01c      	add	sp, #112	; 0x70
 8008fa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fa4:	b003      	add	sp, #12
 8008fa6:	4770      	bx	lr
 8008fa8:	200000d4 	.word	0x200000d4
 8008fac:	ffff0208 	.word	0xffff0208

08008fb0 <__sread>:
 8008fb0:	b510      	push	{r4, lr}
 8008fb2:	460c      	mov	r4, r1
 8008fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fb8:	f001 ffb8 	bl	800af2c <_read_r>
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	bfab      	itete	ge
 8008fc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008fc2:	89a3      	ldrhlt	r3, [r4, #12]
 8008fc4:	181b      	addge	r3, r3, r0
 8008fc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008fca:	bfac      	ite	ge
 8008fcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8008fce:	81a3      	strhlt	r3, [r4, #12]
 8008fd0:	bd10      	pop	{r4, pc}

08008fd2 <__swrite>:
 8008fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fd6:	461f      	mov	r7, r3
 8008fd8:	898b      	ldrh	r3, [r1, #12]
 8008fda:	05db      	lsls	r3, r3, #23
 8008fdc:	4605      	mov	r5, r0
 8008fde:	460c      	mov	r4, r1
 8008fe0:	4616      	mov	r6, r2
 8008fe2:	d505      	bpl.n	8008ff0 <__swrite+0x1e>
 8008fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fe8:	2302      	movs	r3, #2
 8008fea:	2200      	movs	r2, #0
 8008fec:	f001 f876 	bl	800a0dc <_lseek_r>
 8008ff0:	89a3      	ldrh	r3, [r4, #12]
 8008ff2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ff6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ffa:	81a3      	strh	r3, [r4, #12]
 8008ffc:	4632      	mov	r2, r6
 8008ffe:	463b      	mov	r3, r7
 8009000:	4628      	mov	r0, r5
 8009002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009006:	f000 b869 	b.w	80090dc <_write_r>

0800900a <__sseek>:
 800900a:	b510      	push	{r4, lr}
 800900c:	460c      	mov	r4, r1
 800900e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009012:	f001 f863 	bl	800a0dc <_lseek_r>
 8009016:	1c43      	adds	r3, r0, #1
 8009018:	89a3      	ldrh	r3, [r4, #12]
 800901a:	bf15      	itete	ne
 800901c:	6560      	strne	r0, [r4, #84]	; 0x54
 800901e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009022:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009026:	81a3      	strheq	r3, [r4, #12]
 8009028:	bf18      	it	ne
 800902a:	81a3      	strhne	r3, [r4, #12]
 800902c:	bd10      	pop	{r4, pc}

0800902e <__sclose>:
 800902e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009032:	f000 b8f1 	b.w	8009218 <_close_r>
	...

08009038 <__swbuf_r>:
 8009038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800903a:	460e      	mov	r6, r1
 800903c:	4614      	mov	r4, r2
 800903e:	4605      	mov	r5, r0
 8009040:	b118      	cbz	r0, 800904a <__swbuf_r+0x12>
 8009042:	6983      	ldr	r3, [r0, #24]
 8009044:	b90b      	cbnz	r3, 800904a <__swbuf_r+0x12>
 8009046:	f7ff f93f 	bl	80082c8 <__sinit>
 800904a:	4b21      	ldr	r3, [pc, #132]	; (80090d0 <__swbuf_r+0x98>)
 800904c:	429c      	cmp	r4, r3
 800904e:	d12b      	bne.n	80090a8 <__swbuf_r+0x70>
 8009050:	686c      	ldr	r4, [r5, #4]
 8009052:	69a3      	ldr	r3, [r4, #24]
 8009054:	60a3      	str	r3, [r4, #8]
 8009056:	89a3      	ldrh	r3, [r4, #12]
 8009058:	071a      	lsls	r2, r3, #28
 800905a:	d52f      	bpl.n	80090bc <__swbuf_r+0x84>
 800905c:	6923      	ldr	r3, [r4, #16]
 800905e:	b36b      	cbz	r3, 80090bc <__swbuf_r+0x84>
 8009060:	6923      	ldr	r3, [r4, #16]
 8009062:	6820      	ldr	r0, [r4, #0]
 8009064:	1ac0      	subs	r0, r0, r3
 8009066:	6963      	ldr	r3, [r4, #20]
 8009068:	b2f6      	uxtb	r6, r6
 800906a:	4283      	cmp	r3, r0
 800906c:	4637      	mov	r7, r6
 800906e:	dc04      	bgt.n	800907a <__swbuf_r+0x42>
 8009070:	4621      	mov	r1, r4
 8009072:	4628      	mov	r0, r5
 8009074:	f000 ffe0 	bl	800a038 <_fflush_r>
 8009078:	bb30      	cbnz	r0, 80090c8 <__swbuf_r+0x90>
 800907a:	68a3      	ldr	r3, [r4, #8]
 800907c:	3b01      	subs	r3, #1
 800907e:	60a3      	str	r3, [r4, #8]
 8009080:	6823      	ldr	r3, [r4, #0]
 8009082:	1c5a      	adds	r2, r3, #1
 8009084:	6022      	str	r2, [r4, #0]
 8009086:	701e      	strb	r6, [r3, #0]
 8009088:	6963      	ldr	r3, [r4, #20]
 800908a:	3001      	adds	r0, #1
 800908c:	4283      	cmp	r3, r0
 800908e:	d004      	beq.n	800909a <__swbuf_r+0x62>
 8009090:	89a3      	ldrh	r3, [r4, #12]
 8009092:	07db      	lsls	r3, r3, #31
 8009094:	d506      	bpl.n	80090a4 <__swbuf_r+0x6c>
 8009096:	2e0a      	cmp	r6, #10
 8009098:	d104      	bne.n	80090a4 <__swbuf_r+0x6c>
 800909a:	4621      	mov	r1, r4
 800909c:	4628      	mov	r0, r5
 800909e:	f000 ffcb 	bl	800a038 <_fflush_r>
 80090a2:	b988      	cbnz	r0, 80090c8 <__swbuf_r+0x90>
 80090a4:	4638      	mov	r0, r7
 80090a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090a8:	4b0a      	ldr	r3, [pc, #40]	; (80090d4 <__swbuf_r+0x9c>)
 80090aa:	429c      	cmp	r4, r3
 80090ac:	d101      	bne.n	80090b2 <__swbuf_r+0x7a>
 80090ae:	68ac      	ldr	r4, [r5, #8]
 80090b0:	e7cf      	b.n	8009052 <__swbuf_r+0x1a>
 80090b2:	4b09      	ldr	r3, [pc, #36]	; (80090d8 <__swbuf_r+0xa0>)
 80090b4:	429c      	cmp	r4, r3
 80090b6:	bf08      	it	eq
 80090b8:	68ec      	ldreq	r4, [r5, #12]
 80090ba:	e7ca      	b.n	8009052 <__swbuf_r+0x1a>
 80090bc:	4621      	mov	r1, r4
 80090be:	4628      	mov	r0, r5
 80090c0:	f000 f81e 	bl	8009100 <__swsetup_r>
 80090c4:	2800      	cmp	r0, #0
 80090c6:	d0cb      	beq.n	8009060 <__swbuf_r+0x28>
 80090c8:	f04f 37ff 	mov.w	r7, #4294967295
 80090cc:	e7ea      	b.n	80090a4 <__swbuf_r+0x6c>
 80090ce:	bf00      	nop
 80090d0:	0800b2fc 	.word	0x0800b2fc
 80090d4:	0800b31c 	.word	0x0800b31c
 80090d8:	0800b2dc 	.word	0x0800b2dc

080090dc <_write_r>:
 80090dc:	b538      	push	{r3, r4, r5, lr}
 80090de:	4d07      	ldr	r5, [pc, #28]	; (80090fc <_write_r+0x20>)
 80090e0:	4604      	mov	r4, r0
 80090e2:	4608      	mov	r0, r1
 80090e4:	4611      	mov	r1, r2
 80090e6:	2200      	movs	r2, #0
 80090e8:	602a      	str	r2, [r5, #0]
 80090ea:	461a      	mov	r2, r3
 80090ec:	f7f8 fd1b 	bl	8001b26 <_write>
 80090f0:	1c43      	adds	r3, r0, #1
 80090f2:	d102      	bne.n	80090fa <_write_r+0x1e>
 80090f4:	682b      	ldr	r3, [r5, #0]
 80090f6:	b103      	cbz	r3, 80090fa <_write_r+0x1e>
 80090f8:	6023      	str	r3, [r4, #0]
 80090fa:	bd38      	pop	{r3, r4, r5, pc}
 80090fc:	20001c10 	.word	0x20001c10

08009100 <__swsetup_r>:
 8009100:	4b32      	ldr	r3, [pc, #200]	; (80091cc <__swsetup_r+0xcc>)
 8009102:	b570      	push	{r4, r5, r6, lr}
 8009104:	681d      	ldr	r5, [r3, #0]
 8009106:	4606      	mov	r6, r0
 8009108:	460c      	mov	r4, r1
 800910a:	b125      	cbz	r5, 8009116 <__swsetup_r+0x16>
 800910c:	69ab      	ldr	r3, [r5, #24]
 800910e:	b913      	cbnz	r3, 8009116 <__swsetup_r+0x16>
 8009110:	4628      	mov	r0, r5
 8009112:	f7ff f8d9 	bl	80082c8 <__sinit>
 8009116:	4b2e      	ldr	r3, [pc, #184]	; (80091d0 <__swsetup_r+0xd0>)
 8009118:	429c      	cmp	r4, r3
 800911a:	d10f      	bne.n	800913c <__swsetup_r+0x3c>
 800911c:	686c      	ldr	r4, [r5, #4]
 800911e:	89a3      	ldrh	r3, [r4, #12]
 8009120:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009124:	0719      	lsls	r1, r3, #28
 8009126:	d42c      	bmi.n	8009182 <__swsetup_r+0x82>
 8009128:	06dd      	lsls	r5, r3, #27
 800912a:	d411      	bmi.n	8009150 <__swsetup_r+0x50>
 800912c:	2309      	movs	r3, #9
 800912e:	6033      	str	r3, [r6, #0]
 8009130:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009134:	81a3      	strh	r3, [r4, #12]
 8009136:	f04f 30ff 	mov.w	r0, #4294967295
 800913a:	e03e      	b.n	80091ba <__swsetup_r+0xba>
 800913c:	4b25      	ldr	r3, [pc, #148]	; (80091d4 <__swsetup_r+0xd4>)
 800913e:	429c      	cmp	r4, r3
 8009140:	d101      	bne.n	8009146 <__swsetup_r+0x46>
 8009142:	68ac      	ldr	r4, [r5, #8]
 8009144:	e7eb      	b.n	800911e <__swsetup_r+0x1e>
 8009146:	4b24      	ldr	r3, [pc, #144]	; (80091d8 <__swsetup_r+0xd8>)
 8009148:	429c      	cmp	r4, r3
 800914a:	bf08      	it	eq
 800914c:	68ec      	ldreq	r4, [r5, #12]
 800914e:	e7e6      	b.n	800911e <__swsetup_r+0x1e>
 8009150:	0758      	lsls	r0, r3, #29
 8009152:	d512      	bpl.n	800917a <__swsetup_r+0x7a>
 8009154:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009156:	b141      	cbz	r1, 800916a <__swsetup_r+0x6a>
 8009158:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800915c:	4299      	cmp	r1, r3
 800915e:	d002      	beq.n	8009166 <__swsetup_r+0x66>
 8009160:	4630      	mov	r0, r6
 8009162:	f001 fbe1 	bl	800a928 <_free_r>
 8009166:	2300      	movs	r3, #0
 8009168:	6363      	str	r3, [r4, #52]	; 0x34
 800916a:	89a3      	ldrh	r3, [r4, #12]
 800916c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009170:	81a3      	strh	r3, [r4, #12]
 8009172:	2300      	movs	r3, #0
 8009174:	6063      	str	r3, [r4, #4]
 8009176:	6923      	ldr	r3, [r4, #16]
 8009178:	6023      	str	r3, [r4, #0]
 800917a:	89a3      	ldrh	r3, [r4, #12]
 800917c:	f043 0308 	orr.w	r3, r3, #8
 8009180:	81a3      	strh	r3, [r4, #12]
 8009182:	6923      	ldr	r3, [r4, #16]
 8009184:	b94b      	cbnz	r3, 800919a <__swsetup_r+0x9a>
 8009186:	89a3      	ldrh	r3, [r4, #12]
 8009188:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800918c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009190:	d003      	beq.n	800919a <__swsetup_r+0x9a>
 8009192:	4621      	mov	r1, r4
 8009194:	4630      	mov	r0, r6
 8009196:	f000 ffd9 	bl	800a14c <__smakebuf_r>
 800919a:	89a0      	ldrh	r0, [r4, #12]
 800919c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091a0:	f010 0301 	ands.w	r3, r0, #1
 80091a4:	d00a      	beq.n	80091bc <__swsetup_r+0xbc>
 80091a6:	2300      	movs	r3, #0
 80091a8:	60a3      	str	r3, [r4, #8]
 80091aa:	6963      	ldr	r3, [r4, #20]
 80091ac:	425b      	negs	r3, r3
 80091ae:	61a3      	str	r3, [r4, #24]
 80091b0:	6923      	ldr	r3, [r4, #16]
 80091b2:	b943      	cbnz	r3, 80091c6 <__swsetup_r+0xc6>
 80091b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80091b8:	d1ba      	bne.n	8009130 <__swsetup_r+0x30>
 80091ba:	bd70      	pop	{r4, r5, r6, pc}
 80091bc:	0781      	lsls	r1, r0, #30
 80091be:	bf58      	it	pl
 80091c0:	6963      	ldrpl	r3, [r4, #20]
 80091c2:	60a3      	str	r3, [r4, #8]
 80091c4:	e7f4      	b.n	80091b0 <__swsetup_r+0xb0>
 80091c6:	2000      	movs	r0, #0
 80091c8:	e7f7      	b.n	80091ba <__swsetup_r+0xba>
 80091ca:	bf00      	nop
 80091cc:	200000d4 	.word	0x200000d4
 80091d0:	0800b2fc 	.word	0x0800b2fc
 80091d4:	0800b31c 	.word	0x0800b31c
 80091d8:	0800b2dc 	.word	0x0800b2dc

080091dc <__assert_func>:
 80091dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80091de:	4614      	mov	r4, r2
 80091e0:	461a      	mov	r2, r3
 80091e2:	4b09      	ldr	r3, [pc, #36]	; (8009208 <__assert_func+0x2c>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4605      	mov	r5, r0
 80091e8:	68d8      	ldr	r0, [r3, #12]
 80091ea:	b14c      	cbz	r4, 8009200 <__assert_func+0x24>
 80091ec:	4b07      	ldr	r3, [pc, #28]	; (800920c <__assert_func+0x30>)
 80091ee:	9100      	str	r1, [sp, #0]
 80091f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80091f4:	4906      	ldr	r1, [pc, #24]	; (8009210 <__assert_func+0x34>)
 80091f6:	462b      	mov	r3, r5
 80091f8:	f000 ff5a 	bl	800a0b0 <fiprintf>
 80091fc:	f001 fea8 	bl	800af50 <abort>
 8009200:	4b04      	ldr	r3, [pc, #16]	; (8009214 <__assert_func+0x38>)
 8009202:	461c      	mov	r4, r3
 8009204:	e7f3      	b.n	80091ee <__assert_func+0x12>
 8009206:	bf00      	nop
 8009208:	200000d4 	.word	0x200000d4
 800920c:	0800b374 	.word	0x0800b374
 8009210:	0800b381 	.word	0x0800b381
 8009214:	0800b3af 	.word	0x0800b3af

08009218 <_close_r>:
 8009218:	b538      	push	{r3, r4, r5, lr}
 800921a:	4d06      	ldr	r5, [pc, #24]	; (8009234 <_close_r+0x1c>)
 800921c:	2300      	movs	r3, #0
 800921e:	4604      	mov	r4, r0
 8009220:	4608      	mov	r0, r1
 8009222:	602b      	str	r3, [r5, #0]
 8009224:	f7f8 fc9b 	bl	8001b5e <_close>
 8009228:	1c43      	adds	r3, r0, #1
 800922a:	d102      	bne.n	8009232 <_close_r+0x1a>
 800922c:	682b      	ldr	r3, [r5, #0]
 800922e:	b103      	cbz	r3, 8009232 <_close_r+0x1a>
 8009230:	6023      	str	r3, [r4, #0]
 8009232:	bd38      	pop	{r3, r4, r5, pc}
 8009234:	20001c10 	.word	0x20001c10

08009238 <quorem>:
 8009238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800923c:	6903      	ldr	r3, [r0, #16]
 800923e:	690c      	ldr	r4, [r1, #16]
 8009240:	42a3      	cmp	r3, r4
 8009242:	4607      	mov	r7, r0
 8009244:	f2c0 8081 	blt.w	800934a <quorem+0x112>
 8009248:	3c01      	subs	r4, #1
 800924a:	f101 0814 	add.w	r8, r1, #20
 800924e:	f100 0514 	add.w	r5, r0, #20
 8009252:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009256:	9301      	str	r3, [sp, #4]
 8009258:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800925c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009260:	3301      	adds	r3, #1
 8009262:	429a      	cmp	r2, r3
 8009264:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009268:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800926c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009270:	d331      	bcc.n	80092d6 <quorem+0x9e>
 8009272:	f04f 0e00 	mov.w	lr, #0
 8009276:	4640      	mov	r0, r8
 8009278:	46ac      	mov	ip, r5
 800927a:	46f2      	mov	sl, lr
 800927c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009280:	b293      	uxth	r3, r2
 8009282:	fb06 e303 	mla	r3, r6, r3, lr
 8009286:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800928a:	b29b      	uxth	r3, r3
 800928c:	ebaa 0303 	sub.w	r3, sl, r3
 8009290:	f8dc a000 	ldr.w	sl, [ip]
 8009294:	0c12      	lsrs	r2, r2, #16
 8009296:	fa13 f38a 	uxtah	r3, r3, sl
 800929a:	fb06 e202 	mla	r2, r6, r2, lr
 800929e:	9300      	str	r3, [sp, #0]
 80092a0:	9b00      	ldr	r3, [sp, #0]
 80092a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80092a6:	b292      	uxth	r2, r2
 80092a8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80092ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80092b0:	f8bd 3000 	ldrh.w	r3, [sp]
 80092b4:	4581      	cmp	r9, r0
 80092b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092ba:	f84c 3b04 	str.w	r3, [ip], #4
 80092be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80092c2:	d2db      	bcs.n	800927c <quorem+0x44>
 80092c4:	f855 300b 	ldr.w	r3, [r5, fp]
 80092c8:	b92b      	cbnz	r3, 80092d6 <quorem+0x9e>
 80092ca:	9b01      	ldr	r3, [sp, #4]
 80092cc:	3b04      	subs	r3, #4
 80092ce:	429d      	cmp	r5, r3
 80092d0:	461a      	mov	r2, r3
 80092d2:	d32e      	bcc.n	8009332 <quorem+0xfa>
 80092d4:	613c      	str	r4, [r7, #16]
 80092d6:	4638      	mov	r0, r7
 80092d8:	f001 fa0e 	bl	800a6f8 <__mcmp>
 80092dc:	2800      	cmp	r0, #0
 80092de:	db24      	blt.n	800932a <quorem+0xf2>
 80092e0:	3601      	adds	r6, #1
 80092e2:	4628      	mov	r0, r5
 80092e4:	f04f 0c00 	mov.w	ip, #0
 80092e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80092ec:	f8d0 e000 	ldr.w	lr, [r0]
 80092f0:	b293      	uxth	r3, r2
 80092f2:	ebac 0303 	sub.w	r3, ip, r3
 80092f6:	0c12      	lsrs	r2, r2, #16
 80092f8:	fa13 f38e 	uxtah	r3, r3, lr
 80092fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009300:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009304:	b29b      	uxth	r3, r3
 8009306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800930a:	45c1      	cmp	r9, r8
 800930c:	f840 3b04 	str.w	r3, [r0], #4
 8009310:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009314:	d2e8      	bcs.n	80092e8 <quorem+0xb0>
 8009316:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800931a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800931e:	b922      	cbnz	r2, 800932a <quorem+0xf2>
 8009320:	3b04      	subs	r3, #4
 8009322:	429d      	cmp	r5, r3
 8009324:	461a      	mov	r2, r3
 8009326:	d30a      	bcc.n	800933e <quorem+0x106>
 8009328:	613c      	str	r4, [r7, #16]
 800932a:	4630      	mov	r0, r6
 800932c:	b003      	add	sp, #12
 800932e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009332:	6812      	ldr	r2, [r2, #0]
 8009334:	3b04      	subs	r3, #4
 8009336:	2a00      	cmp	r2, #0
 8009338:	d1cc      	bne.n	80092d4 <quorem+0x9c>
 800933a:	3c01      	subs	r4, #1
 800933c:	e7c7      	b.n	80092ce <quorem+0x96>
 800933e:	6812      	ldr	r2, [r2, #0]
 8009340:	3b04      	subs	r3, #4
 8009342:	2a00      	cmp	r2, #0
 8009344:	d1f0      	bne.n	8009328 <quorem+0xf0>
 8009346:	3c01      	subs	r4, #1
 8009348:	e7eb      	b.n	8009322 <quorem+0xea>
 800934a:	2000      	movs	r0, #0
 800934c:	e7ee      	b.n	800932c <quorem+0xf4>
	...

08009350 <_dtoa_r>:
 8009350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009354:	ed2d 8b04 	vpush	{d8-d9}
 8009358:	ec57 6b10 	vmov	r6, r7, d0
 800935c:	b093      	sub	sp, #76	; 0x4c
 800935e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009360:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009364:	9106      	str	r1, [sp, #24]
 8009366:	ee10 aa10 	vmov	sl, s0
 800936a:	4604      	mov	r4, r0
 800936c:	9209      	str	r2, [sp, #36]	; 0x24
 800936e:	930c      	str	r3, [sp, #48]	; 0x30
 8009370:	46bb      	mov	fp, r7
 8009372:	b975      	cbnz	r5, 8009392 <_dtoa_r+0x42>
 8009374:	2010      	movs	r0, #16
 8009376:	f000 ff29 	bl	800a1cc <malloc>
 800937a:	4602      	mov	r2, r0
 800937c:	6260      	str	r0, [r4, #36]	; 0x24
 800937e:	b920      	cbnz	r0, 800938a <_dtoa_r+0x3a>
 8009380:	4ba7      	ldr	r3, [pc, #668]	; (8009620 <_dtoa_r+0x2d0>)
 8009382:	21ea      	movs	r1, #234	; 0xea
 8009384:	48a7      	ldr	r0, [pc, #668]	; (8009624 <_dtoa_r+0x2d4>)
 8009386:	f7ff ff29 	bl	80091dc <__assert_func>
 800938a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800938e:	6005      	str	r5, [r0, #0]
 8009390:	60c5      	str	r5, [r0, #12]
 8009392:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009394:	6819      	ldr	r1, [r3, #0]
 8009396:	b151      	cbz	r1, 80093ae <_dtoa_r+0x5e>
 8009398:	685a      	ldr	r2, [r3, #4]
 800939a:	604a      	str	r2, [r1, #4]
 800939c:	2301      	movs	r3, #1
 800939e:	4093      	lsls	r3, r2
 80093a0:	608b      	str	r3, [r1, #8]
 80093a2:	4620      	mov	r0, r4
 80093a4:	f000 ff66 	bl	800a274 <_Bfree>
 80093a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093aa:	2200      	movs	r2, #0
 80093ac:	601a      	str	r2, [r3, #0]
 80093ae:	1e3b      	subs	r3, r7, #0
 80093b0:	bfaa      	itet	ge
 80093b2:	2300      	movge	r3, #0
 80093b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80093b8:	f8c8 3000 	strge.w	r3, [r8]
 80093bc:	4b9a      	ldr	r3, [pc, #616]	; (8009628 <_dtoa_r+0x2d8>)
 80093be:	bfbc      	itt	lt
 80093c0:	2201      	movlt	r2, #1
 80093c2:	f8c8 2000 	strlt.w	r2, [r8]
 80093c6:	ea33 030b 	bics.w	r3, r3, fp
 80093ca:	d11b      	bne.n	8009404 <_dtoa_r+0xb4>
 80093cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093ce:	f242 730f 	movw	r3, #9999	; 0x270f
 80093d2:	6013      	str	r3, [r2, #0]
 80093d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80093d8:	4333      	orrs	r3, r6
 80093da:	f000 8592 	beq.w	8009f02 <_dtoa_r+0xbb2>
 80093de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093e0:	b963      	cbnz	r3, 80093fc <_dtoa_r+0xac>
 80093e2:	4b92      	ldr	r3, [pc, #584]	; (800962c <_dtoa_r+0x2dc>)
 80093e4:	e022      	b.n	800942c <_dtoa_r+0xdc>
 80093e6:	4b92      	ldr	r3, [pc, #584]	; (8009630 <_dtoa_r+0x2e0>)
 80093e8:	9301      	str	r3, [sp, #4]
 80093ea:	3308      	adds	r3, #8
 80093ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80093ee:	6013      	str	r3, [r2, #0]
 80093f0:	9801      	ldr	r0, [sp, #4]
 80093f2:	b013      	add	sp, #76	; 0x4c
 80093f4:	ecbd 8b04 	vpop	{d8-d9}
 80093f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093fc:	4b8b      	ldr	r3, [pc, #556]	; (800962c <_dtoa_r+0x2dc>)
 80093fe:	9301      	str	r3, [sp, #4]
 8009400:	3303      	adds	r3, #3
 8009402:	e7f3      	b.n	80093ec <_dtoa_r+0x9c>
 8009404:	2200      	movs	r2, #0
 8009406:	2300      	movs	r3, #0
 8009408:	4650      	mov	r0, sl
 800940a:	4659      	mov	r1, fp
 800940c:	f7f7 fb5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009410:	ec4b ab19 	vmov	d9, sl, fp
 8009414:	4680      	mov	r8, r0
 8009416:	b158      	cbz	r0, 8009430 <_dtoa_r+0xe0>
 8009418:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800941a:	2301      	movs	r3, #1
 800941c:	6013      	str	r3, [r2, #0]
 800941e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009420:	2b00      	cmp	r3, #0
 8009422:	f000 856b 	beq.w	8009efc <_dtoa_r+0xbac>
 8009426:	4883      	ldr	r0, [pc, #524]	; (8009634 <_dtoa_r+0x2e4>)
 8009428:	6018      	str	r0, [r3, #0]
 800942a:	1e43      	subs	r3, r0, #1
 800942c:	9301      	str	r3, [sp, #4]
 800942e:	e7df      	b.n	80093f0 <_dtoa_r+0xa0>
 8009430:	ec4b ab10 	vmov	d0, sl, fp
 8009434:	aa10      	add	r2, sp, #64	; 0x40
 8009436:	a911      	add	r1, sp, #68	; 0x44
 8009438:	4620      	mov	r0, r4
 800943a:	f001 fa03 	bl	800a844 <__d2b>
 800943e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009442:	ee08 0a10 	vmov	s16, r0
 8009446:	2d00      	cmp	r5, #0
 8009448:	f000 8084 	beq.w	8009554 <_dtoa_r+0x204>
 800944c:	ee19 3a90 	vmov	r3, s19
 8009450:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009454:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009458:	4656      	mov	r6, sl
 800945a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800945e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009462:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009466:	4b74      	ldr	r3, [pc, #464]	; (8009638 <_dtoa_r+0x2e8>)
 8009468:	2200      	movs	r2, #0
 800946a:	4630      	mov	r0, r6
 800946c:	4639      	mov	r1, r7
 800946e:	f7f6 ff0b 	bl	8000288 <__aeabi_dsub>
 8009472:	a365      	add	r3, pc, #404	; (adr r3, 8009608 <_dtoa_r+0x2b8>)
 8009474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009478:	f7f7 f8be 	bl	80005f8 <__aeabi_dmul>
 800947c:	a364      	add	r3, pc, #400	; (adr r3, 8009610 <_dtoa_r+0x2c0>)
 800947e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009482:	f7f6 ff03 	bl	800028c <__adddf3>
 8009486:	4606      	mov	r6, r0
 8009488:	4628      	mov	r0, r5
 800948a:	460f      	mov	r7, r1
 800948c:	f7f7 f84a 	bl	8000524 <__aeabi_i2d>
 8009490:	a361      	add	r3, pc, #388	; (adr r3, 8009618 <_dtoa_r+0x2c8>)
 8009492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009496:	f7f7 f8af 	bl	80005f8 <__aeabi_dmul>
 800949a:	4602      	mov	r2, r0
 800949c:	460b      	mov	r3, r1
 800949e:	4630      	mov	r0, r6
 80094a0:	4639      	mov	r1, r7
 80094a2:	f7f6 fef3 	bl	800028c <__adddf3>
 80094a6:	4606      	mov	r6, r0
 80094a8:	460f      	mov	r7, r1
 80094aa:	f7f7 fb55 	bl	8000b58 <__aeabi_d2iz>
 80094ae:	2200      	movs	r2, #0
 80094b0:	9000      	str	r0, [sp, #0]
 80094b2:	2300      	movs	r3, #0
 80094b4:	4630      	mov	r0, r6
 80094b6:	4639      	mov	r1, r7
 80094b8:	f7f7 fb10 	bl	8000adc <__aeabi_dcmplt>
 80094bc:	b150      	cbz	r0, 80094d4 <_dtoa_r+0x184>
 80094be:	9800      	ldr	r0, [sp, #0]
 80094c0:	f7f7 f830 	bl	8000524 <__aeabi_i2d>
 80094c4:	4632      	mov	r2, r6
 80094c6:	463b      	mov	r3, r7
 80094c8:	f7f7 fafe 	bl	8000ac8 <__aeabi_dcmpeq>
 80094cc:	b910      	cbnz	r0, 80094d4 <_dtoa_r+0x184>
 80094ce:	9b00      	ldr	r3, [sp, #0]
 80094d0:	3b01      	subs	r3, #1
 80094d2:	9300      	str	r3, [sp, #0]
 80094d4:	9b00      	ldr	r3, [sp, #0]
 80094d6:	2b16      	cmp	r3, #22
 80094d8:	d85a      	bhi.n	8009590 <_dtoa_r+0x240>
 80094da:	9a00      	ldr	r2, [sp, #0]
 80094dc:	4b57      	ldr	r3, [pc, #348]	; (800963c <_dtoa_r+0x2ec>)
 80094de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e6:	ec51 0b19 	vmov	r0, r1, d9
 80094ea:	f7f7 faf7 	bl	8000adc <__aeabi_dcmplt>
 80094ee:	2800      	cmp	r0, #0
 80094f0:	d050      	beq.n	8009594 <_dtoa_r+0x244>
 80094f2:	9b00      	ldr	r3, [sp, #0]
 80094f4:	3b01      	subs	r3, #1
 80094f6:	9300      	str	r3, [sp, #0]
 80094f8:	2300      	movs	r3, #0
 80094fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80094fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80094fe:	1b5d      	subs	r5, r3, r5
 8009500:	1e6b      	subs	r3, r5, #1
 8009502:	9305      	str	r3, [sp, #20]
 8009504:	bf45      	ittet	mi
 8009506:	f1c5 0301 	rsbmi	r3, r5, #1
 800950a:	9304      	strmi	r3, [sp, #16]
 800950c:	2300      	movpl	r3, #0
 800950e:	2300      	movmi	r3, #0
 8009510:	bf4c      	ite	mi
 8009512:	9305      	strmi	r3, [sp, #20]
 8009514:	9304      	strpl	r3, [sp, #16]
 8009516:	9b00      	ldr	r3, [sp, #0]
 8009518:	2b00      	cmp	r3, #0
 800951a:	db3d      	blt.n	8009598 <_dtoa_r+0x248>
 800951c:	9b05      	ldr	r3, [sp, #20]
 800951e:	9a00      	ldr	r2, [sp, #0]
 8009520:	920a      	str	r2, [sp, #40]	; 0x28
 8009522:	4413      	add	r3, r2
 8009524:	9305      	str	r3, [sp, #20]
 8009526:	2300      	movs	r3, #0
 8009528:	9307      	str	r3, [sp, #28]
 800952a:	9b06      	ldr	r3, [sp, #24]
 800952c:	2b09      	cmp	r3, #9
 800952e:	f200 8089 	bhi.w	8009644 <_dtoa_r+0x2f4>
 8009532:	2b05      	cmp	r3, #5
 8009534:	bfc4      	itt	gt
 8009536:	3b04      	subgt	r3, #4
 8009538:	9306      	strgt	r3, [sp, #24]
 800953a:	9b06      	ldr	r3, [sp, #24]
 800953c:	f1a3 0302 	sub.w	r3, r3, #2
 8009540:	bfcc      	ite	gt
 8009542:	2500      	movgt	r5, #0
 8009544:	2501      	movle	r5, #1
 8009546:	2b03      	cmp	r3, #3
 8009548:	f200 8087 	bhi.w	800965a <_dtoa_r+0x30a>
 800954c:	e8df f003 	tbb	[pc, r3]
 8009550:	59383a2d 	.word	0x59383a2d
 8009554:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009558:	441d      	add	r5, r3
 800955a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800955e:	2b20      	cmp	r3, #32
 8009560:	bfc1      	itttt	gt
 8009562:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009566:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800956a:	fa0b f303 	lslgt.w	r3, fp, r3
 800956e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009572:	bfda      	itte	le
 8009574:	f1c3 0320 	rsble	r3, r3, #32
 8009578:	fa06 f003 	lslle.w	r0, r6, r3
 800957c:	4318      	orrgt	r0, r3
 800957e:	f7f6 ffc1 	bl	8000504 <__aeabi_ui2d>
 8009582:	2301      	movs	r3, #1
 8009584:	4606      	mov	r6, r0
 8009586:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800958a:	3d01      	subs	r5, #1
 800958c:	930e      	str	r3, [sp, #56]	; 0x38
 800958e:	e76a      	b.n	8009466 <_dtoa_r+0x116>
 8009590:	2301      	movs	r3, #1
 8009592:	e7b2      	b.n	80094fa <_dtoa_r+0x1aa>
 8009594:	900b      	str	r0, [sp, #44]	; 0x2c
 8009596:	e7b1      	b.n	80094fc <_dtoa_r+0x1ac>
 8009598:	9b04      	ldr	r3, [sp, #16]
 800959a:	9a00      	ldr	r2, [sp, #0]
 800959c:	1a9b      	subs	r3, r3, r2
 800959e:	9304      	str	r3, [sp, #16]
 80095a0:	4253      	negs	r3, r2
 80095a2:	9307      	str	r3, [sp, #28]
 80095a4:	2300      	movs	r3, #0
 80095a6:	930a      	str	r3, [sp, #40]	; 0x28
 80095a8:	e7bf      	b.n	800952a <_dtoa_r+0x1da>
 80095aa:	2300      	movs	r3, #0
 80095ac:	9308      	str	r3, [sp, #32]
 80095ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	dc55      	bgt.n	8009660 <_dtoa_r+0x310>
 80095b4:	2301      	movs	r3, #1
 80095b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80095ba:	461a      	mov	r2, r3
 80095bc:	9209      	str	r2, [sp, #36]	; 0x24
 80095be:	e00c      	b.n	80095da <_dtoa_r+0x28a>
 80095c0:	2301      	movs	r3, #1
 80095c2:	e7f3      	b.n	80095ac <_dtoa_r+0x25c>
 80095c4:	2300      	movs	r3, #0
 80095c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095c8:	9308      	str	r3, [sp, #32]
 80095ca:	9b00      	ldr	r3, [sp, #0]
 80095cc:	4413      	add	r3, r2
 80095ce:	9302      	str	r3, [sp, #8]
 80095d0:	3301      	adds	r3, #1
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	9303      	str	r3, [sp, #12]
 80095d6:	bfb8      	it	lt
 80095d8:	2301      	movlt	r3, #1
 80095da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80095dc:	2200      	movs	r2, #0
 80095de:	6042      	str	r2, [r0, #4]
 80095e0:	2204      	movs	r2, #4
 80095e2:	f102 0614 	add.w	r6, r2, #20
 80095e6:	429e      	cmp	r6, r3
 80095e8:	6841      	ldr	r1, [r0, #4]
 80095ea:	d93d      	bls.n	8009668 <_dtoa_r+0x318>
 80095ec:	4620      	mov	r0, r4
 80095ee:	f000 fe01 	bl	800a1f4 <_Balloc>
 80095f2:	9001      	str	r0, [sp, #4]
 80095f4:	2800      	cmp	r0, #0
 80095f6:	d13b      	bne.n	8009670 <_dtoa_r+0x320>
 80095f8:	4b11      	ldr	r3, [pc, #68]	; (8009640 <_dtoa_r+0x2f0>)
 80095fa:	4602      	mov	r2, r0
 80095fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009600:	e6c0      	b.n	8009384 <_dtoa_r+0x34>
 8009602:	2301      	movs	r3, #1
 8009604:	e7df      	b.n	80095c6 <_dtoa_r+0x276>
 8009606:	bf00      	nop
 8009608:	636f4361 	.word	0x636f4361
 800960c:	3fd287a7 	.word	0x3fd287a7
 8009610:	8b60c8b3 	.word	0x8b60c8b3
 8009614:	3fc68a28 	.word	0x3fc68a28
 8009618:	509f79fb 	.word	0x509f79fb
 800961c:	3fd34413 	.word	0x3fd34413
 8009620:	0800b3bd 	.word	0x0800b3bd
 8009624:	0800b3d4 	.word	0x0800b3d4
 8009628:	7ff00000 	.word	0x7ff00000
 800962c:	0800b3b9 	.word	0x0800b3b9
 8009630:	0800b3b0 	.word	0x0800b3b0
 8009634:	0800b351 	.word	0x0800b351
 8009638:	3ff80000 	.word	0x3ff80000
 800963c:	0800b4c8 	.word	0x0800b4c8
 8009640:	0800b42f 	.word	0x0800b42f
 8009644:	2501      	movs	r5, #1
 8009646:	2300      	movs	r3, #0
 8009648:	9306      	str	r3, [sp, #24]
 800964a:	9508      	str	r5, [sp, #32]
 800964c:	f04f 33ff 	mov.w	r3, #4294967295
 8009650:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009654:	2200      	movs	r2, #0
 8009656:	2312      	movs	r3, #18
 8009658:	e7b0      	b.n	80095bc <_dtoa_r+0x26c>
 800965a:	2301      	movs	r3, #1
 800965c:	9308      	str	r3, [sp, #32]
 800965e:	e7f5      	b.n	800964c <_dtoa_r+0x2fc>
 8009660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009662:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009666:	e7b8      	b.n	80095da <_dtoa_r+0x28a>
 8009668:	3101      	adds	r1, #1
 800966a:	6041      	str	r1, [r0, #4]
 800966c:	0052      	lsls	r2, r2, #1
 800966e:	e7b8      	b.n	80095e2 <_dtoa_r+0x292>
 8009670:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009672:	9a01      	ldr	r2, [sp, #4]
 8009674:	601a      	str	r2, [r3, #0]
 8009676:	9b03      	ldr	r3, [sp, #12]
 8009678:	2b0e      	cmp	r3, #14
 800967a:	f200 809d 	bhi.w	80097b8 <_dtoa_r+0x468>
 800967e:	2d00      	cmp	r5, #0
 8009680:	f000 809a 	beq.w	80097b8 <_dtoa_r+0x468>
 8009684:	9b00      	ldr	r3, [sp, #0]
 8009686:	2b00      	cmp	r3, #0
 8009688:	dd32      	ble.n	80096f0 <_dtoa_r+0x3a0>
 800968a:	4ab7      	ldr	r2, [pc, #732]	; (8009968 <_dtoa_r+0x618>)
 800968c:	f003 030f 	and.w	r3, r3, #15
 8009690:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009694:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009698:	9b00      	ldr	r3, [sp, #0]
 800969a:	05d8      	lsls	r0, r3, #23
 800969c:	ea4f 1723 	mov.w	r7, r3, asr #4
 80096a0:	d516      	bpl.n	80096d0 <_dtoa_r+0x380>
 80096a2:	4bb2      	ldr	r3, [pc, #712]	; (800996c <_dtoa_r+0x61c>)
 80096a4:	ec51 0b19 	vmov	r0, r1, d9
 80096a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80096ac:	f7f7 f8ce 	bl	800084c <__aeabi_ddiv>
 80096b0:	f007 070f 	and.w	r7, r7, #15
 80096b4:	4682      	mov	sl, r0
 80096b6:	468b      	mov	fp, r1
 80096b8:	2503      	movs	r5, #3
 80096ba:	4eac      	ldr	r6, [pc, #688]	; (800996c <_dtoa_r+0x61c>)
 80096bc:	b957      	cbnz	r7, 80096d4 <_dtoa_r+0x384>
 80096be:	4642      	mov	r2, r8
 80096c0:	464b      	mov	r3, r9
 80096c2:	4650      	mov	r0, sl
 80096c4:	4659      	mov	r1, fp
 80096c6:	f7f7 f8c1 	bl	800084c <__aeabi_ddiv>
 80096ca:	4682      	mov	sl, r0
 80096cc:	468b      	mov	fp, r1
 80096ce:	e028      	b.n	8009722 <_dtoa_r+0x3d2>
 80096d0:	2502      	movs	r5, #2
 80096d2:	e7f2      	b.n	80096ba <_dtoa_r+0x36a>
 80096d4:	07f9      	lsls	r1, r7, #31
 80096d6:	d508      	bpl.n	80096ea <_dtoa_r+0x39a>
 80096d8:	4640      	mov	r0, r8
 80096da:	4649      	mov	r1, r9
 80096dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80096e0:	f7f6 ff8a 	bl	80005f8 <__aeabi_dmul>
 80096e4:	3501      	adds	r5, #1
 80096e6:	4680      	mov	r8, r0
 80096e8:	4689      	mov	r9, r1
 80096ea:	107f      	asrs	r7, r7, #1
 80096ec:	3608      	adds	r6, #8
 80096ee:	e7e5      	b.n	80096bc <_dtoa_r+0x36c>
 80096f0:	f000 809b 	beq.w	800982a <_dtoa_r+0x4da>
 80096f4:	9b00      	ldr	r3, [sp, #0]
 80096f6:	4f9d      	ldr	r7, [pc, #628]	; (800996c <_dtoa_r+0x61c>)
 80096f8:	425e      	negs	r6, r3
 80096fa:	4b9b      	ldr	r3, [pc, #620]	; (8009968 <_dtoa_r+0x618>)
 80096fc:	f006 020f 	and.w	r2, r6, #15
 8009700:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009708:	ec51 0b19 	vmov	r0, r1, d9
 800970c:	f7f6 ff74 	bl	80005f8 <__aeabi_dmul>
 8009710:	1136      	asrs	r6, r6, #4
 8009712:	4682      	mov	sl, r0
 8009714:	468b      	mov	fp, r1
 8009716:	2300      	movs	r3, #0
 8009718:	2502      	movs	r5, #2
 800971a:	2e00      	cmp	r6, #0
 800971c:	d17a      	bne.n	8009814 <_dtoa_r+0x4c4>
 800971e:	2b00      	cmp	r3, #0
 8009720:	d1d3      	bne.n	80096ca <_dtoa_r+0x37a>
 8009722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009724:	2b00      	cmp	r3, #0
 8009726:	f000 8082 	beq.w	800982e <_dtoa_r+0x4de>
 800972a:	4b91      	ldr	r3, [pc, #580]	; (8009970 <_dtoa_r+0x620>)
 800972c:	2200      	movs	r2, #0
 800972e:	4650      	mov	r0, sl
 8009730:	4659      	mov	r1, fp
 8009732:	f7f7 f9d3 	bl	8000adc <__aeabi_dcmplt>
 8009736:	2800      	cmp	r0, #0
 8009738:	d079      	beq.n	800982e <_dtoa_r+0x4de>
 800973a:	9b03      	ldr	r3, [sp, #12]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d076      	beq.n	800982e <_dtoa_r+0x4de>
 8009740:	9b02      	ldr	r3, [sp, #8]
 8009742:	2b00      	cmp	r3, #0
 8009744:	dd36      	ble.n	80097b4 <_dtoa_r+0x464>
 8009746:	9b00      	ldr	r3, [sp, #0]
 8009748:	4650      	mov	r0, sl
 800974a:	4659      	mov	r1, fp
 800974c:	1e5f      	subs	r7, r3, #1
 800974e:	2200      	movs	r2, #0
 8009750:	4b88      	ldr	r3, [pc, #544]	; (8009974 <_dtoa_r+0x624>)
 8009752:	f7f6 ff51 	bl	80005f8 <__aeabi_dmul>
 8009756:	9e02      	ldr	r6, [sp, #8]
 8009758:	4682      	mov	sl, r0
 800975a:	468b      	mov	fp, r1
 800975c:	3501      	adds	r5, #1
 800975e:	4628      	mov	r0, r5
 8009760:	f7f6 fee0 	bl	8000524 <__aeabi_i2d>
 8009764:	4652      	mov	r2, sl
 8009766:	465b      	mov	r3, fp
 8009768:	f7f6 ff46 	bl	80005f8 <__aeabi_dmul>
 800976c:	4b82      	ldr	r3, [pc, #520]	; (8009978 <_dtoa_r+0x628>)
 800976e:	2200      	movs	r2, #0
 8009770:	f7f6 fd8c 	bl	800028c <__adddf3>
 8009774:	46d0      	mov	r8, sl
 8009776:	46d9      	mov	r9, fp
 8009778:	4682      	mov	sl, r0
 800977a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800977e:	2e00      	cmp	r6, #0
 8009780:	d158      	bne.n	8009834 <_dtoa_r+0x4e4>
 8009782:	4b7e      	ldr	r3, [pc, #504]	; (800997c <_dtoa_r+0x62c>)
 8009784:	2200      	movs	r2, #0
 8009786:	4640      	mov	r0, r8
 8009788:	4649      	mov	r1, r9
 800978a:	f7f6 fd7d 	bl	8000288 <__aeabi_dsub>
 800978e:	4652      	mov	r2, sl
 8009790:	465b      	mov	r3, fp
 8009792:	4680      	mov	r8, r0
 8009794:	4689      	mov	r9, r1
 8009796:	f7f7 f9bf 	bl	8000b18 <__aeabi_dcmpgt>
 800979a:	2800      	cmp	r0, #0
 800979c:	f040 8295 	bne.w	8009cca <_dtoa_r+0x97a>
 80097a0:	4652      	mov	r2, sl
 80097a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80097a6:	4640      	mov	r0, r8
 80097a8:	4649      	mov	r1, r9
 80097aa:	f7f7 f997 	bl	8000adc <__aeabi_dcmplt>
 80097ae:	2800      	cmp	r0, #0
 80097b0:	f040 8289 	bne.w	8009cc6 <_dtoa_r+0x976>
 80097b4:	ec5b ab19 	vmov	sl, fp, d9
 80097b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	f2c0 8148 	blt.w	8009a50 <_dtoa_r+0x700>
 80097c0:	9a00      	ldr	r2, [sp, #0]
 80097c2:	2a0e      	cmp	r2, #14
 80097c4:	f300 8144 	bgt.w	8009a50 <_dtoa_r+0x700>
 80097c8:	4b67      	ldr	r3, [pc, #412]	; (8009968 <_dtoa_r+0x618>)
 80097ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80097d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	f280 80d5 	bge.w	8009984 <_dtoa_r+0x634>
 80097da:	9b03      	ldr	r3, [sp, #12]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	f300 80d1 	bgt.w	8009984 <_dtoa_r+0x634>
 80097e2:	f040 826f 	bne.w	8009cc4 <_dtoa_r+0x974>
 80097e6:	4b65      	ldr	r3, [pc, #404]	; (800997c <_dtoa_r+0x62c>)
 80097e8:	2200      	movs	r2, #0
 80097ea:	4640      	mov	r0, r8
 80097ec:	4649      	mov	r1, r9
 80097ee:	f7f6 ff03 	bl	80005f8 <__aeabi_dmul>
 80097f2:	4652      	mov	r2, sl
 80097f4:	465b      	mov	r3, fp
 80097f6:	f7f7 f985 	bl	8000b04 <__aeabi_dcmpge>
 80097fa:	9e03      	ldr	r6, [sp, #12]
 80097fc:	4637      	mov	r7, r6
 80097fe:	2800      	cmp	r0, #0
 8009800:	f040 8245 	bne.w	8009c8e <_dtoa_r+0x93e>
 8009804:	9d01      	ldr	r5, [sp, #4]
 8009806:	2331      	movs	r3, #49	; 0x31
 8009808:	f805 3b01 	strb.w	r3, [r5], #1
 800980c:	9b00      	ldr	r3, [sp, #0]
 800980e:	3301      	adds	r3, #1
 8009810:	9300      	str	r3, [sp, #0]
 8009812:	e240      	b.n	8009c96 <_dtoa_r+0x946>
 8009814:	07f2      	lsls	r2, r6, #31
 8009816:	d505      	bpl.n	8009824 <_dtoa_r+0x4d4>
 8009818:	e9d7 2300 	ldrd	r2, r3, [r7]
 800981c:	f7f6 feec 	bl	80005f8 <__aeabi_dmul>
 8009820:	3501      	adds	r5, #1
 8009822:	2301      	movs	r3, #1
 8009824:	1076      	asrs	r6, r6, #1
 8009826:	3708      	adds	r7, #8
 8009828:	e777      	b.n	800971a <_dtoa_r+0x3ca>
 800982a:	2502      	movs	r5, #2
 800982c:	e779      	b.n	8009722 <_dtoa_r+0x3d2>
 800982e:	9f00      	ldr	r7, [sp, #0]
 8009830:	9e03      	ldr	r6, [sp, #12]
 8009832:	e794      	b.n	800975e <_dtoa_r+0x40e>
 8009834:	9901      	ldr	r1, [sp, #4]
 8009836:	4b4c      	ldr	r3, [pc, #304]	; (8009968 <_dtoa_r+0x618>)
 8009838:	4431      	add	r1, r6
 800983a:	910d      	str	r1, [sp, #52]	; 0x34
 800983c:	9908      	ldr	r1, [sp, #32]
 800983e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009842:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009846:	2900      	cmp	r1, #0
 8009848:	d043      	beq.n	80098d2 <_dtoa_r+0x582>
 800984a:	494d      	ldr	r1, [pc, #308]	; (8009980 <_dtoa_r+0x630>)
 800984c:	2000      	movs	r0, #0
 800984e:	f7f6 fffd 	bl	800084c <__aeabi_ddiv>
 8009852:	4652      	mov	r2, sl
 8009854:	465b      	mov	r3, fp
 8009856:	f7f6 fd17 	bl	8000288 <__aeabi_dsub>
 800985a:	9d01      	ldr	r5, [sp, #4]
 800985c:	4682      	mov	sl, r0
 800985e:	468b      	mov	fp, r1
 8009860:	4649      	mov	r1, r9
 8009862:	4640      	mov	r0, r8
 8009864:	f7f7 f978 	bl	8000b58 <__aeabi_d2iz>
 8009868:	4606      	mov	r6, r0
 800986a:	f7f6 fe5b 	bl	8000524 <__aeabi_i2d>
 800986e:	4602      	mov	r2, r0
 8009870:	460b      	mov	r3, r1
 8009872:	4640      	mov	r0, r8
 8009874:	4649      	mov	r1, r9
 8009876:	f7f6 fd07 	bl	8000288 <__aeabi_dsub>
 800987a:	3630      	adds	r6, #48	; 0x30
 800987c:	f805 6b01 	strb.w	r6, [r5], #1
 8009880:	4652      	mov	r2, sl
 8009882:	465b      	mov	r3, fp
 8009884:	4680      	mov	r8, r0
 8009886:	4689      	mov	r9, r1
 8009888:	f7f7 f928 	bl	8000adc <__aeabi_dcmplt>
 800988c:	2800      	cmp	r0, #0
 800988e:	d163      	bne.n	8009958 <_dtoa_r+0x608>
 8009890:	4642      	mov	r2, r8
 8009892:	464b      	mov	r3, r9
 8009894:	4936      	ldr	r1, [pc, #216]	; (8009970 <_dtoa_r+0x620>)
 8009896:	2000      	movs	r0, #0
 8009898:	f7f6 fcf6 	bl	8000288 <__aeabi_dsub>
 800989c:	4652      	mov	r2, sl
 800989e:	465b      	mov	r3, fp
 80098a0:	f7f7 f91c 	bl	8000adc <__aeabi_dcmplt>
 80098a4:	2800      	cmp	r0, #0
 80098a6:	f040 80b5 	bne.w	8009a14 <_dtoa_r+0x6c4>
 80098aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098ac:	429d      	cmp	r5, r3
 80098ae:	d081      	beq.n	80097b4 <_dtoa_r+0x464>
 80098b0:	4b30      	ldr	r3, [pc, #192]	; (8009974 <_dtoa_r+0x624>)
 80098b2:	2200      	movs	r2, #0
 80098b4:	4650      	mov	r0, sl
 80098b6:	4659      	mov	r1, fp
 80098b8:	f7f6 fe9e 	bl	80005f8 <__aeabi_dmul>
 80098bc:	4b2d      	ldr	r3, [pc, #180]	; (8009974 <_dtoa_r+0x624>)
 80098be:	4682      	mov	sl, r0
 80098c0:	468b      	mov	fp, r1
 80098c2:	4640      	mov	r0, r8
 80098c4:	4649      	mov	r1, r9
 80098c6:	2200      	movs	r2, #0
 80098c8:	f7f6 fe96 	bl	80005f8 <__aeabi_dmul>
 80098cc:	4680      	mov	r8, r0
 80098ce:	4689      	mov	r9, r1
 80098d0:	e7c6      	b.n	8009860 <_dtoa_r+0x510>
 80098d2:	4650      	mov	r0, sl
 80098d4:	4659      	mov	r1, fp
 80098d6:	f7f6 fe8f 	bl	80005f8 <__aeabi_dmul>
 80098da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098dc:	9d01      	ldr	r5, [sp, #4]
 80098de:	930f      	str	r3, [sp, #60]	; 0x3c
 80098e0:	4682      	mov	sl, r0
 80098e2:	468b      	mov	fp, r1
 80098e4:	4649      	mov	r1, r9
 80098e6:	4640      	mov	r0, r8
 80098e8:	f7f7 f936 	bl	8000b58 <__aeabi_d2iz>
 80098ec:	4606      	mov	r6, r0
 80098ee:	f7f6 fe19 	bl	8000524 <__aeabi_i2d>
 80098f2:	3630      	adds	r6, #48	; 0x30
 80098f4:	4602      	mov	r2, r0
 80098f6:	460b      	mov	r3, r1
 80098f8:	4640      	mov	r0, r8
 80098fa:	4649      	mov	r1, r9
 80098fc:	f7f6 fcc4 	bl	8000288 <__aeabi_dsub>
 8009900:	f805 6b01 	strb.w	r6, [r5], #1
 8009904:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009906:	429d      	cmp	r5, r3
 8009908:	4680      	mov	r8, r0
 800990a:	4689      	mov	r9, r1
 800990c:	f04f 0200 	mov.w	r2, #0
 8009910:	d124      	bne.n	800995c <_dtoa_r+0x60c>
 8009912:	4b1b      	ldr	r3, [pc, #108]	; (8009980 <_dtoa_r+0x630>)
 8009914:	4650      	mov	r0, sl
 8009916:	4659      	mov	r1, fp
 8009918:	f7f6 fcb8 	bl	800028c <__adddf3>
 800991c:	4602      	mov	r2, r0
 800991e:	460b      	mov	r3, r1
 8009920:	4640      	mov	r0, r8
 8009922:	4649      	mov	r1, r9
 8009924:	f7f7 f8f8 	bl	8000b18 <__aeabi_dcmpgt>
 8009928:	2800      	cmp	r0, #0
 800992a:	d173      	bne.n	8009a14 <_dtoa_r+0x6c4>
 800992c:	4652      	mov	r2, sl
 800992e:	465b      	mov	r3, fp
 8009930:	4913      	ldr	r1, [pc, #76]	; (8009980 <_dtoa_r+0x630>)
 8009932:	2000      	movs	r0, #0
 8009934:	f7f6 fca8 	bl	8000288 <__aeabi_dsub>
 8009938:	4602      	mov	r2, r0
 800993a:	460b      	mov	r3, r1
 800993c:	4640      	mov	r0, r8
 800993e:	4649      	mov	r1, r9
 8009940:	f7f7 f8cc 	bl	8000adc <__aeabi_dcmplt>
 8009944:	2800      	cmp	r0, #0
 8009946:	f43f af35 	beq.w	80097b4 <_dtoa_r+0x464>
 800994a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800994c:	1e6b      	subs	r3, r5, #1
 800994e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009950:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009954:	2b30      	cmp	r3, #48	; 0x30
 8009956:	d0f8      	beq.n	800994a <_dtoa_r+0x5fa>
 8009958:	9700      	str	r7, [sp, #0]
 800995a:	e049      	b.n	80099f0 <_dtoa_r+0x6a0>
 800995c:	4b05      	ldr	r3, [pc, #20]	; (8009974 <_dtoa_r+0x624>)
 800995e:	f7f6 fe4b 	bl	80005f8 <__aeabi_dmul>
 8009962:	4680      	mov	r8, r0
 8009964:	4689      	mov	r9, r1
 8009966:	e7bd      	b.n	80098e4 <_dtoa_r+0x594>
 8009968:	0800b4c8 	.word	0x0800b4c8
 800996c:	0800b4a0 	.word	0x0800b4a0
 8009970:	3ff00000 	.word	0x3ff00000
 8009974:	40240000 	.word	0x40240000
 8009978:	401c0000 	.word	0x401c0000
 800997c:	40140000 	.word	0x40140000
 8009980:	3fe00000 	.word	0x3fe00000
 8009984:	9d01      	ldr	r5, [sp, #4]
 8009986:	4656      	mov	r6, sl
 8009988:	465f      	mov	r7, fp
 800998a:	4642      	mov	r2, r8
 800998c:	464b      	mov	r3, r9
 800998e:	4630      	mov	r0, r6
 8009990:	4639      	mov	r1, r7
 8009992:	f7f6 ff5b 	bl	800084c <__aeabi_ddiv>
 8009996:	f7f7 f8df 	bl	8000b58 <__aeabi_d2iz>
 800999a:	4682      	mov	sl, r0
 800999c:	f7f6 fdc2 	bl	8000524 <__aeabi_i2d>
 80099a0:	4642      	mov	r2, r8
 80099a2:	464b      	mov	r3, r9
 80099a4:	f7f6 fe28 	bl	80005f8 <__aeabi_dmul>
 80099a8:	4602      	mov	r2, r0
 80099aa:	460b      	mov	r3, r1
 80099ac:	4630      	mov	r0, r6
 80099ae:	4639      	mov	r1, r7
 80099b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80099b4:	f7f6 fc68 	bl	8000288 <__aeabi_dsub>
 80099b8:	f805 6b01 	strb.w	r6, [r5], #1
 80099bc:	9e01      	ldr	r6, [sp, #4]
 80099be:	9f03      	ldr	r7, [sp, #12]
 80099c0:	1bae      	subs	r6, r5, r6
 80099c2:	42b7      	cmp	r7, r6
 80099c4:	4602      	mov	r2, r0
 80099c6:	460b      	mov	r3, r1
 80099c8:	d135      	bne.n	8009a36 <_dtoa_r+0x6e6>
 80099ca:	f7f6 fc5f 	bl	800028c <__adddf3>
 80099ce:	4642      	mov	r2, r8
 80099d0:	464b      	mov	r3, r9
 80099d2:	4606      	mov	r6, r0
 80099d4:	460f      	mov	r7, r1
 80099d6:	f7f7 f89f 	bl	8000b18 <__aeabi_dcmpgt>
 80099da:	b9d0      	cbnz	r0, 8009a12 <_dtoa_r+0x6c2>
 80099dc:	4642      	mov	r2, r8
 80099de:	464b      	mov	r3, r9
 80099e0:	4630      	mov	r0, r6
 80099e2:	4639      	mov	r1, r7
 80099e4:	f7f7 f870 	bl	8000ac8 <__aeabi_dcmpeq>
 80099e8:	b110      	cbz	r0, 80099f0 <_dtoa_r+0x6a0>
 80099ea:	f01a 0f01 	tst.w	sl, #1
 80099ee:	d110      	bne.n	8009a12 <_dtoa_r+0x6c2>
 80099f0:	4620      	mov	r0, r4
 80099f2:	ee18 1a10 	vmov	r1, s16
 80099f6:	f000 fc3d 	bl	800a274 <_Bfree>
 80099fa:	2300      	movs	r3, #0
 80099fc:	9800      	ldr	r0, [sp, #0]
 80099fe:	702b      	strb	r3, [r5, #0]
 8009a00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a02:	3001      	adds	r0, #1
 8009a04:	6018      	str	r0, [r3, #0]
 8009a06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	f43f acf1 	beq.w	80093f0 <_dtoa_r+0xa0>
 8009a0e:	601d      	str	r5, [r3, #0]
 8009a10:	e4ee      	b.n	80093f0 <_dtoa_r+0xa0>
 8009a12:	9f00      	ldr	r7, [sp, #0]
 8009a14:	462b      	mov	r3, r5
 8009a16:	461d      	mov	r5, r3
 8009a18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a1c:	2a39      	cmp	r2, #57	; 0x39
 8009a1e:	d106      	bne.n	8009a2e <_dtoa_r+0x6de>
 8009a20:	9a01      	ldr	r2, [sp, #4]
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d1f7      	bne.n	8009a16 <_dtoa_r+0x6c6>
 8009a26:	9901      	ldr	r1, [sp, #4]
 8009a28:	2230      	movs	r2, #48	; 0x30
 8009a2a:	3701      	adds	r7, #1
 8009a2c:	700a      	strb	r2, [r1, #0]
 8009a2e:	781a      	ldrb	r2, [r3, #0]
 8009a30:	3201      	adds	r2, #1
 8009a32:	701a      	strb	r2, [r3, #0]
 8009a34:	e790      	b.n	8009958 <_dtoa_r+0x608>
 8009a36:	4ba6      	ldr	r3, [pc, #664]	; (8009cd0 <_dtoa_r+0x980>)
 8009a38:	2200      	movs	r2, #0
 8009a3a:	f7f6 fddd 	bl	80005f8 <__aeabi_dmul>
 8009a3e:	2200      	movs	r2, #0
 8009a40:	2300      	movs	r3, #0
 8009a42:	4606      	mov	r6, r0
 8009a44:	460f      	mov	r7, r1
 8009a46:	f7f7 f83f 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a4a:	2800      	cmp	r0, #0
 8009a4c:	d09d      	beq.n	800998a <_dtoa_r+0x63a>
 8009a4e:	e7cf      	b.n	80099f0 <_dtoa_r+0x6a0>
 8009a50:	9a08      	ldr	r2, [sp, #32]
 8009a52:	2a00      	cmp	r2, #0
 8009a54:	f000 80d7 	beq.w	8009c06 <_dtoa_r+0x8b6>
 8009a58:	9a06      	ldr	r2, [sp, #24]
 8009a5a:	2a01      	cmp	r2, #1
 8009a5c:	f300 80ba 	bgt.w	8009bd4 <_dtoa_r+0x884>
 8009a60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a62:	2a00      	cmp	r2, #0
 8009a64:	f000 80b2 	beq.w	8009bcc <_dtoa_r+0x87c>
 8009a68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009a6c:	9e07      	ldr	r6, [sp, #28]
 8009a6e:	9d04      	ldr	r5, [sp, #16]
 8009a70:	9a04      	ldr	r2, [sp, #16]
 8009a72:	441a      	add	r2, r3
 8009a74:	9204      	str	r2, [sp, #16]
 8009a76:	9a05      	ldr	r2, [sp, #20]
 8009a78:	2101      	movs	r1, #1
 8009a7a:	441a      	add	r2, r3
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	9205      	str	r2, [sp, #20]
 8009a80:	f000 fcb0 	bl	800a3e4 <__i2b>
 8009a84:	4607      	mov	r7, r0
 8009a86:	2d00      	cmp	r5, #0
 8009a88:	dd0c      	ble.n	8009aa4 <_dtoa_r+0x754>
 8009a8a:	9b05      	ldr	r3, [sp, #20]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	dd09      	ble.n	8009aa4 <_dtoa_r+0x754>
 8009a90:	42ab      	cmp	r3, r5
 8009a92:	9a04      	ldr	r2, [sp, #16]
 8009a94:	bfa8      	it	ge
 8009a96:	462b      	movge	r3, r5
 8009a98:	1ad2      	subs	r2, r2, r3
 8009a9a:	9204      	str	r2, [sp, #16]
 8009a9c:	9a05      	ldr	r2, [sp, #20]
 8009a9e:	1aed      	subs	r5, r5, r3
 8009aa0:	1ad3      	subs	r3, r2, r3
 8009aa2:	9305      	str	r3, [sp, #20]
 8009aa4:	9b07      	ldr	r3, [sp, #28]
 8009aa6:	b31b      	cbz	r3, 8009af0 <_dtoa_r+0x7a0>
 8009aa8:	9b08      	ldr	r3, [sp, #32]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	f000 80af 	beq.w	8009c0e <_dtoa_r+0x8be>
 8009ab0:	2e00      	cmp	r6, #0
 8009ab2:	dd13      	ble.n	8009adc <_dtoa_r+0x78c>
 8009ab4:	4639      	mov	r1, r7
 8009ab6:	4632      	mov	r2, r6
 8009ab8:	4620      	mov	r0, r4
 8009aba:	f000 fd53 	bl	800a564 <__pow5mult>
 8009abe:	ee18 2a10 	vmov	r2, s16
 8009ac2:	4601      	mov	r1, r0
 8009ac4:	4607      	mov	r7, r0
 8009ac6:	4620      	mov	r0, r4
 8009ac8:	f000 fca2 	bl	800a410 <__multiply>
 8009acc:	ee18 1a10 	vmov	r1, s16
 8009ad0:	4680      	mov	r8, r0
 8009ad2:	4620      	mov	r0, r4
 8009ad4:	f000 fbce 	bl	800a274 <_Bfree>
 8009ad8:	ee08 8a10 	vmov	s16, r8
 8009adc:	9b07      	ldr	r3, [sp, #28]
 8009ade:	1b9a      	subs	r2, r3, r6
 8009ae0:	d006      	beq.n	8009af0 <_dtoa_r+0x7a0>
 8009ae2:	ee18 1a10 	vmov	r1, s16
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	f000 fd3c 	bl	800a564 <__pow5mult>
 8009aec:	ee08 0a10 	vmov	s16, r0
 8009af0:	2101      	movs	r1, #1
 8009af2:	4620      	mov	r0, r4
 8009af4:	f000 fc76 	bl	800a3e4 <__i2b>
 8009af8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	4606      	mov	r6, r0
 8009afe:	f340 8088 	ble.w	8009c12 <_dtoa_r+0x8c2>
 8009b02:	461a      	mov	r2, r3
 8009b04:	4601      	mov	r1, r0
 8009b06:	4620      	mov	r0, r4
 8009b08:	f000 fd2c 	bl	800a564 <__pow5mult>
 8009b0c:	9b06      	ldr	r3, [sp, #24]
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	4606      	mov	r6, r0
 8009b12:	f340 8081 	ble.w	8009c18 <_dtoa_r+0x8c8>
 8009b16:	f04f 0800 	mov.w	r8, #0
 8009b1a:	6933      	ldr	r3, [r6, #16]
 8009b1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009b20:	6918      	ldr	r0, [r3, #16]
 8009b22:	f000 fc0f 	bl	800a344 <__hi0bits>
 8009b26:	f1c0 0020 	rsb	r0, r0, #32
 8009b2a:	9b05      	ldr	r3, [sp, #20]
 8009b2c:	4418      	add	r0, r3
 8009b2e:	f010 001f 	ands.w	r0, r0, #31
 8009b32:	f000 8092 	beq.w	8009c5a <_dtoa_r+0x90a>
 8009b36:	f1c0 0320 	rsb	r3, r0, #32
 8009b3a:	2b04      	cmp	r3, #4
 8009b3c:	f340 808a 	ble.w	8009c54 <_dtoa_r+0x904>
 8009b40:	f1c0 001c 	rsb	r0, r0, #28
 8009b44:	9b04      	ldr	r3, [sp, #16]
 8009b46:	4403      	add	r3, r0
 8009b48:	9304      	str	r3, [sp, #16]
 8009b4a:	9b05      	ldr	r3, [sp, #20]
 8009b4c:	4403      	add	r3, r0
 8009b4e:	4405      	add	r5, r0
 8009b50:	9305      	str	r3, [sp, #20]
 8009b52:	9b04      	ldr	r3, [sp, #16]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	dd07      	ble.n	8009b68 <_dtoa_r+0x818>
 8009b58:	ee18 1a10 	vmov	r1, s16
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	4620      	mov	r0, r4
 8009b60:	f000 fd5a 	bl	800a618 <__lshift>
 8009b64:	ee08 0a10 	vmov	s16, r0
 8009b68:	9b05      	ldr	r3, [sp, #20]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	dd05      	ble.n	8009b7a <_dtoa_r+0x82a>
 8009b6e:	4631      	mov	r1, r6
 8009b70:	461a      	mov	r2, r3
 8009b72:	4620      	mov	r0, r4
 8009b74:	f000 fd50 	bl	800a618 <__lshift>
 8009b78:	4606      	mov	r6, r0
 8009b7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d06e      	beq.n	8009c5e <_dtoa_r+0x90e>
 8009b80:	ee18 0a10 	vmov	r0, s16
 8009b84:	4631      	mov	r1, r6
 8009b86:	f000 fdb7 	bl	800a6f8 <__mcmp>
 8009b8a:	2800      	cmp	r0, #0
 8009b8c:	da67      	bge.n	8009c5e <_dtoa_r+0x90e>
 8009b8e:	9b00      	ldr	r3, [sp, #0]
 8009b90:	3b01      	subs	r3, #1
 8009b92:	ee18 1a10 	vmov	r1, s16
 8009b96:	9300      	str	r3, [sp, #0]
 8009b98:	220a      	movs	r2, #10
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	4620      	mov	r0, r4
 8009b9e:	f000 fb8b 	bl	800a2b8 <__multadd>
 8009ba2:	9b08      	ldr	r3, [sp, #32]
 8009ba4:	ee08 0a10 	vmov	s16, r0
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	f000 81b1 	beq.w	8009f10 <_dtoa_r+0xbc0>
 8009bae:	2300      	movs	r3, #0
 8009bb0:	4639      	mov	r1, r7
 8009bb2:	220a      	movs	r2, #10
 8009bb4:	4620      	mov	r0, r4
 8009bb6:	f000 fb7f 	bl	800a2b8 <__multadd>
 8009bba:	9b02      	ldr	r3, [sp, #8]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	4607      	mov	r7, r0
 8009bc0:	f300 808e 	bgt.w	8009ce0 <_dtoa_r+0x990>
 8009bc4:	9b06      	ldr	r3, [sp, #24]
 8009bc6:	2b02      	cmp	r3, #2
 8009bc8:	dc51      	bgt.n	8009c6e <_dtoa_r+0x91e>
 8009bca:	e089      	b.n	8009ce0 <_dtoa_r+0x990>
 8009bcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009bce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009bd2:	e74b      	b.n	8009a6c <_dtoa_r+0x71c>
 8009bd4:	9b03      	ldr	r3, [sp, #12]
 8009bd6:	1e5e      	subs	r6, r3, #1
 8009bd8:	9b07      	ldr	r3, [sp, #28]
 8009bda:	42b3      	cmp	r3, r6
 8009bdc:	bfbf      	itttt	lt
 8009bde:	9b07      	ldrlt	r3, [sp, #28]
 8009be0:	9607      	strlt	r6, [sp, #28]
 8009be2:	1af2      	sublt	r2, r6, r3
 8009be4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009be6:	bfb6      	itet	lt
 8009be8:	189b      	addlt	r3, r3, r2
 8009bea:	1b9e      	subge	r6, r3, r6
 8009bec:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009bee:	9b03      	ldr	r3, [sp, #12]
 8009bf0:	bfb8      	it	lt
 8009bf2:	2600      	movlt	r6, #0
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	bfb7      	itett	lt
 8009bf8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009bfc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009c00:	1a9d      	sublt	r5, r3, r2
 8009c02:	2300      	movlt	r3, #0
 8009c04:	e734      	b.n	8009a70 <_dtoa_r+0x720>
 8009c06:	9e07      	ldr	r6, [sp, #28]
 8009c08:	9d04      	ldr	r5, [sp, #16]
 8009c0a:	9f08      	ldr	r7, [sp, #32]
 8009c0c:	e73b      	b.n	8009a86 <_dtoa_r+0x736>
 8009c0e:	9a07      	ldr	r2, [sp, #28]
 8009c10:	e767      	b.n	8009ae2 <_dtoa_r+0x792>
 8009c12:	9b06      	ldr	r3, [sp, #24]
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	dc18      	bgt.n	8009c4a <_dtoa_r+0x8fa>
 8009c18:	f1ba 0f00 	cmp.w	sl, #0
 8009c1c:	d115      	bne.n	8009c4a <_dtoa_r+0x8fa>
 8009c1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c22:	b993      	cbnz	r3, 8009c4a <_dtoa_r+0x8fa>
 8009c24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009c28:	0d1b      	lsrs	r3, r3, #20
 8009c2a:	051b      	lsls	r3, r3, #20
 8009c2c:	b183      	cbz	r3, 8009c50 <_dtoa_r+0x900>
 8009c2e:	9b04      	ldr	r3, [sp, #16]
 8009c30:	3301      	adds	r3, #1
 8009c32:	9304      	str	r3, [sp, #16]
 8009c34:	9b05      	ldr	r3, [sp, #20]
 8009c36:	3301      	adds	r3, #1
 8009c38:	9305      	str	r3, [sp, #20]
 8009c3a:	f04f 0801 	mov.w	r8, #1
 8009c3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	f47f af6a 	bne.w	8009b1a <_dtoa_r+0x7ca>
 8009c46:	2001      	movs	r0, #1
 8009c48:	e76f      	b.n	8009b2a <_dtoa_r+0x7da>
 8009c4a:	f04f 0800 	mov.w	r8, #0
 8009c4e:	e7f6      	b.n	8009c3e <_dtoa_r+0x8ee>
 8009c50:	4698      	mov	r8, r3
 8009c52:	e7f4      	b.n	8009c3e <_dtoa_r+0x8ee>
 8009c54:	f43f af7d 	beq.w	8009b52 <_dtoa_r+0x802>
 8009c58:	4618      	mov	r0, r3
 8009c5a:	301c      	adds	r0, #28
 8009c5c:	e772      	b.n	8009b44 <_dtoa_r+0x7f4>
 8009c5e:	9b03      	ldr	r3, [sp, #12]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	dc37      	bgt.n	8009cd4 <_dtoa_r+0x984>
 8009c64:	9b06      	ldr	r3, [sp, #24]
 8009c66:	2b02      	cmp	r3, #2
 8009c68:	dd34      	ble.n	8009cd4 <_dtoa_r+0x984>
 8009c6a:	9b03      	ldr	r3, [sp, #12]
 8009c6c:	9302      	str	r3, [sp, #8]
 8009c6e:	9b02      	ldr	r3, [sp, #8]
 8009c70:	b96b      	cbnz	r3, 8009c8e <_dtoa_r+0x93e>
 8009c72:	4631      	mov	r1, r6
 8009c74:	2205      	movs	r2, #5
 8009c76:	4620      	mov	r0, r4
 8009c78:	f000 fb1e 	bl	800a2b8 <__multadd>
 8009c7c:	4601      	mov	r1, r0
 8009c7e:	4606      	mov	r6, r0
 8009c80:	ee18 0a10 	vmov	r0, s16
 8009c84:	f000 fd38 	bl	800a6f8 <__mcmp>
 8009c88:	2800      	cmp	r0, #0
 8009c8a:	f73f adbb 	bgt.w	8009804 <_dtoa_r+0x4b4>
 8009c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c90:	9d01      	ldr	r5, [sp, #4]
 8009c92:	43db      	mvns	r3, r3
 8009c94:	9300      	str	r3, [sp, #0]
 8009c96:	f04f 0800 	mov.w	r8, #0
 8009c9a:	4631      	mov	r1, r6
 8009c9c:	4620      	mov	r0, r4
 8009c9e:	f000 fae9 	bl	800a274 <_Bfree>
 8009ca2:	2f00      	cmp	r7, #0
 8009ca4:	f43f aea4 	beq.w	80099f0 <_dtoa_r+0x6a0>
 8009ca8:	f1b8 0f00 	cmp.w	r8, #0
 8009cac:	d005      	beq.n	8009cba <_dtoa_r+0x96a>
 8009cae:	45b8      	cmp	r8, r7
 8009cb0:	d003      	beq.n	8009cba <_dtoa_r+0x96a>
 8009cb2:	4641      	mov	r1, r8
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	f000 fadd 	bl	800a274 <_Bfree>
 8009cba:	4639      	mov	r1, r7
 8009cbc:	4620      	mov	r0, r4
 8009cbe:	f000 fad9 	bl	800a274 <_Bfree>
 8009cc2:	e695      	b.n	80099f0 <_dtoa_r+0x6a0>
 8009cc4:	2600      	movs	r6, #0
 8009cc6:	4637      	mov	r7, r6
 8009cc8:	e7e1      	b.n	8009c8e <_dtoa_r+0x93e>
 8009cca:	9700      	str	r7, [sp, #0]
 8009ccc:	4637      	mov	r7, r6
 8009cce:	e599      	b.n	8009804 <_dtoa_r+0x4b4>
 8009cd0:	40240000 	.word	0x40240000
 8009cd4:	9b08      	ldr	r3, [sp, #32]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	f000 80ca 	beq.w	8009e70 <_dtoa_r+0xb20>
 8009cdc:	9b03      	ldr	r3, [sp, #12]
 8009cde:	9302      	str	r3, [sp, #8]
 8009ce0:	2d00      	cmp	r5, #0
 8009ce2:	dd05      	ble.n	8009cf0 <_dtoa_r+0x9a0>
 8009ce4:	4639      	mov	r1, r7
 8009ce6:	462a      	mov	r2, r5
 8009ce8:	4620      	mov	r0, r4
 8009cea:	f000 fc95 	bl	800a618 <__lshift>
 8009cee:	4607      	mov	r7, r0
 8009cf0:	f1b8 0f00 	cmp.w	r8, #0
 8009cf4:	d05b      	beq.n	8009dae <_dtoa_r+0xa5e>
 8009cf6:	6879      	ldr	r1, [r7, #4]
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	f000 fa7b 	bl	800a1f4 <_Balloc>
 8009cfe:	4605      	mov	r5, r0
 8009d00:	b928      	cbnz	r0, 8009d0e <_dtoa_r+0x9be>
 8009d02:	4b87      	ldr	r3, [pc, #540]	; (8009f20 <_dtoa_r+0xbd0>)
 8009d04:	4602      	mov	r2, r0
 8009d06:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009d0a:	f7ff bb3b 	b.w	8009384 <_dtoa_r+0x34>
 8009d0e:	693a      	ldr	r2, [r7, #16]
 8009d10:	3202      	adds	r2, #2
 8009d12:	0092      	lsls	r2, r2, #2
 8009d14:	f107 010c 	add.w	r1, r7, #12
 8009d18:	300c      	adds	r0, #12
 8009d1a:	f7fe fb9a 	bl	8008452 <memcpy>
 8009d1e:	2201      	movs	r2, #1
 8009d20:	4629      	mov	r1, r5
 8009d22:	4620      	mov	r0, r4
 8009d24:	f000 fc78 	bl	800a618 <__lshift>
 8009d28:	9b01      	ldr	r3, [sp, #4]
 8009d2a:	f103 0901 	add.w	r9, r3, #1
 8009d2e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009d32:	4413      	add	r3, r2
 8009d34:	9305      	str	r3, [sp, #20]
 8009d36:	f00a 0301 	and.w	r3, sl, #1
 8009d3a:	46b8      	mov	r8, r7
 8009d3c:	9304      	str	r3, [sp, #16]
 8009d3e:	4607      	mov	r7, r0
 8009d40:	4631      	mov	r1, r6
 8009d42:	ee18 0a10 	vmov	r0, s16
 8009d46:	f7ff fa77 	bl	8009238 <quorem>
 8009d4a:	4641      	mov	r1, r8
 8009d4c:	9002      	str	r0, [sp, #8]
 8009d4e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009d52:	ee18 0a10 	vmov	r0, s16
 8009d56:	f000 fccf 	bl	800a6f8 <__mcmp>
 8009d5a:	463a      	mov	r2, r7
 8009d5c:	9003      	str	r0, [sp, #12]
 8009d5e:	4631      	mov	r1, r6
 8009d60:	4620      	mov	r0, r4
 8009d62:	f000 fce5 	bl	800a730 <__mdiff>
 8009d66:	68c2      	ldr	r2, [r0, #12]
 8009d68:	f109 3bff 	add.w	fp, r9, #4294967295
 8009d6c:	4605      	mov	r5, r0
 8009d6e:	bb02      	cbnz	r2, 8009db2 <_dtoa_r+0xa62>
 8009d70:	4601      	mov	r1, r0
 8009d72:	ee18 0a10 	vmov	r0, s16
 8009d76:	f000 fcbf 	bl	800a6f8 <__mcmp>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	4629      	mov	r1, r5
 8009d7e:	4620      	mov	r0, r4
 8009d80:	9207      	str	r2, [sp, #28]
 8009d82:	f000 fa77 	bl	800a274 <_Bfree>
 8009d86:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009d8a:	ea43 0102 	orr.w	r1, r3, r2
 8009d8e:	9b04      	ldr	r3, [sp, #16]
 8009d90:	430b      	orrs	r3, r1
 8009d92:	464d      	mov	r5, r9
 8009d94:	d10f      	bne.n	8009db6 <_dtoa_r+0xa66>
 8009d96:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009d9a:	d02a      	beq.n	8009df2 <_dtoa_r+0xaa2>
 8009d9c:	9b03      	ldr	r3, [sp, #12]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	dd02      	ble.n	8009da8 <_dtoa_r+0xa58>
 8009da2:	9b02      	ldr	r3, [sp, #8]
 8009da4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009da8:	f88b a000 	strb.w	sl, [fp]
 8009dac:	e775      	b.n	8009c9a <_dtoa_r+0x94a>
 8009dae:	4638      	mov	r0, r7
 8009db0:	e7ba      	b.n	8009d28 <_dtoa_r+0x9d8>
 8009db2:	2201      	movs	r2, #1
 8009db4:	e7e2      	b.n	8009d7c <_dtoa_r+0xa2c>
 8009db6:	9b03      	ldr	r3, [sp, #12]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	db04      	blt.n	8009dc6 <_dtoa_r+0xa76>
 8009dbc:	9906      	ldr	r1, [sp, #24]
 8009dbe:	430b      	orrs	r3, r1
 8009dc0:	9904      	ldr	r1, [sp, #16]
 8009dc2:	430b      	orrs	r3, r1
 8009dc4:	d122      	bne.n	8009e0c <_dtoa_r+0xabc>
 8009dc6:	2a00      	cmp	r2, #0
 8009dc8:	ddee      	ble.n	8009da8 <_dtoa_r+0xa58>
 8009dca:	ee18 1a10 	vmov	r1, s16
 8009dce:	2201      	movs	r2, #1
 8009dd0:	4620      	mov	r0, r4
 8009dd2:	f000 fc21 	bl	800a618 <__lshift>
 8009dd6:	4631      	mov	r1, r6
 8009dd8:	ee08 0a10 	vmov	s16, r0
 8009ddc:	f000 fc8c 	bl	800a6f8 <__mcmp>
 8009de0:	2800      	cmp	r0, #0
 8009de2:	dc03      	bgt.n	8009dec <_dtoa_r+0xa9c>
 8009de4:	d1e0      	bne.n	8009da8 <_dtoa_r+0xa58>
 8009de6:	f01a 0f01 	tst.w	sl, #1
 8009dea:	d0dd      	beq.n	8009da8 <_dtoa_r+0xa58>
 8009dec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009df0:	d1d7      	bne.n	8009da2 <_dtoa_r+0xa52>
 8009df2:	2339      	movs	r3, #57	; 0x39
 8009df4:	f88b 3000 	strb.w	r3, [fp]
 8009df8:	462b      	mov	r3, r5
 8009dfa:	461d      	mov	r5, r3
 8009dfc:	3b01      	subs	r3, #1
 8009dfe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009e02:	2a39      	cmp	r2, #57	; 0x39
 8009e04:	d071      	beq.n	8009eea <_dtoa_r+0xb9a>
 8009e06:	3201      	adds	r2, #1
 8009e08:	701a      	strb	r2, [r3, #0]
 8009e0a:	e746      	b.n	8009c9a <_dtoa_r+0x94a>
 8009e0c:	2a00      	cmp	r2, #0
 8009e0e:	dd07      	ble.n	8009e20 <_dtoa_r+0xad0>
 8009e10:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009e14:	d0ed      	beq.n	8009df2 <_dtoa_r+0xaa2>
 8009e16:	f10a 0301 	add.w	r3, sl, #1
 8009e1a:	f88b 3000 	strb.w	r3, [fp]
 8009e1e:	e73c      	b.n	8009c9a <_dtoa_r+0x94a>
 8009e20:	9b05      	ldr	r3, [sp, #20]
 8009e22:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009e26:	4599      	cmp	r9, r3
 8009e28:	d047      	beq.n	8009eba <_dtoa_r+0xb6a>
 8009e2a:	ee18 1a10 	vmov	r1, s16
 8009e2e:	2300      	movs	r3, #0
 8009e30:	220a      	movs	r2, #10
 8009e32:	4620      	mov	r0, r4
 8009e34:	f000 fa40 	bl	800a2b8 <__multadd>
 8009e38:	45b8      	cmp	r8, r7
 8009e3a:	ee08 0a10 	vmov	s16, r0
 8009e3e:	f04f 0300 	mov.w	r3, #0
 8009e42:	f04f 020a 	mov.w	r2, #10
 8009e46:	4641      	mov	r1, r8
 8009e48:	4620      	mov	r0, r4
 8009e4a:	d106      	bne.n	8009e5a <_dtoa_r+0xb0a>
 8009e4c:	f000 fa34 	bl	800a2b8 <__multadd>
 8009e50:	4680      	mov	r8, r0
 8009e52:	4607      	mov	r7, r0
 8009e54:	f109 0901 	add.w	r9, r9, #1
 8009e58:	e772      	b.n	8009d40 <_dtoa_r+0x9f0>
 8009e5a:	f000 fa2d 	bl	800a2b8 <__multadd>
 8009e5e:	4639      	mov	r1, r7
 8009e60:	4680      	mov	r8, r0
 8009e62:	2300      	movs	r3, #0
 8009e64:	220a      	movs	r2, #10
 8009e66:	4620      	mov	r0, r4
 8009e68:	f000 fa26 	bl	800a2b8 <__multadd>
 8009e6c:	4607      	mov	r7, r0
 8009e6e:	e7f1      	b.n	8009e54 <_dtoa_r+0xb04>
 8009e70:	9b03      	ldr	r3, [sp, #12]
 8009e72:	9302      	str	r3, [sp, #8]
 8009e74:	9d01      	ldr	r5, [sp, #4]
 8009e76:	ee18 0a10 	vmov	r0, s16
 8009e7a:	4631      	mov	r1, r6
 8009e7c:	f7ff f9dc 	bl	8009238 <quorem>
 8009e80:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009e84:	9b01      	ldr	r3, [sp, #4]
 8009e86:	f805 ab01 	strb.w	sl, [r5], #1
 8009e8a:	1aea      	subs	r2, r5, r3
 8009e8c:	9b02      	ldr	r3, [sp, #8]
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	dd09      	ble.n	8009ea6 <_dtoa_r+0xb56>
 8009e92:	ee18 1a10 	vmov	r1, s16
 8009e96:	2300      	movs	r3, #0
 8009e98:	220a      	movs	r2, #10
 8009e9a:	4620      	mov	r0, r4
 8009e9c:	f000 fa0c 	bl	800a2b8 <__multadd>
 8009ea0:	ee08 0a10 	vmov	s16, r0
 8009ea4:	e7e7      	b.n	8009e76 <_dtoa_r+0xb26>
 8009ea6:	9b02      	ldr	r3, [sp, #8]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	bfc8      	it	gt
 8009eac:	461d      	movgt	r5, r3
 8009eae:	9b01      	ldr	r3, [sp, #4]
 8009eb0:	bfd8      	it	le
 8009eb2:	2501      	movle	r5, #1
 8009eb4:	441d      	add	r5, r3
 8009eb6:	f04f 0800 	mov.w	r8, #0
 8009eba:	ee18 1a10 	vmov	r1, s16
 8009ebe:	2201      	movs	r2, #1
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	f000 fba9 	bl	800a618 <__lshift>
 8009ec6:	4631      	mov	r1, r6
 8009ec8:	ee08 0a10 	vmov	s16, r0
 8009ecc:	f000 fc14 	bl	800a6f8 <__mcmp>
 8009ed0:	2800      	cmp	r0, #0
 8009ed2:	dc91      	bgt.n	8009df8 <_dtoa_r+0xaa8>
 8009ed4:	d102      	bne.n	8009edc <_dtoa_r+0xb8c>
 8009ed6:	f01a 0f01 	tst.w	sl, #1
 8009eda:	d18d      	bne.n	8009df8 <_dtoa_r+0xaa8>
 8009edc:	462b      	mov	r3, r5
 8009ede:	461d      	mov	r5, r3
 8009ee0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ee4:	2a30      	cmp	r2, #48	; 0x30
 8009ee6:	d0fa      	beq.n	8009ede <_dtoa_r+0xb8e>
 8009ee8:	e6d7      	b.n	8009c9a <_dtoa_r+0x94a>
 8009eea:	9a01      	ldr	r2, [sp, #4]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d184      	bne.n	8009dfa <_dtoa_r+0xaaa>
 8009ef0:	9b00      	ldr	r3, [sp, #0]
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	9300      	str	r3, [sp, #0]
 8009ef6:	2331      	movs	r3, #49	; 0x31
 8009ef8:	7013      	strb	r3, [r2, #0]
 8009efa:	e6ce      	b.n	8009c9a <_dtoa_r+0x94a>
 8009efc:	4b09      	ldr	r3, [pc, #36]	; (8009f24 <_dtoa_r+0xbd4>)
 8009efe:	f7ff ba95 	b.w	800942c <_dtoa_r+0xdc>
 8009f02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f47f aa6e 	bne.w	80093e6 <_dtoa_r+0x96>
 8009f0a:	4b07      	ldr	r3, [pc, #28]	; (8009f28 <_dtoa_r+0xbd8>)
 8009f0c:	f7ff ba8e 	b.w	800942c <_dtoa_r+0xdc>
 8009f10:	9b02      	ldr	r3, [sp, #8]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	dcae      	bgt.n	8009e74 <_dtoa_r+0xb24>
 8009f16:	9b06      	ldr	r3, [sp, #24]
 8009f18:	2b02      	cmp	r3, #2
 8009f1a:	f73f aea8 	bgt.w	8009c6e <_dtoa_r+0x91e>
 8009f1e:	e7a9      	b.n	8009e74 <_dtoa_r+0xb24>
 8009f20:	0800b42f 	.word	0x0800b42f
 8009f24:	0800b350 	.word	0x0800b350
 8009f28:	0800b3b0 	.word	0x0800b3b0

08009f2c <__sflush_r>:
 8009f2c:	898a      	ldrh	r2, [r1, #12]
 8009f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f32:	4605      	mov	r5, r0
 8009f34:	0710      	lsls	r0, r2, #28
 8009f36:	460c      	mov	r4, r1
 8009f38:	d458      	bmi.n	8009fec <__sflush_r+0xc0>
 8009f3a:	684b      	ldr	r3, [r1, #4]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	dc05      	bgt.n	8009f4c <__sflush_r+0x20>
 8009f40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	dc02      	bgt.n	8009f4c <__sflush_r+0x20>
 8009f46:	2000      	movs	r0, #0
 8009f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f4e:	2e00      	cmp	r6, #0
 8009f50:	d0f9      	beq.n	8009f46 <__sflush_r+0x1a>
 8009f52:	2300      	movs	r3, #0
 8009f54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009f58:	682f      	ldr	r7, [r5, #0]
 8009f5a:	602b      	str	r3, [r5, #0]
 8009f5c:	d032      	beq.n	8009fc4 <__sflush_r+0x98>
 8009f5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009f60:	89a3      	ldrh	r3, [r4, #12]
 8009f62:	075a      	lsls	r2, r3, #29
 8009f64:	d505      	bpl.n	8009f72 <__sflush_r+0x46>
 8009f66:	6863      	ldr	r3, [r4, #4]
 8009f68:	1ac0      	subs	r0, r0, r3
 8009f6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f6c:	b10b      	cbz	r3, 8009f72 <__sflush_r+0x46>
 8009f6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009f70:	1ac0      	subs	r0, r0, r3
 8009f72:	2300      	movs	r3, #0
 8009f74:	4602      	mov	r2, r0
 8009f76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f78:	6a21      	ldr	r1, [r4, #32]
 8009f7a:	4628      	mov	r0, r5
 8009f7c:	47b0      	blx	r6
 8009f7e:	1c43      	adds	r3, r0, #1
 8009f80:	89a3      	ldrh	r3, [r4, #12]
 8009f82:	d106      	bne.n	8009f92 <__sflush_r+0x66>
 8009f84:	6829      	ldr	r1, [r5, #0]
 8009f86:	291d      	cmp	r1, #29
 8009f88:	d82c      	bhi.n	8009fe4 <__sflush_r+0xb8>
 8009f8a:	4a2a      	ldr	r2, [pc, #168]	; (800a034 <__sflush_r+0x108>)
 8009f8c:	40ca      	lsrs	r2, r1
 8009f8e:	07d6      	lsls	r6, r2, #31
 8009f90:	d528      	bpl.n	8009fe4 <__sflush_r+0xb8>
 8009f92:	2200      	movs	r2, #0
 8009f94:	6062      	str	r2, [r4, #4]
 8009f96:	04d9      	lsls	r1, r3, #19
 8009f98:	6922      	ldr	r2, [r4, #16]
 8009f9a:	6022      	str	r2, [r4, #0]
 8009f9c:	d504      	bpl.n	8009fa8 <__sflush_r+0x7c>
 8009f9e:	1c42      	adds	r2, r0, #1
 8009fa0:	d101      	bne.n	8009fa6 <__sflush_r+0x7a>
 8009fa2:	682b      	ldr	r3, [r5, #0]
 8009fa4:	b903      	cbnz	r3, 8009fa8 <__sflush_r+0x7c>
 8009fa6:	6560      	str	r0, [r4, #84]	; 0x54
 8009fa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009faa:	602f      	str	r7, [r5, #0]
 8009fac:	2900      	cmp	r1, #0
 8009fae:	d0ca      	beq.n	8009f46 <__sflush_r+0x1a>
 8009fb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fb4:	4299      	cmp	r1, r3
 8009fb6:	d002      	beq.n	8009fbe <__sflush_r+0x92>
 8009fb8:	4628      	mov	r0, r5
 8009fba:	f000 fcb5 	bl	800a928 <_free_r>
 8009fbe:	2000      	movs	r0, #0
 8009fc0:	6360      	str	r0, [r4, #52]	; 0x34
 8009fc2:	e7c1      	b.n	8009f48 <__sflush_r+0x1c>
 8009fc4:	6a21      	ldr	r1, [r4, #32]
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	4628      	mov	r0, r5
 8009fca:	47b0      	blx	r6
 8009fcc:	1c41      	adds	r1, r0, #1
 8009fce:	d1c7      	bne.n	8009f60 <__sflush_r+0x34>
 8009fd0:	682b      	ldr	r3, [r5, #0]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d0c4      	beq.n	8009f60 <__sflush_r+0x34>
 8009fd6:	2b1d      	cmp	r3, #29
 8009fd8:	d001      	beq.n	8009fde <__sflush_r+0xb2>
 8009fda:	2b16      	cmp	r3, #22
 8009fdc:	d101      	bne.n	8009fe2 <__sflush_r+0xb6>
 8009fde:	602f      	str	r7, [r5, #0]
 8009fe0:	e7b1      	b.n	8009f46 <__sflush_r+0x1a>
 8009fe2:	89a3      	ldrh	r3, [r4, #12]
 8009fe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fe8:	81a3      	strh	r3, [r4, #12]
 8009fea:	e7ad      	b.n	8009f48 <__sflush_r+0x1c>
 8009fec:	690f      	ldr	r7, [r1, #16]
 8009fee:	2f00      	cmp	r7, #0
 8009ff0:	d0a9      	beq.n	8009f46 <__sflush_r+0x1a>
 8009ff2:	0793      	lsls	r3, r2, #30
 8009ff4:	680e      	ldr	r6, [r1, #0]
 8009ff6:	bf08      	it	eq
 8009ff8:	694b      	ldreq	r3, [r1, #20]
 8009ffa:	600f      	str	r7, [r1, #0]
 8009ffc:	bf18      	it	ne
 8009ffe:	2300      	movne	r3, #0
 800a000:	eba6 0807 	sub.w	r8, r6, r7
 800a004:	608b      	str	r3, [r1, #8]
 800a006:	f1b8 0f00 	cmp.w	r8, #0
 800a00a:	dd9c      	ble.n	8009f46 <__sflush_r+0x1a>
 800a00c:	6a21      	ldr	r1, [r4, #32]
 800a00e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a010:	4643      	mov	r3, r8
 800a012:	463a      	mov	r2, r7
 800a014:	4628      	mov	r0, r5
 800a016:	47b0      	blx	r6
 800a018:	2800      	cmp	r0, #0
 800a01a:	dc06      	bgt.n	800a02a <__sflush_r+0xfe>
 800a01c:	89a3      	ldrh	r3, [r4, #12]
 800a01e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a022:	81a3      	strh	r3, [r4, #12]
 800a024:	f04f 30ff 	mov.w	r0, #4294967295
 800a028:	e78e      	b.n	8009f48 <__sflush_r+0x1c>
 800a02a:	4407      	add	r7, r0
 800a02c:	eba8 0800 	sub.w	r8, r8, r0
 800a030:	e7e9      	b.n	800a006 <__sflush_r+0xda>
 800a032:	bf00      	nop
 800a034:	20400001 	.word	0x20400001

0800a038 <_fflush_r>:
 800a038:	b538      	push	{r3, r4, r5, lr}
 800a03a:	690b      	ldr	r3, [r1, #16]
 800a03c:	4605      	mov	r5, r0
 800a03e:	460c      	mov	r4, r1
 800a040:	b913      	cbnz	r3, 800a048 <_fflush_r+0x10>
 800a042:	2500      	movs	r5, #0
 800a044:	4628      	mov	r0, r5
 800a046:	bd38      	pop	{r3, r4, r5, pc}
 800a048:	b118      	cbz	r0, 800a052 <_fflush_r+0x1a>
 800a04a:	6983      	ldr	r3, [r0, #24]
 800a04c:	b90b      	cbnz	r3, 800a052 <_fflush_r+0x1a>
 800a04e:	f7fe f93b 	bl	80082c8 <__sinit>
 800a052:	4b14      	ldr	r3, [pc, #80]	; (800a0a4 <_fflush_r+0x6c>)
 800a054:	429c      	cmp	r4, r3
 800a056:	d11b      	bne.n	800a090 <_fflush_r+0x58>
 800a058:	686c      	ldr	r4, [r5, #4]
 800a05a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d0ef      	beq.n	800a042 <_fflush_r+0xa>
 800a062:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a064:	07d0      	lsls	r0, r2, #31
 800a066:	d404      	bmi.n	800a072 <_fflush_r+0x3a>
 800a068:	0599      	lsls	r1, r3, #22
 800a06a:	d402      	bmi.n	800a072 <_fflush_r+0x3a>
 800a06c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a06e:	f7fe f9ee 	bl	800844e <__retarget_lock_acquire_recursive>
 800a072:	4628      	mov	r0, r5
 800a074:	4621      	mov	r1, r4
 800a076:	f7ff ff59 	bl	8009f2c <__sflush_r>
 800a07a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a07c:	07da      	lsls	r2, r3, #31
 800a07e:	4605      	mov	r5, r0
 800a080:	d4e0      	bmi.n	800a044 <_fflush_r+0xc>
 800a082:	89a3      	ldrh	r3, [r4, #12]
 800a084:	059b      	lsls	r3, r3, #22
 800a086:	d4dd      	bmi.n	800a044 <_fflush_r+0xc>
 800a088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a08a:	f7fe f9e1 	bl	8008450 <__retarget_lock_release_recursive>
 800a08e:	e7d9      	b.n	800a044 <_fflush_r+0xc>
 800a090:	4b05      	ldr	r3, [pc, #20]	; (800a0a8 <_fflush_r+0x70>)
 800a092:	429c      	cmp	r4, r3
 800a094:	d101      	bne.n	800a09a <_fflush_r+0x62>
 800a096:	68ac      	ldr	r4, [r5, #8]
 800a098:	e7df      	b.n	800a05a <_fflush_r+0x22>
 800a09a:	4b04      	ldr	r3, [pc, #16]	; (800a0ac <_fflush_r+0x74>)
 800a09c:	429c      	cmp	r4, r3
 800a09e:	bf08      	it	eq
 800a0a0:	68ec      	ldreq	r4, [r5, #12]
 800a0a2:	e7da      	b.n	800a05a <_fflush_r+0x22>
 800a0a4:	0800b2fc 	.word	0x0800b2fc
 800a0a8:	0800b31c 	.word	0x0800b31c
 800a0ac:	0800b2dc 	.word	0x0800b2dc

0800a0b0 <fiprintf>:
 800a0b0:	b40e      	push	{r1, r2, r3}
 800a0b2:	b503      	push	{r0, r1, lr}
 800a0b4:	4601      	mov	r1, r0
 800a0b6:	ab03      	add	r3, sp, #12
 800a0b8:	4805      	ldr	r0, [pc, #20]	; (800a0d0 <fiprintf+0x20>)
 800a0ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0be:	6800      	ldr	r0, [r0, #0]
 800a0c0:	9301      	str	r3, [sp, #4]
 800a0c2:	f000 fe03 	bl	800accc <_vfiprintf_r>
 800a0c6:	b002      	add	sp, #8
 800a0c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0cc:	b003      	add	sp, #12
 800a0ce:	4770      	bx	lr
 800a0d0:	200000d4 	.word	0x200000d4

0800a0d4 <_localeconv_r>:
 800a0d4:	4800      	ldr	r0, [pc, #0]	; (800a0d8 <_localeconv_r+0x4>)
 800a0d6:	4770      	bx	lr
 800a0d8:	20000228 	.word	0x20000228

0800a0dc <_lseek_r>:
 800a0dc:	b538      	push	{r3, r4, r5, lr}
 800a0de:	4d07      	ldr	r5, [pc, #28]	; (800a0fc <_lseek_r+0x20>)
 800a0e0:	4604      	mov	r4, r0
 800a0e2:	4608      	mov	r0, r1
 800a0e4:	4611      	mov	r1, r2
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	602a      	str	r2, [r5, #0]
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	f7f7 fd5e 	bl	8001bac <_lseek>
 800a0f0:	1c43      	adds	r3, r0, #1
 800a0f2:	d102      	bne.n	800a0fa <_lseek_r+0x1e>
 800a0f4:	682b      	ldr	r3, [r5, #0]
 800a0f6:	b103      	cbz	r3, 800a0fa <_lseek_r+0x1e>
 800a0f8:	6023      	str	r3, [r4, #0]
 800a0fa:	bd38      	pop	{r3, r4, r5, pc}
 800a0fc:	20001c10 	.word	0x20001c10

0800a100 <__swhatbuf_r>:
 800a100:	b570      	push	{r4, r5, r6, lr}
 800a102:	460e      	mov	r6, r1
 800a104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a108:	2900      	cmp	r1, #0
 800a10a:	b096      	sub	sp, #88	; 0x58
 800a10c:	4614      	mov	r4, r2
 800a10e:	461d      	mov	r5, r3
 800a110:	da08      	bge.n	800a124 <__swhatbuf_r+0x24>
 800a112:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a116:	2200      	movs	r2, #0
 800a118:	602a      	str	r2, [r5, #0]
 800a11a:	061a      	lsls	r2, r3, #24
 800a11c:	d410      	bmi.n	800a140 <__swhatbuf_r+0x40>
 800a11e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a122:	e00e      	b.n	800a142 <__swhatbuf_r+0x42>
 800a124:	466a      	mov	r2, sp
 800a126:	f000 ff1b 	bl	800af60 <_fstat_r>
 800a12a:	2800      	cmp	r0, #0
 800a12c:	dbf1      	blt.n	800a112 <__swhatbuf_r+0x12>
 800a12e:	9a01      	ldr	r2, [sp, #4]
 800a130:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a134:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a138:	425a      	negs	r2, r3
 800a13a:	415a      	adcs	r2, r3
 800a13c:	602a      	str	r2, [r5, #0]
 800a13e:	e7ee      	b.n	800a11e <__swhatbuf_r+0x1e>
 800a140:	2340      	movs	r3, #64	; 0x40
 800a142:	2000      	movs	r0, #0
 800a144:	6023      	str	r3, [r4, #0]
 800a146:	b016      	add	sp, #88	; 0x58
 800a148:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a14c <__smakebuf_r>:
 800a14c:	898b      	ldrh	r3, [r1, #12]
 800a14e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a150:	079d      	lsls	r5, r3, #30
 800a152:	4606      	mov	r6, r0
 800a154:	460c      	mov	r4, r1
 800a156:	d507      	bpl.n	800a168 <__smakebuf_r+0x1c>
 800a158:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a15c:	6023      	str	r3, [r4, #0]
 800a15e:	6123      	str	r3, [r4, #16]
 800a160:	2301      	movs	r3, #1
 800a162:	6163      	str	r3, [r4, #20]
 800a164:	b002      	add	sp, #8
 800a166:	bd70      	pop	{r4, r5, r6, pc}
 800a168:	ab01      	add	r3, sp, #4
 800a16a:	466a      	mov	r2, sp
 800a16c:	f7ff ffc8 	bl	800a100 <__swhatbuf_r>
 800a170:	9900      	ldr	r1, [sp, #0]
 800a172:	4605      	mov	r5, r0
 800a174:	4630      	mov	r0, r6
 800a176:	f7fe f9a3 	bl	80084c0 <_malloc_r>
 800a17a:	b948      	cbnz	r0, 800a190 <__smakebuf_r+0x44>
 800a17c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a180:	059a      	lsls	r2, r3, #22
 800a182:	d4ef      	bmi.n	800a164 <__smakebuf_r+0x18>
 800a184:	f023 0303 	bic.w	r3, r3, #3
 800a188:	f043 0302 	orr.w	r3, r3, #2
 800a18c:	81a3      	strh	r3, [r4, #12]
 800a18e:	e7e3      	b.n	800a158 <__smakebuf_r+0xc>
 800a190:	4b0d      	ldr	r3, [pc, #52]	; (800a1c8 <__smakebuf_r+0x7c>)
 800a192:	62b3      	str	r3, [r6, #40]	; 0x28
 800a194:	89a3      	ldrh	r3, [r4, #12]
 800a196:	6020      	str	r0, [r4, #0]
 800a198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a19c:	81a3      	strh	r3, [r4, #12]
 800a19e:	9b00      	ldr	r3, [sp, #0]
 800a1a0:	6163      	str	r3, [r4, #20]
 800a1a2:	9b01      	ldr	r3, [sp, #4]
 800a1a4:	6120      	str	r0, [r4, #16]
 800a1a6:	b15b      	cbz	r3, 800a1c0 <__smakebuf_r+0x74>
 800a1a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1ac:	4630      	mov	r0, r6
 800a1ae:	f000 fee9 	bl	800af84 <_isatty_r>
 800a1b2:	b128      	cbz	r0, 800a1c0 <__smakebuf_r+0x74>
 800a1b4:	89a3      	ldrh	r3, [r4, #12]
 800a1b6:	f023 0303 	bic.w	r3, r3, #3
 800a1ba:	f043 0301 	orr.w	r3, r3, #1
 800a1be:	81a3      	strh	r3, [r4, #12]
 800a1c0:	89a0      	ldrh	r0, [r4, #12]
 800a1c2:	4305      	orrs	r5, r0
 800a1c4:	81a5      	strh	r5, [r4, #12]
 800a1c6:	e7cd      	b.n	800a164 <__smakebuf_r+0x18>
 800a1c8:	08008261 	.word	0x08008261

0800a1cc <malloc>:
 800a1cc:	4b02      	ldr	r3, [pc, #8]	; (800a1d8 <malloc+0xc>)
 800a1ce:	4601      	mov	r1, r0
 800a1d0:	6818      	ldr	r0, [r3, #0]
 800a1d2:	f7fe b975 	b.w	80084c0 <_malloc_r>
 800a1d6:	bf00      	nop
 800a1d8:	200000d4 	.word	0x200000d4

0800a1dc <__malloc_lock>:
 800a1dc:	4801      	ldr	r0, [pc, #4]	; (800a1e4 <__malloc_lock+0x8>)
 800a1de:	f7fe b936 	b.w	800844e <__retarget_lock_acquire_recursive>
 800a1e2:	bf00      	nop
 800a1e4:	20001c04 	.word	0x20001c04

0800a1e8 <__malloc_unlock>:
 800a1e8:	4801      	ldr	r0, [pc, #4]	; (800a1f0 <__malloc_unlock+0x8>)
 800a1ea:	f7fe b931 	b.w	8008450 <__retarget_lock_release_recursive>
 800a1ee:	bf00      	nop
 800a1f0:	20001c04 	.word	0x20001c04

0800a1f4 <_Balloc>:
 800a1f4:	b570      	push	{r4, r5, r6, lr}
 800a1f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a1f8:	4604      	mov	r4, r0
 800a1fa:	460d      	mov	r5, r1
 800a1fc:	b976      	cbnz	r6, 800a21c <_Balloc+0x28>
 800a1fe:	2010      	movs	r0, #16
 800a200:	f7ff ffe4 	bl	800a1cc <malloc>
 800a204:	4602      	mov	r2, r0
 800a206:	6260      	str	r0, [r4, #36]	; 0x24
 800a208:	b920      	cbnz	r0, 800a214 <_Balloc+0x20>
 800a20a:	4b18      	ldr	r3, [pc, #96]	; (800a26c <_Balloc+0x78>)
 800a20c:	4818      	ldr	r0, [pc, #96]	; (800a270 <_Balloc+0x7c>)
 800a20e:	2166      	movs	r1, #102	; 0x66
 800a210:	f7fe ffe4 	bl	80091dc <__assert_func>
 800a214:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a218:	6006      	str	r6, [r0, #0]
 800a21a:	60c6      	str	r6, [r0, #12]
 800a21c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a21e:	68f3      	ldr	r3, [r6, #12]
 800a220:	b183      	cbz	r3, 800a244 <_Balloc+0x50>
 800a222:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a224:	68db      	ldr	r3, [r3, #12]
 800a226:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a22a:	b9b8      	cbnz	r0, 800a25c <_Balloc+0x68>
 800a22c:	2101      	movs	r1, #1
 800a22e:	fa01 f605 	lsl.w	r6, r1, r5
 800a232:	1d72      	adds	r2, r6, #5
 800a234:	0092      	lsls	r2, r2, #2
 800a236:	4620      	mov	r0, r4
 800a238:	f000 fb60 	bl	800a8fc <_calloc_r>
 800a23c:	b160      	cbz	r0, 800a258 <_Balloc+0x64>
 800a23e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a242:	e00e      	b.n	800a262 <_Balloc+0x6e>
 800a244:	2221      	movs	r2, #33	; 0x21
 800a246:	2104      	movs	r1, #4
 800a248:	4620      	mov	r0, r4
 800a24a:	f000 fb57 	bl	800a8fc <_calloc_r>
 800a24e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a250:	60f0      	str	r0, [r6, #12]
 800a252:	68db      	ldr	r3, [r3, #12]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d1e4      	bne.n	800a222 <_Balloc+0x2e>
 800a258:	2000      	movs	r0, #0
 800a25a:	bd70      	pop	{r4, r5, r6, pc}
 800a25c:	6802      	ldr	r2, [r0, #0]
 800a25e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a262:	2300      	movs	r3, #0
 800a264:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a268:	e7f7      	b.n	800a25a <_Balloc+0x66>
 800a26a:	bf00      	nop
 800a26c:	0800b3bd 	.word	0x0800b3bd
 800a270:	0800b440 	.word	0x0800b440

0800a274 <_Bfree>:
 800a274:	b570      	push	{r4, r5, r6, lr}
 800a276:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a278:	4605      	mov	r5, r0
 800a27a:	460c      	mov	r4, r1
 800a27c:	b976      	cbnz	r6, 800a29c <_Bfree+0x28>
 800a27e:	2010      	movs	r0, #16
 800a280:	f7ff ffa4 	bl	800a1cc <malloc>
 800a284:	4602      	mov	r2, r0
 800a286:	6268      	str	r0, [r5, #36]	; 0x24
 800a288:	b920      	cbnz	r0, 800a294 <_Bfree+0x20>
 800a28a:	4b09      	ldr	r3, [pc, #36]	; (800a2b0 <_Bfree+0x3c>)
 800a28c:	4809      	ldr	r0, [pc, #36]	; (800a2b4 <_Bfree+0x40>)
 800a28e:	218a      	movs	r1, #138	; 0x8a
 800a290:	f7fe ffa4 	bl	80091dc <__assert_func>
 800a294:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a298:	6006      	str	r6, [r0, #0]
 800a29a:	60c6      	str	r6, [r0, #12]
 800a29c:	b13c      	cbz	r4, 800a2ae <_Bfree+0x3a>
 800a29e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a2a0:	6862      	ldr	r2, [r4, #4]
 800a2a2:	68db      	ldr	r3, [r3, #12]
 800a2a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a2a8:	6021      	str	r1, [r4, #0]
 800a2aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a2ae:	bd70      	pop	{r4, r5, r6, pc}
 800a2b0:	0800b3bd 	.word	0x0800b3bd
 800a2b4:	0800b440 	.word	0x0800b440

0800a2b8 <__multadd>:
 800a2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2bc:	690d      	ldr	r5, [r1, #16]
 800a2be:	4607      	mov	r7, r0
 800a2c0:	460c      	mov	r4, r1
 800a2c2:	461e      	mov	r6, r3
 800a2c4:	f101 0c14 	add.w	ip, r1, #20
 800a2c8:	2000      	movs	r0, #0
 800a2ca:	f8dc 3000 	ldr.w	r3, [ip]
 800a2ce:	b299      	uxth	r1, r3
 800a2d0:	fb02 6101 	mla	r1, r2, r1, r6
 800a2d4:	0c1e      	lsrs	r6, r3, #16
 800a2d6:	0c0b      	lsrs	r3, r1, #16
 800a2d8:	fb02 3306 	mla	r3, r2, r6, r3
 800a2dc:	b289      	uxth	r1, r1
 800a2de:	3001      	adds	r0, #1
 800a2e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a2e4:	4285      	cmp	r5, r0
 800a2e6:	f84c 1b04 	str.w	r1, [ip], #4
 800a2ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a2ee:	dcec      	bgt.n	800a2ca <__multadd+0x12>
 800a2f0:	b30e      	cbz	r6, 800a336 <__multadd+0x7e>
 800a2f2:	68a3      	ldr	r3, [r4, #8]
 800a2f4:	42ab      	cmp	r3, r5
 800a2f6:	dc19      	bgt.n	800a32c <__multadd+0x74>
 800a2f8:	6861      	ldr	r1, [r4, #4]
 800a2fa:	4638      	mov	r0, r7
 800a2fc:	3101      	adds	r1, #1
 800a2fe:	f7ff ff79 	bl	800a1f4 <_Balloc>
 800a302:	4680      	mov	r8, r0
 800a304:	b928      	cbnz	r0, 800a312 <__multadd+0x5a>
 800a306:	4602      	mov	r2, r0
 800a308:	4b0c      	ldr	r3, [pc, #48]	; (800a33c <__multadd+0x84>)
 800a30a:	480d      	ldr	r0, [pc, #52]	; (800a340 <__multadd+0x88>)
 800a30c:	21b5      	movs	r1, #181	; 0xb5
 800a30e:	f7fe ff65 	bl	80091dc <__assert_func>
 800a312:	6922      	ldr	r2, [r4, #16]
 800a314:	3202      	adds	r2, #2
 800a316:	f104 010c 	add.w	r1, r4, #12
 800a31a:	0092      	lsls	r2, r2, #2
 800a31c:	300c      	adds	r0, #12
 800a31e:	f7fe f898 	bl	8008452 <memcpy>
 800a322:	4621      	mov	r1, r4
 800a324:	4638      	mov	r0, r7
 800a326:	f7ff ffa5 	bl	800a274 <_Bfree>
 800a32a:	4644      	mov	r4, r8
 800a32c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a330:	3501      	adds	r5, #1
 800a332:	615e      	str	r6, [r3, #20]
 800a334:	6125      	str	r5, [r4, #16]
 800a336:	4620      	mov	r0, r4
 800a338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a33c:	0800b42f 	.word	0x0800b42f
 800a340:	0800b440 	.word	0x0800b440

0800a344 <__hi0bits>:
 800a344:	0c03      	lsrs	r3, r0, #16
 800a346:	041b      	lsls	r3, r3, #16
 800a348:	b9d3      	cbnz	r3, 800a380 <__hi0bits+0x3c>
 800a34a:	0400      	lsls	r0, r0, #16
 800a34c:	2310      	movs	r3, #16
 800a34e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a352:	bf04      	itt	eq
 800a354:	0200      	lsleq	r0, r0, #8
 800a356:	3308      	addeq	r3, #8
 800a358:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a35c:	bf04      	itt	eq
 800a35e:	0100      	lsleq	r0, r0, #4
 800a360:	3304      	addeq	r3, #4
 800a362:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a366:	bf04      	itt	eq
 800a368:	0080      	lsleq	r0, r0, #2
 800a36a:	3302      	addeq	r3, #2
 800a36c:	2800      	cmp	r0, #0
 800a36e:	db05      	blt.n	800a37c <__hi0bits+0x38>
 800a370:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a374:	f103 0301 	add.w	r3, r3, #1
 800a378:	bf08      	it	eq
 800a37a:	2320      	moveq	r3, #32
 800a37c:	4618      	mov	r0, r3
 800a37e:	4770      	bx	lr
 800a380:	2300      	movs	r3, #0
 800a382:	e7e4      	b.n	800a34e <__hi0bits+0xa>

0800a384 <__lo0bits>:
 800a384:	6803      	ldr	r3, [r0, #0]
 800a386:	f013 0207 	ands.w	r2, r3, #7
 800a38a:	4601      	mov	r1, r0
 800a38c:	d00b      	beq.n	800a3a6 <__lo0bits+0x22>
 800a38e:	07da      	lsls	r2, r3, #31
 800a390:	d423      	bmi.n	800a3da <__lo0bits+0x56>
 800a392:	0798      	lsls	r0, r3, #30
 800a394:	bf49      	itett	mi
 800a396:	085b      	lsrmi	r3, r3, #1
 800a398:	089b      	lsrpl	r3, r3, #2
 800a39a:	2001      	movmi	r0, #1
 800a39c:	600b      	strmi	r3, [r1, #0]
 800a39e:	bf5c      	itt	pl
 800a3a0:	600b      	strpl	r3, [r1, #0]
 800a3a2:	2002      	movpl	r0, #2
 800a3a4:	4770      	bx	lr
 800a3a6:	b298      	uxth	r0, r3
 800a3a8:	b9a8      	cbnz	r0, 800a3d6 <__lo0bits+0x52>
 800a3aa:	0c1b      	lsrs	r3, r3, #16
 800a3ac:	2010      	movs	r0, #16
 800a3ae:	b2da      	uxtb	r2, r3
 800a3b0:	b90a      	cbnz	r2, 800a3b6 <__lo0bits+0x32>
 800a3b2:	3008      	adds	r0, #8
 800a3b4:	0a1b      	lsrs	r3, r3, #8
 800a3b6:	071a      	lsls	r2, r3, #28
 800a3b8:	bf04      	itt	eq
 800a3ba:	091b      	lsreq	r3, r3, #4
 800a3bc:	3004      	addeq	r0, #4
 800a3be:	079a      	lsls	r2, r3, #30
 800a3c0:	bf04      	itt	eq
 800a3c2:	089b      	lsreq	r3, r3, #2
 800a3c4:	3002      	addeq	r0, #2
 800a3c6:	07da      	lsls	r2, r3, #31
 800a3c8:	d403      	bmi.n	800a3d2 <__lo0bits+0x4e>
 800a3ca:	085b      	lsrs	r3, r3, #1
 800a3cc:	f100 0001 	add.w	r0, r0, #1
 800a3d0:	d005      	beq.n	800a3de <__lo0bits+0x5a>
 800a3d2:	600b      	str	r3, [r1, #0]
 800a3d4:	4770      	bx	lr
 800a3d6:	4610      	mov	r0, r2
 800a3d8:	e7e9      	b.n	800a3ae <__lo0bits+0x2a>
 800a3da:	2000      	movs	r0, #0
 800a3dc:	4770      	bx	lr
 800a3de:	2020      	movs	r0, #32
 800a3e0:	4770      	bx	lr
	...

0800a3e4 <__i2b>:
 800a3e4:	b510      	push	{r4, lr}
 800a3e6:	460c      	mov	r4, r1
 800a3e8:	2101      	movs	r1, #1
 800a3ea:	f7ff ff03 	bl	800a1f4 <_Balloc>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	b928      	cbnz	r0, 800a3fe <__i2b+0x1a>
 800a3f2:	4b05      	ldr	r3, [pc, #20]	; (800a408 <__i2b+0x24>)
 800a3f4:	4805      	ldr	r0, [pc, #20]	; (800a40c <__i2b+0x28>)
 800a3f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a3fa:	f7fe feef 	bl	80091dc <__assert_func>
 800a3fe:	2301      	movs	r3, #1
 800a400:	6144      	str	r4, [r0, #20]
 800a402:	6103      	str	r3, [r0, #16]
 800a404:	bd10      	pop	{r4, pc}
 800a406:	bf00      	nop
 800a408:	0800b42f 	.word	0x0800b42f
 800a40c:	0800b440 	.word	0x0800b440

0800a410 <__multiply>:
 800a410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a414:	4691      	mov	r9, r2
 800a416:	690a      	ldr	r2, [r1, #16]
 800a418:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a41c:	429a      	cmp	r2, r3
 800a41e:	bfb8      	it	lt
 800a420:	460b      	movlt	r3, r1
 800a422:	460c      	mov	r4, r1
 800a424:	bfbc      	itt	lt
 800a426:	464c      	movlt	r4, r9
 800a428:	4699      	movlt	r9, r3
 800a42a:	6927      	ldr	r7, [r4, #16]
 800a42c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a430:	68a3      	ldr	r3, [r4, #8]
 800a432:	6861      	ldr	r1, [r4, #4]
 800a434:	eb07 060a 	add.w	r6, r7, sl
 800a438:	42b3      	cmp	r3, r6
 800a43a:	b085      	sub	sp, #20
 800a43c:	bfb8      	it	lt
 800a43e:	3101      	addlt	r1, #1
 800a440:	f7ff fed8 	bl	800a1f4 <_Balloc>
 800a444:	b930      	cbnz	r0, 800a454 <__multiply+0x44>
 800a446:	4602      	mov	r2, r0
 800a448:	4b44      	ldr	r3, [pc, #272]	; (800a55c <__multiply+0x14c>)
 800a44a:	4845      	ldr	r0, [pc, #276]	; (800a560 <__multiply+0x150>)
 800a44c:	f240 115d 	movw	r1, #349	; 0x15d
 800a450:	f7fe fec4 	bl	80091dc <__assert_func>
 800a454:	f100 0514 	add.w	r5, r0, #20
 800a458:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a45c:	462b      	mov	r3, r5
 800a45e:	2200      	movs	r2, #0
 800a460:	4543      	cmp	r3, r8
 800a462:	d321      	bcc.n	800a4a8 <__multiply+0x98>
 800a464:	f104 0314 	add.w	r3, r4, #20
 800a468:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a46c:	f109 0314 	add.w	r3, r9, #20
 800a470:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a474:	9202      	str	r2, [sp, #8]
 800a476:	1b3a      	subs	r2, r7, r4
 800a478:	3a15      	subs	r2, #21
 800a47a:	f022 0203 	bic.w	r2, r2, #3
 800a47e:	3204      	adds	r2, #4
 800a480:	f104 0115 	add.w	r1, r4, #21
 800a484:	428f      	cmp	r7, r1
 800a486:	bf38      	it	cc
 800a488:	2204      	movcc	r2, #4
 800a48a:	9201      	str	r2, [sp, #4]
 800a48c:	9a02      	ldr	r2, [sp, #8]
 800a48e:	9303      	str	r3, [sp, #12]
 800a490:	429a      	cmp	r2, r3
 800a492:	d80c      	bhi.n	800a4ae <__multiply+0x9e>
 800a494:	2e00      	cmp	r6, #0
 800a496:	dd03      	ble.n	800a4a0 <__multiply+0x90>
 800a498:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d05a      	beq.n	800a556 <__multiply+0x146>
 800a4a0:	6106      	str	r6, [r0, #16]
 800a4a2:	b005      	add	sp, #20
 800a4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4a8:	f843 2b04 	str.w	r2, [r3], #4
 800a4ac:	e7d8      	b.n	800a460 <__multiply+0x50>
 800a4ae:	f8b3 a000 	ldrh.w	sl, [r3]
 800a4b2:	f1ba 0f00 	cmp.w	sl, #0
 800a4b6:	d024      	beq.n	800a502 <__multiply+0xf2>
 800a4b8:	f104 0e14 	add.w	lr, r4, #20
 800a4bc:	46a9      	mov	r9, r5
 800a4be:	f04f 0c00 	mov.w	ip, #0
 800a4c2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a4c6:	f8d9 1000 	ldr.w	r1, [r9]
 800a4ca:	fa1f fb82 	uxth.w	fp, r2
 800a4ce:	b289      	uxth	r1, r1
 800a4d0:	fb0a 110b 	mla	r1, sl, fp, r1
 800a4d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a4d8:	f8d9 2000 	ldr.w	r2, [r9]
 800a4dc:	4461      	add	r1, ip
 800a4de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a4e2:	fb0a c20b 	mla	r2, sl, fp, ip
 800a4e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a4ea:	b289      	uxth	r1, r1
 800a4ec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a4f0:	4577      	cmp	r7, lr
 800a4f2:	f849 1b04 	str.w	r1, [r9], #4
 800a4f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a4fa:	d8e2      	bhi.n	800a4c2 <__multiply+0xb2>
 800a4fc:	9a01      	ldr	r2, [sp, #4]
 800a4fe:	f845 c002 	str.w	ip, [r5, r2]
 800a502:	9a03      	ldr	r2, [sp, #12]
 800a504:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a508:	3304      	adds	r3, #4
 800a50a:	f1b9 0f00 	cmp.w	r9, #0
 800a50e:	d020      	beq.n	800a552 <__multiply+0x142>
 800a510:	6829      	ldr	r1, [r5, #0]
 800a512:	f104 0c14 	add.w	ip, r4, #20
 800a516:	46ae      	mov	lr, r5
 800a518:	f04f 0a00 	mov.w	sl, #0
 800a51c:	f8bc b000 	ldrh.w	fp, [ip]
 800a520:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a524:	fb09 220b 	mla	r2, r9, fp, r2
 800a528:	4492      	add	sl, r2
 800a52a:	b289      	uxth	r1, r1
 800a52c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a530:	f84e 1b04 	str.w	r1, [lr], #4
 800a534:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a538:	f8be 1000 	ldrh.w	r1, [lr]
 800a53c:	0c12      	lsrs	r2, r2, #16
 800a53e:	fb09 1102 	mla	r1, r9, r2, r1
 800a542:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a546:	4567      	cmp	r7, ip
 800a548:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a54c:	d8e6      	bhi.n	800a51c <__multiply+0x10c>
 800a54e:	9a01      	ldr	r2, [sp, #4]
 800a550:	50a9      	str	r1, [r5, r2]
 800a552:	3504      	adds	r5, #4
 800a554:	e79a      	b.n	800a48c <__multiply+0x7c>
 800a556:	3e01      	subs	r6, #1
 800a558:	e79c      	b.n	800a494 <__multiply+0x84>
 800a55a:	bf00      	nop
 800a55c:	0800b42f 	.word	0x0800b42f
 800a560:	0800b440 	.word	0x0800b440

0800a564 <__pow5mult>:
 800a564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a568:	4615      	mov	r5, r2
 800a56a:	f012 0203 	ands.w	r2, r2, #3
 800a56e:	4606      	mov	r6, r0
 800a570:	460f      	mov	r7, r1
 800a572:	d007      	beq.n	800a584 <__pow5mult+0x20>
 800a574:	4c25      	ldr	r4, [pc, #148]	; (800a60c <__pow5mult+0xa8>)
 800a576:	3a01      	subs	r2, #1
 800a578:	2300      	movs	r3, #0
 800a57a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a57e:	f7ff fe9b 	bl	800a2b8 <__multadd>
 800a582:	4607      	mov	r7, r0
 800a584:	10ad      	asrs	r5, r5, #2
 800a586:	d03d      	beq.n	800a604 <__pow5mult+0xa0>
 800a588:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a58a:	b97c      	cbnz	r4, 800a5ac <__pow5mult+0x48>
 800a58c:	2010      	movs	r0, #16
 800a58e:	f7ff fe1d 	bl	800a1cc <malloc>
 800a592:	4602      	mov	r2, r0
 800a594:	6270      	str	r0, [r6, #36]	; 0x24
 800a596:	b928      	cbnz	r0, 800a5a4 <__pow5mult+0x40>
 800a598:	4b1d      	ldr	r3, [pc, #116]	; (800a610 <__pow5mult+0xac>)
 800a59a:	481e      	ldr	r0, [pc, #120]	; (800a614 <__pow5mult+0xb0>)
 800a59c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a5a0:	f7fe fe1c 	bl	80091dc <__assert_func>
 800a5a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a5a8:	6004      	str	r4, [r0, #0]
 800a5aa:	60c4      	str	r4, [r0, #12]
 800a5ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a5b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a5b4:	b94c      	cbnz	r4, 800a5ca <__pow5mult+0x66>
 800a5b6:	f240 2171 	movw	r1, #625	; 0x271
 800a5ba:	4630      	mov	r0, r6
 800a5bc:	f7ff ff12 	bl	800a3e4 <__i2b>
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a5c6:	4604      	mov	r4, r0
 800a5c8:	6003      	str	r3, [r0, #0]
 800a5ca:	f04f 0900 	mov.w	r9, #0
 800a5ce:	07eb      	lsls	r3, r5, #31
 800a5d0:	d50a      	bpl.n	800a5e8 <__pow5mult+0x84>
 800a5d2:	4639      	mov	r1, r7
 800a5d4:	4622      	mov	r2, r4
 800a5d6:	4630      	mov	r0, r6
 800a5d8:	f7ff ff1a 	bl	800a410 <__multiply>
 800a5dc:	4639      	mov	r1, r7
 800a5de:	4680      	mov	r8, r0
 800a5e0:	4630      	mov	r0, r6
 800a5e2:	f7ff fe47 	bl	800a274 <_Bfree>
 800a5e6:	4647      	mov	r7, r8
 800a5e8:	106d      	asrs	r5, r5, #1
 800a5ea:	d00b      	beq.n	800a604 <__pow5mult+0xa0>
 800a5ec:	6820      	ldr	r0, [r4, #0]
 800a5ee:	b938      	cbnz	r0, 800a600 <__pow5mult+0x9c>
 800a5f0:	4622      	mov	r2, r4
 800a5f2:	4621      	mov	r1, r4
 800a5f4:	4630      	mov	r0, r6
 800a5f6:	f7ff ff0b 	bl	800a410 <__multiply>
 800a5fa:	6020      	str	r0, [r4, #0]
 800a5fc:	f8c0 9000 	str.w	r9, [r0]
 800a600:	4604      	mov	r4, r0
 800a602:	e7e4      	b.n	800a5ce <__pow5mult+0x6a>
 800a604:	4638      	mov	r0, r7
 800a606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a60a:	bf00      	nop
 800a60c:	0800b590 	.word	0x0800b590
 800a610:	0800b3bd 	.word	0x0800b3bd
 800a614:	0800b440 	.word	0x0800b440

0800a618 <__lshift>:
 800a618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a61c:	460c      	mov	r4, r1
 800a61e:	6849      	ldr	r1, [r1, #4]
 800a620:	6923      	ldr	r3, [r4, #16]
 800a622:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a626:	68a3      	ldr	r3, [r4, #8]
 800a628:	4607      	mov	r7, r0
 800a62a:	4691      	mov	r9, r2
 800a62c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a630:	f108 0601 	add.w	r6, r8, #1
 800a634:	42b3      	cmp	r3, r6
 800a636:	db0b      	blt.n	800a650 <__lshift+0x38>
 800a638:	4638      	mov	r0, r7
 800a63a:	f7ff fddb 	bl	800a1f4 <_Balloc>
 800a63e:	4605      	mov	r5, r0
 800a640:	b948      	cbnz	r0, 800a656 <__lshift+0x3e>
 800a642:	4602      	mov	r2, r0
 800a644:	4b2a      	ldr	r3, [pc, #168]	; (800a6f0 <__lshift+0xd8>)
 800a646:	482b      	ldr	r0, [pc, #172]	; (800a6f4 <__lshift+0xdc>)
 800a648:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a64c:	f7fe fdc6 	bl	80091dc <__assert_func>
 800a650:	3101      	adds	r1, #1
 800a652:	005b      	lsls	r3, r3, #1
 800a654:	e7ee      	b.n	800a634 <__lshift+0x1c>
 800a656:	2300      	movs	r3, #0
 800a658:	f100 0114 	add.w	r1, r0, #20
 800a65c:	f100 0210 	add.w	r2, r0, #16
 800a660:	4618      	mov	r0, r3
 800a662:	4553      	cmp	r3, sl
 800a664:	db37      	blt.n	800a6d6 <__lshift+0xbe>
 800a666:	6920      	ldr	r0, [r4, #16]
 800a668:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a66c:	f104 0314 	add.w	r3, r4, #20
 800a670:	f019 091f 	ands.w	r9, r9, #31
 800a674:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a678:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a67c:	d02f      	beq.n	800a6de <__lshift+0xc6>
 800a67e:	f1c9 0e20 	rsb	lr, r9, #32
 800a682:	468a      	mov	sl, r1
 800a684:	f04f 0c00 	mov.w	ip, #0
 800a688:	681a      	ldr	r2, [r3, #0]
 800a68a:	fa02 f209 	lsl.w	r2, r2, r9
 800a68e:	ea42 020c 	orr.w	r2, r2, ip
 800a692:	f84a 2b04 	str.w	r2, [sl], #4
 800a696:	f853 2b04 	ldr.w	r2, [r3], #4
 800a69a:	4298      	cmp	r0, r3
 800a69c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a6a0:	d8f2      	bhi.n	800a688 <__lshift+0x70>
 800a6a2:	1b03      	subs	r3, r0, r4
 800a6a4:	3b15      	subs	r3, #21
 800a6a6:	f023 0303 	bic.w	r3, r3, #3
 800a6aa:	3304      	adds	r3, #4
 800a6ac:	f104 0215 	add.w	r2, r4, #21
 800a6b0:	4290      	cmp	r0, r2
 800a6b2:	bf38      	it	cc
 800a6b4:	2304      	movcc	r3, #4
 800a6b6:	f841 c003 	str.w	ip, [r1, r3]
 800a6ba:	f1bc 0f00 	cmp.w	ip, #0
 800a6be:	d001      	beq.n	800a6c4 <__lshift+0xac>
 800a6c0:	f108 0602 	add.w	r6, r8, #2
 800a6c4:	3e01      	subs	r6, #1
 800a6c6:	4638      	mov	r0, r7
 800a6c8:	612e      	str	r6, [r5, #16]
 800a6ca:	4621      	mov	r1, r4
 800a6cc:	f7ff fdd2 	bl	800a274 <_Bfree>
 800a6d0:	4628      	mov	r0, r5
 800a6d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a6da:	3301      	adds	r3, #1
 800a6dc:	e7c1      	b.n	800a662 <__lshift+0x4a>
 800a6de:	3904      	subs	r1, #4
 800a6e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a6e8:	4298      	cmp	r0, r3
 800a6ea:	d8f9      	bhi.n	800a6e0 <__lshift+0xc8>
 800a6ec:	e7ea      	b.n	800a6c4 <__lshift+0xac>
 800a6ee:	bf00      	nop
 800a6f0:	0800b42f 	.word	0x0800b42f
 800a6f4:	0800b440 	.word	0x0800b440

0800a6f8 <__mcmp>:
 800a6f8:	b530      	push	{r4, r5, lr}
 800a6fa:	6902      	ldr	r2, [r0, #16]
 800a6fc:	690c      	ldr	r4, [r1, #16]
 800a6fe:	1b12      	subs	r2, r2, r4
 800a700:	d10e      	bne.n	800a720 <__mcmp+0x28>
 800a702:	f100 0314 	add.w	r3, r0, #20
 800a706:	3114      	adds	r1, #20
 800a708:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a70c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a710:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a714:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a718:	42a5      	cmp	r5, r4
 800a71a:	d003      	beq.n	800a724 <__mcmp+0x2c>
 800a71c:	d305      	bcc.n	800a72a <__mcmp+0x32>
 800a71e:	2201      	movs	r2, #1
 800a720:	4610      	mov	r0, r2
 800a722:	bd30      	pop	{r4, r5, pc}
 800a724:	4283      	cmp	r3, r0
 800a726:	d3f3      	bcc.n	800a710 <__mcmp+0x18>
 800a728:	e7fa      	b.n	800a720 <__mcmp+0x28>
 800a72a:	f04f 32ff 	mov.w	r2, #4294967295
 800a72e:	e7f7      	b.n	800a720 <__mcmp+0x28>

0800a730 <__mdiff>:
 800a730:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a734:	460c      	mov	r4, r1
 800a736:	4606      	mov	r6, r0
 800a738:	4611      	mov	r1, r2
 800a73a:	4620      	mov	r0, r4
 800a73c:	4690      	mov	r8, r2
 800a73e:	f7ff ffdb 	bl	800a6f8 <__mcmp>
 800a742:	1e05      	subs	r5, r0, #0
 800a744:	d110      	bne.n	800a768 <__mdiff+0x38>
 800a746:	4629      	mov	r1, r5
 800a748:	4630      	mov	r0, r6
 800a74a:	f7ff fd53 	bl	800a1f4 <_Balloc>
 800a74e:	b930      	cbnz	r0, 800a75e <__mdiff+0x2e>
 800a750:	4b3a      	ldr	r3, [pc, #232]	; (800a83c <__mdiff+0x10c>)
 800a752:	4602      	mov	r2, r0
 800a754:	f240 2132 	movw	r1, #562	; 0x232
 800a758:	4839      	ldr	r0, [pc, #228]	; (800a840 <__mdiff+0x110>)
 800a75a:	f7fe fd3f 	bl	80091dc <__assert_func>
 800a75e:	2301      	movs	r3, #1
 800a760:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a764:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a768:	bfa4      	itt	ge
 800a76a:	4643      	movge	r3, r8
 800a76c:	46a0      	movge	r8, r4
 800a76e:	4630      	mov	r0, r6
 800a770:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a774:	bfa6      	itte	ge
 800a776:	461c      	movge	r4, r3
 800a778:	2500      	movge	r5, #0
 800a77a:	2501      	movlt	r5, #1
 800a77c:	f7ff fd3a 	bl	800a1f4 <_Balloc>
 800a780:	b920      	cbnz	r0, 800a78c <__mdiff+0x5c>
 800a782:	4b2e      	ldr	r3, [pc, #184]	; (800a83c <__mdiff+0x10c>)
 800a784:	4602      	mov	r2, r0
 800a786:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a78a:	e7e5      	b.n	800a758 <__mdiff+0x28>
 800a78c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a790:	6926      	ldr	r6, [r4, #16]
 800a792:	60c5      	str	r5, [r0, #12]
 800a794:	f104 0914 	add.w	r9, r4, #20
 800a798:	f108 0514 	add.w	r5, r8, #20
 800a79c:	f100 0e14 	add.w	lr, r0, #20
 800a7a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a7a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a7a8:	f108 0210 	add.w	r2, r8, #16
 800a7ac:	46f2      	mov	sl, lr
 800a7ae:	2100      	movs	r1, #0
 800a7b0:	f859 3b04 	ldr.w	r3, [r9], #4
 800a7b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a7b8:	fa1f f883 	uxth.w	r8, r3
 800a7bc:	fa11 f18b 	uxtah	r1, r1, fp
 800a7c0:	0c1b      	lsrs	r3, r3, #16
 800a7c2:	eba1 0808 	sub.w	r8, r1, r8
 800a7c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a7ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a7ce:	fa1f f888 	uxth.w	r8, r8
 800a7d2:	1419      	asrs	r1, r3, #16
 800a7d4:	454e      	cmp	r6, r9
 800a7d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a7da:	f84a 3b04 	str.w	r3, [sl], #4
 800a7de:	d8e7      	bhi.n	800a7b0 <__mdiff+0x80>
 800a7e0:	1b33      	subs	r3, r6, r4
 800a7e2:	3b15      	subs	r3, #21
 800a7e4:	f023 0303 	bic.w	r3, r3, #3
 800a7e8:	3304      	adds	r3, #4
 800a7ea:	3415      	adds	r4, #21
 800a7ec:	42a6      	cmp	r6, r4
 800a7ee:	bf38      	it	cc
 800a7f0:	2304      	movcc	r3, #4
 800a7f2:	441d      	add	r5, r3
 800a7f4:	4473      	add	r3, lr
 800a7f6:	469e      	mov	lr, r3
 800a7f8:	462e      	mov	r6, r5
 800a7fa:	4566      	cmp	r6, ip
 800a7fc:	d30e      	bcc.n	800a81c <__mdiff+0xec>
 800a7fe:	f10c 0203 	add.w	r2, ip, #3
 800a802:	1b52      	subs	r2, r2, r5
 800a804:	f022 0203 	bic.w	r2, r2, #3
 800a808:	3d03      	subs	r5, #3
 800a80a:	45ac      	cmp	ip, r5
 800a80c:	bf38      	it	cc
 800a80e:	2200      	movcc	r2, #0
 800a810:	441a      	add	r2, r3
 800a812:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a816:	b17b      	cbz	r3, 800a838 <__mdiff+0x108>
 800a818:	6107      	str	r7, [r0, #16]
 800a81a:	e7a3      	b.n	800a764 <__mdiff+0x34>
 800a81c:	f856 8b04 	ldr.w	r8, [r6], #4
 800a820:	fa11 f288 	uxtah	r2, r1, r8
 800a824:	1414      	asrs	r4, r2, #16
 800a826:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a82a:	b292      	uxth	r2, r2
 800a82c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a830:	f84e 2b04 	str.w	r2, [lr], #4
 800a834:	1421      	asrs	r1, r4, #16
 800a836:	e7e0      	b.n	800a7fa <__mdiff+0xca>
 800a838:	3f01      	subs	r7, #1
 800a83a:	e7ea      	b.n	800a812 <__mdiff+0xe2>
 800a83c:	0800b42f 	.word	0x0800b42f
 800a840:	0800b440 	.word	0x0800b440

0800a844 <__d2b>:
 800a844:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a848:	4689      	mov	r9, r1
 800a84a:	2101      	movs	r1, #1
 800a84c:	ec57 6b10 	vmov	r6, r7, d0
 800a850:	4690      	mov	r8, r2
 800a852:	f7ff fccf 	bl	800a1f4 <_Balloc>
 800a856:	4604      	mov	r4, r0
 800a858:	b930      	cbnz	r0, 800a868 <__d2b+0x24>
 800a85a:	4602      	mov	r2, r0
 800a85c:	4b25      	ldr	r3, [pc, #148]	; (800a8f4 <__d2b+0xb0>)
 800a85e:	4826      	ldr	r0, [pc, #152]	; (800a8f8 <__d2b+0xb4>)
 800a860:	f240 310a 	movw	r1, #778	; 0x30a
 800a864:	f7fe fcba 	bl	80091dc <__assert_func>
 800a868:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a86c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a870:	bb35      	cbnz	r5, 800a8c0 <__d2b+0x7c>
 800a872:	2e00      	cmp	r6, #0
 800a874:	9301      	str	r3, [sp, #4]
 800a876:	d028      	beq.n	800a8ca <__d2b+0x86>
 800a878:	4668      	mov	r0, sp
 800a87a:	9600      	str	r6, [sp, #0]
 800a87c:	f7ff fd82 	bl	800a384 <__lo0bits>
 800a880:	9900      	ldr	r1, [sp, #0]
 800a882:	b300      	cbz	r0, 800a8c6 <__d2b+0x82>
 800a884:	9a01      	ldr	r2, [sp, #4]
 800a886:	f1c0 0320 	rsb	r3, r0, #32
 800a88a:	fa02 f303 	lsl.w	r3, r2, r3
 800a88e:	430b      	orrs	r3, r1
 800a890:	40c2      	lsrs	r2, r0
 800a892:	6163      	str	r3, [r4, #20]
 800a894:	9201      	str	r2, [sp, #4]
 800a896:	9b01      	ldr	r3, [sp, #4]
 800a898:	61a3      	str	r3, [r4, #24]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	bf14      	ite	ne
 800a89e:	2202      	movne	r2, #2
 800a8a0:	2201      	moveq	r2, #1
 800a8a2:	6122      	str	r2, [r4, #16]
 800a8a4:	b1d5      	cbz	r5, 800a8dc <__d2b+0x98>
 800a8a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a8aa:	4405      	add	r5, r0
 800a8ac:	f8c9 5000 	str.w	r5, [r9]
 800a8b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a8b4:	f8c8 0000 	str.w	r0, [r8]
 800a8b8:	4620      	mov	r0, r4
 800a8ba:	b003      	add	sp, #12
 800a8bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a8c4:	e7d5      	b.n	800a872 <__d2b+0x2e>
 800a8c6:	6161      	str	r1, [r4, #20]
 800a8c8:	e7e5      	b.n	800a896 <__d2b+0x52>
 800a8ca:	a801      	add	r0, sp, #4
 800a8cc:	f7ff fd5a 	bl	800a384 <__lo0bits>
 800a8d0:	9b01      	ldr	r3, [sp, #4]
 800a8d2:	6163      	str	r3, [r4, #20]
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	6122      	str	r2, [r4, #16]
 800a8d8:	3020      	adds	r0, #32
 800a8da:	e7e3      	b.n	800a8a4 <__d2b+0x60>
 800a8dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a8e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a8e4:	f8c9 0000 	str.w	r0, [r9]
 800a8e8:	6918      	ldr	r0, [r3, #16]
 800a8ea:	f7ff fd2b 	bl	800a344 <__hi0bits>
 800a8ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a8f2:	e7df      	b.n	800a8b4 <__d2b+0x70>
 800a8f4:	0800b42f 	.word	0x0800b42f
 800a8f8:	0800b440 	.word	0x0800b440

0800a8fc <_calloc_r>:
 800a8fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8fe:	fba1 2402 	umull	r2, r4, r1, r2
 800a902:	b94c      	cbnz	r4, 800a918 <_calloc_r+0x1c>
 800a904:	4611      	mov	r1, r2
 800a906:	9201      	str	r2, [sp, #4]
 800a908:	f7fd fdda 	bl	80084c0 <_malloc_r>
 800a90c:	9a01      	ldr	r2, [sp, #4]
 800a90e:	4605      	mov	r5, r0
 800a910:	b930      	cbnz	r0, 800a920 <_calloc_r+0x24>
 800a912:	4628      	mov	r0, r5
 800a914:	b003      	add	sp, #12
 800a916:	bd30      	pop	{r4, r5, pc}
 800a918:	220c      	movs	r2, #12
 800a91a:	6002      	str	r2, [r0, #0]
 800a91c:	2500      	movs	r5, #0
 800a91e:	e7f8      	b.n	800a912 <_calloc_r+0x16>
 800a920:	4621      	mov	r1, r4
 800a922:	f7fd fda4 	bl	800846e <memset>
 800a926:	e7f4      	b.n	800a912 <_calloc_r+0x16>

0800a928 <_free_r>:
 800a928:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a92a:	2900      	cmp	r1, #0
 800a92c:	d044      	beq.n	800a9b8 <_free_r+0x90>
 800a92e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a932:	9001      	str	r0, [sp, #4]
 800a934:	2b00      	cmp	r3, #0
 800a936:	f1a1 0404 	sub.w	r4, r1, #4
 800a93a:	bfb8      	it	lt
 800a93c:	18e4      	addlt	r4, r4, r3
 800a93e:	f7ff fc4d 	bl	800a1dc <__malloc_lock>
 800a942:	4a1e      	ldr	r2, [pc, #120]	; (800a9bc <_free_r+0x94>)
 800a944:	9801      	ldr	r0, [sp, #4]
 800a946:	6813      	ldr	r3, [r2, #0]
 800a948:	b933      	cbnz	r3, 800a958 <_free_r+0x30>
 800a94a:	6063      	str	r3, [r4, #4]
 800a94c:	6014      	str	r4, [r2, #0]
 800a94e:	b003      	add	sp, #12
 800a950:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a954:	f7ff bc48 	b.w	800a1e8 <__malloc_unlock>
 800a958:	42a3      	cmp	r3, r4
 800a95a:	d908      	bls.n	800a96e <_free_r+0x46>
 800a95c:	6825      	ldr	r5, [r4, #0]
 800a95e:	1961      	adds	r1, r4, r5
 800a960:	428b      	cmp	r3, r1
 800a962:	bf01      	itttt	eq
 800a964:	6819      	ldreq	r1, [r3, #0]
 800a966:	685b      	ldreq	r3, [r3, #4]
 800a968:	1949      	addeq	r1, r1, r5
 800a96a:	6021      	streq	r1, [r4, #0]
 800a96c:	e7ed      	b.n	800a94a <_free_r+0x22>
 800a96e:	461a      	mov	r2, r3
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	b10b      	cbz	r3, 800a978 <_free_r+0x50>
 800a974:	42a3      	cmp	r3, r4
 800a976:	d9fa      	bls.n	800a96e <_free_r+0x46>
 800a978:	6811      	ldr	r1, [r2, #0]
 800a97a:	1855      	adds	r5, r2, r1
 800a97c:	42a5      	cmp	r5, r4
 800a97e:	d10b      	bne.n	800a998 <_free_r+0x70>
 800a980:	6824      	ldr	r4, [r4, #0]
 800a982:	4421      	add	r1, r4
 800a984:	1854      	adds	r4, r2, r1
 800a986:	42a3      	cmp	r3, r4
 800a988:	6011      	str	r1, [r2, #0]
 800a98a:	d1e0      	bne.n	800a94e <_free_r+0x26>
 800a98c:	681c      	ldr	r4, [r3, #0]
 800a98e:	685b      	ldr	r3, [r3, #4]
 800a990:	6053      	str	r3, [r2, #4]
 800a992:	4421      	add	r1, r4
 800a994:	6011      	str	r1, [r2, #0]
 800a996:	e7da      	b.n	800a94e <_free_r+0x26>
 800a998:	d902      	bls.n	800a9a0 <_free_r+0x78>
 800a99a:	230c      	movs	r3, #12
 800a99c:	6003      	str	r3, [r0, #0]
 800a99e:	e7d6      	b.n	800a94e <_free_r+0x26>
 800a9a0:	6825      	ldr	r5, [r4, #0]
 800a9a2:	1961      	adds	r1, r4, r5
 800a9a4:	428b      	cmp	r3, r1
 800a9a6:	bf04      	itt	eq
 800a9a8:	6819      	ldreq	r1, [r3, #0]
 800a9aa:	685b      	ldreq	r3, [r3, #4]
 800a9ac:	6063      	str	r3, [r4, #4]
 800a9ae:	bf04      	itt	eq
 800a9b0:	1949      	addeq	r1, r1, r5
 800a9b2:	6021      	streq	r1, [r4, #0]
 800a9b4:	6054      	str	r4, [r2, #4]
 800a9b6:	e7ca      	b.n	800a94e <_free_r+0x26>
 800a9b8:	b003      	add	sp, #12
 800a9ba:	bd30      	pop	{r4, r5, pc}
 800a9bc:	20001c08 	.word	0x20001c08

0800a9c0 <__ssputs_r>:
 800a9c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9c4:	688e      	ldr	r6, [r1, #8]
 800a9c6:	429e      	cmp	r6, r3
 800a9c8:	4682      	mov	sl, r0
 800a9ca:	460c      	mov	r4, r1
 800a9cc:	4690      	mov	r8, r2
 800a9ce:	461f      	mov	r7, r3
 800a9d0:	d838      	bhi.n	800aa44 <__ssputs_r+0x84>
 800a9d2:	898a      	ldrh	r2, [r1, #12]
 800a9d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a9d8:	d032      	beq.n	800aa40 <__ssputs_r+0x80>
 800a9da:	6825      	ldr	r5, [r4, #0]
 800a9dc:	6909      	ldr	r1, [r1, #16]
 800a9de:	eba5 0901 	sub.w	r9, r5, r1
 800a9e2:	6965      	ldr	r5, [r4, #20]
 800a9e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a9e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a9ec:	3301      	adds	r3, #1
 800a9ee:	444b      	add	r3, r9
 800a9f0:	106d      	asrs	r5, r5, #1
 800a9f2:	429d      	cmp	r5, r3
 800a9f4:	bf38      	it	cc
 800a9f6:	461d      	movcc	r5, r3
 800a9f8:	0553      	lsls	r3, r2, #21
 800a9fa:	d531      	bpl.n	800aa60 <__ssputs_r+0xa0>
 800a9fc:	4629      	mov	r1, r5
 800a9fe:	f7fd fd5f 	bl	80084c0 <_malloc_r>
 800aa02:	4606      	mov	r6, r0
 800aa04:	b950      	cbnz	r0, 800aa1c <__ssputs_r+0x5c>
 800aa06:	230c      	movs	r3, #12
 800aa08:	f8ca 3000 	str.w	r3, [sl]
 800aa0c:	89a3      	ldrh	r3, [r4, #12]
 800aa0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa12:	81a3      	strh	r3, [r4, #12]
 800aa14:	f04f 30ff 	mov.w	r0, #4294967295
 800aa18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa1c:	6921      	ldr	r1, [r4, #16]
 800aa1e:	464a      	mov	r2, r9
 800aa20:	f7fd fd17 	bl	8008452 <memcpy>
 800aa24:	89a3      	ldrh	r3, [r4, #12]
 800aa26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aa2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa2e:	81a3      	strh	r3, [r4, #12]
 800aa30:	6126      	str	r6, [r4, #16]
 800aa32:	6165      	str	r5, [r4, #20]
 800aa34:	444e      	add	r6, r9
 800aa36:	eba5 0509 	sub.w	r5, r5, r9
 800aa3a:	6026      	str	r6, [r4, #0]
 800aa3c:	60a5      	str	r5, [r4, #8]
 800aa3e:	463e      	mov	r6, r7
 800aa40:	42be      	cmp	r6, r7
 800aa42:	d900      	bls.n	800aa46 <__ssputs_r+0x86>
 800aa44:	463e      	mov	r6, r7
 800aa46:	6820      	ldr	r0, [r4, #0]
 800aa48:	4632      	mov	r2, r6
 800aa4a:	4641      	mov	r1, r8
 800aa4c:	f000 fabc 	bl	800afc8 <memmove>
 800aa50:	68a3      	ldr	r3, [r4, #8]
 800aa52:	1b9b      	subs	r3, r3, r6
 800aa54:	60a3      	str	r3, [r4, #8]
 800aa56:	6823      	ldr	r3, [r4, #0]
 800aa58:	4433      	add	r3, r6
 800aa5a:	6023      	str	r3, [r4, #0]
 800aa5c:	2000      	movs	r0, #0
 800aa5e:	e7db      	b.n	800aa18 <__ssputs_r+0x58>
 800aa60:	462a      	mov	r2, r5
 800aa62:	f000 facb 	bl	800affc <_realloc_r>
 800aa66:	4606      	mov	r6, r0
 800aa68:	2800      	cmp	r0, #0
 800aa6a:	d1e1      	bne.n	800aa30 <__ssputs_r+0x70>
 800aa6c:	6921      	ldr	r1, [r4, #16]
 800aa6e:	4650      	mov	r0, sl
 800aa70:	f7ff ff5a 	bl	800a928 <_free_r>
 800aa74:	e7c7      	b.n	800aa06 <__ssputs_r+0x46>
	...

0800aa78 <_svfiprintf_r>:
 800aa78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa7c:	4698      	mov	r8, r3
 800aa7e:	898b      	ldrh	r3, [r1, #12]
 800aa80:	061b      	lsls	r3, r3, #24
 800aa82:	b09d      	sub	sp, #116	; 0x74
 800aa84:	4607      	mov	r7, r0
 800aa86:	460d      	mov	r5, r1
 800aa88:	4614      	mov	r4, r2
 800aa8a:	d50e      	bpl.n	800aaaa <_svfiprintf_r+0x32>
 800aa8c:	690b      	ldr	r3, [r1, #16]
 800aa8e:	b963      	cbnz	r3, 800aaaa <_svfiprintf_r+0x32>
 800aa90:	2140      	movs	r1, #64	; 0x40
 800aa92:	f7fd fd15 	bl	80084c0 <_malloc_r>
 800aa96:	6028      	str	r0, [r5, #0]
 800aa98:	6128      	str	r0, [r5, #16]
 800aa9a:	b920      	cbnz	r0, 800aaa6 <_svfiprintf_r+0x2e>
 800aa9c:	230c      	movs	r3, #12
 800aa9e:	603b      	str	r3, [r7, #0]
 800aaa0:	f04f 30ff 	mov.w	r0, #4294967295
 800aaa4:	e0d1      	b.n	800ac4a <_svfiprintf_r+0x1d2>
 800aaa6:	2340      	movs	r3, #64	; 0x40
 800aaa8:	616b      	str	r3, [r5, #20]
 800aaaa:	2300      	movs	r3, #0
 800aaac:	9309      	str	r3, [sp, #36]	; 0x24
 800aaae:	2320      	movs	r3, #32
 800aab0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aab4:	f8cd 800c 	str.w	r8, [sp, #12]
 800aab8:	2330      	movs	r3, #48	; 0x30
 800aaba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ac64 <_svfiprintf_r+0x1ec>
 800aabe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aac2:	f04f 0901 	mov.w	r9, #1
 800aac6:	4623      	mov	r3, r4
 800aac8:	469a      	mov	sl, r3
 800aaca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aace:	b10a      	cbz	r2, 800aad4 <_svfiprintf_r+0x5c>
 800aad0:	2a25      	cmp	r2, #37	; 0x25
 800aad2:	d1f9      	bne.n	800aac8 <_svfiprintf_r+0x50>
 800aad4:	ebba 0b04 	subs.w	fp, sl, r4
 800aad8:	d00b      	beq.n	800aaf2 <_svfiprintf_r+0x7a>
 800aada:	465b      	mov	r3, fp
 800aadc:	4622      	mov	r2, r4
 800aade:	4629      	mov	r1, r5
 800aae0:	4638      	mov	r0, r7
 800aae2:	f7ff ff6d 	bl	800a9c0 <__ssputs_r>
 800aae6:	3001      	adds	r0, #1
 800aae8:	f000 80aa 	beq.w	800ac40 <_svfiprintf_r+0x1c8>
 800aaec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aaee:	445a      	add	r2, fp
 800aaf0:	9209      	str	r2, [sp, #36]	; 0x24
 800aaf2:	f89a 3000 	ldrb.w	r3, [sl]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	f000 80a2 	beq.w	800ac40 <_svfiprintf_r+0x1c8>
 800aafc:	2300      	movs	r3, #0
 800aafe:	f04f 32ff 	mov.w	r2, #4294967295
 800ab02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab06:	f10a 0a01 	add.w	sl, sl, #1
 800ab0a:	9304      	str	r3, [sp, #16]
 800ab0c:	9307      	str	r3, [sp, #28]
 800ab0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab12:	931a      	str	r3, [sp, #104]	; 0x68
 800ab14:	4654      	mov	r4, sl
 800ab16:	2205      	movs	r2, #5
 800ab18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab1c:	4851      	ldr	r0, [pc, #324]	; (800ac64 <_svfiprintf_r+0x1ec>)
 800ab1e:	f7f5 fb5f 	bl	80001e0 <memchr>
 800ab22:	9a04      	ldr	r2, [sp, #16]
 800ab24:	b9d8      	cbnz	r0, 800ab5e <_svfiprintf_r+0xe6>
 800ab26:	06d0      	lsls	r0, r2, #27
 800ab28:	bf44      	itt	mi
 800ab2a:	2320      	movmi	r3, #32
 800ab2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab30:	0711      	lsls	r1, r2, #28
 800ab32:	bf44      	itt	mi
 800ab34:	232b      	movmi	r3, #43	; 0x2b
 800ab36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab3a:	f89a 3000 	ldrb.w	r3, [sl]
 800ab3e:	2b2a      	cmp	r3, #42	; 0x2a
 800ab40:	d015      	beq.n	800ab6e <_svfiprintf_r+0xf6>
 800ab42:	9a07      	ldr	r2, [sp, #28]
 800ab44:	4654      	mov	r4, sl
 800ab46:	2000      	movs	r0, #0
 800ab48:	f04f 0c0a 	mov.w	ip, #10
 800ab4c:	4621      	mov	r1, r4
 800ab4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab52:	3b30      	subs	r3, #48	; 0x30
 800ab54:	2b09      	cmp	r3, #9
 800ab56:	d94e      	bls.n	800abf6 <_svfiprintf_r+0x17e>
 800ab58:	b1b0      	cbz	r0, 800ab88 <_svfiprintf_r+0x110>
 800ab5a:	9207      	str	r2, [sp, #28]
 800ab5c:	e014      	b.n	800ab88 <_svfiprintf_r+0x110>
 800ab5e:	eba0 0308 	sub.w	r3, r0, r8
 800ab62:	fa09 f303 	lsl.w	r3, r9, r3
 800ab66:	4313      	orrs	r3, r2
 800ab68:	9304      	str	r3, [sp, #16]
 800ab6a:	46a2      	mov	sl, r4
 800ab6c:	e7d2      	b.n	800ab14 <_svfiprintf_r+0x9c>
 800ab6e:	9b03      	ldr	r3, [sp, #12]
 800ab70:	1d19      	adds	r1, r3, #4
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	9103      	str	r1, [sp, #12]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	bfbb      	ittet	lt
 800ab7a:	425b      	neglt	r3, r3
 800ab7c:	f042 0202 	orrlt.w	r2, r2, #2
 800ab80:	9307      	strge	r3, [sp, #28]
 800ab82:	9307      	strlt	r3, [sp, #28]
 800ab84:	bfb8      	it	lt
 800ab86:	9204      	strlt	r2, [sp, #16]
 800ab88:	7823      	ldrb	r3, [r4, #0]
 800ab8a:	2b2e      	cmp	r3, #46	; 0x2e
 800ab8c:	d10c      	bne.n	800aba8 <_svfiprintf_r+0x130>
 800ab8e:	7863      	ldrb	r3, [r4, #1]
 800ab90:	2b2a      	cmp	r3, #42	; 0x2a
 800ab92:	d135      	bne.n	800ac00 <_svfiprintf_r+0x188>
 800ab94:	9b03      	ldr	r3, [sp, #12]
 800ab96:	1d1a      	adds	r2, r3, #4
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	9203      	str	r2, [sp, #12]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	bfb8      	it	lt
 800aba0:	f04f 33ff 	movlt.w	r3, #4294967295
 800aba4:	3402      	adds	r4, #2
 800aba6:	9305      	str	r3, [sp, #20]
 800aba8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ac74 <_svfiprintf_r+0x1fc>
 800abac:	7821      	ldrb	r1, [r4, #0]
 800abae:	2203      	movs	r2, #3
 800abb0:	4650      	mov	r0, sl
 800abb2:	f7f5 fb15 	bl	80001e0 <memchr>
 800abb6:	b140      	cbz	r0, 800abca <_svfiprintf_r+0x152>
 800abb8:	2340      	movs	r3, #64	; 0x40
 800abba:	eba0 000a 	sub.w	r0, r0, sl
 800abbe:	fa03 f000 	lsl.w	r0, r3, r0
 800abc2:	9b04      	ldr	r3, [sp, #16]
 800abc4:	4303      	orrs	r3, r0
 800abc6:	3401      	adds	r4, #1
 800abc8:	9304      	str	r3, [sp, #16]
 800abca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abce:	4826      	ldr	r0, [pc, #152]	; (800ac68 <_svfiprintf_r+0x1f0>)
 800abd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800abd4:	2206      	movs	r2, #6
 800abd6:	f7f5 fb03 	bl	80001e0 <memchr>
 800abda:	2800      	cmp	r0, #0
 800abdc:	d038      	beq.n	800ac50 <_svfiprintf_r+0x1d8>
 800abde:	4b23      	ldr	r3, [pc, #140]	; (800ac6c <_svfiprintf_r+0x1f4>)
 800abe0:	bb1b      	cbnz	r3, 800ac2a <_svfiprintf_r+0x1b2>
 800abe2:	9b03      	ldr	r3, [sp, #12]
 800abe4:	3307      	adds	r3, #7
 800abe6:	f023 0307 	bic.w	r3, r3, #7
 800abea:	3308      	adds	r3, #8
 800abec:	9303      	str	r3, [sp, #12]
 800abee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abf0:	4433      	add	r3, r6
 800abf2:	9309      	str	r3, [sp, #36]	; 0x24
 800abf4:	e767      	b.n	800aac6 <_svfiprintf_r+0x4e>
 800abf6:	fb0c 3202 	mla	r2, ip, r2, r3
 800abfa:	460c      	mov	r4, r1
 800abfc:	2001      	movs	r0, #1
 800abfe:	e7a5      	b.n	800ab4c <_svfiprintf_r+0xd4>
 800ac00:	2300      	movs	r3, #0
 800ac02:	3401      	adds	r4, #1
 800ac04:	9305      	str	r3, [sp, #20]
 800ac06:	4619      	mov	r1, r3
 800ac08:	f04f 0c0a 	mov.w	ip, #10
 800ac0c:	4620      	mov	r0, r4
 800ac0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac12:	3a30      	subs	r2, #48	; 0x30
 800ac14:	2a09      	cmp	r2, #9
 800ac16:	d903      	bls.n	800ac20 <_svfiprintf_r+0x1a8>
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d0c5      	beq.n	800aba8 <_svfiprintf_r+0x130>
 800ac1c:	9105      	str	r1, [sp, #20]
 800ac1e:	e7c3      	b.n	800aba8 <_svfiprintf_r+0x130>
 800ac20:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac24:	4604      	mov	r4, r0
 800ac26:	2301      	movs	r3, #1
 800ac28:	e7f0      	b.n	800ac0c <_svfiprintf_r+0x194>
 800ac2a:	ab03      	add	r3, sp, #12
 800ac2c:	9300      	str	r3, [sp, #0]
 800ac2e:	462a      	mov	r2, r5
 800ac30:	4b0f      	ldr	r3, [pc, #60]	; (800ac70 <_svfiprintf_r+0x1f8>)
 800ac32:	a904      	add	r1, sp, #16
 800ac34:	4638      	mov	r0, r7
 800ac36:	f7fd fd57 	bl	80086e8 <_printf_float>
 800ac3a:	1c42      	adds	r2, r0, #1
 800ac3c:	4606      	mov	r6, r0
 800ac3e:	d1d6      	bne.n	800abee <_svfiprintf_r+0x176>
 800ac40:	89ab      	ldrh	r3, [r5, #12]
 800ac42:	065b      	lsls	r3, r3, #25
 800ac44:	f53f af2c 	bmi.w	800aaa0 <_svfiprintf_r+0x28>
 800ac48:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac4a:	b01d      	add	sp, #116	; 0x74
 800ac4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac50:	ab03      	add	r3, sp, #12
 800ac52:	9300      	str	r3, [sp, #0]
 800ac54:	462a      	mov	r2, r5
 800ac56:	4b06      	ldr	r3, [pc, #24]	; (800ac70 <_svfiprintf_r+0x1f8>)
 800ac58:	a904      	add	r1, sp, #16
 800ac5a:	4638      	mov	r0, r7
 800ac5c:	f7fd ffe8 	bl	8008c30 <_printf_i>
 800ac60:	e7eb      	b.n	800ac3a <_svfiprintf_r+0x1c2>
 800ac62:	bf00      	nop
 800ac64:	0800b59c 	.word	0x0800b59c
 800ac68:	0800b5a6 	.word	0x0800b5a6
 800ac6c:	080086e9 	.word	0x080086e9
 800ac70:	0800a9c1 	.word	0x0800a9c1
 800ac74:	0800b5a2 	.word	0x0800b5a2

0800ac78 <__sfputc_r>:
 800ac78:	6893      	ldr	r3, [r2, #8]
 800ac7a:	3b01      	subs	r3, #1
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	b410      	push	{r4}
 800ac80:	6093      	str	r3, [r2, #8]
 800ac82:	da08      	bge.n	800ac96 <__sfputc_r+0x1e>
 800ac84:	6994      	ldr	r4, [r2, #24]
 800ac86:	42a3      	cmp	r3, r4
 800ac88:	db01      	blt.n	800ac8e <__sfputc_r+0x16>
 800ac8a:	290a      	cmp	r1, #10
 800ac8c:	d103      	bne.n	800ac96 <__sfputc_r+0x1e>
 800ac8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac92:	f7fe b9d1 	b.w	8009038 <__swbuf_r>
 800ac96:	6813      	ldr	r3, [r2, #0]
 800ac98:	1c58      	adds	r0, r3, #1
 800ac9a:	6010      	str	r0, [r2, #0]
 800ac9c:	7019      	strb	r1, [r3, #0]
 800ac9e:	4608      	mov	r0, r1
 800aca0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aca4:	4770      	bx	lr

0800aca6 <__sfputs_r>:
 800aca6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aca8:	4606      	mov	r6, r0
 800acaa:	460f      	mov	r7, r1
 800acac:	4614      	mov	r4, r2
 800acae:	18d5      	adds	r5, r2, r3
 800acb0:	42ac      	cmp	r4, r5
 800acb2:	d101      	bne.n	800acb8 <__sfputs_r+0x12>
 800acb4:	2000      	movs	r0, #0
 800acb6:	e007      	b.n	800acc8 <__sfputs_r+0x22>
 800acb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acbc:	463a      	mov	r2, r7
 800acbe:	4630      	mov	r0, r6
 800acc0:	f7ff ffda 	bl	800ac78 <__sfputc_r>
 800acc4:	1c43      	adds	r3, r0, #1
 800acc6:	d1f3      	bne.n	800acb0 <__sfputs_r+0xa>
 800acc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800accc <_vfiprintf_r>:
 800accc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acd0:	460d      	mov	r5, r1
 800acd2:	b09d      	sub	sp, #116	; 0x74
 800acd4:	4614      	mov	r4, r2
 800acd6:	4698      	mov	r8, r3
 800acd8:	4606      	mov	r6, r0
 800acda:	b118      	cbz	r0, 800ace4 <_vfiprintf_r+0x18>
 800acdc:	6983      	ldr	r3, [r0, #24]
 800acde:	b90b      	cbnz	r3, 800ace4 <_vfiprintf_r+0x18>
 800ace0:	f7fd faf2 	bl	80082c8 <__sinit>
 800ace4:	4b89      	ldr	r3, [pc, #548]	; (800af0c <_vfiprintf_r+0x240>)
 800ace6:	429d      	cmp	r5, r3
 800ace8:	d11b      	bne.n	800ad22 <_vfiprintf_r+0x56>
 800acea:	6875      	ldr	r5, [r6, #4]
 800acec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acee:	07d9      	lsls	r1, r3, #31
 800acf0:	d405      	bmi.n	800acfe <_vfiprintf_r+0x32>
 800acf2:	89ab      	ldrh	r3, [r5, #12]
 800acf4:	059a      	lsls	r2, r3, #22
 800acf6:	d402      	bmi.n	800acfe <_vfiprintf_r+0x32>
 800acf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acfa:	f7fd fba8 	bl	800844e <__retarget_lock_acquire_recursive>
 800acfe:	89ab      	ldrh	r3, [r5, #12]
 800ad00:	071b      	lsls	r3, r3, #28
 800ad02:	d501      	bpl.n	800ad08 <_vfiprintf_r+0x3c>
 800ad04:	692b      	ldr	r3, [r5, #16]
 800ad06:	b9eb      	cbnz	r3, 800ad44 <_vfiprintf_r+0x78>
 800ad08:	4629      	mov	r1, r5
 800ad0a:	4630      	mov	r0, r6
 800ad0c:	f7fe f9f8 	bl	8009100 <__swsetup_r>
 800ad10:	b1c0      	cbz	r0, 800ad44 <_vfiprintf_r+0x78>
 800ad12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad14:	07dc      	lsls	r4, r3, #31
 800ad16:	d50e      	bpl.n	800ad36 <_vfiprintf_r+0x6a>
 800ad18:	f04f 30ff 	mov.w	r0, #4294967295
 800ad1c:	b01d      	add	sp, #116	; 0x74
 800ad1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad22:	4b7b      	ldr	r3, [pc, #492]	; (800af10 <_vfiprintf_r+0x244>)
 800ad24:	429d      	cmp	r5, r3
 800ad26:	d101      	bne.n	800ad2c <_vfiprintf_r+0x60>
 800ad28:	68b5      	ldr	r5, [r6, #8]
 800ad2a:	e7df      	b.n	800acec <_vfiprintf_r+0x20>
 800ad2c:	4b79      	ldr	r3, [pc, #484]	; (800af14 <_vfiprintf_r+0x248>)
 800ad2e:	429d      	cmp	r5, r3
 800ad30:	bf08      	it	eq
 800ad32:	68f5      	ldreq	r5, [r6, #12]
 800ad34:	e7da      	b.n	800acec <_vfiprintf_r+0x20>
 800ad36:	89ab      	ldrh	r3, [r5, #12]
 800ad38:	0598      	lsls	r0, r3, #22
 800ad3a:	d4ed      	bmi.n	800ad18 <_vfiprintf_r+0x4c>
 800ad3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad3e:	f7fd fb87 	bl	8008450 <__retarget_lock_release_recursive>
 800ad42:	e7e9      	b.n	800ad18 <_vfiprintf_r+0x4c>
 800ad44:	2300      	movs	r3, #0
 800ad46:	9309      	str	r3, [sp, #36]	; 0x24
 800ad48:	2320      	movs	r3, #32
 800ad4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad4e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad52:	2330      	movs	r3, #48	; 0x30
 800ad54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800af18 <_vfiprintf_r+0x24c>
 800ad58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad5c:	f04f 0901 	mov.w	r9, #1
 800ad60:	4623      	mov	r3, r4
 800ad62:	469a      	mov	sl, r3
 800ad64:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad68:	b10a      	cbz	r2, 800ad6e <_vfiprintf_r+0xa2>
 800ad6a:	2a25      	cmp	r2, #37	; 0x25
 800ad6c:	d1f9      	bne.n	800ad62 <_vfiprintf_r+0x96>
 800ad6e:	ebba 0b04 	subs.w	fp, sl, r4
 800ad72:	d00b      	beq.n	800ad8c <_vfiprintf_r+0xc0>
 800ad74:	465b      	mov	r3, fp
 800ad76:	4622      	mov	r2, r4
 800ad78:	4629      	mov	r1, r5
 800ad7a:	4630      	mov	r0, r6
 800ad7c:	f7ff ff93 	bl	800aca6 <__sfputs_r>
 800ad80:	3001      	adds	r0, #1
 800ad82:	f000 80aa 	beq.w	800aeda <_vfiprintf_r+0x20e>
 800ad86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad88:	445a      	add	r2, fp
 800ad8a:	9209      	str	r2, [sp, #36]	; 0x24
 800ad8c:	f89a 3000 	ldrb.w	r3, [sl]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	f000 80a2 	beq.w	800aeda <_vfiprintf_r+0x20e>
 800ad96:	2300      	movs	r3, #0
 800ad98:	f04f 32ff 	mov.w	r2, #4294967295
 800ad9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ada0:	f10a 0a01 	add.w	sl, sl, #1
 800ada4:	9304      	str	r3, [sp, #16]
 800ada6:	9307      	str	r3, [sp, #28]
 800ada8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800adac:	931a      	str	r3, [sp, #104]	; 0x68
 800adae:	4654      	mov	r4, sl
 800adb0:	2205      	movs	r2, #5
 800adb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adb6:	4858      	ldr	r0, [pc, #352]	; (800af18 <_vfiprintf_r+0x24c>)
 800adb8:	f7f5 fa12 	bl	80001e0 <memchr>
 800adbc:	9a04      	ldr	r2, [sp, #16]
 800adbe:	b9d8      	cbnz	r0, 800adf8 <_vfiprintf_r+0x12c>
 800adc0:	06d1      	lsls	r1, r2, #27
 800adc2:	bf44      	itt	mi
 800adc4:	2320      	movmi	r3, #32
 800adc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adca:	0713      	lsls	r3, r2, #28
 800adcc:	bf44      	itt	mi
 800adce:	232b      	movmi	r3, #43	; 0x2b
 800add0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800add4:	f89a 3000 	ldrb.w	r3, [sl]
 800add8:	2b2a      	cmp	r3, #42	; 0x2a
 800adda:	d015      	beq.n	800ae08 <_vfiprintf_r+0x13c>
 800addc:	9a07      	ldr	r2, [sp, #28]
 800adde:	4654      	mov	r4, sl
 800ade0:	2000      	movs	r0, #0
 800ade2:	f04f 0c0a 	mov.w	ip, #10
 800ade6:	4621      	mov	r1, r4
 800ade8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adec:	3b30      	subs	r3, #48	; 0x30
 800adee:	2b09      	cmp	r3, #9
 800adf0:	d94e      	bls.n	800ae90 <_vfiprintf_r+0x1c4>
 800adf2:	b1b0      	cbz	r0, 800ae22 <_vfiprintf_r+0x156>
 800adf4:	9207      	str	r2, [sp, #28]
 800adf6:	e014      	b.n	800ae22 <_vfiprintf_r+0x156>
 800adf8:	eba0 0308 	sub.w	r3, r0, r8
 800adfc:	fa09 f303 	lsl.w	r3, r9, r3
 800ae00:	4313      	orrs	r3, r2
 800ae02:	9304      	str	r3, [sp, #16]
 800ae04:	46a2      	mov	sl, r4
 800ae06:	e7d2      	b.n	800adae <_vfiprintf_r+0xe2>
 800ae08:	9b03      	ldr	r3, [sp, #12]
 800ae0a:	1d19      	adds	r1, r3, #4
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	9103      	str	r1, [sp, #12]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	bfbb      	ittet	lt
 800ae14:	425b      	neglt	r3, r3
 800ae16:	f042 0202 	orrlt.w	r2, r2, #2
 800ae1a:	9307      	strge	r3, [sp, #28]
 800ae1c:	9307      	strlt	r3, [sp, #28]
 800ae1e:	bfb8      	it	lt
 800ae20:	9204      	strlt	r2, [sp, #16]
 800ae22:	7823      	ldrb	r3, [r4, #0]
 800ae24:	2b2e      	cmp	r3, #46	; 0x2e
 800ae26:	d10c      	bne.n	800ae42 <_vfiprintf_r+0x176>
 800ae28:	7863      	ldrb	r3, [r4, #1]
 800ae2a:	2b2a      	cmp	r3, #42	; 0x2a
 800ae2c:	d135      	bne.n	800ae9a <_vfiprintf_r+0x1ce>
 800ae2e:	9b03      	ldr	r3, [sp, #12]
 800ae30:	1d1a      	adds	r2, r3, #4
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	9203      	str	r2, [sp, #12]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	bfb8      	it	lt
 800ae3a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae3e:	3402      	adds	r4, #2
 800ae40:	9305      	str	r3, [sp, #20]
 800ae42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800af28 <_vfiprintf_r+0x25c>
 800ae46:	7821      	ldrb	r1, [r4, #0]
 800ae48:	2203      	movs	r2, #3
 800ae4a:	4650      	mov	r0, sl
 800ae4c:	f7f5 f9c8 	bl	80001e0 <memchr>
 800ae50:	b140      	cbz	r0, 800ae64 <_vfiprintf_r+0x198>
 800ae52:	2340      	movs	r3, #64	; 0x40
 800ae54:	eba0 000a 	sub.w	r0, r0, sl
 800ae58:	fa03 f000 	lsl.w	r0, r3, r0
 800ae5c:	9b04      	ldr	r3, [sp, #16]
 800ae5e:	4303      	orrs	r3, r0
 800ae60:	3401      	adds	r4, #1
 800ae62:	9304      	str	r3, [sp, #16]
 800ae64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae68:	482c      	ldr	r0, [pc, #176]	; (800af1c <_vfiprintf_r+0x250>)
 800ae6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae6e:	2206      	movs	r2, #6
 800ae70:	f7f5 f9b6 	bl	80001e0 <memchr>
 800ae74:	2800      	cmp	r0, #0
 800ae76:	d03f      	beq.n	800aef8 <_vfiprintf_r+0x22c>
 800ae78:	4b29      	ldr	r3, [pc, #164]	; (800af20 <_vfiprintf_r+0x254>)
 800ae7a:	bb1b      	cbnz	r3, 800aec4 <_vfiprintf_r+0x1f8>
 800ae7c:	9b03      	ldr	r3, [sp, #12]
 800ae7e:	3307      	adds	r3, #7
 800ae80:	f023 0307 	bic.w	r3, r3, #7
 800ae84:	3308      	adds	r3, #8
 800ae86:	9303      	str	r3, [sp, #12]
 800ae88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae8a:	443b      	add	r3, r7
 800ae8c:	9309      	str	r3, [sp, #36]	; 0x24
 800ae8e:	e767      	b.n	800ad60 <_vfiprintf_r+0x94>
 800ae90:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae94:	460c      	mov	r4, r1
 800ae96:	2001      	movs	r0, #1
 800ae98:	e7a5      	b.n	800ade6 <_vfiprintf_r+0x11a>
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	3401      	adds	r4, #1
 800ae9e:	9305      	str	r3, [sp, #20]
 800aea0:	4619      	mov	r1, r3
 800aea2:	f04f 0c0a 	mov.w	ip, #10
 800aea6:	4620      	mov	r0, r4
 800aea8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aeac:	3a30      	subs	r2, #48	; 0x30
 800aeae:	2a09      	cmp	r2, #9
 800aeb0:	d903      	bls.n	800aeba <_vfiprintf_r+0x1ee>
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d0c5      	beq.n	800ae42 <_vfiprintf_r+0x176>
 800aeb6:	9105      	str	r1, [sp, #20]
 800aeb8:	e7c3      	b.n	800ae42 <_vfiprintf_r+0x176>
 800aeba:	fb0c 2101 	mla	r1, ip, r1, r2
 800aebe:	4604      	mov	r4, r0
 800aec0:	2301      	movs	r3, #1
 800aec2:	e7f0      	b.n	800aea6 <_vfiprintf_r+0x1da>
 800aec4:	ab03      	add	r3, sp, #12
 800aec6:	9300      	str	r3, [sp, #0]
 800aec8:	462a      	mov	r2, r5
 800aeca:	4b16      	ldr	r3, [pc, #88]	; (800af24 <_vfiprintf_r+0x258>)
 800aecc:	a904      	add	r1, sp, #16
 800aece:	4630      	mov	r0, r6
 800aed0:	f7fd fc0a 	bl	80086e8 <_printf_float>
 800aed4:	4607      	mov	r7, r0
 800aed6:	1c78      	adds	r0, r7, #1
 800aed8:	d1d6      	bne.n	800ae88 <_vfiprintf_r+0x1bc>
 800aeda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aedc:	07d9      	lsls	r1, r3, #31
 800aede:	d405      	bmi.n	800aeec <_vfiprintf_r+0x220>
 800aee0:	89ab      	ldrh	r3, [r5, #12]
 800aee2:	059a      	lsls	r2, r3, #22
 800aee4:	d402      	bmi.n	800aeec <_vfiprintf_r+0x220>
 800aee6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aee8:	f7fd fab2 	bl	8008450 <__retarget_lock_release_recursive>
 800aeec:	89ab      	ldrh	r3, [r5, #12]
 800aeee:	065b      	lsls	r3, r3, #25
 800aef0:	f53f af12 	bmi.w	800ad18 <_vfiprintf_r+0x4c>
 800aef4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aef6:	e711      	b.n	800ad1c <_vfiprintf_r+0x50>
 800aef8:	ab03      	add	r3, sp, #12
 800aefa:	9300      	str	r3, [sp, #0]
 800aefc:	462a      	mov	r2, r5
 800aefe:	4b09      	ldr	r3, [pc, #36]	; (800af24 <_vfiprintf_r+0x258>)
 800af00:	a904      	add	r1, sp, #16
 800af02:	4630      	mov	r0, r6
 800af04:	f7fd fe94 	bl	8008c30 <_printf_i>
 800af08:	e7e4      	b.n	800aed4 <_vfiprintf_r+0x208>
 800af0a:	bf00      	nop
 800af0c:	0800b2fc 	.word	0x0800b2fc
 800af10:	0800b31c 	.word	0x0800b31c
 800af14:	0800b2dc 	.word	0x0800b2dc
 800af18:	0800b59c 	.word	0x0800b59c
 800af1c:	0800b5a6 	.word	0x0800b5a6
 800af20:	080086e9 	.word	0x080086e9
 800af24:	0800aca7 	.word	0x0800aca7
 800af28:	0800b5a2 	.word	0x0800b5a2

0800af2c <_read_r>:
 800af2c:	b538      	push	{r3, r4, r5, lr}
 800af2e:	4d07      	ldr	r5, [pc, #28]	; (800af4c <_read_r+0x20>)
 800af30:	4604      	mov	r4, r0
 800af32:	4608      	mov	r0, r1
 800af34:	4611      	mov	r1, r2
 800af36:	2200      	movs	r2, #0
 800af38:	602a      	str	r2, [r5, #0]
 800af3a:	461a      	mov	r2, r3
 800af3c:	f7f6 fdd6 	bl	8001aec <_read>
 800af40:	1c43      	adds	r3, r0, #1
 800af42:	d102      	bne.n	800af4a <_read_r+0x1e>
 800af44:	682b      	ldr	r3, [r5, #0]
 800af46:	b103      	cbz	r3, 800af4a <_read_r+0x1e>
 800af48:	6023      	str	r3, [r4, #0]
 800af4a:	bd38      	pop	{r3, r4, r5, pc}
 800af4c:	20001c10 	.word	0x20001c10

0800af50 <abort>:
 800af50:	b508      	push	{r3, lr}
 800af52:	2006      	movs	r0, #6
 800af54:	f000 f8aa 	bl	800b0ac <raise>
 800af58:	2001      	movs	r0, #1
 800af5a:	f7f6 fdbd 	bl	8001ad8 <_exit>
	...

0800af60 <_fstat_r>:
 800af60:	b538      	push	{r3, r4, r5, lr}
 800af62:	4d07      	ldr	r5, [pc, #28]	; (800af80 <_fstat_r+0x20>)
 800af64:	2300      	movs	r3, #0
 800af66:	4604      	mov	r4, r0
 800af68:	4608      	mov	r0, r1
 800af6a:	4611      	mov	r1, r2
 800af6c:	602b      	str	r3, [r5, #0]
 800af6e:	f7f6 fe02 	bl	8001b76 <_fstat>
 800af72:	1c43      	adds	r3, r0, #1
 800af74:	d102      	bne.n	800af7c <_fstat_r+0x1c>
 800af76:	682b      	ldr	r3, [r5, #0]
 800af78:	b103      	cbz	r3, 800af7c <_fstat_r+0x1c>
 800af7a:	6023      	str	r3, [r4, #0]
 800af7c:	bd38      	pop	{r3, r4, r5, pc}
 800af7e:	bf00      	nop
 800af80:	20001c10 	.word	0x20001c10

0800af84 <_isatty_r>:
 800af84:	b538      	push	{r3, r4, r5, lr}
 800af86:	4d06      	ldr	r5, [pc, #24]	; (800afa0 <_isatty_r+0x1c>)
 800af88:	2300      	movs	r3, #0
 800af8a:	4604      	mov	r4, r0
 800af8c:	4608      	mov	r0, r1
 800af8e:	602b      	str	r3, [r5, #0]
 800af90:	f7f6 fe01 	bl	8001b96 <_isatty>
 800af94:	1c43      	adds	r3, r0, #1
 800af96:	d102      	bne.n	800af9e <_isatty_r+0x1a>
 800af98:	682b      	ldr	r3, [r5, #0]
 800af9a:	b103      	cbz	r3, 800af9e <_isatty_r+0x1a>
 800af9c:	6023      	str	r3, [r4, #0]
 800af9e:	bd38      	pop	{r3, r4, r5, pc}
 800afa0:	20001c10 	.word	0x20001c10

0800afa4 <__ascii_mbtowc>:
 800afa4:	b082      	sub	sp, #8
 800afa6:	b901      	cbnz	r1, 800afaa <__ascii_mbtowc+0x6>
 800afa8:	a901      	add	r1, sp, #4
 800afaa:	b142      	cbz	r2, 800afbe <__ascii_mbtowc+0x1a>
 800afac:	b14b      	cbz	r3, 800afc2 <__ascii_mbtowc+0x1e>
 800afae:	7813      	ldrb	r3, [r2, #0]
 800afb0:	600b      	str	r3, [r1, #0]
 800afb2:	7812      	ldrb	r2, [r2, #0]
 800afb4:	1e10      	subs	r0, r2, #0
 800afb6:	bf18      	it	ne
 800afb8:	2001      	movne	r0, #1
 800afba:	b002      	add	sp, #8
 800afbc:	4770      	bx	lr
 800afbe:	4610      	mov	r0, r2
 800afc0:	e7fb      	b.n	800afba <__ascii_mbtowc+0x16>
 800afc2:	f06f 0001 	mvn.w	r0, #1
 800afc6:	e7f8      	b.n	800afba <__ascii_mbtowc+0x16>

0800afc8 <memmove>:
 800afc8:	4288      	cmp	r0, r1
 800afca:	b510      	push	{r4, lr}
 800afcc:	eb01 0402 	add.w	r4, r1, r2
 800afd0:	d902      	bls.n	800afd8 <memmove+0x10>
 800afd2:	4284      	cmp	r4, r0
 800afd4:	4623      	mov	r3, r4
 800afd6:	d807      	bhi.n	800afe8 <memmove+0x20>
 800afd8:	1e43      	subs	r3, r0, #1
 800afda:	42a1      	cmp	r1, r4
 800afdc:	d008      	beq.n	800aff0 <memmove+0x28>
 800afde:	f811 2b01 	ldrb.w	r2, [r1], #1
 800afe2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800afe6:	e7f8      	b.n	800afda <memmove+0x12>
 800afe8:	4402      	add	r2, r0
 800afea:	4601      	mov	r1, r0
 800afec:	428a      	cmp	r2, r1
 800afee:	d100      	bne.n	800aff2 <memmove+0x2a>
 800aff0:	bd10      	pop	{r4, pc}
 800aff2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aff6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800affa:	e7f7      	b.n	800afec <memmove+0x24>

0800affc <_realloc_r>:
 800affc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b000:	4680      	mov	r8, r0
 800b002:	4614      	mov	r4, r2
 800b004:	460e      	mov	r6, r1
 800b006:	b921      	cbnz	r1, 800b012 <_realloc_r+0x16>
 800b008:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b00c:	4611      	mov	r1, r2
 800b00e:	f7fd ba57 	b.w	80084c0 <_malloc_r>
 800b012:	b92a      	cbnz	r2, 800b020 <_realloc_r+0x24>
 800b014:	f7ff fc88 	bl	800a928 <_free_r>
 800b018:	4625      	mov	r5, r4
 800b01a:	4628      	mov	r0, r5
 800b01c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b020:	f000 f86d 	bl	800b0fe <_malloc_usable_size_r>
 800b024:	4284      	cmp	r4, r0
 800b026:	4607      	mov	r7, r0
 800b028:	d802      	bhi.n	800b030 <_realloc_r+0x34>
 800b02a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b02e:	d812      	bhi.n	800b056 <_realloc_r+0x5a>
 800b030:	4621      	mov	r1, r4
 800b032:	4640      	mov	r0, r8
 800b034:	f7fd fa44 	bl	80084c0 <_malloc_r>
 800b038:	4605      	mov	r5, r0
 800b03a:	2800      	cmp	r0, #0
 800b03c:	d0ed      	beq.n	800b01a <_realloc_r+0x1e>
 800b03e:	42bc      	cmp	r4, r7
 800b040:	4622      	mov	r2, r4
 800b042:	4631      	mov	r1, r6
 800b044:	bf28      	it	cs
 800b046:	463a      	movcs	r2, r7
 800b048:	f7fd fa03 	bl	8008452 <memcpy>
 800b04c:	4631      	mov	r1, r6
 800b04e:	4640      	mov	r0, r8
 800b050:	f7ff fc6a 	bl	800a928 <_free_r>
 800b054:	e7e1      	b.n	800b01a <_realloc_r+0x1e>
 800b056:	4635      	mov	r5, r6
 800b058:	e7df      	b.n	800b01a <_realloc_r+0x1e>

0800b05a <_raise_r>:
 800b05a:	291f      	cmp	r1, #31
 800b05c:	b538      	push	{r3, r4, r5, lr}
 800b05e:	4604      	mov	r4, r0
 800b060:	460d      	mov	r5, r1
 800b062:	d904      	bls.n	800b06e <_raise_r+0x14>
 800b064:	2316      	movs	r3, #22
 800b066:	6003      	str	r3, [r0, #0]
 800b068:	f04f 30ff 	mov.w	r0, #4294967295
 800b06c:	bd38      	pop	{r3, r4, r5, pc}
 800b06e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b070:	b112      	cbz	r2, 800b078 <_raise_r+0x1e>
 800b072:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b076:	b94b      	cbnz	r3, 800b08c <_raise_r+0x32>
 800b078:	4620      	mov	r0, r4
 800b07a:	f000 f831 	bl	800b0e0 <_getpid_r>
 800b07e:	462a      	mov	r2, r5
 800b080:	4601      	mov	r1, r0
 800b082:	4620      	mov	r0, r4
 800b084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b088:	f000 b818 	b.w	800b0bc <_kill_r>
 800b08c:	2b01      	cmp	r3, #1
 800b08e:	d00a      	beq.n	800b0a6 <_raise_r+0x4c>
 800b090:	1c59      	adds	r1, r3, #1
 800b092:	d103      	bne.n	800b09c <_raise_r+0x42>
 800b094:	2316      	movs	r3, #22
 800b096:	6003      	str	r3, [r0, #0]
 800b098:	2001      	movs	r0, #1
 800b09a:	e7e7      	b.n	800b06c <_raise_r+0x12>
 800b09c:	2400      	movs	r4, #0
 800b09e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b0a2:	4628      	mov	r0, r5
 800b0a4:	4798      	blx	r3
 800b0a6:	2000      	movs	r0, #0
 800b0a8:	e7e0      	b.n	800b06c <_raise_r+0x12>
	...

0800b0ac <raise>:
 800b0ac:	4b02      	ldr	r3, [pc, #8]	; (800b0b8 <raise+0xc>)
 800b0ae:	4601      	mov	r1, r0
 800b0b0:	6818      	ldr	r0, [r3, #0]
 800b0b2:	f7ff bfd2 	b.w	800b05a <_raise_r>
 800b0b6:	bf00      	nop
 800b0b8:	200000d4 	.word	0x200000d4

0800b0bc <_kill_r>:
 800b0bc:	b538      	push	{r3, r4, r5, lr}
 800b0be:	4d07      	ldr	r5, [pc, #28]	; (800b0dc <_kill_r+0x20>)
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	4604      	mov	r4, r0
 800b0c4:	4608      	mov	r0, r1
 800b0c6:	4611      	mov	r1, r2
 800b0c8:	602b      	str	r3, [r5, #0]
 800b0ca:	f7f6 fcf5 	bl	8001ab8 <_kill>
 800b0ce:	1c43      	adds	r3, r0, #1
 800b0d0:	d102      	bne.n	800b0d8 <_kill_r+0x1c>
 800b0d2:	682b      	ldr	r3, [r5, #0]
 800b0d4:	b103      	cbz	r3, 800b0d8 <_kill_r+0x1c>
 800b0d6:	6023      	str	r3, [r4, #0]
 800b0d8:	bd38      	pop	{r3, r4, r5, pc}
 800b0da:	bf00      	nop
 800b0dc:	20001c10 	.word	0x20001c10

0800b0e0 <_getpid_r>:
 800b0e0:	f7f6 bce2 	b.w	8001aa8 <_getpid>

0800b0e4 <__ascii_wctomb>:
 800b0e4:	b149      	cbz	r1, 800b0fa <__ascii_wctomb+0x16>
 800b0e6:	2aff      	cmp	r2, #255	; 0xff
 800b0e8:	bf85      	ittet	hi
 800b0ea:	238a      	movhi	r3, #138	; 0x8a
 800b0ec:	6003      	strhi	r3, [r0, #0]
 800b0ee:	700a      	strbls	r2, [r1, #0]
 800b0f0:	f04f 30ff 	movhi.w	r0, #4294967295
 800b0f4:	bf98      	it	ls
 800b0f6:	2001      	movls	r0, #1
 800b0f8:	4770      	bx	lr
 800b0fa:	4608      	mov	r0, r1
 800b0fc:	4770      	bx	lr

0800b0fe <_malloc_usable_size_r>:
 800b0fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b102:	1f18      	subs	r0, r3, #4
 800b104:	2b00      	cmp	r3, #0
 800b106:	bfbc      	itt	lt
 800b108:	580b      	ldrlt	r3, [r1, r0]
 800b10a:	18c0      	addlt	r0, r0, r3
 800b10c:	4770      	bx	lr
	...

0800b110 <_init>:
 800b110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b112:	bf00      	nop
 800b114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b116:	bc08      	pop	{r3}
 800b118:	469e      	mov	lr, r3
 800b11a:	4770      	bx	lr

0800b11c <_fini>:
 800b11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b11e:	bf00      	nop
 800b120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b122:	bc08      	pop	{r3}
 800b124:	469e      	mov	lr, r3
 800b126:	4770      	bx	lr
